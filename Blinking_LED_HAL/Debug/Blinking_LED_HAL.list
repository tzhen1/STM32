
Blinking_LED_HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000059c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000724  08000724  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000724  08000724  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000724  08000724  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000724  08000724  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000724  08000724  00010724  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000728  08000728  00010728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  0800072c  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
 10 .bss          00000020  20000004  20000004  00020004  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00020004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001ecf  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000007a6  00000000  00000000  00021f03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000228  00000000  00000000  000226b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000001d0  00000000  00000000  000228d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e7e7  00000000  00000000  00022aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000029c7  00000000  00000000  0004128f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bb5cf  00000000  00000000  00043c56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000ff225  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000006c0  00000000  00000000  000ff278  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800070c 	.word	0x0800070c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	0800070c 	.word	0x0800070c

080001c8 <main>:

void ConfigLEDpins(void);
void msDelay(uint32_t msTime);

int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
	//1. configure LEDS
	ConfigLEDpins();
 80001cc:	f000 f80c 	bl	80001e8 <ConfigLEDpins>
	//2. Delay function

	while(1)
	{
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15);
 80001d0:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <main+0x1c>)
 80001d6:	f000 fa5b 	bl	8000690 <HAL_GPIO_TogglePin>
		msDelay(1000); // 1sec delay
 80001da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001de:	f000 f827 	bl	8000230 <msDelay>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15);
 80001e2:	e7f5      	b.n	80001d0 <main+0x8>
 80001e4:	40020c00 	.word	0x40020c00

080001e8 <ConfigLEDpins>:
	}
}

//check hal gpio lib
void ConfigLEDpins(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b086      	sub	sp, #24
 80001ec:	af00      	add	r7, sp, #0
	//enable GPIO clock
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80001ee:	2300      	movs	r3, #0
 80001f0:	603b      	str	r3, [r7, #0]
 80001f2:	4b0d      	ldr	r3, [pc, #52]	; (8000228 <ConfigLEDpins+0x40>)
 80001f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001f6:	4a0c      	ldr	r2, [pc, #48]	; (8000228 <ConfigLEDpins+0x40>)
 80001f8:	f043 0308 	orr.w	r3, r3, #8
 80001fc:	6313      	str	r3, [r2, #48]	; 0x30
 80001fe:	4b0a      	ldr	r3, [pc, #40]	; (8000228 <ConfigLEDpins+0x40>)
 8000200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000202:	f003 0308 	and.w	r3, r3, #8
 8000206:	603b      	str	r3, [r7, #0]
 8000208:	683b      	ldr	r3, [r7, #0]

	//LED Config
	GPIO_InitTypeDef myLEDconfig;
	myLEDconfig.Mode = GPIO_MODE_OUTPUT_PP; //output mode (push/pull)
 800020a:	2301      	movs	r3, #1
 800020c:	60bb      	str	r3, [r7, #8]
	myLEDconfig.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800020e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000212:	607b      	str	r3, [r7, #4]

	//INIT
	HAL_GPIO_Init(GPIOD, &myLEDconfig); //config as a pointer
 8000214:	1d3b      	adds	r3, r7, #4
 8000216:	4619      	mov	r1, r3
 8000218:	4804      	ldr	r0, [pc, #16]	; (800022c <ConfigLEDpins+0x44>)
 800021a:	f000 f89d 	bl	8000358 <HAL_GPIO_Init>


}
 800021e:	bf00      	nop
 8000220:	3718      	adds	r7, #24
 8000222:	46bd      	mov	sp, r7
 8000224:	bd80      	pop	{r7, pc}
 8000226:	bf00      	nop
 8000228:	40023800 	.word	0x40023800
 800022c:	40020c00 	.word	0x40020c00

08000230 <msDelay>:

void msDelay(uint32_t msTime)
{
 8000230:	b480      	push	{r7}
 8000232:	b085      	sub	sp, #20
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0 ; i<msTime*4000 ; i++); // *4000 would be a proper delay, each for loop takes 4 clock cycles
 8000238:	2300      	movs	r3, #0
 800023a:	60fb      	str	r3, [r7, #12]
 800023c:	e002      	b.n	8000244 <msDelay+0x14>
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	3301      	adds	r3, #1
 8000242:	60fb      	str	r3, [r7, #12]
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800024a:	fb02 f303 	mul.w	r3, r2, r3
 800024e:	68fa      	ldr	r2, [r7, #12]
 8000250:	429a      	cmp	r2, r3
 8000252:	d3f4      	bcc.n	800023e <msDelay+0xe>
	//clk cycle of stm32 is 16MHz (16/4 = 4MHz). 4MHz /1000 (which is miliseconds) = 4000

}
 8000254:	bf00      	nop
 8000256:	bf00      	nop
 8000258:	3714      	adds	r7, #20
 800025a:	46bd      	mov	sp, r7
 800025c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000260:	4770      	bx	lr

08000262 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000262:	b480      	push	{r7}
 8000264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000266:	e7fe      	b.n	8000266 <NMI_Handler+0x4>

08000268 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000268:	b480      	push	{r7}
 800026a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800026c:	e7fe      	b.n	800026c <HardFault_Handler+0x4>

0800026e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800026e:	b480      	push	{r7}
 8000270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000272:	e7fe      	b.n	8000272 <MemManage_Handler+0x4>

08000274 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000274:	b480      	push	{r7}
 8000276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000278:	e7fe      	b.n	8000278 <BusFault_Handler+0x4>

0800027a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800027a:	b480      	push	{r7}
 800027c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800027e:	e7fe      	b.n	800027e <UsageFault_Handler+0x4>

08000280 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000284:	bf00      	nop
 8000286:	46bd      	mov	sp, r7
 8000288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028c:	4770      	bx	lr

0800028e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800028e:	b480      	push	{r7}
 8000290:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000292:	bf00      	nop
 8000294:	46bd      	mov	sp, r7
 8000296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029a:	4770      	bx	lr

0800029c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80002a0:	bf00      	nop
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr

080002aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80002aa:	b580      	push	{r7, lr}
 80002ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80002ae:	f000 f83f 	bl	8000330 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80002b2:	bf00      	nop
 80002b4:	bd80      	pop	{r7, pc}
	...

080002b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002b8:	b480      	push	{r7}
 80002ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80002bc:	4b06      	ldr	r3, [pc, #24]	; (80002d8 <SystemInit+0x20>)
 80002be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002c2:	4a05      	ldr	r2, [pc, #20]	; (80002d8 <SystemInit+0x20>)
 80002c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80002cc:	bf00      	nop
 80002ce:	46bd      	mov	sp, r7
 80002d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	e000ed00 	.word	0xe000ed00

080002dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80002dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000314 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80002e0:	480d      	ldr	r0, [pc, #52]	; (8000318 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80002e2:	490e      	ldr	r1, [pc, #56]	; (800031c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80002e4:	4a0e      	ldr	r2, [pc, #56]	; (8000320 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80002e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002e8:	e002      	b.n	80002f0 <LoopCopyDataInit>

080002ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002ee:	3304      	adds	r3, #4

080002f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002f4:	d3f9      	bcc.n	80002ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002f6:	4a0b      	ldr	r2, [pc, #44]	; (8000324 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80002f8:	4c0b      	ldr	r4, [pc, #44]	; (8000328 <LoopFillZerobss+0x26>)
  movs r3, #0
 80002fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002fc:	e001      	b.n	8000302 <LoopFillZerobss>

080002fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000300:	3204      	adds	r2, #4

08000302 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000302:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000304:	d3fb      	bcc.n	80002fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000306:	f7ff ffd7 	bl	80002b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800030a:	f000 f9db 	bl	80006c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800030e:	f7ff ff5b 	bl	80001c8 <main>
  bx  lr    
 8000312:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000314:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000318:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800031c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000320:	0800072c 	.word	0x0800072c
  ldr r2, =_sbss
 8000324:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000328:	20000024 	.word	0x20000024

0800032c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800032c:	e7fe      	b.n	800032c <ADC_IRQHandler>
	...

08000330 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000334:	4b06      	ldr	r3, [pc, #24]	; (8000350 <HAL_IncTick+0x20>)
 8000336:	781b      	ldrb	r3, [r3, #0]
 8000338:	461a      	mov	r2, r3
 800033a:	4b06      	ldr	r3, [pc, #24]	; (8000354 <HAL_IncTick+0x24>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	4413      	add	r3, r2
 8000340:	4a04      	ldr	r2, [pc, #16]	; (8000354 <HAL_IncTick+0x24>)
 8000342:	6013      	str	r3, [r2, #0]
}
 8000344:	bf00      	nop
 8000346:	46bd      	mov	sp, r7
 8000348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop
 8000350:	20000000 	.word	0x20000000
 8000354:	20000020 	.word	0x20000020

08000358 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000358:	b480      	push	{r7}
 800035a:	b089      	sub	sp, #36	; 0x24
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
 8000360:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000362:	2300      	movs	r3, #0
 8000364:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000366:	2300      	movs	r3, #0
 8000368:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800036a:	2300      	movs	r3, #0
 800036c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800036e:	2300      	movs	r3, #0
 8000370:	61fb      	str	r3, [r7, #28]
 8000372:	e16b      	b.n	800064c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000374:	2201      	movs	r2, #1
 8000376:	69fb      	ldr	r3, [r7, #28]
 8000378:	fa02 f303 	lsl.w	r3, r2, r3
 800037c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800037e:	683b      	ldr	r3, [r7, #0]
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	697a      	ldr	r2, [r7, #20]
 8000384:	4013      	ands	r3, r2
 8000386:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000388:	693a      	ldr	r2, [r7, #16]
 800038a:	697b      	ldr	r3, [r7, #20]
 800038c:	429a      	cmp	r2, r3
 800038e:	f040 815a 	bne.w	8000646 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000392:	683b      	ldr	r3, [r7, #0]
 8000394:	685b      	ldr	r3, [r3, #4]
 8000396:	f003 0303 	and.w	r3, r3, #3
 800039a:	2b01      	cmp	r3, #1
 800039c:	d005      	beq.n	80003aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800039e:	683b      	ldr	r3, [r7, #0]
 80003a0:	685b      	ldr	r3, [r3, #4]
 80003a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80003a6:	2b02      	cmp	r3, #2
 80003a8:	d130      	bne.n	800040c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	689b      	ldr	r3, [r3, #8]
 80003ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80003b0:	69fb      	ldr	r3, [r7, #28]
 80003b2:	005b      	lsls	r3, r3, #1
 80003b4:	2203      	movs	r2, #3
 80003b6:	fa02 f303 	lsl.w	r3, r2, r3
 80003ba:	43db      	mvns	r3, r3
 80003bc:	69ba      	ldr	r2, [r7, #24]
 80003be:	4013      	ands	r3, r2
 80003c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80003c2:	683b      	ldr	r3, [r7, #0]
 80003c4:	68da      	ldr	r2, [r3, #12]
 80003c6:	69fb      	ldr	r3, [r7, #28]
 80003c8:	005b      	lsls	r3, r3, #1
 80003ca:	fa02 f303 	lsl.w	r3, r2, r3
 80003ce:	69ba      	ldr	r2, [r7, #24]
 80003d0:	4313      	orrs	r3, r2
 80003d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	69ba      	ldr	r2, [r7, #24]
 80003d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	685b      	ldr	r3, [r3, #4]
 80003de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80003e0:	2201      	movs	r2, #1
 80003e2:	69fb      	ldr	r3, [r7, #28]
 80003e4:	fa02 f303 	lsl.w	r3, r2, r3
 80003e8:	43db      	mvns	r3, r3
 80003ea:	69ba      	ldr	r2, [r7, #24]
 80003ec:	4013      	ands	r3, r2
 80003ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80003f0:	683b      	ldr	r3, [r7, #0]
 80003f2:	685b      	ldr	r3, [r3, #4]
 80003f4:	091b      	lsrs	r3, r3, #4
 80003f6:	f003 0201 	and.w	r2, r3, #1
 80003fa:	69fb      	ldr	r3, [r7, #28]
 80003fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000400:	69ba      	ldr	r2, [r7, #24]
 8000402:	4313      	orrs	r3, r2
 8000404:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	69ba      	ldr	r2, [r7, #24]
 800040a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800040c:	683b      	ldr	r3, [r7, #0]
 800040e:	685b      	ldr	r3, [r3, #4]
 8000410:	f003 0303 	and.w	r3, r3, #3
 8000414:	2b03      	cmp	r3, #3
 8000416:	d017      	beq.n	8000448 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	68db      	ldr	r3, [r3, #12]
 800041c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800041e:	69fb      	ldr	r3, [r7, #28]
 8000420:	005b      	lsls	r3, r3, #1
 8000422:	2203      	movs	r2, #3
 8000424:	fa02 f303 	lsl.w	r3, r2, r3
 8000428:	43db      	mvns	r3, r3
 800042a:	69ba      	ldr	r2, [r7, #24]
 800042c:	4013      	ands	r3, r2
 800042e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000430:	683b      	ldr	r3, [r7, #0]
 8000432:	689a      	ldr	r2, [r3, #8]
 8000434:	69fb      	ldr	r3, [r7, #28]
 8000436:	005b      	lsls	r3, r3, #1
 8000438:	fa02 f303 	lsl.w	r3, r2, r3
 800043c:	69ba      	ldr	r2, [r7, #24]
 800043e:	4313      	orrs	r3, r2
 8000440:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	69ba      	ldr	r2, [r7, #24]
 8000446:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000448:	683b      	ldr	r3, [r7, #0]
 800044a:	685b      	ldr	r3, [r3, #4]
 800044c:	f003 0303 	and.w	r3, r3, #3
 8000450:	2b02      	cmp	r3, #2
 8000452:	d123      	bne.n	800049c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000454:	69fb      	ldr	r3, [r7, #28]
 8000456:	08da      	lsrs	r2, r3, #3
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	3208      	adds	r2, #8
 800045c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000460:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000462:	69fb      	ldr	r3, [r7, #28]
 8000464:	f003 0307 	and.w	r3, r3, #7
 8000468:	009b      	lsls	r3, r3, #2
 800046a:	220f      	movs	r2, #15
 800046c:	fa02 f303 	lsl.w	r3, r2, r3
 8000470:	43db      	mvns	r3, r3
 8000472:	69ba      	ldr	r2, [r7, #24]
 8000474:	4013      	ands	r3, r2
 8000476:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000478:	683b      	ldr	r3, [r7, #0]
 800047a:	691a      	ldr	r2, [r3, #16]
 800047c:	69fb      	ldr	r3, [r7, #28]
 800047e:	f003 0307 	and.w	r3, r3, #7
 8000482:	009b      	lsls	r3, r3, #2
 8000484:	fa02 f303 	lsl.w	r3, r2, r3
 8000488:	69ba      	ldr	r2, [r7, #24]
 800048a:	4313      	orrs	r3, r2
 800048c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800048e:	69fb      	ldr	r3, [r7, #28]
 8000490:	08da      	lsrs	r2, r3, #3
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	3208      	adds	r2, #8
 8000496:	69b9      	ldr	r1, [r7, #24]
 8000498:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80004a2:	69fb      	ldr	r3, [r7, #28]
 80004a4:	005b      	lsls	r3, r3, #1
 80004a6:	2203      	movs	r2, #3
 80004a8:	fa02 f303 	lsl.w	r3, r2, r3
 80004ac:	43db      	mvns	r3, r3
 80004ae:	69ba      	ldr	r2, [r7, #24]
 80004b0:	4013      	ands	r3, r2
 80004b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80004b4:	683b      	ldr	r3, [r7, #0]
 80004b6:	685b      	ldr	r3, [r3, #4]
 80004b8:	f003 0203 	and.w	r2, r3, #3
 80004bc:	69fb      	ldr	r3, [r7, #28]
 80004be:	005b      	lsls	r3, r3, #1
 80004c0:	fa02 f303 	lsl.w	r3, r2, r3
 80004c4:	69ba      	ldr	r2, [r7, #24]
 80004c6:	4313      	orrs	r3, r2
 80004c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	69ba      	ldr	r2, [r7, #24]
 80004ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80004d0:	683b      	ldr	r3, [r7, #0]
 80004d2:	685b      	ldr	r3, [r3, #4]
 80004d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80004d8:	2b00      	cmp	r3, #0
 80004da:	f000 80b4 	beq.w	8000646 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004de:	2300      	movs	r3, #0
 80004e0:	60fb      	str	r3, [r7, #12]
 80004e2:	4b60      	ldr	r3, [pc, #384]	; (8000664 <HAL_GPIO_Init+0x30c>)
 80004e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004e6:	4a5f      	ldr	r2, [pc, #380]	; (8000664 <HAL_GPIO_Init+0x30c>)
 80004e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004ec:	6453      	str	r3, [r2, #68]	; 0x44
 80004ee:	4b5d      	ldr	r3, [pc, #372]	; (8000664 <HAL_GPIO_Init+0x30c>)
 80004f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004f6:	60fb      	str	r3, [r7, #12]
 80004f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80004fa:	4a5b      	ldr	r2, [pc, #364]	; (8000668 <HAL_GPIO_Init+0x310>)
 80004fc:	69fb      	ldr	r3, [r7, #28]
 80004fe:	089b      	lsrs	r3, r3, #2
 8000500:	3302      	adds	r3, #2
 8000502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000506:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000508:	69fb      	ldr	r3, [r7, #28]
 800050a:	f003 0303 	and.w	r3, r3, #3
 800050e:	009b      	lsls	r3, r3, #2
 8000510:	220f      	movs	r2, #15
 8000512:	fa02 f303 	lsl.w	r3, r2, r3
 8000516:	43db      	mvns	r3, r3
 8000518:	69ba      	ldr	r2, [r7, #24]
 800051a:	4013      	ands	r3, r2
 800051c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	4a52      	ldr	r2, [pc, #328]	; (800066c <HAL_GPIO_Init+0x314>)
 8000522:	4293      	cmp	r3, r2
 8000524:	d02b      	beq.n	800057e <HAL_GPIO_Init+0x226>
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	4a51      	ldr	r2, [pc, #324]	; (8000670 <HAL_GPIO_Init+0x318>)
 800052a:	4293      	cmp	r3, r2
 800052c:	d025      	beq.n	800057a <HAL_GPIO_Init+0x222>
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	4a50      	ldr	r2, [pc, #320]	; (8000674 <HAL_GPIO_Init+0x31c>)
 8000532:	4293      	cmp	r3, r2
 8000534:	d01f      	beq.n	8000576 <HAL_GPIO_Init+0x21e>
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	4a4f      	ldr	r2, [pc, #316]	; (8000678 <HAL_GPIO_Init+0x320>)
 800053a:	4293      	cmp	r3, r2
 800053c:	d019      	beq.n	8000572 <HAL_GPIO_Init+0x21a>
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	4a4e      	ldr	r2, [pc, #312]	; (800067c <HAL_GPIO_Init+0x324>)
 8000542:	4293      	cmp	r3, r2
 8000544:	d013      	beq.n	800056e <HAL_GPIO_Init+0x216>
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	4a4d      	ldr	r2, [pc, #308]	; (8000680 <HAL_GPIO_Init+0x328>)
 800054a:	4293      	cmp	r3, r2
 800054c:	d00d      	beq.n	800056a <HAL_GPIO_Init+0x212>
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	4a4c      	ldr	r2, [pc, #304]	; (8000684 <HAL_GPIO_Init+0x32c>)
 8000552:	4293      	cmp	r3, r2
 8000554:	d007      	beq.n	8000566 <HAL_GPIO_Init+0x20e>
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	4a4b      	ldr	r2, [pc, #300]	; (8000688 <HAL_GPIO_Init+0x330>)
 800055a:	4293      	cmp	r3, r2
 800055c:	d101      	bne.n	8000562 <HAL_GPIO_Init+0x20a>
 800055e:	2307      	movs	r3, #7
 8000560:	e00e      	b.n	8000580 <HAL_GPIO_Init+0x228>
 8000562:	2308      	movs	r3, #8
 8000564:	e00c      	b.n	8000580 <HAL_GPIO_Init+0x228>
 8000566:	2306      	movs	r3, #6
 8000568:	e00a      	b.n	8000580 <HAL_GPIO_Init+0x228>
 800056a:	2305      	movs	r3, #5
 800056c:	e008      	b.n	8000580 <HAL_GPIO_Init+0x228>
 800056e:	2304      	movs	r3, #4
 8000570:	e006      	b.n	8000580 <HAL_GPIO_Init+0x228>
 8000572:	2303      	movs	r3, #3
 8000574:	e004      	b.n	8000580 <HAL_GPIO_Init+0x228>
 8000576:	2302      	movs	r3, #2
 8000578:	e002      	b.n	8000580 <HAL_GPIO_Init+0x228>
 800057a:	2301      	movs	r3, #1
 800057c:	e000      	b.n	8000580 <HAL_GPIO_Init+0x228>
 800057e:	2300      	movs	r3, #0
 8000580:	69fa      	ldr	r2, [r7, #28]
 8000582:	f002 0203 	and.w	r2, r2, #3
 8000586:	0092      	lsls	r2, r2, #2
 8000588:	4093      	lsls	r3, r2
 800058a:	69ba      	ldr	r2, [r7, #24]
 800058c:	4313      	orrs	r3, r2
 800058e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000590:	4935      	ldr	r1, [pc, #212]	; (8000668 <HAL_GPIO_Init+0x310>)
 8000592:	69fb      	ldr	r3, [r7, #28]
 8000594:	089b      	lsrs	r3, r3, #2
 8000596:	3302      	adds	r3, #2
 8000598:	69ba      	ldr	r2, [r7, #24]
 800059a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800059e:	4b3b      	ldr	r3, [pc, #236]	; (800068c <HAL_GPIO_Init+0x334>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80005a4:	693b      	ldr	r3, [r7, #16]
 80005a6:	43db      	mvns	r3, r3
 80005a8:	69ba      	ldr	r2, [r7, #24]
 80005aa:	4013      	ands	r3, r2
 80005ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80005ae:	683b      	ldr	r3, [r7, #0]
 80005b0:	685b      	ldr	r3, [r3, #4]
 80005b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d003      	beq.n	80005c2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80005ba:	69ba      	ldr	r2, [r7, #24]
 80005bc:	693b      	ldr	r3, [r7, #16]
 80005be:	4313      	orrs	r3, r2
 80005c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80005c2:	4a32      	ldr	r2, [pc, #200]	; (800068c <HAL_GPIO_Init+0x334>)
 80005c4:	69bb      	ldr	r3, [r7, #24]
 80005c6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80005c8:	4b30      	ldr	r3, [pc, #192]	; (800068c <HAL_GPIO_Init+0x334>)
 80005ca:	685b      	ldr	r3, [r3, #4]
 80005cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80005ce:	693b      	ldr	r3, [r7, #16]
 80005d0:	43db      	mvns	r3, r3
 80005d2:	69ba      	ldr	r2, [r7, #24]
 80005d4:	4013      	ands	r3, r2
 80005d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80005d8:	683b      	ldr	r3, [r7, #0]
 80005da:	685b      	ldr	r3, [r3, #4]
 80005dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d003      	beq.n	80005ec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80005e4:	69ba      	ldr	r2, [r7, #24]
 80005e6:	693b      	ldr	r3, [r7, #16]
 80005e8:	4313      	orrs	r3, r2
 80005ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80005ec:	4a27      	ldr	r2, [pc, #156]	; (800068c <HAL_GPIO_Init+0x334>)
 80005ee:	69bb      	ldr	r3, [r7, #24]
 80005f0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80005f2:	4b26      	ldr	r3, [pc, #152]	; (800068c <HAL_GPIO_Init+0x334>)
 80005f4:	689b      	ldr	r3, [r3, #8]
 80005f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80005f8:	693b      	ldr	r3, [r7, #16]
 80005fa:	43db      	mvns	r3, r3
 80005fc:	69ba      	ldr	r2, [r7, #24]
 80005fe:	4013      	ands	r3, r2
 8000600:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	685b      	ldr	r3, [r3, #4]
 8000606:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800060a:	2b00      	cmp	r3, #0
 800060c:	d003      	beq.n	8000616 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800060e:	69ba      	ldr	r2, [r7, #24]
 8000610:	693b      	ldr	r3, [r7, #16]
 8000612:	4313      	orrs	r3, r2
 8000614:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000616:	4a1d      	ldr	r2, [pc, #116]	; (800068c <HAL_GPIO_Init+0x334>)
 8000618:	69bb      	ldr	r3, [r7, #24]
 800061a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800061c:	4b1b      	ldr	r3, [pc, #108]	; (800068c <HAL_GPIO_Init+0x334>)
 800061e:	68db      	ldr	r3, [r3, #12]
 8000620:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000622:	693b      	ldr	r3, [r7, #16]
 8000624:	43db      	mvns	r3, r3
 8000626:	69ba      	ldr	r2, [r7, #24]
 8000628:	4013      	ands	r3, r2
 800062a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800062c:	683b      	ldr	r3, [r7, #0]
 800062e:	685b      	ldr	r3, [r3, #4]
 8000630:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000634:	2b00      	cmp	r3, #0
 8000636:	d003      	beq.n	8000640 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000638:	69ba      	ldr	r2, [r7, #24]
 800063a:	693b      	ldr	r3, [r7, #16]
 800063c:	4313      	orrs	r3, r2
 800063e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000640:	4a12      	ldr	r2, [pc, #72]	; (800068c <HAL_GPIO_Init+0x334>)
 8000642:	69bb      	ldr	r3, [r7, #24]
 8000644:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000646:	69fb      	ldr	r3, [r7, #28]
 8000648:	3301      	adds	r3, #1
 800064a:	61fb      	str	r3, [r7, #28]
 800064c:	69fb      	ldr	r3, [r7, #28]
 800064e:	2b0f      	cmp	r3, #15
 8000650:	f67f ae90 	bls.w	8000374 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000654:	bf00      	nop
 8000656:	bf00      	nop
 8000658:	3724      	adds	r7, #36	; 0x24
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	40023800 	.word	0x40023800
 8000668:	40013800 	.word	0x40013800
 800066c:	40020000 	.word	0x40020000
 8000670:	40020400 	.word	0x40020400
 8000674:	40020800 	.word	0x40020800
 8000678:	40020c00 	.word	0x40020c00
 800067c:	40021000 	.word	0x40021000
 8000680:	40021400 	.word	0x40021400
 8000684:	40021800 	.word	0x40021800
 8000688:	40021c00 	.word	0x40021c00
 800068c:	40013c00 	.word	0x40013c00

08000690 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000690:	b480      	push	{r7}
 8000692:	b085      	sub	sp, #20
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
 8000698:	460b      	mov	r3, r1
 800069a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	695b      	ldr	r3, [r3, #20]
 80006a0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80006a2:	887a      	ldrh	r2, [r7, #2]
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	4013      	ands	r3, r2
 80006a8:	041a      	lsls	r2, r3, #16
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	43d9      	mvns	r1, r3
 80006ae:	887b      	ldrh	r3, [r7, #2]
 80006b0:	400b      	ands	r3, r1
 80006b2:	431a      	orrs	r2, r3
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	619a      	str	r2, [r3, #24]
}
 80006b8:	bf00      	nop
 80006ba:	3714      	adds	r7, #20
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr

080006c4 <__libc_init_array>:
 80006c4:	b570      	push	{r4, r5, r6, lr}
 80006c6:	4d0d      	ldr	r5, [pc, #52]	; (80006fc <__libc_init_array+0x38>)
 80006c8:	4c0d      	ldr	r4, [pc, #52]	; (8000700 <__libc_init_array+0x3c>)
 80006ca:	1b64      	subs	r4, r4, r5
 80006cc:	10a4      	asrs	r4, r4, #2
 80006ce:	2600      	movs	r6, #0
 80006d0:	42a6      	cmp	r6, r4
 80006d2:	d109      	bne.n	80006e8 <__libc_init_array+0x24>
 80006d4:	4d0b      	ldr	r5, [pc, #44]	; (8000704 <__libc_init_array+0x40>)
 80006d6:	4c0c      	ldr	r4, [pc, #48]	; (8000708 <__libc_init_array+0x44>)
 80006d8:	f000 f818 	bl	800070c <_init>
 80006dc:	1b64      	subs	r4, r4, r5
 80006de:	10a4      	asrs	r4, r4, #2
 80006e0:	2600      	movs	r6, #0
 80006e2:	42a6      	cmp	r6, r4
 80006e4:	d105      	bne.n	80006f2 <__libc_init_array+0x2e>
 80006e6:	bd70      	pop	{r4, r5, r6, pc}
 80006e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80006ec:	4798      	blx	r3
 80006ee:	3601      	adds	r6, #1
 80006f0:	e7ee      	b.n	80006d0 <__libc_init_array+0xc>
 80006f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80006f6:	4798      	blx	r3
 80006f8:	3601      	adds	r6, #1
 80006fa:	e7f2      	b.n	80006e2 <__libc_init_array+0x1e>
 80006fc:	08000724 	.word	0x08000724
 8000700:	08000724 	.word	0x08000724
 8000704:	08000724 	.word	0x08000724
 8000708:	08000728 	.word	0x08000728

0800070c <_init>:
 800070c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800070e:	bf00      	nop
 8000710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000712:	bc08      	pop	{r3}
 8000714:	469e      	mov	lr, r3
 8000716:	4770      	bx	lr

08000718 <_fini>:
 8000718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800071a:	bf00      	nop
 800071c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800071e:	bc08      	pop	{r3}
 8000720:	469e      	mov	lr, r3
 8000722:	4770      	bx	lr
