#include "stm32f4xx_hal.h"

// enable PA0 and set to analogue , put config funcs in main to initialise them (write code in main lastly)
void GPIO_Config(void);
void ADC_Config(void);
void Systick_Config(void); // for HAL_Delay

ADC_HandleTypeDef myADCtypeDef; //globally so use in all functions (e.g ADC start/stop in main)

uint32_t adcValue;

int main(void)
{
	//reset peripherals
	HAL_Init();

	//config functions in main
	GPIO_Config();
	ADC_Config();
	Systick_Config();

	while(1)
	{
		//read ADC value then add a delay (single conversion mode, read 1 value, not continuously)
		HAL_ADC_Start(&myADCtypeDef);  // change ADChandletypedef (cubemax was &hadc1), we did &myADCtypeDef
		if(HAL_ADC_PollForConversion(&myADCtypeDef, 5)== HAL_OK)
		{
			adcValue = HAL_ADC_GetValue(&myADCtypeDef); //define adcValue globally
		}

		//stop ADC, clear flags for next time
		HAL_ADC_Stop(&myADCtypeDef);
		// 100ms delay
		HAL_Delay(100);

	}

}


void GPIO_Config(void) //gpio.c hal driver tells u how to use
{
	// Register code not using HAL
	//1. enable port A clock
	RCC->AHB1ENR |=0x01; // write 1 to turn on clock register
	//2. set mode to analog (0x03)
	GPIOA->MODER |= 0x03;
	//3. remove pull up / pull down
	GPIOA->PUPDR &= ~(0x00000003); //datasheet set register to 1,1 for analo (11 = 3 in decimal)

}

void ADC_Config(void)
{
	//1. enable clock
	__HAL_RCC_ADC1_CLK_ENABLE(); //__HAL_RCC_ADC_CLK_ENABLE() , number 1

	// ADC basic configuration
	ADC1->CR1 = (0x2 << 24); // control register 1, set resolution 8bit + channel 0 (see datasheet)
	ADC1->CR2 = (0x1 << 10);




}

void Systick_Config(void)
{
	//set clock source + speed
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
	//sysTick interrupt priority + enable
	HAL_NVIC_SetPriority(SysTick_IRQn, 0 , 0);
	HAL_NVIC_EnableIRQ(SysTick_IRQn); // enable interrupt

}

//normally in stm32.it.interrupt driver, but we didn't include so defined here manually
//void SysTick_Handler(void)
//{
//	HAL_IncTick(); //increment tick function
//}
//

