#include "stm32f4xx_hal.h"

//config functions using the driver's documentation
void GPIO_Config(void); //for the 3 potentiometer pins
void ADC_Config(void);


ADC_HandleTypeDef myADChandle; //global need for main/ADC config

int main(void)
{

	while(1)
	{


	}
}



void GPIO_Config(void)
{
	//enable port A clk,
	__HAL_RCC_GPIOA_CLK_ENABLE();

	//config struct gpio type def
	GPIO_InitTypeDef myPinsInit;
	myPinsInit.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2; //PA0,PA1,PA2
	myPinsInit.Mode = GPIO_MODE_ANALOG; //3 analog i/p
	myPinsInit.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOA, &myPinsInit);

}

void ADC_Config(void)
{
	//Enable ADC1 clock
	__HAL_RCC_ADC1_CLK_ENABLE();

	// config ADC, like cubemx
	myADChandle.Instance = ADC1;
	myADChandle.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
	myADChandle.Init.Resolution = ADC_RESOLUTION_8B;
	myADChandle.Init.ScanConvMode = ENABLE;
	myADChandle.Init.ContinuousConvMode = ENABLE;
	myADChandle.Init.DiscontinuousConvMode = DISABLE;
	myADChandle.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
	myADChandle.Init.DataAlign = ADC_DATAALIGN_RIGHT;
	myADChandle.Init.NbrOfConversion = 3;
	myADChandle.Init.DMAContinuousRequests = ENABLE;
	myADChandle.Init.EOCSelection = ADC_EOC_SEQ_CONV; //end of every seq conversion
	//INIT
	HAL_ADC_Init(&myADChandle);

	//ADC config the channels
	ADC_ChannelConfTypeDef myADC_Channel;

	//settings channel 0
	HAL_ADC_ConfigChannel(&myADC_handle, &ADC_ChConfg);


}


