
FreeRTOS1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c68  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  08004df8  08004df8  00014df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f2c  08004f2c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08004f2c  08004f2c  00014f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f34  08004f34  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f34  08004f34  00014f34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f38  08004f38  00014f38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004f3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          000040d4  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004148  20004148  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017a7c  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f26  00000000  00000000  00037b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001150  00000000  00000000  0003aa48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001048  00000000  00000000  0003bb98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022473  00000000  00000000  0003cbe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013333  00000000  00000000  0005f053  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2e29  00000000  00000000  00072386  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001451af  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004b54  00000000  00000000  00145204  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004de0 	.word	0x08004de0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08004de0 	.word	0x08004de0

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004c8:	b480      	push	{r7}
 80004ca:	b085      	sub	sp, #20
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	60f8      	str	r0, [r7, #12]
 80004d0:	60b9      	str	r1, [r7, #8]
 80004d2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	4a07      	ldr	r2, [pc, #28]	; (80004f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80004d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004da:	68bb      	ldr	r3, [r7, #8]
 80004dc:	4a06      	ldr	r2, [pc, #24]	; (80004f8 <vApplicationGetIdleTaskMemory+0x30>)
 80004de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	2280      	movs	r2, #128	; 0x80
 80004e4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004e6:	bf00      	nop
 80004e8:	3714      	adds	r7, #20
 80004ea:	46bd      	mov	sp, r7
 80004ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop
 80004f4:	20000090 	.word	0x20000090
 80004f8:	20000144 	.word	0x20000144

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b5b0      	push	{r4, r5, r7, lr}
 80004fe:	b098      	sub	sp, #96	; 0x60
 8000500:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000502:	f000 fb1d 	bl	8000b40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000506:	f000 f859 	bl	80005bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050a:	f000 f8df 	bl	80006cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800050e:	f000 f8b3 	bl	8000678 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of uartMutex */
  osMutexDef(uartMutex);
 8000512:	2300      	movs	r3, #0
 8000514:	65bb      	str	r3, [r7, #88]	; 0x58
 8000516:	2300      	movs	r3, #0
 8000518:	65fb      	str	r3, [r7, #92]	; 0x5c
  uartMutexHandle = osMutexCreate(osMutex(uartMutex));
 800051a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800051e:	4618      	mov	r0, r3
 8000520:	f002 f8d7 	bl	80026d2 <osMutexCreate>
 8000524:	4603      	mov	r3, r0
 8000526:	4a1e      	ldr	r2, [pc, #120]	; (80005a0 <main+0xa4>)
 8000528:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, Thread1, osPriorityNormal, 0, 128);
 800052a:	4b1e      	ldr	r3, [pc, #120]	; (80005a4 <main+0xa8>)
 800052c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000530:	461d      	mov	r5, r3
 8000532:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000534:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000536:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800053a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800053e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000542:	2100      	movs	r1, #0
 8000544:	4618      	mov	r0, r3
 8000546:	f002 f864 	bl	8002612 <osThreadCreate>
 800054a:	4603      	mov	r3, r0
 800054c:	4a16      	ldr	r2, [pc, #88]	; (80005a8 <main+0xac>)
 800054e:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, Thread2, osPriorityIdle, 0, 128);
 8000550:	4b16      	ldr	r3, [pc, #88]	; (80005ac <main+0xb0>)
 8000552:	f107 0420 	add.w	r4, r7, #32
 8000556:	461d      	mov	r5, r3
 8000558:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800055a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800055c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000560:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8000564:	f107 0320 	add.w	r3, r7, #32
 8000568:	2100      	movs	r1, #0
 800056a:	4618      	mov	r0, r3
 800056c:	f002 f851 	bl	8002612 <osThreadCreate>
 8000570:	4603      	mov	r3, r0
 8000572:	4a0f      	ldr	r2, [pc, #60]	; (80005b0 <main+0xb4>)
 8000574:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  //keeping inside BEGIN / END keeps it here even if update .ioc (otherwise deleted)

  //definition and creation of thread3
  osThreadDef(myTask03, Thread3, osPriorityIdle, 0, 128);
 8000576:	4b0f      	ldr	r3, [pc, #60]	; (80005b4 <main+0xb8>)
 8000578:	1d3c      	adds	r4, r7, #4
 800057a:	461d      	mov	r5, r3
 800057c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800057e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000580:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000584:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 8000588:	1d3b      	adds	r3, r7, #4
 800058a:	2100      	movs	r1, #0
 800058c:	4618      	mov	r0, r3
 800058e:	f002 f840 	bl	8002612 <osThreadCreate>
 8000592:	4603      	mov	r3, r0
 8000594:	4a08      	ldr	r2, [pc, #32]	; (80005b8 <main+0xbc>)
 8000596:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000598:	f002 f834 	bl	8002604 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800059c:	e7fe      	b.n	800059c <main+0xa0>
 800059e:	bf00      	nop
 80005a0:	200040a4 	.word	0x200040a4
 80005a4:	08004e1c 	.word	0x08004e1c
 80005a8:	2000409c 	.word	0x2000409c
 80005ac:	08004e38 	.word	0x08004e38
 80005b0:	200040a0 	.word	0x200040a0
 80005b4:	08004e54 	.word	0x08004e54
 80005b8:	200040a8 	.word	0x200040a8

080005bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b094      	sub	sp, #80	; 0x50
 80005c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c2:	f107 0320 	add.w	r3, r7, #32
 80005c6:	2230      	movs	r2, #48	; 0x30
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f004 fb3a 	bl	8004c44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d0:	f107 030c 	add.w	r3, r7, #12
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e0:	2300      	movs	r3, #0
 80005e2:	60bb      	str	r3, [r7, #8]
 80005e4:	4b22      	ldr	r3, [pc, #136]	; (8000670 <SystemClock_Config+0xb4>)
 80005e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e8:	4a21      	ldr	r2, [pc, #132]	; (8000670 <SystemClock_Config+0xb4>)
 80005ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ee:	6413      	str	r3, [r2, #64]	; 0x40
 80005f0:	4b1f      	ldr	r3, [pc, #124]	; (8000670 <SystemClock_Config+0xb4>)
 80005f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f8:	60bb      	str	r3, [r7, #8]
 80005fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005fc:	2300      	movs	r3, #0
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	4b1c      	ldr	r3, [pc, #112]	; (8000674 <SystemClock_Config+0xb8>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a1b      	ldr	r2, [pc, #108]	; (8000674 <SystemClock_Config+0xb8>)
 8000606:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800060a:	6013      	str	r3, [r2, #0]
 800060c:	4b19      	ldr	r3, [pc, #100]	; (8000674 <SystemClock_Config+0xb8>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000618:	2302      	movs	r3, #2
 800061a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800061c:	2301      	movs	r3, #1
 800061e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000620:	2310      	movs	r3, #16
 8000622:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000624:	2300      	movs	r3, #0
 8000626:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000628:	f107 0320 	add.w	r3, r7, #32
 800062c:	4618      	mov	r0, r3
 800062e:	f000 fd93 	bl	8001158 <HAL_RCC_OscConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000638:	f000 f954 	bl	80008e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063c:	230f      	movs	r3, #15
 800063e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000640:	2300      	movs	r3, #0
 8000642:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000648:	2300      	movs	r3, #0
 800064a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800064c:	2300      	movs	r3, #0
 800064e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000650:	f107 030c 	add.w	r3, r7, #12
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f000 fff6 	bl	8001648 <HAL_RCC_ClockConfig>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000662:	f000 f93f 	bl	80008e4 <Error_Handler>
  }
}
 8000666:	bf00      	nop
 8000668:	3750      	adds	r7, #80	; 0x50
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40023800 	.word	0x40023800
 8000674:	40007000 	.word	0x40007000

08000678 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800067c:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 800067e:	4a12      	ldr	r2, [pc, #72]	; (80006c8 <MX_USART2_UART_Init+0x50>)
 8000680:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000682:	4b10      	ldr	r3, [pc, #64]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 8000684:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000688:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800068a:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000690:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 8000692:	2200      	movs	r2, #0
 8000694:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000696:	4b0b      	ldr	r3, [pc, #44]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 8000698:	2200      	movs	r2, #0
 800069a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800069c:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 800069e:	220c      	movs	r2, #12
 80006a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006a2:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006a8:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ae:	4805      	ldr	r0, [pc, #20]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 80006b0:	f001 fc7a 	bl	8001fa8 <HAL_UART_Init>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006ba:	f000 f913 	bl	80008e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	200040ac 	.word	0x200040ac
 80006c8:	40004400 	.word	0x40004400

080006cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b088      	sub	sp, #32
 80006d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d2:	f107 030c 	add.w	r3, r7, #12
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	60da      	str	r2, [r3, #12]
 80006e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	60bb      	str	r3, [r7, #8]
 80006e6:	4b1f      	ldr	r3, [pc, #124]	; (8000764 <MX_GPIO_Init+0x98>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	4a1e      	ldr	r2, [pc, #120]	; (8000764 <MX_GPIO_Init+0x98>)
 80006ec:	f043 0301 	orr.w	r3, r3, #1
 80006f0:	6313      	str	r3, [r2, #48]	; 0x30
 80006f2:	4b1c      	ldr	r3, [pc, #112]	; (8000764 <MX_GPIO_Init+0x98>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	f003 0301 	and.w	r3, r3, #1
 80006fa:	60bb      	str	r3, [r7, #8]
 80006fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	607b      	str	r3, [r7, #4]
 8000702:	4b18      	ldr	r3, [pc, #96]	; (8000764 <MX_GPIO_Init+0x98>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	4a17      	ldr	r2, [pc, #92]	; (8000764 <MX_GPIO_Init+0x98>)
 8000708:	f043 0308 	orr.w	r3, r3, #8
 800070c:	6313      	str	r3, [r2, #48]	; 0x30
 800070e:	4b15      	ldr	r3, [pc, #84]	; (8000764 <MX_GPIO_Init+0x98>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	f003 0308 	and.w	r3, r3, #8
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800071a:	2200      	movs	r2, #0
 800071c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000720:	4811      	ldr	r0, [pc, #68]	; (8000768 <MX_GPIO_Init+0x9c>)
 8000722:	f000 fce5 	bl	80010f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000726:	2301      	movs	r3, #1
 8000728:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800072a:	2300      	movs	r3, #0
 800072c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072e:	2300      	movs	r3, #0
 8000730:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000732:	f107 030c 	add.w	r3, r7, #12
 8000736:	4619      	mov	r1, r3
 8000738:	480c      	ldr	r0, [pc, #48]	; (800076c <MX_GPIO_Init+0xa0>)
 800073a:	f000 fb25 	bl	8000d88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800073e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000742:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000744:	2301      	movs	r3, #1
 8000746:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000748:	2300      	movs	r3, #0
 800074a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074c:	2300      	movs	r3, #0
 800074e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000750:	f107 030c 	add.w	r3, r7, #12
 8000754:	4619      	mov	r1, r3
 8000756:	4804      	ldr	r0, [pc, #16]	; (8000768 <MX_GPIO_Init+0x9c>)
 8000758:	f000 fb16 	bl	8000d88 <HAL_GPIO_Init>

}
 800075c:	bf00      	nop
 800075e:	3720      	adds	r7, #32
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	40023800 	.word	0x40023800
 8000768:	40020c00 	.word	0x40020c00
 800076c:	40020000 	.word	0x40020000

08000770 <Thread1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Thread1 */
void Thread1(void const * argument)
{
 8000770:	b5b0      	push	{r4, r5, r7, lr}
 8000772:	b088      	sub	sp, #32
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  uint8_t txData[20] = "Hello from Thread1\r\n"; //UART Data (carriage return), transmit func requres uint8
 8000778:	4b13      	ldr	r3, [pc, #76]	; (80007c8 <Thread1+0x58>)
 800077a:	f107 040c 	add.w	r4, r7, #12
 800077e:	461d      	mov	r5, r3
 8000780:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000782:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000784:	682b      	ldr	r3, [r5, #0]
 8000786:	6023      	str	r3, [r4, #0]
  /* Infinite loop */
  for(;;)
  {
	//toggle LED and transmit data over UART, continously
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000788:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800078c:	480f      	ldr	r0, [pc, #60]	; (80007cc <Thread1+0x5c>)
 800078e:	f000 fcc8 	bl	8001122 <HAL_GPIO_TogglePin>
	//Mutex eliminates problem of transmitting same time (uses queues), functions : mutex take + give
	//use take b4 give to uart
	xSemaphoreTake(uartMutexHandle,
 8000792:	4b0f      	ldr	r3, [pc, #60]	; (80007d0 <Thread1+0x60>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	f04f 31ff 	mov.w	r1, #4294967295
 800079a:	4618      	mov	r0, r3
 800079c:	f002 faea 	bl	8002d74 <xQueueSemaphoreTake>
				   portMAX_DELAY); //waits indefinitely until UART available

	HAL_UART_Transmit(&huart2,  //handle typedef
 80007a0:	f107 010c 	add.w	r1, r7, #12
 80007a4:	2305      	movs	r3, #5
 80007a6:	2214      	movs	r2, #20
 80007a8:	480a      	ldr	r0, [pc, #40]	; (80007d4 <Thread1+0x64>)
 80007aa:	f001 fc4a 	bl	8002042 <HAL_UART_Transmit>
					  txData,  	//data
					  20,		//data size
					  5);		//timeout- more time to complete transmission (instead of 1ms)

	xSemaphoreGive(uartMutexHandle); // when done with UART gives to thread2
 80007ae:	4b08      	ldr	r3, [pc, #32]	; (80007d0 <Thread1+0x60>)
 80007b0:	6818      	ldr	r0, [r3, #0]
 80007b2:	2300      	movs	r3, #0
 80007b4:	2200      	movs	r2, #0
 80007b6:	2100      	movs	r1, #0
 80007b8:	f002 f9de 	bl	8002b78 <xQueueGenericSend>

    osDelay(1000); //1sec delay
 80007bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007c0:	f001 ff73 	bl	80026aa <osDelay>
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80007c4:	e7e0      	b.n	8000788 <Thread1+0x18>
 80007c6:	bf00      	nop
 80007c8:	08004e70 	.word	0x08004e70
 80007cc:	40020c00 	.word	0x40020c00
 80007d0:	200040a4 	.word	0x200040a4
 80007d4:	200040ac 	.word	0x200040ac

080007d8 <Thread2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Thread2 */
void Thread2(void const * argument)
{
 80007d8:	b5b0      	push	{r4, r5, r7, lr}
 80007da:	b088      	sub	sp, #32
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Thread2 */
  uint8_t txData[20] = "Hello from Thread2\r\n";
 80007e0:	4b17      	ldr	r3, [pc, #92]	; (8000840 <Thread2+0x68>)
 80007e2:	f107 040c 	add.w	r4, r7, #12
 80007e6:	461d      	mov	r5, r3
 80007e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007ec:	682b      	ldr	r3, [r5, #0]
 80007ee:	6023      	str	r3, [r4, #0]
  /* Infinite loop */
  for(;;)
  {
	//pushbutton is == reset (0) as its active low - pressed, when pressed shows hello from thread2
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) ==GPIO_PIN_RESET)
 80007f0:	2101      	movs	r1, #1
 80007f2:	4814      	ldr	r0, [pc, #80]	; (8000844 <Thread2+0x6c>)
 80007f4:	f000 fc64 	bl	80010c0 <HAL_GPIO_ReadPin>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d1f8      	bne.n	80007f0 <Thread2+0x18>
	{
		//notify thread 3 to trigger
		xTaskNotify(myTask03Handle, //pass thread3 handle at top
 80007fe:	4b12      	ldr	r3, [pc, #72]	; (8000848 <Thread2+0x70>)
 8000800:	6818      	ldr	r0, [r3, #0]
 8000802:	2300      	movs	r3, #0
 8000804:	2201      	movs	r2, #1
 8000806:	2101      	movs	r1, #1
 8000808:	f003 fcce 	bl	80041a8 <xTaskGenericNotify>
					0x01,			//set up to 8 flags (0x01 = flag 1)
					eSetBits 		//sets the flag (no reset)
					);

		xSemaphoreTake(uartMutexHandle, //adds to queue, as soon as Thread1 available gives UART to thread2
 800080c:	4b0f      	ldr	r3, [pc, #60]	; (800084c <Thread2+0x74>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	f04f 31ff 	mov.w	r1, #4294967295
 8000814:	4618      	mov	r0, r3
 8000816:	f002 faad 	bl	8002d74 <xQueueSemaphoreTake>
						   portMAX_DELAY);
		HAL_UART_Transmit(&huart2,  //handle typedef
 800081a:	f107 010c 	add.w	r1, r7, #12
 800081e:	2305      	movs	r3, #5
 8000820:	2214      	movs	r2, #20
 8000822:	480b      	ldr	r0, [pc, #44]	; (8000850 <Thread2+0x78>)
 8000824:	f001 fc0d 	bl	8002042 <HAL_UART_Transmit>
						  txData,  	//data
						  20,		//data size
						  5);		//timeout

		xSemaphoreGive(uartMutexHandle);
 8000828:	4b08      	ldr	r3, [pc, #32]	; (800084c <Thread2+0x74>)
 800082a:	6818      	ldr	r0, [r3, #0]
 800082c:	2300      	movs	r3, #0
 800082e:	2200      	movs	r2, #0
 8000830:	2100      	movs	r1, #0
 8000832:	f002 f9a1 	bl	8002b78 <xQueueGenericSend>

		osDelay(400); //400ms between each message (no mutux use)
 8000836:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800083a:	f001 ff36 	bl	80026aa <osDelay>
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) ==GPIO_PIN_RESET)
 800083e:	e7d7      	b.n	80007f0 <Thread2+0x18>
 8000840:	08004e84 	.word	0x08004e84
 8000844:	40020000 	.word	0x40020000
 8000848:	200040a8 	.word	0x200040a8
 800084c:	200040a4 	.word	0x200040a4
 8000850:	200040ac 	.word	0x200040ac

08000854 <Thread3>:
  /* USER CODE END Thread2 */
}

// thread3 I created this
void Thread3(void const * argument)
{
 8000854:	b5b0      	push	{r4, r5, r7, lr}
 8000856:	b088      	sub	sp, #32
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Thread3 */
  uint8_t txData[20] = "Hello from Thread3\r\n";
 800085c:	4b15      	ldr	r3, [pc, #84]	; (80008b4 <Thread3+0x60>)
 800085e:	f107 040c 	add.w	r4, r7, #12
 8000862:	461d      	mov	r5, r3
 8000864:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000866:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000868:	682b      	ldr	r3, [r5, #0]
 800086a:	6023      	str	r3, [r4, #0]
  uint32_t notifyValue;
  /* Infinite loop */
  for(;;)
  {
	//notify wait from thread2 and then proceed
	xTaskNotifyWait(pdFALSE,   		// don't reset flag when entering func
 800086c:	f107 0208 	add.w	r2, r7, #8
 8000870:	f04f 33ff 	mov.w	r3, #4294967295
 8000874:	21ff      	movs	r1, #255	; 0xff
 8000876:	2000      	movs	r0, #0
 8000878:	f003 fc36 	bl	80040e8 <xTaskNotifyWait>
					&notifyValue, 	// value from notification (0x01), define in func
					portMAX_DELAY 	// wait indefinitely for notifier to arrive
					);

	//check if notify value is 0x01
	if( (notifyValue & 0x01) != 0x00 )
 800087c:	68bb      	ldr	r3, [r7, #8]
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	2b00      	cmp	r3, #0
 8000884:	d0f2      	beq.n	800086c <Thread3+0x18>
	{
		//adds to queue
		xSemaphoreTake(uartMutexHandle,portMAX_DELAY);//when Thread1 available gives UART to thread2
 8000886:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <Thread3+0x64>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	f04f 31ff 	mov.w	r1, #4294967295
 800088e:	4618      	mov	r0, r3
 8000890:	f002 fa70 	bl	8002d74 <xQueueSemaphoreTake>

		HAL_UART_Transmit(&huart2,  //handle typedef
 8000894:	f107 010c 	add.w	r1, r7, #12
 8000898:	2305      	movs	r3, #5
 800089a:	2214      	movs	r2, #20
 800089c:	4807      	ldr	r0, [pc, #28]	; (80008bc <Thread3+0x68>)
 800089e:	f001 fbd0 	bl	8002042 <HAL_UART_Transmit>
						  txData,  	//data
						  20,		//data size
						  5);		//timeout

		xSemaphoreGive(uartMutexHandle);
 80008a2:	4b05      	ldr	r3, [pc, #20]	; (80008b8 <Thread3+0x64>)
 80008a4:	6818      	ldr	r0, [r3, #0]
 80008a6:	2300      	movs	r3, #0
 80008a8:	2200      	movs	r2, #0
 80008aa:	2100      	movs	r1, #0
 80008ac:	f002 f964 	bl	8002b78 <xQueueGenericSend>
	xTaskNotifyWait(pdFALSE,   		// don't reset flag when entering func
 80008b0:	e7dc      	b.n	800086c <Thread3+0x18>
 80008b2:	bf00      	nop
 80008b4:	08004e98 	.word	0x08004e98
 80008b8:	200040a4 	.word	0x200040a4
 80008bc:	200040ac 	.word	0x200040ac

080008c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a04      	ldr	r2, [pc, #16]	; (80008e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d101      	bne.n	80008d6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008d2:	f000 f957 	bl	8000b84 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008d6:	bf00      	nop
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40000400 	.word	0x40000400

080008e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e8:	b672      	cpsid	i
}
 80008ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008ec:	e7fe      	b.n	80008ec <Error_Handler+0x8>
	...

080008f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	607b      	str	r3, [r7, #4]
 80008fa:	4b12      	ldr	r3, [pc, #72]	; (8000944 <HAL_MspInit+0x54>)
 80008fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008fe:	4a11      	ldr	r2, [pc, #68]	; (8000944 <HAL_MspInit+0x54>)
 8000900:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000904:	6453      	str	r3, [r2, #68]	; 0x44
 8000906:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <HAL_MspInit+0x54>)
 8000908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800090a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	603b      	str	r3, [r7, #0]
 8000916:	4b0b      	ldr	r3, [pc, #44]	; (8000944 <HAL_MspInit+0x54>)
 8000918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091a:	4a0a      	ldr	r2, [pc, #40]	; (8000944 <HAL_MspInit+0x54>)
 800091c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000920:	6413      	str	r3, [r2, #64]	; 0x40
 8000922:	4b08      	ldr	r3, [pc, #32]	; (8000944 <HAL_MspInit+0x54>)
 8000924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800092a:	603b      	str	r3, [r7, #0]
 800092c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800092e:	2200      	movs	r2, #0
 8000930:	210f      	movs	r1, #15
 8000932:	f06f 0001 	mvn.w	r0, #1
 8000936:	f000 f9fd 	bl	8000d34 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800093a:	bf00      	nop
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40023800 	.word	0x40023800

08000948 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b08a      	sub	sp, #40	; 0x28
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000950:	f107 0314 	add.w	r3, r7, #20
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	605a      	str	r2, [r3, #4]
 800095a:	609a      	str	r2, [r3, #8]
 800095c:	60da      	str	r2, [r3, #12]
 800095e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a19      	ldr	r2, [pc, #100]	; (80009cc <HAL_UART_MspInit+0x84>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d12b      	bne.n	80009c2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	613b      	str	r3, [r7, #16]
 800096e:	4b18      	ldr	r3, [pc, #96]	; (80009d0 <HAL_UART_MspInit+0x88>)
 8000970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000972:	4a17      	ldr	r2, [pc, #92]	; (80009d0 <HAL_UART_MspInit+0x88>)
 8000974:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000978:	6413      	str	r3, [r2, #64]	; 0x40
 800097a:	4b15      	ldr	r3, [pc, #84]	; (80009d0 <HAL_UART_MspInit+0x88>)
 800097c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000982:	613b      	str	r3, [r7, #16]
 8000984:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	60fb      	str	r3, [r7, #12]
 800098a:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <HAL_UART_MspInit+0x88>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	4a10      	ldr	r2, [pc, #64]	; (80009d0 <HAL_UART_MspInit+0x88>)
 8000990:	f043 0301 	orr.w	r3, r3, #1
 8000994:	6313      	str	r3, [r2, #48]	; 0x30
 8000996:	4b0e      	ldr	r3, [pc, #56]	; (80009d0 <HAL_UART_MspInit+0x88>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	f003 0301 	and.w	r3, r3, #1
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009a2:	230c      	movs	r3, #12
 80009a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a6:	2302      	movs	r3, #2
 80009a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ae:	2303      	movs	r3, #3
 80009b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009b2:	2307      	movs	r3, #7
 80009b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b6:	f107 0314 	add.w	r3, r7, #20
 80009ba:	4619      	mov	r1, r3
 80009bc:	4805      	ldr	r0, [pc, #20]	; (80009d4 <HAL_UART_MspInit+0x8c>)
 80009be:	f000 f9e3 	bl	8000d88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009c2:	bf00      	nop
 80009c4:	3728      	adds	r7, #40	; 0x28
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40004400 	.word	0x40004400
 80009d0:	40023800 	.word	0x40023800
 80009d4:	40020000 	.word	0x40020000

080009d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08c      	sub	sp, #48	; 0x30
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80009e0:	2300      	movs	r3, #0
 80009e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80009e4:	2300      	movs	r3, #0
 80009e6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 80009e8:	2200      	movs	r2, #0
 80009ea:	6879      	ldr	r1, [r7, #4]
 80009ec:	201d      	movs	r0, #29
 80009ee:	f000 f9a1 	bl	8000d34 <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80009f2:	201d      	movs	r0, #29
 80009f4:	f000 f9ba 	bl	8000d6c <HAL_NVIC_EnableIRQ>

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 80009f8:	2300      	movs	r3, #0
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	4b1e      	ldr	r3, [pc, #120]	; (8000a78 <HAL_InitTick+0xa0>)
 80009fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a00:	4a1d      	ldr	r2, [pc, #116]	; (8000a78 <HAL_InitTick+0xa0>)
 8000a02:	f043 0302 	orr.w	r3, r3, #2
 8000a06:	6413      	str	r3, [r2, #64]	; 0x40
 8000a08:	4b1b      	ldr	r3, [pc, #108]	; (8000a78 <HAL_InitTick+0xa0>)
 8000a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0c:	f003 0302 	and.w	r3, r3, #2
 8000a10:	60fb      	str	r3, [r7, #12]
 8000a12:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a14:	f107 0210 	add.w	r2, r7, #16
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	4611      	mov	r1, r2
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f000 ffe2 	bl	80019e8 <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a24:	f000 ffb8 	bl	8001998 <HAL_RCC_GetPCLK1Freq>
 8000a28:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a2c:	4a13      	ldr	r2, [pc, #76]	; (8000a7c <HAL_InitTick+0xa4>)
 8000a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a32:	0c9b      	lsrs	r3, r3, #18
 8000a34:	3b01      	subs	r3, #1
 8000a36:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8000a38:	4b11      	ldr	r3, [pc, #68]	; (8000a80 <HAL_InitTick+0xa8>)
 8000a3a:	4a12      	ldr	r2, [pc, #72]	; (8000a84 <HAL_InitTick+0xac>)
 8000a3c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8000a3e:	4b10      	ldr	r3, [pc, #64]	; (8000a80 <HAL_InitTick+0xa8>)
 8000a40:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a44:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8000a46:	4a0e      	ldr	r2, [pc, #56]	; (8000a80 <HAL_InitTick+0xa8>)
 8000a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a4a:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <HAL_InitTick+0xa8>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a52:	4b0b      	ldr	r3, [pc, #44]	; (8000a80 <HAL_InitTick+0xa8>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8000a58:	4809      	ldr	r0, [pc, #36]	; (8000a80 <HAL_InitTick+0xa8>)
 8000a5a:	f000 fff7 	bl	8001a4c <HAL_TIM_Base_Init>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d104      	bne.n	8000a6e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8000a64:	4806      	ldr	r0, [pc, #24]	; (8000a80 <HAL_InitTick+0xa8>)
 8000a66:	f001 f84b 	bl	8001b00 <HAL_TIM_Base_Start_IT>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	e000      	b.n	8000a70 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a6e:	2301      	movs	r3, #1
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	3730      	adds	r7, #48	; 0x30
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	40023800 	.word	0x40023800
 8000a7c:	431bde83 	.word	0x431bde83
 8000a80:	200040f0 	.word	0x200040f0
 8000a84:	40000400 	.word	0x40000400

08000a88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <NMI_Handler+0x4>

08000a8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a92:	e7fe      	b.n	8000a92 <HardFault_Handler+0x4>

08000a94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <MemManage_Handler+0x4>

08000a9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a9e:	e7fe      	b.n	8000a9e <BusFault_Handler+0x4>

08000aa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aa4:	e7fe      	b.n	8000aa4 <UsageFault_Handler+0x4>

08000aa6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr

08000ab4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000ab8:	4802      	ldr	r0, [pc, #8]	; (8000ac4 <TIM3_IRQHandler+0x10>)
 8000aba:	f001 f891 	bl	8001be0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	200040f0 	.word	0x200040f0

08000ac8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000acc:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <SystemInit+0x20>)
 8000ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ad2:	4a05      	ldr	r2, [pc, #20]	; (8000ae8 <SystemInit+0x20>)
 8000ad4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ad8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	e000ed00 	.word	0xe000ed00

08000aec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000aec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b24 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000af0:	480d      	ldr	r0, [pc, #52]	; (8000b28 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000af2:	490e      	ldr	r1, [pc, #56]	; (8000b2c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000af4:	4a0e      	ldr	r2, [pc, #56]	; (8000b30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000af6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000af8:	e002      	b.n	8000b00 <LoopCopyDataInit>

08000afa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000afa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000afc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000afe:	3304      	adds	r3, #4

08000b00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b04:	d3f9      	bcc.n	8000afa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b06:	4a0b      	ldr	r2, [pc, #44]	; (8000b34 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b08:	4c0b      	ldr	r4, [pc, #44]	; (8000b38 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b0c:	e001      	b.n	8000b12 <LoopFillZerobss>

08000b0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b10:	3204      	adds	r2, #4

08000b12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b14:	d3fb      	bcc.n	8000b0e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b16:	f7ff ffd7 	bl	8000ac8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b1a:	f004 f85f 	bl	8004bdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b1e:	f7ff fced 	bl	80004fc <main>
  bx  lr    
 8000b22:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b2c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000b30:	08004f3c 	.word	0x08004f3c
  ldr r2, =_sbss
 8000b34:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000b38:	20004148 	.word	0x20004148

08000b3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b3c:	e7fe      	b.n	8000b3c <ADC_IRQHandler>
	...

08000b40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b44:	4b0e      	ldr	r3, [pc, #56]	; (8000b80 <HAL_Init+0x40>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a0d      	ldr	r2, [pc, #52]	; (8000b80 <HAL_Init+0x40>)
 8000b4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b50:	4b0b      	ldr	r3, [pc, #44]	; (8000b80 <HAL_Init+0x40>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a0a      	ldr	r2, [pc, #40]	; (8000b80 <HAL_Init+0x40>)
 8000b56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b5c:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <HAL_Init+0x40>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a07      	ldr	r2, [pc, #28]	; (8000b80 <HAL_Init+0x40>)
 8000b62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b68:	2003      	movs	r0, #3
 8000b6a:	f000 f8d8 	bl	8000d1e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b6e:	200f      	movs	r0, #15
 8000b70:	f7ff ff32 	bl	80009d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b74:	f7ff febc 	bl	80008f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b78:	2300      	movs	r3, #0
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40023c00 	.word	0x40023c00

08000b84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b88:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <HAL_IncTick+0x20>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <HAL_IncTick+0x24>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4413      	add	r3, r2
 8000b94:	4a04      	ldr	r2, [pc, #16]	; (8000ba8 <HAL_IncTick+0x24>)
 8000b96:	6013      	str	r3, [r2, #0]
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	20000008 	.word	0x20000008
 8000ba8:	20004138 	.word	0x20004138

08000bac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  return uwTick;
 8000bb0:	4b03      	ldr	r3, [pc, #12]	; (8000bc0 <HAL_GetTick+0x14>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	20004138 	.word	0x20004138

08000bc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b085      	sub	sp, #20
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	f003 0307 	and.w	r3, r3, #7
 8000bd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bd4:	4b0c      	ldr	r3, [pc, #48]	; (8000c08 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd6:	68db      	ldr	r3, [r3, #12]
 8000bd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bda:	68ba      	ldr	r2, [r7, #8]
 8000bdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000be0:	4013      	ands	r3, r2
 8000be2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bf6:	4a04      	ldr	r2, [pc, #16]	; (8000c08 <__NVIC_SetPriorityGrouping+0x44>)
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	60d3      	str	r3, [r2, #12]
}
 8000bfc:	bf00      	nop
 8000bfe:	3714      	adds	r7, #20
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	e000ed00 	.word	0xe000ed00

08000c0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c10:	4b04      	ldr	r3, [pc, #16]	; (8000c24 <__NVIC_GetPriorityGrouping+0x18>)
 8000c12:	68db      	ldr	r3, [r3, #12]
 8000c14:	0a1b      	lsrs	r3, r3, #8
 8000c16:	f003 0307 	and.w	r3, r3, #7
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	e000ed00 	.word	0xe000ed00

08000c28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	db0b      	blt.n	8000c52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
 8000c3c:	f003 021f 	and.w	r2, r3, #31
 8000c40:	4907      	ldr	r1, [pc, #28]	; (8000c60 <__NVIC_EnableIRQ+0x38>)
 8000c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c46:	095b      	lsrs	r3, r3, #5
 8000c48:	2001      	movs	r0, #1
 8000c4a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c52:	bf00      	nop
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	e000e100 	.word	0xe000e100

08000c64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	6039      	str	r1, [r7, #0]
 8000c6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	db0a      	blt.n	8000c8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	b2da      	uxtb	r2, r3
 8000c7c:	490c      	ldr	r1, [pc, #48]	; (8000cb0 <__NVIC_SetPriority+0x4c>)
 8000c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c82:	0112      	lsls	r2, r2, #4
 8000c84:	b2d2      	uxtb	r2, r2
 8000c86:	440b      	add	r3, r1
 8000c88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c8c:	e00a      	b.n	8000ca4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	b2da      	uxtb	r2, r3
 8000c92:	4908      	ldr	r1, [pc, #32]	; (8000cb4 <__NVIC_SetPriority+0x50>)
 8000c94:	79fb      	ldrb	r3, [r7, #7]
 8000c96:	f003 030f 	and.w	r3, r3, #15
 8000c9a:	3b04      	subs	r3, #4
 8000c9c:	0112      	lsls	r2, r2, #4
 8000c9e:	b2d2      	uxtb	r2, r2
 8000ca0:	440b      	add	r3, r1
 8000ca2:	761a      	strb	r2, [r3, #24]
}
 8000ca4:	bf00      	nop
 8000ca6:	370c      	adds	r7, #12
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr
 8000cb0:	e000e100 	.word	0xe000e100
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b089      	sub	sp, #36	; 0x24
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	60f8      	str	r0, [r7, #12]
 8000cc0:	60b9      	str	r1, [r7, #8]
 8000cc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	f003 0307 	and.w	r3, r3, #7
 8000cca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ccc:	69fb      	ldr	r3, [r7, #28]
 8000cce:	f1c3 0307 	rsb	r3, r3, #7
 8000cd2:	2b04      	cmp	r3, #4
 8000cd4:	bf28      	it	cs
 8000cd6:	2304      	movcs	r3, #4
 8000cd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	3304      	adds	r3, #4
 8000cde:	2b06      	cmp	r3, #6
 8000ce0:	d902      	bls.n	8000ce8 <NVIC_EncodePriority+0x30>
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	3b03      	subs	r3, #3
 8000ce6:	e000      	b.n	8000cea <NVIC_EncodePriority+0x32>
 8000ce8:	2300      	movs	r3, #0
 8000cea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cec:	f04f 32ff 	mov.w	r2, #4294967295
 8000cf0:	69bb      	ldr	r3, [r7, #24]
 8000cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf6:	43da      	mvns	r2, r3
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	401a      	ands	r2, r3
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d00:	f04f 31ff 	mov.w	r1, #4294967295
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	fa01 f303 	lsl.w	r3, r1, r3
 8000d0a:	43d9      	mvns	r1, r3
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d10:	4313      	orrs	r3, r2
         );
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3724      	adds	r7, #36	; 0x24
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr

08000d1e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b082      	sub	sp, #8
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d26:	6878      	ldr	r0, [r7, #4]
 8000d28:	f7ff ff4c 	bl	8000bc4 <__NVIC_SetPriorityGrouping>
}
 8000d2c:	bf00      	nop
 8000d2e:	3708      	adds	r7, #8
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b086      	sub	sp, #24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	60b9      	str	r1, [r7, #8]
 8000d3e:	607a      	str	r2, [r7, #4]
 8000d40:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d42:	2300      	movs	r3, #0
 8000d44:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d46:	f7ff ff61 	bl	8000c0c <__NVIC_GetPriorityGrouping>
 8000d4a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d4c:	687a      	ldr	r2, [r7, #4]
 8000d4e:	68b9      	ldr	r1, [r7, #8]
 8000d50:	6978      	ldr	r0, [r7, #20]
 8000d52:	f7ff ffb1 	bl	8000cb8 <NVIC_EncodePriority>
 8000d56:	4602      	mov	r2, r0
 8000d58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d5c:	4611      	mov	r1, r2
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f7ff ff80 	bl	8000c64 <__NVIC_SetPriority>
}
 8000d64:	bf00      	nop
 8000d66:	3718      	adds	r7, #24
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f7ff ff54 	bl	8000c28 <__NVIC_EnableIRQ>
}
 8000d80:	bf00      	nop
 8000d82:	3708      	adds	r7, #8
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b089      	sub	sp, #36	; 0x24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d92:	2300      	movs	r3, #0
 8000d94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d96:	2300      	movs	r3, #0
 8000d98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d9e:	2300      	movs	r3, #0
 8000da0:	61fb      	str	r3, [r7, #28]
 8000da2:	e16b      	b.n	800107c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000da4:	2201      	movs	r2, #1
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	697a      	ldr	r2, [r7, #20]
 8000db4:	4013      	ands	r3, r2
 8000db6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000db8:	693a      	ldr	r2, [r7, #16]
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	f040 815a 	bne.w	8001076 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	f003 0303 	and.w	r3, r3, #3
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d005      	beq.n	8000dda <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dd6:	2b02      	cmp	r3, #2
 8000dd8:	d130      	bne.n	8000e3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	689b      	ldr	r3, [r3, #8]
 8000dde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	2203      	movs	r2, #3
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	43db      	mvns	r3, r3
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	4013      	ands	r3, r2
 8000df0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	68da      	ldr	r2, [r3, #12]
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfe:	69ba      	ldr	r2, [r7, #24]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	69ba      	ldr	r2, [r7, #24]
 8000e08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e10:	2201      	movs	r2, #1
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	43db      	mvns	r3, r3
 8000e1a:	69ba      	ldr	r2, [r7, #24]
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	091b      	lsrs	r3, r3, #4
 8000e26:	f003 0201 	and.w	r2, r3, #1
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	69ba      	ldr	r2, [r7, #24]
 8000e32:	4313      	orrs	r3, r2
 8000e34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f003 0303 	and.w	r3, r3, #3
 8000e44:	2b03      	cmp	r3, #3
 8000e46:	d017      	beq.n	8000e78 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	2203      	movs	r2, #3
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	69ba      	ldr	r2, [r7, #24]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	689a      	ldr	r2, [r3, #8]
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f003 0303 	and.w	r3, r3, #3
 8000e80:	2b02      	cmp	r3, #2
 8000e82:	d123      	bne.n	8000ecc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	08da      	lsrs	r2, r3, #3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	3208      	adds	r2, #8
 8000e8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	f003 0307 	and.w	r3, r3, #7
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	220f      	movs	r2, #15
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	69ba      	ldr	r2, [r7, #24]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	691a      	ldr	r2, [r3, #16]
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	f003 0307 	and.w	r3, r3, #7
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	08da      	lsrs	r2, r3, #3
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	3208      	adds	r2, #8
 8000ec6:	69b9      	ldr	r1, [r7, #24]
 8000ec8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	2203      	movs	r2, #3
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	43db      	mvns	r3, r3
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f003 0203 	and.w	r2, r3, #3
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	f000 80b4 	beq.w	8001076 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	4b60      	ldr	r3, [pc, #384]	; (8001094 <HAL_GPIO_Init+0x30c>)
 8000f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f16:	4a5f      	ldr	r2, [pc, #380]	; (8001094 <HAL_GPIO_Init+0x30c>)
 8000f18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f1e:	4b5d      	ldr	r3, [pc, #372]	; (8001094 <HAL_GPIO_Init+0x30c>)
 8000f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f2a:	4a5b      	ldr	r2, [pc, #364]	; (8001098 <HAL_GPIO_Init+0x310>)
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	089b      	lsrs	r3, r3, #2
 8000f30:	3302      	adds	r3, #2
 8000f32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	f003 0303 	and.w	r3, r3, #3
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	220f      	movs	r2, #15
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	43db      	mvns	r3, r3
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a52      	ldr	r2, [pc, #328]	; (800109c <HAL_GPIO_Init+0x314>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d02b      	beq.n	8000fae <HAL_GPIO_Init+0x226>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a51      	ldr	r2, [pc, #324]	; (80010a0 <HAL_GPIO_Init+0x318>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d025      	beq.n	8000faa <HAL_GPIO_Init+0x222>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a50      	ldr	r2, [pc, #320]	; (80010a4 <HAL_GPIO_Init+0x31c>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d01f      	beq.n	8000fa6 <HAL_GPIO_Init+0x21e>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a4f      	ldr	r2, [pc, #316]	; (80010a8 <HAL_GPIO_Init+0x320>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d019      	beq.n	8000fa2 <HAL_GPIO_Init+0x21a>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a4e      	ldr	r2, [pc, #312]	; (80010ac <HAL_GPIO_Init+0x324>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d013      	beq.n	8000f9e <HAL_GPIO_Init+0x216>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a4d      	ldr	r2, [pc, #308]	; (80010b0 <HAL_GPIO_Init+0x328>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d00d      	beq.n	8000f9a <HAL_GPIO_Init+0x212>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a4c      	ldr	r2, [pc, #304]	; (80010b4 <HAL_GPIO_Init+0x32c>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d007      	beq.n	8000f96 <HAL_GPIO_Init+0x20e>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a4b      	ldr	r2, [pc, #300]	; (80010b8 <HAL_GPIO_Init+0x330>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d101      	bne.n	8000f92 <HAL_GPIO_Init+0x20a>
 8000f8e:	2307      	movs	r3, #7
 8000f90:	e00e      	b.n	8000fb0 <HAL_GPIO_Init+0x228>
 8000f92:	2308      	movs	r3, #8
 8000f94:	e00c      	b.n	8000fb0 <HAL_GPIO_Init+0x228>
 8000f96:	2306      	movs	r3, #6
 8000f98:	e00a      	b.n	8000fb0 <HAL_GPIO_Init+0x228>
 8000f9a:	2305      	movs	r3, #5
 8000f9c:	e008      	b.n	8000fb0 <HAL_GPIO_Init+0x228>
 8000f9e:	2304      	movs	r3, #4
 8000fa0:	e006      	b.n	8000fb0 <HAL_GPIO_Init+0x228>
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	e004      	b.n	8000fb0 <HAL_GPIO_Init+0x228>
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	e002      	b.n	8000fb0 <HAL_GPIO_Init+0x228>
 8000faa:	2301      	movs	r3, #1
 8000fac:	e000      	b.n	8000fb0 <HAL_GPIO_Init+0x228>
 8000fae:	2300      	movs	r3, #0
 8000fb0:	69fa      	ldr	r2, [r7, #28]
 8000fb2:	f002 0203 	and.w	r2, r2, #3
 8000fb6:	0092      	lsls	r2, r2, #2
 8000fb8:	4093      	lsls	r3, r2
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fc0:	4935      	ldr	r1, [pc, #212]	; (8001098 <HAL_GPIO_Init+0x310>)
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	089b      	lsrs	r3, r3, #2
 8000fc6:	3302      	adds	r3, #2
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fce:	4b3b      	ldr	r3, [pc, #236]	; (80010bc <HAL_GPIO_Init+0x334>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d003      	beq.n	8000ff2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ff2:	4a32      	ldr	r2, [pc, #200]	; (80010bc <HAL_GPIO_Init+0x334>)
 8000ff4:	69bb      	ldr	r3, [r7, #24]
 8000ff6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ff8:	4b30      	ldr	r3, [pc, #192]	; (80010bc <HAL_GPIO_Init+0x334>)
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	43db      	mvns	r3, r3
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	4013      	ands	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001010:	2b00      	cmp	r3, #0
 8001012:	d003      	beq.n	800101c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	4313      	orrs	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800101c:	4a27      	ldr	r2, [pc, #156]	; (80010bc <HAL_GPIO_Init+0x334>)
 800101e:	69bb      	ldr	r3, [r7, #24]
 8001020:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001022:	4b26      	ldr	r3, [pc, #152]	; (80010bc <HAL_GPIO_Init+0x334>)
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	43db      	mvns	r3, r3
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	4013      	ands	r3, r2
 8001030:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800103a:	2b00      	cmp	r3, #0
 800103c:	d003      	beq.n	8001046 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	4313      	orrs	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001046:	4a1d      	ldr	r2, [pc, #116]	; (80010bc <HAL_GPIO_Init+0x334>)
 8001048:	69bb      	ldr	r3, [r7, #24]
 800104a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800104c:	4b1b      	ldr	r3, [pc, #108]	; (80010bc <HAL_GPIO_Init+0x334>)
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	43db      	mvns	r3, r3
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	4013      	ands	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001064:	2b00      	cmp	r3, #0
 8001066:	d003      	beq.n	8001070 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	4313      	orrs	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001070:	4a12      	ldr	r2, [pc, #72]	; (80010bc <HAL_GPIO_Init+0x334>)
 8001072:	69bb      	ldr	r3, [r7, #24]
 8001074:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	3301      	adds	r3, #1
 800107a:	61fb      	str	r3, [r7, #28]
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	2b0f      	cmp	r3, #15
 8001080:	f67f ae90 	bls.w	8000da4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001084:	bf00      	nop
 8001086:	bf00      	nop
 8001088:	3724      	adds	r7, #36	; 0x24
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	40023800 	.word	0x40023800
 8001098:	40013800 	.word	0x40013800
 800109c:	40020000 	.word	0x40020000
 80010a0:	40020400 	.word	0x40020400
 80010a4:	40020800 	.word	0x40020800
 80010a8:	40020c00 	.word	0x40020c00
 80010ac:	40021000 	.word	0x40021000
 80010b0:	40021400 	.word	0x40021400
 80010b4:	40021800 	.word	0x40021800
 80010b8:	40021c00 	.word	0x40021c00
 80010bc:	40013c00 	.word	0x40013c00

080010c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	460b      	mov	r3, r1
 80010ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	691a      	ldr	r2, [r3, #16]
 80010d0:	887b      	ldrh	r3, [r7, #2]
 80010d2:	4013      	ands	r3, r2
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d002      	beq.n	80010de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80010d8:	2301      	movs	r3, #1
 80010da:	73fb      	strb	r3, [r7, #15]
 80010dc:	e001      	b.n	80010e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80010de:	2300      	movs	r3, #0
 80010e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80010e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3714      	adds	r7, #20
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	460b      	mov	r3, r1
 80010fa:	807b      	strh	r3, [r7, #2]
 80010fc:	4613      	mov	r3, r2
 80010fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001100:	787b      	ldrb	r3, [r7, #1]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d003      	beq.n	800110e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001106:	887a      	ldrh	r2, [r7, #2]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800110c:	e003      	b.n	8001116 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800110e:	887b      	ldrh	r3, [r7, #2]
 8001110:	041a      	lsls	r2, r3, #16
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	619a      	str	r2, [r3, #24]
}
 8001116:	bf00      	nop
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr

08001122 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001122:	b480      	push	{r7}
 8001124:	b085      	sub	sp, #20
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
 800112a:	460b      	mov	r3, r1
 800112c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	695b      	ldr	r3, [r3, #20]
 8001132:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001134:	887a      	ldrh	r2, [r7, #2]
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	4013      	ands	r3, r2
 800113a:	041a      	lsls	r2, r3, #16
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	43d9      	mvns	r1, r3
 8001140:	887b      	ldrh	r3, [r7, #2]
 8001142:	400b      	ands	r3, r1
 8001144:	431a      	orrs	r2, r3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	619a      	str	r2, [r3, #24]
}
 800114a:	bf00      	nop
 800114c:	3714      	adds	r7, #20
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
	...

08001158 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b086      	sub	sp, #24
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d101      	bne.n	800116a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e264      	b.n	8001634 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 0301 	and.w	r3, r3, #1
 8001172:	2b00      	cmp	r3, #0
 8001174:	d075      	beq.n	8001262 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001176:	4ba3      	ldr	r3, [pc, #652]	; (8001404 <HAL_RCC_OscConfig+0x2ac>)
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	f003 030c 	and.w	r3, r3, #12
 800117e:	2b04      	cmp	r3, #4
 8001180:	d00c      	beq.n	800119c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001182:	4ba0      	ldr	r3, [pc, #640]	; (8001404 <HAL_RCC_OscConfig+0x2ac>)
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800118a:	2b08      	cmp	r3, #8
 800118c:	d112      	bne.n	80011b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800118e:	4b9d      	ldr	r3, [pc, #628]	; (8001404 <HAL_RCC_OscConfig+0x2ac>)
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001196:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800119a:	d10b      	bne.n	80011b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800119c:	4b99      	ldr	r3, [pc, #612]	; (8001404 <HAL_RCC_OscConfig+0x2ac>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d05b      	beq.n	8001260 <HAL_RCC_OscConfig+0x108>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d157      	bne.n	8001260 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80011b0:	2301      	movs	r3, #1
 80011b2:	e23f      	b.n	8001634 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011bc:	d106      	bne.n	80011cc <HAL_RCC_OscConfig+0x74>
 80011be:	4b91      	ldr	r3, [pc, #580]	; (8001404 <HAL_RCC_OscConfig+0x2ac>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a90      	ldr	r2, [pc, #576]	; (8001404 <HAL_RCC_OscConfig+0x2ac>)
 80011c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011c8:	6013      	str	r3, [r2, #0]
 80011ca:	e01d      	b.n	8001208 <HAL_RCC_OscConfig+0xb0>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011d4:	d10c      	bne.n	80011f0 <HAL_RCC_OscConfig+0x98>
 80011d6:	4b8b      	ldr	r3, [pc, #556]	; (8001404 <HAL_RCC_OscConfig+0x2ac>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a8a      	ldr	r2, [pc, #552]	; (8001404 <HAL_RCC_OscConfig+0x2ac>)
 80011dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011e0:	6013      	str	r3, [r2, #0]
 80011e2:	4b88      	ldr	r3, [pc, #544]	; (8001404 <HAL_RCC_OscConfig+0x2ac>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a87      	ldr	r2, [pc, #540]	; (8001404 <HAL_RCC_OscConfig+0x2ac>)
 80011e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011ec:	6013      	str	r3, [r2, #0]
 80011ee:	e00b      	b.n	8001208 <HAL_RCC_OscConfig+0xb0>
 80011f0:	4b84      	ldr	r3, [pc, #528]	; (8001404 <HAL_RCC_OscConfig+0x2ac>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a83      	ldr	r2, [pc, #524]	; (8001404 <HAL_RCC_OscConfig+0x2ac>)
 80011f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011fa:	6013      	str	r3, [r2, #0]
 80011fc:	4b81      	ldr	r3, [pc, #516]	; (8001404 <HAL_RCC_OscConfig+0x2ac>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a80      	ldr	r2, [pc, #512]	; (8001404 <HAL_RCC_OscConfig+0x2ac>)
 8001202:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001206:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d013      	beq.n	8001238 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001210:	f7ff fccc 	bl	8000bac <HAL_GetTick>
 8001214:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001216:	e008      	b.n	800122a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001218:	f7ff fcc8 	bl	8000bac <HAL_GetTick>
 800121c:	4602      	mov	r2, r0
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	2b64      	cmp	r3, #100	; 0x64
 8001224:	d901      	bls.n	800122a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001226:	2303      	movs	r3, #3
 8001228:	e204      	b.n	8001634 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800122a:	4b76      	ldr	r3, [pc, #472]	; (8001404 <HAL_RCC_OscConfig+0x2ac>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d0f0      	beq.n	8001218 <HAL_RCC_OscConfig+0xc0>
 8001236:	e014      	b.n	8001262 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001238:	f7ff fcb8 	bl	8000bac <HAL_GetTick>
 800123c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800123e:	e008      	b.n	8001252 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001240:	f7ff fcb4 	bl	8000bac <HAL_GetTick>
 8001244:	4602      	mov	r2, r0
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	2b64      	cmp	r3, #100	; 0x64
 800124c:	d901      	bls.n	8001252 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800124e:	2303      	movs	r3, #3
 8001250:	e1f0      	b.n	8001634 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001252:	4b6c      	ldr	r3, [pc, #432]	; (8001404 <HAL_RCC_OscConfig+0x2ac>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d1f0      	bne.n	8001240 <HAL_RCC_OscConfig+0xe8>
 800125e:	e000      	b.n	8001262 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001260:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 0302 	and.w	r3, r3, #2
 800126a:	2b00      	cmp	r3, #0
 800126c:	d063      	beq.n	8001336 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800126e:	4b65      	ldr	r3, [pc, #404]	; (8001404 <HAL_RCC_OscConfig+0x2ac>)
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	f003 030c 	and.w	r3, r3, #12
 8001276:	2b00      	cmp	r3, #0
 8001278:	d00b      	beq.n	8001292 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800127a:	4b62      	ldr	r3, [pc, #392]	; (8001404 <HAL_RCC_OscConfig+0x2ac>)
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001282:	2b08      	cmp	r3, #8
 8001284:	d11c      	bne.n	80012c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001286:	4b5f      	ldr	r3, [pc, #380]	; (8001404 <HAL_RCC_OscConfig+0x2ac>)
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d116      	bne.n	80012c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001292:	4b5c      	ldr	r3, [pc, #368]	; (8001404 <HAL_RCC_OscConfig+0x2ac>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 0302 	and.w	r3, r3, #2
 800129a:	2b00      	cmp	r3, #0
 800129c:	d005      	beq.n	80012aa <HAL_RCC_OscConfig+0x152>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	68db      	ldr	r3, [r3, #12]
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d001      	beq.n	80012aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e1c4      	b.n	8001634 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012aa:	4b56      	ldr	r3, [pc, #344]	; (8001404 <HAL_RCC_OscConfig+0x2ac>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	691b      	ldr	r3, [r3, #16]
 80012b6:	00db      	lsls	r3, r3, #3
 80012b8:	4952      	ldr	r1, [pc, #328]	; (8001404 <HAL_RCC_OscConfig+0x2ac>)
 80012ba:	4313      	orrs	r3, r2
 80012bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012be:	e03a      	b.n	8001336 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d020      	beq.n	800130a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012c8:	4b4f      	ldr	r3, [pc, #316]	; (8001408 <HAL_RCC_OscConfig+0x2b0>)
 80012ca:	2201      	movs	r2, #1
 80012cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ce:	f7ff fc6d 	bl	8000bac <HAL_GetTick>
 80012d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012d4:	e008      	b.n	80012e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012d6:	f7ff fc69 	bl	8000bac <HAL_GetTick>
 80012da:	4602      	mov	r2, r0
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	d901      	bls.n	80012e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80012e4:	2303      	movs	r3, #3
 80012e6:	e1a5      	b.n	8001634 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012e8:	4b46      	ldr	r3, [pc, #280]	; (8001404 <HAL_RCC_OscConfig+0x2ac>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 0302 	and.w	r3, r3, #2
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d0f0      	beq.n	80012d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012f4:	4b43      	ldr	r3, [pc, #268]	; (8001404 <HAL_RCC_OscConfig+0x2ac>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	691b      	ldr	r3, [r3, #16]
 8001300:	00db      	lsls	r3, r3, #3
 8001302:	4940      	ldr	r1, [pc, #256]	; (8001404 <HAL_RCC_OscConfig+0x2ac>)
 8001304:	4313      	orrs	r3, r2
 8001306:	600b      	str	r3, [r1, #0]
 8001308:	e015      	b.n	8001336 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800130a:	4b3f      	ldr	r3, [pc, #252]	; (8001408 <HAL_RCC_OscConfig+0x2b0>)
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001310:	f7ff fc4c 	bl	8000bac <HAL_GetTick>
 8001314:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001316:	e008      	b.n	800132a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001318:	f7ff fc48 	bl	8000bac <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	2b02      	cmp	r3, #2
 8001324:	d901      	bls.n	800132a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	e184      	b.n	8001634 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800132a:	4b36      	ldr	r3, [pc, #216]	; (8001404 <HAL_RCC_OscConfig+0x2ac>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	2b00      	cmp	r3, #0
 8001334:	d1f0      	bne.n	8001318 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 0308 	and.w	r3, r3, #8
 800133e:	2b00      	cmp	r3, #0
 8001340:	d030      	beq.n	80013a4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	695b      	ldr	r3, [r3, #20]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d016      	beq.n	8001378 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800134a:	4b30      	ldr	r3, [pc, #192]	; (800140c <HAL_RCC_OscConfig+0x2b4>)
 800134c:	2201      	movs	r2, #1
 800134e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001350:	f7ff fc2c 	bl	8000bac <HAL_GetTick>
 8001354:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001356:	e008      	b.n	800136a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001358:	f7ff fc28 	bl	8000bac <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b02      	cmp	r3, #2
 8001364:	d901      	bls.n	800136a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e164      	b.n	8001634 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800136a:	4b26      	ldr	r3, [pc, #152]	; (8001404 <HAL_RCC_OscConfig+0x2ac>)
 800136c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	2b00      	cmp	r3, #0
 8001374:	d0f0      	beq.n	8001358 <HAL_RCC_OscConfig+0x200>
 8001376:	e015      	b.n	80013a4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001378:	4b24      	ldr	r3, [pc, #144]	; (800140c <HAL_RCC_OscConfig+0x2b4>)
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800137e:	f7ff fc15 	bl	8000bac <HAL_GetTick>
 8001382:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001384:	e008      	b.n	8001398 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001386:	f7ff fc11 	bl	8000bac <HAL_GetTick>
 800138a:	4602      	mov	r2, r0
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	2b02      	cmp	r3, #2
 8001392:	d901      	bls.n	8001398 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001394:	2303      	movs	r3, #3
 8001396:	e14d      	b.n	8001634 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001398:	4b1a      	ldr	r3, [pc, #104]	; (8001404 <HAL_RCC_OscConfig+0x2ac>)
 800139a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800139c:	f003 0302 	and.w	r3, r3, #2
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d1f0      	bne.n	8001386 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 0304 	and.w	r3, r3, #4
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	f000 80a0 	beq.w	80014f2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013b2:	2300      	movs	r3, #0
 80013b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013b6:	4b13      	ldr	r3, [pc, #76]	; (8001404 <HAL_RCC_OscConfig+0x2ac>)
 80013b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d10f      	bne.n	80013e2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	60bb      	str	r3, [r7, #8]
 80013c6:	4b0f      	ldr	r3, [pc, #60]	; (8001404 <HAL_RCC_OscConfig+0x2ac>)
 80013c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ca:	4a0e      	ldr	r2, [pc, #56]	; (8001404 <HAL_RCC_OscConfig+0x2ac>)
 80013cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013d0:	6413      	str	r3, [r2, #64]	; 0x40
 80013d2:	4b0c      	ldr	r3, [pc, #48]	; (8001404 <HAL_RCC_OscConfig+0x2ac>)
 80013d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013da:	60bb      	str	r3, [r7, #8]
 80013dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013de:	2301      	movs	r3, #1
 80013e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013e2:	4b0b      	ldr	r3, [pc, #44]	; (8001410 <HAL_RCC_OscConfig+0x2b8>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d121      	bne.n	8001432 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013ee:	4b08      	ldr	r3, [pc, #32]	; (8001410 <HAL_RCC_OscConfig+0x2b8>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a07      	ldr	r2, [pc, #28]	; (8001410 <HAL_RCC_OscConfig+0x2b8>)
 80013f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013fa:	f7ff fbd7 	bl	8000bac <HAL_GetTick>
 80013fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001400:	e011      	b.n	8001426 <HAL_RCC_OscConfig+0x2ce>
 8001402:	bf00      	nop
 8001404:	40023800 	.word	0x40023800
 8001408:	42470000 	.word	0x42470000
 800140c:	42470e80 	.word	0x42470e80
 8001410:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001414:	f7ff fbca 	bl	8000bac <HAL_GetTick>
 8001418:	4602      	mov	r2, r0
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	2b02      	cmp	r3, #2
 8001420:	d901      	bls.n	8001426 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001422:	2303      	movs	r3, #3
 8001424:	e106      	b.n	8001634 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001426:	4b85      	ldr	r3, [pc, #532]	; (800163c <HAL_RCC_OscConfig+0x4e4>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800142e:	2b00      	cmp	r3, #0
 8001430:	d0f0      	beq.n	8001414 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	2b01      	cmp	r3, #1
 8001438:	d106      	bne.n	8001448 <HAL_RCC_OscConfig+0x2f0>
 800143a:	4b81      	ldr	r3, [pc, #516]	; (8001640 <HAL_RCC_OscConfig+0x4e8>)
 800143c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800143e:	4a80      	ldr	r2, [pc, #512]	; (8001640 <HAL_RCC_OscConfig+0x4e8>)
 8001440:	f043 0301 	orr.w	r3, r3, #1
 8001444:	6713      	str	r3, [r2, #112]	; 0x70
 8001446:	e01c      	b.n	8001482 <HAL_RCC_OscConfig+0x32a>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	2b05      	cmp	r3, #5
 800144e:	d10c      	bne.n	800146a <HAL_RCC_OscConfig+0x312>
 8001450:	4b7b      	ldr	r3, [pc, #492]	; (8001640 <HAL_RCC_OscConfig+0x4e8>)
 8001452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001454:	4a7a      	ldr	r2, [pc, #488]	; (8001640 <HAL_RCC_OscConfig+0x4e8>)
 8001456:	f043 0304 	orr.w	r3, r3, #4
 800145a:	6713      	str	r3, [r2, #112]	; 0x70
 800145c:	4b78      	ldr	r3, [pc, #480]	; (8001640 <HAL_RCC_OscConfig+0x4e8>)
 800145e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001460:	4a77      	ldr	r2, [pc, #476]	; (8001640 <HAL_RCC_OscConfig+0x4e8>)
 8001462:	f043 0301 	orr.w	r3, r3, #1
 8001466:	6713      	str	r3, [r2, #112]	; 0x70
 8001468:	e00b      	b.n	8001482 <HAL_RCC_OscConfig+0x32a>
 800146a:	4b75      	ldr	r3, [pc, #468]	; (8001640 <HAL_RCC_OscConfig+0x4e8>)
 800146c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800146e:	4a74      	ldr	r2, [pc, #464]	; (8001640 <HAL_RCC_OscConfig+0x4e8>)
 8001470:	f023 0301 	bic.w	r3, r3, #1
 8001474:	6713      	str	r3, [r2, #112]	; 0x70
 8001476:	4b72      	ldr	r3, [pc, #456]	; (8001640 <HAL_RCC_OscConfig+0x4e8>)
 8001478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800147a:	4a71      	ldr	r2, [pc, #452]	; (8001640 <HAL_RCC_OscConfig+0x4e8>)
 800147c:	f023 0304 	bic.w	r3, r3, #4
 8001480:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d015      	beq.n	80014b6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800148a:	f7ff fb8f 	bl	8000bac <HAL_GetTick>
 800148e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001490:	e00a      	b.n	80014a8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001492:	f7ff fb8b 	bl	8000bac <HAL_GetTick>
 8001496:	4602      	mov	r2, r0
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	f241 3288 	movw	r2, #5000	; 0x1388
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d901      	bls.n	80014a8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80014a4:	2303      	movs	r3, #3
 80014a6:	e0c5      	b.n	8001634 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014a8:	4b65      	ldr	r3, [pc, #404]	; (8001640 <HAL_RCC_OscConfig+0x4e8>)
 80014aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ac:	f003 0302 	and.w	r3, r3, #2
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d0ee      	beq.n	8001492 <HAL_RCC_OscConfig+0x33a>
 80014b4:	e014      	b.n	80014e0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014b6:	f7ff fb79 	bl	8000bac <HAL_GetTick>
 80014ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014bc:	e00a      	b.n	80014d4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014be:	f7ff fb75 	bl	8000bac <HAL_GetTick>
 80014c2:	4602      	mov	r2, r0
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d901      	bls.n	80014d4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e0af      	b.n	8001634 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014d4:	4b5a      	ldr	r3, [pc, #360]	; (8001640 <HAL_RCC_OscConfig+0x4e8>)
 80014d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014d8:	f003 0302 	and.w	r3, r3, #2
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d1ee      	bne.n	80014be <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80014e0:	7dfb      	ldrb	r3, [r7, #23]
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d105      	bne.n	80014f2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014e6:	4b56      	ldr	r3, [pc, #344]	; (8001640 <HAL_RCC_OscConfig+0x4e8>)
 80014e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ea:	4a55      	ldr	r2, [pc, #340]	; (8001640 <HAL_RCC_OscConfig+0x4e8>)
 80014ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014f0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	699b      	ldr	r3, [r3, #24]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	f000 809b 	beq.w	8001632 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80014fc:	4b50      	ldr	r3, [pc, #320]	; (8001640 <HAL_RCC_OscConfig+0x4e8>)
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	f003 030c 	and.w	r3, r3, #12
 8001504:	2b08      	cmp	r3, #8
 8001506:	d05c      	beq.n	80015c2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	2b02      	cmp	r3, #2
 800150e:	d141      	bne.n	8001594 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001510:	4b4c      	ldr	r3, [pc, #304]	; (8001644 <HAL_RCC_OscConfig+0x4ec>)
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001516:	f7ff fb49 	bl	8000bac <HAL_GetTick>
 800151a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800151c:	e008      	b.n	8001530 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800151e:	f7ff fb45 	bl	8000bac <HAL_GetTick>
 8001522:	4602      	mov	r2, r0
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	2b02      	cmp	r3, #2
 800152a:	d901      	bls.n	8001530 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800152c:	2303      	movs	r3, #3
 800152e:	e081      	b.n	8001634 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001530:	4b43      	ldr	r3, [pc, #268]	; (8001640 <HAL_RCC_OscConfig+0x4e8>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001538:	2b00      	cmp	r3, #0
 800153a:	d1f0      	bne.n	800151e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	69da      	ldr	r2, [r3, #28]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6a1b      	ldr	r3, [r3, #32]
 8001544:	431a      	orrs	r2, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800154a:	019b      	lsls	r3, r3, #6
 800154c:	431a      	orrs	r2, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001552:	085b      	lsrs	r3, r3, #1
 8001554:	3b01      	subs	r3, #1
 8001556:	041b      	lsls	r3, r3, #16
 8001558:	431a      	orrs	r2, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800155e:	061b      	lsls	r3, r3, #24
 8001560:	4937      	ldr	r1, [pc, #220]	; (8001640 <HAL_RCC_OscConfig+0x4e8>)
 8001562:	4313      	orrs	r3, r2
 8001564:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001566:	4b37      	ldr	r3, [pc, #220]	; (8001644 <HAL_RCC_OscConfig+0x4ec>)
 8001568:	2201      	movs	r2, #1
 800156a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800156c:	f7ff fb1e 	bl	8000bac <HAL_GetTick>
 8001570:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001572:	e008      	b.n	8001586 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001574:	f7ff fb1a 	bl	8000bac <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b02      	cmp	r3, #2
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e056      	b.n	8001634 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001586:	4b2e      	ldr	r3, [pc, #184]	; (8001640 <HAL_RCC_OscConfig+0x4e8>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d0f0      	beq.n	8001574 <HAL_RCC_OscConfig+0x41c>
 8001592:	e04e      	b.n	8001632 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001594:	4b2b      	ldr	r3, [pc, #172]	; (8001644 <HAL_RCC_OscConfig+0x4ec>)
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800159a:	f7ff fb07 	bl	8000bac <HAL_GetTick>
 800159e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015a0:	e008      	b.n	80015b4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015a2:	f7ff fb03 	bl	8000bac <HAL_GetTick>
 80015a6:	4602      	mov	r2, r0
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d901      	bls.n	80015b4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	e03f      	b.n	8001634 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015b4:	4b22      	ldr	r3, [pc, #136]	; (8001640 <HAL_RCC_OscConfig+0x4e8>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1f0      	bne.n	80015a2 <HAL_RCC_OscConfig+0x44a>
 80015c0:	e037      	b.n	8001632 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	699b      	ldr	r3, [r3, #24]
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d101      	bne.n	80015ce <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e032      	b.n	8001634 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80015ce:	4b1c      	ldr	r3, [pc, #112]	; (8001640 <HAL_RCC_OscConfig+0x4e8>)
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d028      	beq.n	800162e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d121      	bne.n	800162e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d11a      	bne.n	800162e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015f8:	68fa      	ldr	r2, [r7, #12]
 80015fa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80015fe:	4013      	ands	r3, r2
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001604:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001606:	4293      	cmp	r3, r2
 8001608:	d111      	bne.n	800162e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001614:	085b      	lsrs	r3, r3, #1
 8001616:	3b01      	subs	r3, #1
 8001618:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800161a:	429a      	cmp	r2, r3
 800161c:	d107      	bne.n	800162e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001628:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800162a:	429a      	cmp	r2, r3
 800162c:	d001      	beq.n	8001632 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e000      	b.n	8001634 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001632:	2300      	movs	r3, #0
}
 8001634:	4618      	mov	r0, r3
 8001636:	3718      	adds	r7, #24
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	40007000 	.word	0x40007000
 8001640:	40023800 	.word	0x40023800
 8001644:	42470060 	.word	0x42470060

08001648 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d101      	bne.n	800165c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e0cc      	b.n	80017f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800165c:	4b68      	ldr	r3, [pc, #416]	; (8001800 <HAL_RCC_ClockConfig+0x1b8>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0307 	and.w	r3, r3, #7
 8001664:	683a      	ldr	r2, [r7, #0]
 8001666:	429a      	cmp	r2, r3
 8001668:	d90c      	bls.n	8001684 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800166a:	4b65      	ldr	r3, [pc, #404]	; (8001800 <HAL_RCC_ClockConfig+0x1b8>)
 800166c:	683a      	ldr	r2, [r7, #0]
 800166e:	b2d2      	uxtb	r2, r2
 8001670:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001672:	4b63      	ldr	r3, [pc, #396]	; (8001800 <HAL_RCC_ClockConfig+0x1b8>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0307 	and.w	r3, r3, #7
 800167a:	683a      	ldr	r2, [r7, #0]
 800167c:	429a      	cmp	r2, r3
 800167e:	d001      	beq.n	8001684 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e0b8      	b.n	80017f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 0302 	and.w	r3, r3, #2
 800168c:	2b00      	cmp	r3, #0
 800168e:	d020      	beq.n	80016d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0304 	and.w	r3, r3, #4
 8001698:	2b00      	cmp	r3, #0
 800169a:	d005      	beq.n	80016a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800169c:	4b59      	ldr	r3, [pc, #356]	; (8001804 <HAL_RCC_ClockConfig+0x1bc>)
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	4a58      	ldr	r2, [pc, #352]	; (8001804 <HAL_RCC_ClockConfig+0x1bc>)
 80016a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80016a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0308 	and.w	r3, r3, #8
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d005      	beq.n	80016c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016b4:	4b53      	ldr	r3, [pc, #332]	; (8001804 <HAL_RCC_ClockConfig+0x1bc>)
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	4a52      	ldr	r2, [pc, #328]	; (8001804 <HAL_RCC_ClockConfig+0x1bc>)
 80016ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016c0:	4b50      	ldr	r3, [pc, #320]	; (8001804 <HAL_RCC_ClockConfig+0x1bc>)
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	494d      	ldr	r1, [pc, #308]	; (8001804 <HAL_RCC_ClockConfig+0x1bc>)
 80016ce:	4313      	orrs	r3, r2
 80016d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d044      	beq.n	8001768 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d107      	bne.n	80016f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016e6:	4b47      	ldr	r3, [pc, #284]	; (8001804 <HAL_RCC_ClockConfig+0x1bc>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d119      	bne.n	8001726 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e07f      	b.n	80017f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d003      	beq.n	8001706 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001702:	2b03      	cmp	r3, #3
 8001704:	d107      	bne.n	8001716 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001706:	4b3f      	ldr	r3, [pc, #252]	; (8001804 <HAL_RCC_ClockConfig+0x1bc>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d109      	bne.n	8001726 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e06f      	b.n	80017f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001716:	4b3b      	ldr	r3, [pc, #236]	; (8001804 <HAL_RCC_ClockConfig+0x1bc>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	2b00      	cmp	r3, #0
 8001720:	d101      	bne.n	8001726 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e067      	b.n	80017f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001726:	4b37      	ldr	r3, [pc, #220]	; (8001804 <HAL_RCC_ClockConfig+0x1bc>)
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	f023 0203 	bic.w	r2, r3, #3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	4934      	ldr	r1, [pc, #208]	; (8001804 <HAL_RCC_ClockConfig+0x1bc>)
 8001734:	4313      	orrs	r3, r2
 8001736:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001738:	f7ff fa38 	bl	8000bac <HAL_GetTick>
 800173c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800173e:	e00a      	b.n	8001756 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001740:	f7ff fa34 	bl	8000bac <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	f241 3288 	movw	r2, #5000	; 0x1388
 800174e:	4293      	cmp	r3, r2
 8001750:	d901      	bls.n	8001756 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e04f      	b.n	80017f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001756:	4b2b      	ldr	r3, [pc, #172]	; (8001804 <HAL_RCC_ClockConfig+0x1bc>)
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	f003 020c 	and.w	r2, r3, #12
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	429a      	cmp	r2, r3
 8001766:	d1eb      	bne.n	8001740 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001768:	4b25      	ldr	r3, [pc, #148]	; (8001800 <HAL_RCC_ClockConfig+0x1b8>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0307 	and.w	r3, r3, #7
 8001770:	683a      	ldr	r2, [r7, #0]
 8001772:	429a      	cmp	r2, r3
 8001774:	d20c      	bcs.n	8001790 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001776:	4b22      	ldr	r3, [pc, #136]	; (8001800 <HAL_RCC_ClockConfig+0x1b8>)
 8001778:	683a      	ldr	r2, [r7, #0]
 800177a:	b2d2      	uxtb	r2, r2
 800177c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800177e:	4b20      	ldr	r3, [pc, #128]	; (8001800 <HAL_RCC_ClockConfig+0x1b8>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0307 	and.w	r3, r3, #7
 8001786:	683a      	ldr	r2, [r7, #0]
 8001788:	429a      	cmp	r2, r3
 800178a:	d001      	beq.n	8001790 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e032      	b.n	80017f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0304 	and.w	r3, r3, #4
 8001798:	2b00      	cmp	r3, #0
 800179a:	d008      	beq.n	80017ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800179c:	4b19      	ldr	r3, [pc, #100]	; (8001804 <HAL_RCC_ClockConfig+0x1bc>)
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	4916      	ldr	r1, [pc, #88]	; (8001804 <HAL_RCC_ClockConfig+0x1bc>)
 80017aa:	4313      	orrs	r3, r2
 80017ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0308 	and.w	r3, r3, #8
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d009      	beq.n	80017ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017ba:	4b12      	ldr	r3, [pc, #72]	; (8001804 <HAL_RCC_ClockConfig+0x1bc>)
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	691b      	ldr	r3, [r3, #16]
 80017c6:	00db      	lsls	r3, r3, #3
 80017c8:	490e      	ldr	r1, [pc, #56]	; (8001804 <HAL_RCC_ClockConfig+0x1bc>)
 80017ca:	4313      	orrs	r3, r2
 80017cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017ce:	f000 f821 	bl	8001814 <HAL_RCC_GetSysClockFreq>
 80017d2:	4602      	mov	r2, r0
 80017d4:	4b0b      	ldr	r3, [pc, #44]	; (8001804 <HAL_RCC_ClockConfig+0x1bc>)
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	091b      	lsrs	r3, r3, #4
 80017da:	f003 030f 	and.w	r3, r3, #15
 80017de:	490a      	ldr	r1, [pc, #40]	; (8001808 <HAL_RCC_ClockConfig+0x1c0>)
 80017e0:	5ccb      	ldrb	r3, [r1, r3]
 80017e2:	fa22 f303 	lsr.w	r3, r2, r3
 80017e6:	4a09      	ldr	r2, [pc, #36]	; (800180c <HAL_RCC_ClockConfig+0x1c4>)
 80017e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80017ea:	4b09      	ldr	r3, [pc, #36]	; (8001810 <HAL_RCC_ClockConfig+0x1c8>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7ff f8f2 	bl	80009d8 <HAL_InitTick>

  return HAL_OK;
 80017f4:	2300      	movs	r3, #0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3710      	adds	r7, #16
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	40023c00 	.word	0x40023c00
 8001804:	40023800 	.word	0x40023800
 8001808:	08004eb4 	.word	0x08004eb4
 800180c:	20000000 	.word	0x20000000
 8001810:	20000004 	.word	0x20000004

08001814 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001814:	b5b0      	push	{r4, r5, r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800181a:	2100      	movs	r1, #0
 800181c:	6079      	str	r1, [r7, #4]
 800181e:	2100      	movs	r1, #0
 8001820:	60f9      	str	r1, [r7, #12]
 8001822:	2100      	movs	r1, #0
 8001824:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001826:	2100      	movs	r1, #0
 8001828:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800182a:	4952      	ldr	r1, [pc, #328]	; (8001974 <HAL_RCC_GetSysClockFreq+0x160>)
 800182c:	6889      	ldr	r1, [r1, #8]
 800182e:	f001 010c 	and.w	r1, r1, #12
 8001832:	2908      	cmp	r1, #8
 8001834:	d00d      	beq.n	8001852 <HAL_RCC_GetSysClockFreq+0x3e>
 8001836:	2908      	cmp	r1, #8
 8001838:	f200 8094 	bhi.w	8001964 <HAL_RCC_GetSysClockFreq+0x150>
 800183c:	2900      	cmp	r1, #0
 800183e:	d002      	beq.n	8001846 <HAL_RCC_GetSysClockFreq+0x32>
 8001840:	2904      	cmp	r1, #4
 8001842:	d003      	beq.n	800184c <HAL_RCC_GetSysClockFreq+0x38>
 8001844:	e08e      	b.n	8001964 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001846:	4b4c      	ldr	r3, [pc, #304]	; (8001978 <HAL_RCC_GetSysClockFreq+0x164>)
 8001848:	60bb      	str	r3, [r7, #8]
       break;
 800184a:	e08e      	b.n	800196a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800184c:	4b4b      	ldr	r3, [pc, #300]	; (800197c <HAL_RCC_GetSysClockFreq+0x168>)
 800184e:	60bb      	str	r3, [r7, #8]
      break;
 8001850:	e08b      	b.n	800196a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001852:	4948      	ldr	r1, [pc, #288]	; (8001974 <HAL_RCC_GetSysClockFreq+0x160>)
 8001854:	6849      	ldr	r1, [r1, #4]
 8001856:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800185a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800185c:	4945      	ldr	r1, [pc, #276]	; (8001974 <HAL_RCC_GetSysClockFreq+0x160>)
 800185e:	6849      	ldr	r1, [r1, #4]
 8001860:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001864:	2900      	cmp	r1, #0
 8001866:	d024      	beq.n	80018b2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001868:	4942      	ldr	r1, [pc, #264]	; (8001974 <HAL_RCC_GetSysClockFreq+0x160>)
 800186a:	6849      	ldr	r1, [r1, #4]
 800186c:	0989      	lsrs	r1, r1, #6
 800186e:	4608      	mov	r0, r1
 8001870:	f04f 0100 	mov.w	r1, #0
 8001874:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001878:	f04f 0500 	mov.w	r5, #0
 800187c:	ea00 0204 	and.w	r2, r0, r4
 8001880:	ea01 0305 	and.w	r3, r1, r5
 8001884:	493d      	ldr	r1, [pc, #244]	; (800197c <HAL_RCC_GetSysClockFreq+0x168>)
 8001886:	fb01 f003 	mul.w	r0, r1, r3
 800188a:	2100      	movs	r1, #0
 800188c:	fb01 f102 	mul.w	r1, r1, r2
 8001890:	1844      	adds	r4, r0, r1
 8001892:	493a      	ldr	r1, [pc, #232]	; (800197c <HAL_RCC_GetSysClockFreq+0x168>)
 8001894:	fba2 0101 	umull	r0, r1, r2, r1
 8001898:	1863      	adds	r3, r4, r1
 800189a:	4619      	mov	r1, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	461a      	mov	r2, r3
 80018a0:	f04f 0300 	mov.w	r3, #0
 80018a4:	f7fe fc94 	bl	80001d0 <__aeabi_uldivmod>
 80018a8:	4602      	mov	r2, r0
 80018aa:	460b      	mov	r3, r1
 80018ac:	4613      	mov	r3, r2
 80018ae:	60fb      	str	r3, [r7, #12]
 80018b0:	e04a      	b.n	8001948 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018b2:	4b30      	ldr	r3, [pc, #192]	; (8001974 <HAL_RCC_GetSysClockFreq+0x160>)
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	099b      	lsrs	r3, r3, #6
 80018b8:	461a      	mov	r2, r3
 80018ba:	f04f 0300 	mov.w	r3, #0
 80018be:	f240 10ff 	movw	r0, #511	; 0x1ff
 80018c2:	f04f 0100 	mov.w	r1, #0
 80018c6:	ea02 0400 	and.w	r4, r2, r0
 80018ca:	ea03 0501 	and.w	r5, r3, r1
 80018ce:	4620      	mov	r0, r4
 80018d0:	4629      	mov	r1, r5
 80018d2:	f04f 0200 	mov.w	r2, #0
 80018d6:	f04f 0300 	mov.w	r3, #0
 80018da:	014b      	lsls	r3, r1, #5
 80018dc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80018e0:	0142      	lsls	r2, r0, #5
 80018e2:	4610      	mov	r0, r2
 80018e4:	4619      	mov	r1, r3
 80018e6:	1b00      	subs	r0, r0, r4
 80018e8:	eb61 0105 	sbc.w	r1, r1, r5
 80018ec:	f04f 0200 	mov.w	r2, #0
 80018f0:	f04f 0300 	mov.w	r3, #0
 80018f4:	018b      	lsls	r3, r1, #6
 80018f6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80018fa:	0182      	lsls	r2, r0, #6
 80018fc:	1a12      	subs	r2, r2, r0
 80018fe:	eb63 0301 	sbc.w	r3, r3, r1
 8001902:	f04f 0000 	mov.w	r0, #0
 8001906:	f04f 0100 	mov.w	r1, #0
 800190a:	00d9      	lsls	r1, r3, #3
 800190c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001910:	00d0      	lsls	r0, r2, #3
 8001912:	4602      	mov	r2, r0
 8001914:	460b      	mov	r3, r1
 8001916:	1912      	adds	r2, r2, r4
 8001918:	eb45 0303 	adc.w	r3, r5, r3
 800191c:	f04f 0000 	mov.w	r0, #0
 8001920:	f04f 0100 	mov.w	r1, #0
 8001924:	0299      	lsls	r1, r3, #10
 8001926:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800192a:	0290      	lsls	r0, r2, #10
 800192c:	4602      	mov	r2, r0
 800192e:	460b      	mov	r3, r1
 8001930:	4610      	mov	r0, r2
 8001932:	4619      	mov	r1, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	461a      	mov	r2, r3
 8001938:	f04f 0300 	mov.w	r3, #0
 800193c:	f7fe fc48 	bl	80001d0 <__aeabi_uldivmod>
 8001940:	4602      	mov	r2, r0
 8001942:	460b      	mov	r3, r1
 8001944:	4613      	mov	r3, r2
 8001946:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001948:	4b0a      	ldr	r3, [pc, #40]	; (8001974 <HAL_RCC_GetSysClockFreq+0x160>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	0c1b      	lsrs	r3, r3, #16
 800194e:	f003 0303 	and.w	r3, r3, #3
 8001952:	3301      	adds	r3, #1
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001958:	68fa      	ldr	r2, [r7, #12]
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001960:	60bb      	str	r3, [r7, #8]
      break;
 8001962:	e002      	b.n	800196a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001964:	4b04      	ldr	r3, [pc, #16]	; (8001978 <HAL_RCC_GetSysClockFreq+0x164>)
 8001966:	60bb      	str	r3, [r7, #8]
      break;
 8001968:	bf00      	nop
    }
  }
  return sysclockfreq;
 800196a:	68bb      	ldr	r3, [r7, #8]
}
 800196c:	4618      	mov	r0, r3
 800196e:	3710      	adds	r7, #16
 8001970:	46bd      	mov	sp, r7
 8001972:	bdb0      	pop	{r4, r5, r7, pc}
 8001974:	40023800 	.word	0x40023800
 8001978:	00f42400 	.word	0x00f42400
 800197c:	017d7840 	.word	0x017d7840

08001980 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001984:	4b03      	ldr	r3, [pc, #12]	; (8001994 <HAL_RCC_GetHCLKFreq+0x14>)
 8001986:	681b      	ldr	r3, [r3, #0]
}
 8001988:	4618      	mov	r0, r3
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	20000000 	.word	0x20000000

08001998 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800199c:	f7ff fff0 	bl	8001980 <HAL_RCC_GetHCLKFreq>
 80019a0:	4602      	mov	r2, r0
 80019a2:	4b05      	ldr	r3, [pc, #20]	; (80019b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	0a9b      	lsrs	r3, r3, #10
 80019a8:	f003 0307 	and.w	r3, r3, #7
 80019ac:	4903      	ldr	r1, [pc, #12]	; (80019bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80019ae:	5ccb      	ldrb	r3, [r1, r3]
 80019b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	40023800 	.word	0x40023800
 80019bc:	08004ec4 	.word	0x08004ec4

080019c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80019c4:	f7ff ffdc 	bl	8001980 <HAL_RCC_GetHCLKFreq>
 80019c8:	4602      	mov	r2, r0
 80019ca:	4b05      	ldr	r3, [pc, #20]	; (80019e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	0b5b      	lsrs	r3, r3, #13
 80019d0:	f003 0307 	and.w	r3, r3, #7
 80019d4:	4903      	ldr	r1, [pc, #12]	; (80019e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019d6:	5ccb      	ldrb	r3, [r1, r3]
 80019d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019dc:	4618      	mov	r0, r3
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	40023800 	.word	0x40023800
 80019e4:	08004ec4 	.word	0x08004ec4

080019e8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	220f      	movs	r2, #15
 80019f6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80019f8:	4b12      	ldr	r3, [pc, #72]	; (8001a44 <HAL_RCC_GetClockConfig+0x5c>)
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	f003 0203 	and.w	r2, r3, #3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a04:	4b0f      	ldr	r3, [pc, #60]	; (8001a44 <HAL_RCC_GetClockConfig+0x5c>)
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a10:	4b0c      	ldr	r3, [pc, #48]	; (8001a44 <HAL_RCC_GetClockConfig+0x5c>)
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001a1c:	4b09      	ldr	r3, [pc, #36]	; (8001a44 <HAL_RCC_GetClockConfig+0x5c>)
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	08db      	lsrs	r3, r3, #3
 8001a22:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a2a:	4b07      	ldr	r3, [pc, #28]	; (8001a48 <HAL_RCC_GetClockConfig+0x60>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0207 	and.w	r2, r3, #7
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	601a      	str	r2, [r3, #0]
}
 8001a36:	bf00      	nop
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	40023800 	.word	0x40023800
 8001a48:	40023c00 	.word	0x40023c00

08001a4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d101      	bne.n	8001a5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e041      	b.n	8001ae2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d106      	bne.n	8001a78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f000 f839 	bl	8001aea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2202      	movs	r2, #2
 8001a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	3304      	adds	r3, #4
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4610      	mov	r0, r2
 8001a8c:	f000 f9d8 	bl	8001e40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2201      	movs	r2, #1
 8001a94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2201      	movs	r2, #1
 8001abc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2201      	movs	r2, #1
 8001acc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2201      	movs	r2, #1
 8001adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001aea:	b480      	push	{r7}
 8001aec:	b083      	sub	sp, #12
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001af2:	bf00      	nop
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
	...

08001b00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b085      	sub	sp, #20
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d001      	beq.n	8001b18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e04e      	b.n	8001bb6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2202      	movs	r2, #2
 8001b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	68da      	ldr	r2, [r3, #12]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f042 0201 	orr.w	r2, r2, #1
 8001b2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a23      	ldr	r2, [pc, #140]	; (8001bc4 <HAL_TIM_Base_Start_IT+0xc4>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d022      	beq.n	8001b80 <HAL_TIM_Base_Start_IT+0x80>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b42:	d01d      	beq.n	8001b80 <HAL_TIM_Base_Start_IT+0x80>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a1f      	ldr	r2, [pc, #124]	; (8001bc8 <HAL_TIM_Base_Start_IT+0xc8>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d018      	beq.n	8001b80 <HAL_TIM_Base_Start_IT+0x80>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a1e      	ldr	r2, [pc, #120]	; (8001bcc <HAL_TIM_Base_Start_IT+0xcc>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d013      	beq.n	8001b80 <HAL_TIM_Base_Start_IT+0x80>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a1c      	ldr	r2, [pc, #112]	; (8001bd0 <HAL_TIM_Base_Start_IT+0xd0>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d00e      	beq.n	8001b80 <HAL_TIM_Base_Start_IT+0x80>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a1b      	ldr	r2, [pc, #108]	; (8001bd4 <HAL_TIM_Base_Start_IT+0xd4>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d009      	beq.n	8001b80 <HAL_TIM_Base_Start_IT+0x80>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a19      	ldr	r2, [pc, #100]	; (8001bd8 <HAL_TIM_Base_Start_IT+0xd8>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d004      	beq.n	8001b80 <HAL_TIM_Base_Start_IT+0x80>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a18      	ldr	r2, [pc, #96]	; (8001bdc <HAL_TIM_Base_Start_IT+0xdc>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d111      	bne.n	8001ba4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f003 0307 	and.w	r3, r3, #7
 8001b8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2b06      	cmp	r3, #6
 8001b90:	d010      	beq.n	8001bb4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f042 0201 	orr.w	r2, r2, #1
 8001ba0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ba2:	e007      	b.n	8001bb4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f042 0201 	orr.w	r2, r2, #1
 8001bb2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3714      	adds	r7, #20
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	40010000 	.word	0x40010000
 8001bc8:	40000400 	.word	0x40000400
 8001bcc:	40000800 	.word	0x40000800
 8001bd0:	40000c00 	.word	0x40000c00
 8001bd4:	40010400 	.word	0x40010400
 8001bd8:	40014000 	.word	0x40014000
 8001bdc:	40001800 	.word	0x40001800

08001be0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	691b      	ldr	r3, [r3, #16]
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d122      	bne.n	8001c3c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	f003 0302 	and.w	r3, r3, #2
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d11b      	bne.n	8001c3c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f06f 0202 	mvn.w	r2, #2
 8001c0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2201      	movs	r2, #1
 8001c12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	699b      	ldr	r3, [r3, #24]
 8001c1a:	f003 0303 	and.w	r3, r3, #3
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d003      	beq.n	8001c2a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f000 f8ee 	bl	8001e04 <HAL_TIM_IC_CaptureCallback>
 8001c28:	e005      	b.n	8001c36 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f000 f8e0 	bl	8001df0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f000 f8f1 	bl	8001e18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	691b      	ldr	r3, [r3, #16]
 8001c42:	f003 0304 	and.w	r3, r3, #4
 8001c46:	2b04      	cmp	r3, #4
 8001c48:	d122      	bne.n	8001c90 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	f003 0304 	and.w	r3, r3, #4
 8001c54:	2b04      	cmp	r3, #4
 8001c56:	d11b      	bne.n	8001c90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f06f 0204 	mvn.w	r2, #4
 8001c60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2202      	movs	r2, #2
 8001c66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	699b      	ldr	r3, [r3, #24]
 8001c6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d003      	beq.n	8001c7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f000 f8c4 	bl	8001e04 <HAL_TIM_IC_CaptureCallback>
 8001c7c:	e005      	b.n	8001c8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f000 f8b6 	bl	8001df0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f000 f8c7 	bl	8001e18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	691b      	ldr	r3, [r3, #16]
 8001c96:	f003 0308 	and.w	r3, r3, #8
 8001c9a:	2b08      	cmp	r3, #8
 8001c9c:	d122      	bne.n	8001ce4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	f003 0308 	and.w	r3, r3, #8
 8001ca8:	2b08      	cmp	r3, #8
 8001caa:	d11b      	bne.n	8001ce4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f06f 0208 	mvn.w	r2, #8
 8001cb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2204      	movs	r2, #4
 8001cba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	69db      	ldr	r3, [r3, #28]
 8001cc2:	f003 0303 	and.w	r3, r3, #3
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d003      	beq.n	8001cd2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f000 f89a 	bl	8001e04 <HAL_TIM_IC_CaptureCallback>
 8001cd0:	e005      	b.n	8001cde <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f000 f88c 	bl	8001df0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f000 f89d 	bl	8001e18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	691b      	ldr	r3, [r3, #16]
 8001cea:	f003 0310 	and.w	r3, r3, #16
 8001cee:	2b10      	cmp	r3, #16
 8001cf0:	d122      	bne.n	8001d38 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	f003 0310 	and.w	r3, r3, #16
 8001cfc:	2b10      	cmp	r3, #16
 8001cfe:	d11b      	bne.n	8001d38 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f06f 0210 	mvn.w	r2, #16
 8001d08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2208      	movs	r2, #8
 8001d0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	69db      	ldr	r3, [r3, #28]
 8001d16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d003      	beq.n	8001d26 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f000 f870 	bl	8001e04 <HAL_TIM_IC_CaptureCallback>
 8001d24:	e005      	b.n	8001d32 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f000 f862 	bl	8001df0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f000 f873 	bl	8001e18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	f003 0301 	and.w	r3, r3, #1
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d10e      	bne.n	8001d64 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	f003 0301 	and.w	r3, r3, #1
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d107      	bne.n	8001d64 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f06f 0201 	mvn.w	r2, #1
 8001d5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f7fe fdae 	bl	80008c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	691b      	ldr	r3, [r3, #16]
 8001d6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d6e:	2b80      	cmp	r3, #128	; 0x80
 8001d70:	d10e      	bne.n	8001d90 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d7c:	2b80      	cmp	r3, #128	; 0x80
 8001d7e:	d107      	bne.n	8001d90 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001d88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 f902 	bl	8001f94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	691b      	ldr	r3, [r3, #16]
 8001d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d9a:	2b40      	cmp	r3, #64	; 0x40
 8001d9c:	d10e      	bne.n	8001dbc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001da8:	2b40      	cmp	r3, #64	; 0x40
 8001daa:	d107      	bne.n	8001dbc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001db4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 f838 	bl	8001e2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	691b      	ldr	r3, [r3, #16]
 8001dc2:	f003 0320 	and.w	r3, r3, #32
 8001dc6:	2b20      	cmp	r3, #32
 8001dc8:	d10e      	bne.n	8001de8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	f003 0320 	and.w	r3, r3, #32
 8001dd4:	2b20      	cmp	r3, #32
 8001dd6:	d107      	bne.n	8001de8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f06f 0220 	mvn.w	r2, #32
 8001de0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f000 f8cc 	bl	8001f80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001de8:	bf00      	nop
 8001dea:	3708      	adds	r7, #8
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001df8:	bf00      	nop
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e0c:	bf00      	nop
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e20:	bf00      	nop
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e34:	bf00      	nop
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	4a40      	ldr	r2, [pc, #256]	; (8001f54 <TIM_Base_SetConfig+0x114>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d013      	beq.n	8001e80 <TIM_Base_SetConfig+0x40>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e5e:	d00f      	beq.n	8001e80 <TIM_Base_SetConfig+0x40>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	4a3d      	ldr	r2, [pc, #244]	; (8001f58 <TIM_Base_SetConfig+0x118>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d00b      	beq.n	8001e80 <TIM_Base_SetConfig+0x40>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	4a3c      	ldr	r2, [pc, #240]	; (8001f5c <TIM_Base_SetConfig+0x11c>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d007      	beq.n	8001e80 <TIM_Base_SetConfig+0x40>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	4a3b      	ldr	r2, [pc, #236]	; (8001f60 <TIM_Base_SetConfig+0x120>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d003      	beq.n	8001e80 <TIM_Base_SetConfig+0x40>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	4a3a      	ldr	r2, [pc, #232]	; (8001f64 <TIM_Base_SetConfig+0x124>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d108      	bne.n	8001e92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	68fa      	ldr	r2, [r7, #12]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a2f      	ldr	r2, [pc, #188]	; (8001f54 <TIM_Base_SetConfig+0x114>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d02b      	beq.n	8001ef2 <TIM_Base_SetConfig+0xb2>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ea0:	d027      	beq.n	8001ef2 <TIM_Base_SetConfig+0xb2>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a2c      	ldr	r2, [pc, #176]	; (8001f58 <TIM_Base_SetConfig+0x118>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d023      	beq.n	8001ef2 <TIM_Base_SetConfig+0xb2>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a2b      	ldr	r2, [pc, #172]	; (8001f5c <TIM_Base_SetConfig+0x11c>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d01f      	beq.n	8001ef2 <TIM_Base_SetConfig+0xb2>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a2a      	ldr	r2, [pc, #168]	; (8001f60 <TIM_Base_SetConfig+0x120>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d01b      	beq.n	8001ef2 <TIM_Base_SetConfig+0xb2>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a29      	ldr	r2, [pc, #164]	; (8001f64 <TIM_Base_SetConfig+0x124>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d017      	beq.n	8001ef2 <TIM_Base_SetConfig+0xb2>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a28      	ldr	r2, [pc, #160]	; (8001f68 <TIM_Base_SetConfig+0x128>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d013      	beq.n	8001ef2 <TIM_Base_SetConfig+0xb2>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a27      	ldr	r2, [pc, #156]	; (8001f6c <TIM_Base_SetConfig+0x12c>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d00f      	beq.n	8001ef2 <TIM_Base_SetConfig+0xb2>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a26      	ldr	r2, [pc, #152]	; (8001f70 <TIM_Base_SetConfig+0x130>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d00b      	beq.n	8001ef2 <TIM_Base_SetConfig+0xb2>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a25      	ldr	r2, [pc, #148]	; (8001f74 <TIM_Base_SetConfig+0x134>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d007      	beq.n	8001ef2 <TIM_Base_SetConfig+0xb2>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a24      	ldr	r2, [pc, #144]	; (8001f78 <TIM_Base_SetConfig+0x138>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d003      	beq.n	8001ef2 <TIM_Base_SetConfig+0xb2>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a23      	ldr	r2, [pc, #140]	; (8001f7c <TIM_Base_SetConfig+0x13c>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d108      	bne.n	8001f04 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ef8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	68fa      	ldr	r2, [r7, #12]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	695b      	ldr	r3, [r3, #20]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	68fa      	ldr	r2, [r7, #12]
 8001f16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	689a      	ldr	r2, [r3, #8]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	4a0a      	ldr	r2, [pc, #40]	; (8001f54 <TIM_Base_SetConfig+0x114>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d003      	beq.n	8001f38 <TIM_Base_SetConfig+0xf8>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	4a0c      	ldr	r2, [pc, #48]	; (8001f64 <TIM_Base_SetConfig+0x124>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d103      	bne.n	8001f40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	691a      	ldr	r2, [r3, #16]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2201      	movs	r2, #1
 8001f44:	615a      	str	r2, [r3, #20]
}
 8001f46:	bf00      	nop
 8001f48:	3714      	adds	r7, #20
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	40010000 	.word	0x40010000
 8001f58:	40000400 	.word	0x40000400
 8001f5c:	40000800 	.word	0x40000800
 8001f60:	40000c00 	.word	0x40000c00
 8001f64:	40010400 	.word	0x40010400
 8001f68:	40014000 	.word	0x40014000
 8001f6c:	40014400 	.word	0x40014400
 8001f70:	40014800 	.word	0x40014800
 8001f74:	40001800 	.word	0x40001800
 8001f78:	40001c00 	.word	0x40001c00
 8001f7c:	40002000 	.word	0x40002000

08001f80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f88:	bf00      	nop
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f9c:	bf00      	nop
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d101      	bne.n	8001fba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e03f      	b.n	800203a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d106      	bne.n	8001fd4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f7fe fcba 	bl	8000948 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2224      	movs	r2, #36	; 0x24
 8001fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	68da      	ldr	r2, [r3, #12]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001fea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f000 f929 	bl	8002244 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	691a      	ldr	r2, [r3, #16]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002000:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	695a      	ldr	r2, [r3, #20]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002010:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	68da      	ldr	r2, [r3, #12]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002020:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2220      	movs	r2, #32
 800202c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2220      	movs	r2, #32
 8002034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	b08a      	sub	sp, #40	; 0x28
 8002046:	af02      	add	r7, sp, #8
 8002048:	60f8      	str	r0, [r7, #12]
 800204a:	60b9      	str	r1, [r7, #8]
 800204c:	603b      	str	r3, [r7, #0]
 800204e:	4613      	mov	r3, r2
 8002050:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002052:	2300      	movs	r3, #0
 8002054:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800205c:	b2db      	uxtb	r3, r3
 800205e:	2b20      	cmp	r3, #32
 8002060:	d17c      	bne.n	800215c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d002      	beq.n	800206e <HAL_UART_Transmit+0x2c>
 8002068:	88fb      	ldrh	r3, [r7, #6]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d101      	bne.n	8002072 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e075      	b.n	800215e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002078:	2b01      	cmp	r3, #1
 800207a:	d101      	bne.n	8002080 <HAL_UART_Transmit+0x3e>
 800207c:	2302      	movs	r3, #2
 800207e:	e06e      	b.n	800215e <HAL_UART_Transmit+0x11c>
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2201      	movs	r2, #1
 8002084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2200      	movs	r2, #0
 800208c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2221      	movs	r2, #33	; 0x21
 8002092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002096:	f7fe fd89 	bl	8000bac <HAL_GetTick>
 800209a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	88fa      	ldrh	r2, [r7, #6]
 80020a0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	88fa      	ldrh	r2, [r7, #6]
 80020a6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020b0:	d108      	bne.n	80020c4 <HAL_UART_Transmit+0x82>
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d104      	bne.n	80020c4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80020ba:	2300      	movs	r3, #0
 80020bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	61bb      	str	r3, [r7, #24]
 80020c2:	e003      	b.n	80020cc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80020c8:	2300      	movs	r3, #0
 80020ca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80020d4:	e02a      	b.n	800212c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	9300      	str	r3, [sp, #0]
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	2200      	movs	r2, #0
 80020de:	2180      	movs	r1, #128	; 0x80
 80020e0:	68f8      	ldr	r0, [r7, #12]
 80020e2:	f000 f840 	bl	8002166 <UART_WaitOnFlagUntilTimeout>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e036      	b.n	800215e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d10b      	bne.n	800210e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	881b      	ldrh	r3, [r3, #0]
 80020fa:	461a      	mov	r2, r3
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002104:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	3302      	adds	r3, #2
 800210a:	61bb      	str	r3, [r7, #24]
 800210c:	e007      	b.n	800211e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	781a      	ldrb	r2, [r3, #0]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	3301      	adds	r3, #1
 800211c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002122:	b29b      	uxth	r3, r3
 8002124:	3b01      	subs	r3, #1
 8002126:	b29a      	uxth	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002130:	b29b      	uxth	r3, r3
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1cf      	bne.n	80020d6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	9300      	str	r3, [sp, #0]
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	2200      	movs	r2, #0
 800213e:	2140      	movs	r1, #64	; 0x40
 8002140:	68f8      	ldr	r0, [r7, #12]
 8002142:	f000 f810 	bl	8002166 <UART_WaitOnFlagUntilTimeout>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e006      	b.n	800215e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2220      	movs	r2, #32
 8002154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002158:	2300      	movs	r3, #0
 800215a:	e000      	b.n	800215e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800215c:	2302      	movs	r3, #2
  }
}
 800215e:	4618      	mov	r0, r3
 8002160:	3720      	adds	r7, #32
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	b090      	sub	sp, #64	; 0x40
 800216a:	af00      	add	r7, sp, #0
 800216c:	60f8      	str	r0, [r7, #12]
 800216e:	60b9      	str	r1, [r7, #8]
 8002170:	603b      	str	r3, [r7, #0]
 8002172:	4613      	mov	r3, r2
 8002174:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002176:	e050      	b.n	800221a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002178:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800217a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800217e:	d04c      	beq.n	800221a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002180:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002182:	2b00      	cmp	r3, #0
 8002184:	d007      	beq.n	8002196 <UART_WaitOnFlagUntilTimeout+0x30>
 8002186:	f7fe fd11 	bl	8000bac <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002192:	429a      	cmp	r2, r3
 8002194:	d241      	bcs.n	800221a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	330c      	adds	r3, #12
 800219c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800219e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021a0:	e853 3f00 	ldrex	r3, [r3]
 80021a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80021a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80021ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	330c      	adds	r3, #12
 80021b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80021b6:	637a      	str	r2, [r7, #52]	; 0x34
 80021b8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80021bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80021be:	e841 2300 	strex	r3, r2, [r1]
 80021c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80021c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d1e5      	bne.n	8002196 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	3314      	adds	r3, #20
 80021d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	e853 3f00 	ldrex	r3, [r3]
 80021d8:	613b      	str	r3, [r7, #16]
   return(result);
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	f023 0301 	bic.w	r3, r3, #1
 80021e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	3314      	adds	r3, #20
 80021e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80021ea:	623a      	str	r2, [r7, #32]
 80021ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021ee:	69f9      	ldr	r1, [r7, #28]
 80021f0:	6a3a      	ldr	r2, [r7, #32]
 80021f2:	e841 2300 	strex	r3, r2, [r1]
 80021f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d1e5      	bne.n	80021ca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2220      	movs	r2, #32
 8002202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2220      	movs	r2, #32
 800220a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e00f      	b.n	800223a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	4013      	ands	r3, r2
 8002224:	68ba      	ldr	r2, [r7, #8]
 8002226:	429a      	cmp	r2, r3
 8002228:	bf0c      	ite	eq
 800222a:	2301      	moveq	r3, #1
 800222c:	2300      	movne	r3, #0
 800222e:	b2db      	uxtb	r3, r3
 8002230:	461a      	mov	r2, r3
 8002232:	79fb      	ldrb	r3, [r7, #7]
 8002234:	429a      	cmp	r2, r3
 8002236:	d09f      	beq.n	8002178 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3740      	adds	r7, #64	; 0x40
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
	...

08002244 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002248:	b09f      	sub	sp, #124	; 0x7c
 800224a:	af00      	add	r7, sp, #0
 800224c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800224e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	691b      	ldr	r3, [r3, #16]
 8002254:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002258:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800225a:	68d9      	ldr	r1, [r3, #12]
 800225c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	ea40 0301 	orr.w	r3, r0, r1
 8002264:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002266:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002268:	689a      	ldr	r2, [r3, #8]
 800226a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800226c:	691b      	ldr	r3, [r3, #16]
 800226e:	431a      	orrs	r2, r3
 8002270:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002272:	695b      	ldr	r3, [r3, #20]
 8002274:	431a      	orrs	r2, r3
 8002276:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002278:	69db      	ldr	r3, [r3, #28]
 800227a:	4313      	orrs	r3, r2
 800227c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800227e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002288:	f021 010c 	bic.w	r1, r1, #12
 800228c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002292:	430b      	orrs	r3, r1
 8002294:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002296:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	695b      	ldr	r3, [r3, #20]
 800229c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80022a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022a2:	6999      	ldr	r1, [r3, #24]
 80022a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	ea40 0301 	orr.w	r3, r0, r1
 80022ac:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80022ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	4bc5      	ldr	r3, [pc, #788]	; (80025c8 <UART_SetConfig+0x384>)
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d004      	beq.n	80022c2 <UART_SetConfig+0x7e>
 80022b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	4bc3      	ldr	r3, [pc, #780]	; (80025cc <UART_SetConfig+0x388>)
 80022be:	429a      	cmp	r2, r3
 80022c0:	d103      	bne.n	80022ca <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80022c2:	f7ff fb7d 	bl	80019c0 <HAL_RCC_GetPCLK2Freq>
 80022c6:	6778      	str	r0, [r7, #116]	; 0x74
 80022c8:	e002      	b.n	80022d0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80022ca:	f7ff fb65 	bl	8001998 <HAL_RCC_GetPCLK1Freq>
 80022ce:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80022d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022d2:	69db      	ldr	r3, [r3, #28]
 80022d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022d8:	f040 80b6 	bne.w	8002448 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80022dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022de:	461c      	mov	r4, r3
 80022e0:	f04f 0500 	mov.w	r5, #0
 80022e4:	4622      	mov	r2, r4
 80022e6:	462b      	mov	r3, r5
 80022e8:	1891      	adds	r1, r2, r2
 80022ea:	6439      	str	r1, [r7, #64]	; 0x40
 80022ec:	415b      	adcs	r3, r3
 80022ee:	647b      	str	r3, [r7, #68]	; 0x44
 80022f0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80022f4:	1912      	adds	r2, r2, r4
 80022f6:	eb45 0303 	adc.w	r3, r5, r3
 80022fa:	f04f 0000 	mov.w	r0, #0
 80022fe:	f04f 0100 	mov.w	r1, #0
 8002302:	00d9      	lsls	r1, r3, #3
 8002304:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002308:	00d0      	lsls	r0, r2, #3
 800230a:	4602      	mov	r2, r0
 800230c:	460b      	mov	r3, r1
 800230e:	1911      	adds	r1, r2, r4
 8002310:	6639      	str	r1, [r7, #96]	; 0x60
 8002312:	416b      	adcs	r3, r5
 8002314:	667b      	str	r3, [r7, #100]	; 0x64
 8002316:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	461a      	mov	r2, r3
 800231c:	f04f 0300 	mov.w	r3, #0
 8002320:	1891      	adds	r1, r2, r2
 8002322:	63b9      	str	r1, [r7, #56]	; 0x38
 8002324:	415b      	adcs	r3, r3
 8002326:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002328:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800232c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002330:	f7fd ff4e 	bl	80001d0 <__aeabi_uldivmod>
 8002334:	4602      	mov	r2, r0
 8002336:	460b      	mov	r3, r1
 8002338:	4ba5      	ldr	r3, [pc, #660]	; (80025d0 <UART_SetConfig+0x38c>)
 800233a:	fba3 2302 	umull	r2, r3, r3, r2
 800233e:	095b      	lsrs	r3, r3, #5
 8002340:	011e      	lsls	r6, r3, #4
 8002342:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002344:	461c      	mov	r4, r3
 8002346:	f04f 0500 	mov.w	r5, #0
 800234a:	4622      	mov	r2, r4
 800234c:	462b      	mov	r3, r5
 800234e:	1891      	adds	r1, r2, r2
 8002350:	6339      	str	r1, [r7, #48]	; 0x30
 8002352:	415b      	adcs	r3, r3
 8002354:	637b      	str	r3, [r7, #52]	; 0x34
 8002356:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800235a:	1912      	adds	r2, r2, r4
 800235c:	eb45 0303 	adc.w	r3, r5, r3
 8002360:	f04f 0000 	mov.w	r0, #0
 8002364:	f04f 0100 	mov.w	r1, #0
 8002368:	00d9      	lsls	r1, r3, #3
 800236a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800236e:	00d0      	lsls	r0, r2, #3
 8002370:	4602      	mov	r2, r0
 8002372:	460b      	mov	r3, r1
 8002374:	1911      	adds	r1, r2, r4
 8002376:	65b9      	str	r1, [r7, #88]	; 0x58
 8002378:	416b      	adcs	r3, r5
 800237a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800237c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	461a      	mov	r2, r3
 8002382:	f04f 0300 	mov.w	r3, #0
 8002386:	1891      	adds	r1, r2, r2
 8002388:	62b9      	str	r1, [r7, #40]	; 0x28
 800238a:	415b      	adcs	r3, r3
 800238c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800238e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002392:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002396:	f7fd ff1b 	bl	80001d0 <__aeabi_uldivmod>
 800239a:	4602      	mov	r2, r0
 800239c:	460b      	mov	r3, r1
 800239e:	4b8c      	ldr	r3, [pc, #560]	; (80025d0 <UART_SetConfig+0x38c>)
 80023a0:	fba3 1302 	umull	r1, r3, r3, r2
 80023a4:	095b      	lsrs	r3, r3, #5
 80023a6:	2164      	movs	r1, #100	; 0x64
 80023a8:	fb01 f303 	mul.w	r3, r1, r3
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	00db      	lsls	r3, r3, #3
 80023b0:	3332      	adds	r3, #50	; 0x32
 80023b2:	4a87      	ldr	r2, [pc, #540]	; (80025d0 <UART_SetConfig+0x38c>)
 80023b4:	fba2 2303 	umull	r2, r3, r2, r3
 80023b8:	095b      	lsrs	r3, r3, #5
 80023ba:	005b      	lsls	r3, r3, #1
 80023bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80023c0:	441e      	add	r6, r3
 80023c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023c4:	4618      	mov	r0, r3
 80023c6:	f04f 0100 	mov.w	r1, #0
 80023ca:	4602      	mov	r2, r0
 80023cc:	460b      	mov	r3, r1
 80023ce:	1894      	adds	r4, r2, r2
 80023d0:	623c      	str	r4, [r7, #32]
 80023d2:	415b      	adcs	r3, r3
 80023d4:	627b      	str	r3, [r7, #36]	; 0x24
 80023d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80023da:	1812      	adds	r2, r2, r0
 80023dc:	eb41 0303 	adc.w	r3, r1, r3
 80023e0:	f04f 0400 	mov.w	r4, #0
 80023e4:	f04f 0500 	mov.w	r5, #0
 80023e8:	00dd      	lsls	r5, r3, #3
 80023ea:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80023ee:	00d4      	lsls	r4, r2, #3
 80023f0:	4622      	mov	r2, r4
 80023f2:	462b      	mov	r3, r5
 80023f4:	1814      	adds	r4, r2, r0
 80023f6:	653c      	str	r4, [r7, #80]	; 0x50
 80023f8:	414b      	adcs	r3, r1
 80023fa:	657b      	str	r3, [r7, #84]	; 0x54
 80023fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	461a      	mov	r2, r3
 8002402:	f04f 0300 	mov.w	r3, #0
 8002406:	1891      	adds	r1, r2, r2
 8002408:	61b9      	str	r1, [r7, #24]
 800240a:	415b      	adcs	r3, r3
 800240c:	61fb      	str	r3, [r7, #28]
 800240e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002412:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002416:	f7fd fedb 	bl	80001d0 <__aeabi_uldivmod>
 800241a:	4602      	mov	r2, r0
 800241c:	460b      	mov	r3, r1
 800241e:	4b6c      	ldr	r3, [pc, #432]	; (80025d0 <UART_SetConfig+0x38c>)
 8002420:	fba3 1302 	umull	r1, r3, r3, r2
 8002424:	095b      	lsrs	r3, r3, #5
 8002426:	2164      	movs	r1, #100	; 0x64
 8002428:	fb01 f303 	mul.w	r3, r1, r3
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	00db      	lsls	r3, r3, #3
 8002430:	3332      	adds	r3, #50	; 0x32
 8002432:	4a67      	ldr	r2, [pc, #412]	; (80025d0 <UART_SetConfig+0x38c>)
 8002434:	fba2 2303 	umull	r2, r3, r2, r3
 8002438:	095b      	lsrs	r3, r3, #5
 800243a:	f003 0207 	and.w	r2, r3, #7
 800243e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4432      	add	r2, r6
 8002444:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002446:	e0b9      	b.n	80025bc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002448:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800244a:	461c      	mov	r4, r3
 800244c:	f04f 0500 	mov.w	r5, #0
 8002450:	4622      	mov	r2, r4
 8002452:	462b      	mov	r3, r5
 8002454:	1891      	adds	r1, r2, r2
 8002456:	6139      	str	r1, [r7, #16]
 8002458:	415b      	adcs	r3, r3
 800245a:	617b      	str	r3, [r7, #20]
 800245c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002460:	1912      	adds	r2, r2, r4
 8002462:	eb45 0303 	adc.w	r3, r5, r3
 8002466:	f04f 0000 	mov.w	r0, #0
 800246a:	f04f 0100 	mov.w	r1, #0
 800246e:	00d9      	lsls	r1, r3, #3
 8002470:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002474:	00d0      	lsls	r0, r2, #3
 8002476:	4602      	mov	r2, r0
 8002478:	460b      	mov	r3, r1
 800247a:	eb12 0804 	adds.w	r8, r2, r4
 800247e:	eb43 0905 	adc.w	r9, r3, r5
 8002482:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	4618      	mov	r0, r3
 8002488:	f04f 0100 	mov.w	r1, #0
 800248c:	f04f 0200 	mov.w	r2, #0
 8002490:	f04f 0300 	mov.w	r3, #0
 8002494:	008b      	lsls	r3, r1, #2
 8002496:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800249a:	0082      	lsls	r2, r0, #2
 800249c:	4640      	mov	r0, r8
 800249e:	4649      	mov	r1, r9
 80024a0:	f7fd fe96 	bl	80001d0 <__aeabi_uldivmod>
 80024a4:	4602      	mov	r2, r0
 80024a6:	460b      	mov	r3, r1
 80024a8:	4b49      	ldr	r3, [pc, #292]	; (80025d0 <UART_SetConfig+0x38c>)
 80024aa:	fba3 2302 	umull	r2, r3, r3, r2
 80024ae:	095b      	lsrs	r3, r3, #5
 80024b0:	011e      	lsls	r6, r3, #4
 80024b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024b4:	4618      	mov	r0, r3
 80024b6:	f04f 0100 	mov.w	r1, #0
 80024ba:	4602      	mov	r2, r0
 80024bc:	460b      	mov	r3, r1
 80024be:	1894      	adds	r4, r2, r2
 80024c0:	60bc      	str	r4, [r7, #8]
 80024c2:	415b      	adcs	r3, r3
 80024c4:	60fb      	str	r3, [r7, #12]
 80024c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80024ca:	1812      	adds	r2, r2, r0
 80024cc:	eb41 0303 	adc.w	r3, r1, r3
 80024d0:	f04f 0400 	mov.w	r4, #0
 80024d4:	f04f 0500 	mov.w	r5, #0
 80024d8:	00dd      	lsls	r5, r3, #3
 80024da:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80024de:	00d4      	lsls	r4, r2, #3
 80024e0:	4622      	mov	r2, r4
 80024e2:	462b      	mov	r3, r5
 80024e4:	1814      	adds	r4, r2, r0
 80024e6:	64bc      	str	r4, [r7, #72]	; 0x48
 80024e8:	414b      	adcs	r3, r1
 80024ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	4618      	mov	r0, r3
 80024f2:	f04f 0100 	mov.w	r1, #0
 80024f6:	f04f 0200 	mov.w	r2, #0
 80024fa:	f04f 0300 	mov.w	r3, #0
 80024fe:	008b      	lsls	r3, r1, #2
 8002500:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002504:	0082      	lsls	r2, r0, #2
 8002506:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800250a:	f7fd fe61 	bl	80001d0 <__aeabi_uldivmod>
 800250e:	4602      	mov	r2, r0
 8002510:	460b      	mov	r3, r1
 8002512:	4b2f      	ldr	r3, [pc, #188]	; (80025d0 <UART_SetConfig+0x38c>)
 8002514:	fba3 1302 	umull	r1, r3, r3, r2
 8002518:	095b      	lsrs	r3, r3, #5
 800251a:	2164      	movs	r1, #100	; 0x64
 800251c:	fb01 f303 	mul.w	r3, r1, r3
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	011b      	lsls	r3, r3, #4
 8002524:	3332      	adds	r3, #50	; 0x32
 8002526:	4a2a      	ldr	r2, [pc, #168]	; (80025d0 <UART_SetConfig+0x38c>)
 8002528:	fba2 2303 	umull	r2, r3, r2, r3
 800252c:	095b      	lsrs	r3, r3, #5
 800252e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002532:	441e      	add	r6, r3
 8002534:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002536:	4618      	mov	r0, r3
 8002538:	f04f 0100 	mov.w	r1, #0
 800253c:	4602      	mov	r2, r0
 800253e:	460b      	mov	r3, r1
 8002540:	1894      	adds	r4, r2, r2
 8002542:	603c      	str	r4, [r7, #0]
 8002544:	415b      	adcs	r3, r3
 8002546:	607b      	str	r3, [r7, #4]
 8002548:	e9d7 2300 	ldrd	r2, r3, [r7]
 800254c:	1812      	adds	r2, r2, r0
 800254e:	eb41 0303 	adc.w	r3, r1, r3
 8002552:	f04f 0400 	mov.w	r4, #0
 8002556:	f04f 0500 	mov.w	r5, #0
 800255a:	00dd      	lsls	r5, r3, #3
 800255c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002560:	00d4      	lsls	r4, r2, #3
 8002562:	4622      	mov	r2, r4
 8002564:	462b      	mov	r3, r5
 8002566:	eb12 0a00 	adds.w	sl, r2, r0
 800256a:	eb43 0b01 	adc.w	fp, r3, r1
 800256e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	4618      	mov	r0, r3
 8002574:	f04f 0100 	mov.w	r1, #0
 8002578:	f04f 0200 	mov.w	r2, #0
 800257c:	f04f 0300 	mov.w	r3, #0
 8002580:	008b      	lsls	r3, r1, #2
 8002582:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002586:	0082      	lsls	r2, r0, #2
 8002588:	4650      	mov	r0, sl
 800258a:	4659      	mov	r1, fp
 800258c:	f7fd fe20 	bl	80001d0 <__aeabi_uldivmod>
 8002590:	4602      	mov	r2, r0
 8002592:	460b      	mov	r3, r1
 8002594:	4b0e      	ldr	r3, [pc, #56]	; (80025d0 <UART_SetConfig+0x38c>)
 8002596:	fba3 1302 	umull	r1, r3, r3, r2
 800259a:	095b      	lsrs	r3, r3, #5
 800259c:	2164      	movs	r1, #100	; 0x64
 800259e:	fb01 f303 	mul.w	r3, r1, r3
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	011b      	lsls	r3, r3, #4
 80025a6:	3332      	adds	r3, #50	; 0x32
 80025a8:	4a09      	ldr	r2, [pc, #36]	; (80025d0 <UART_SetConfig+0x38c>)
 80025aa:	fba2 2303 	umull	r2, r3, r2, r3
 80025ae:	095b      	lsrs	r3, r3, #5
 80025b0:	f003 020f 	and.w	r2, r3, #15
 80025b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4432      	add	r2, r6
 80025ba:	609a      	str	r2, [r3, #8]
}
 80025bc:	bf00      	nop
 80025be:	377c      	adds	r7, #124	; 0x7c
 80025c0:	46bd      	mov	sp, r7
 80025c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025c6:	bf00      	nop
 80025c8:	40011000 	.word	0x40011000
 80025cc:	40011400 	.word	0x40011400
 80025d0:	51eb851f 	.word	0x51eb851f

080025d4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
 80025da:	4603      	mov	r3, r0
 80025dc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80025de:	2300      	movs	r3, #0
 80025e0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80025e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025e6:	2b84      	cmp	r3, #132	; 0x84
 80025e8:	d005      	beq.n	80025f6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80025ea:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	4413      	add	r3, r2
 80025f2:	3303      	adds	r3, #3
 80025f4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80025f6:	68fb      	ldr	r3, [r7, #12]
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3714      	adds	r7, #20
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002608:	f000 ffa0 	bl	800354c <vTaskStartScheduler>
  
  return osOK;
 800260c:	2300      	movs	r3, #0
}
 800260e:	4618      	mov	r0, r3
 8002610:	bd80      	pop	{r7, pc}

08002612 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002612:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002614:	b089      	sub	sp, #36	; 0x24
 8002616:	af04      	add	r7, sp, #16
 8002618:	6078      	str	r0, [r7, #4]
 800261a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	695b      	ldr	r3, [r3, #20]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d020      	beq.n	8002666 <osThreadCreate+0x54>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	699b      	ldr	r3, [r3, #24]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d01c      	beq.n	8002666 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685c      	ldr	r4, [r3, #4]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681d      	ldr	r5, [r3, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	691e      	ldr	r6, [r3, #16]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800263e:	4618      	mov	r0, r3
 8002640:	f7ff ffc8 	bl	80025d4 <makeFreeRtosPriority>
 8002644:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	695b      	ldr	r3, [r3, #20]
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800264e:	9202      	str	r2, [sp, #8]
 8002650:	9301      	str	r3, [sp, #4]
 8002652:	9100      	str	r1, [sp, #0]
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	4632      	mov	r2, r6
 8002658:	4629      	mov	r1, r5
 800265a:	4620      	mov	r0, r4
 800265c:	f000 fd98 	bl	8003190 <xTaskCreateStatic>
 8002660:	4603      	mov	r3, r0
 8002662:	60fb      	str	r3, [r7, #12]
 8002664:	e01c      	b.n	80026a0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685c      	ldr	r4, [r3, #4]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002672:	b29e      	uxth	r6, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800267a:	4618      	mov	r0, r3
 800267c:	f7ff ffaa 	bl	80025d4 <makeFreeRtosPriority>
 8002680:	4602      	mov	r2, r0
 8002682:	f107 030c 	add.w	r3, r7, #12
 8002686:	9301      	str	r3, [sp, #4]
 8002688:	9200      	str	r2, [sp, #0]
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	4632      	mov	r2, r6
 800268e:	4629      	mov	r1, r5
 8002690:	4620      	mov	r0, r4
 8002692:	f000 fdda 	bl	800324a <xTaskCreate>
 8002696:	4603      	mov	r3, r0
 8002698:	2b01      	cmp	r3, #1
 800269a:	d001      	beq.n	80026a0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800269c:	2300      	movs	r3, #0
 800269e:	e000      	b.n	80026a2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80026a0:	68fb      	ldr	r3, [r7, #12]
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3714      	adds	r7, #20
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080026aa <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80026aa:	b580      	push	{r7, lr}
 80026ac:	b084      	sub	sp, #16
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d001      	beq.n	80026c0 <osDelay+0x16>
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	e000      	b.n	80026c2 <osDelay+0x18>
 80026c0:	2301      	movs	r3, #1
 80026c2:	4618      	mov	r0, r3
 80026c4:	f000 ff0e 	bl	80034e4 <vTaskDelay>
  
  return osOK;
 80026c8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3710      	adds	r7, #16
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80026d2:	b580      	push	{r7, lr}
 80026d4:	b082      	sub	sp, #8
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d007      	beq.n	80026f2 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	4619      	mov	r1, r3
 80026e8:	2001      	movs	r0, #1
 80026ea:	f000 fa2a 	bl	8002b42 <xQueueCreateMutexStatic>
 80026ee:	4603      	mov	r3, r0
 80026f0:	e003      	b.n	80026fa <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80026f2:	2001      	movs	r0, #1
 80026f4:	f000 fa0d 	bl	8002b12 <xQueueCreateMutex>
 80026f8:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3708      	adds	r7, #8
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}

08002702 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002702:	b480      	push	{r7}
 8002704:	b083      	sub	sp, #12
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f103 0208 	add.w	r2, r3, #8
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f04f 32ff 	mov.w	r2, #4294967295
 800271a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f103 0208 	add.w	r2, r3, #8
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f103 0208 	add.w	r2, r3, #8
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002736:	bf00      	nop
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr

08002742 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002742:	b480      	push	{r7}
 8002744:	b083      	sub	sp, #12
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002750:	bf00      	nop
 8002752:	370c      	adds	r7, #12
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr

0800275c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800275c:	b480      	push	{r7}
 800275e:	b085      	sub	sp, #20
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	68fa      	ldr	r2, [r7, #12]
 8002770:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	689a      	ldr	r2, [r3, #8]
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	683a      	ldr	r2, [r7, #0]
 8002780:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	683a      	ldr	r2, [r7, #0]
 8002786:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	1c5a      	adds	r2, r3, #1
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	601a      	str	r2, [r3, #0]
}
 8002798:	bf00      	nop
 800279a:	3714      	adds	r7, #20
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80027a4:	b480      	push	{r7}
 80027a6:	b085      	sub	sp, #20
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ba:	d103      	bne.n	80027c4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	60fb      	str	r3, [r7, #12]
 80027c2:	e00c      	b.n	80027de <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	3308      	adds	r3, #8
 80027c8:	60fb      	str	r3, [r7, #12]
 80027ca:	e002      	b.n	80027d2 <vListInsert+0x2e>
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	60fb      	str	r3, [r7, #12]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68ba      	ldr	r2, [r7, #8]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d2f6      	bcs.n	80027cc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	685a      	ldr	r2, [r3, #4]
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	683a      	ldr	r2, [r7, #0]
 80027ec:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	68fa      	ldr	r2, [r7, #12]
 80027f2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	683a      	ldr	r2, [r7, #0]
 80027f8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	1c5a      	adds	r2, r3, #1
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	601a      	str	r2, [r3, #0]
}
 800280a:	bf00      	nop
 800280c:	3714      	adds	r7, #20
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr

08002816 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002816:	b480      	push	{r7}
 8002818:	b085      	sub	sp, #20
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	6892      	ldr	r2, [r2, #8]
 800282c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	6852      	ldr	r2, [r2, #4]
 8002836:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	429a      	cmp	r2, r3
 8002840:	d103      	bne.n	800284a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	689a      	ldr	r2, [r3, #8]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	1e5a      	subs	r2, r3, #1
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
}
 800285e:	4618      	mov	r0, r3
 8002860:	3714      	adds	r7, #20
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
	...

0800286c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d10a      	bne.n	8002896 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002884:	f383 8811 	msr	BASEPRI, r3
 8002888:	f3bf 8f6f 	isb	sy
 800288c:	f3bf 8f4f 	dsb	sy
 8002890:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002892:	bf00      	nop
 8002894:	e7fe      	b.n	8002894 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002896:	f001 fed5 	bl	8004644 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028a2:	68f9      	ldr	r1, [r7, #12]
 80028a4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80028a6:	fb01 f303 	mul.w	r3, r1, r3
 80028aa:	441a      	add	r2, r3
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2200      	movs	r2, #0
 80028b4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028c6:	3b01      	subs	r3, #1
 80028c8:	68f9      	ldr	r1, [r7, #12]
 80028ca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80028cc:	fb01 f303 	mul.w	r3, r1, r3
 80028d0:	441a      	add	r2, r3
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	22ff      	movs	r2, #255	; 0xff
 80028da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	22ff      	movs	r2, #255	; 0xff
 80028e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d114      	bne.n	8002916 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	691b      	ldr	r3, [r3, #16]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d01a      	beq.n	800292a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	3310      	adds	r3, #16
 80028f8:	4618      	mov	r0, r3
 80028fa:	f001 f879 	bl	80039f0 <xTaskRemoveFromEventList>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d012      	beq.n	800292a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002904:	4b0c      	ldr	r3, [pc, #48]	; (8002938 <xQueueGenericReset+0xcc>)
 8002906:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800290a:	601a      	str	r2, [r3, #0]
 800290c:	f3bf 8f4f 	dsb	sy
 8002910:	f3bf 8f6f 	isb	sy
 8002914:	e009      	b.n	800292a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	3310      	adds	r3, #16
 800291a:	4618      	mov	r0, r3
 800291c:	f7ff fef1 	bl	8002702 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	3324      	adds	r3, #36	; 0x24
 8002924:	4618      	mov	r0, r3
 8002926:	f7ff feec 	bl	8002702 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800292a:	f001 febb 	bl	80046a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800292e:	2301      	movs	r3, #1
}
 8002930:	4618      	mov	r0, r3
 8002932:	3710      	adds	r7, #16
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	e000ed04 	.word	0xe000ed04

0800293c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800293c:	b580      	push	{r7, lr}
 800293e:	b08e      	sub	sp, #56	; 0x38
 8002940:	af02      	add	r7, sp, #8
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	607a      	str	r2, [r7, #4]
 8002948:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d10a      	bne.n	8002966 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002954:	f383 8811 	msr	BASEPRI, r3
 8002958:	f3bf 8f6f 	isb	sy
 800295c:	f3bf 8f4f 	dsb	sy
 8002960:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002962:	bf00      	nop
 8002964:	e7fe      	b.n	8002964 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d10a      	bne.n	8002982 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800296c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002970:	f383 8811 	msr	BASEPRI, r3
 8002974:	f3bf 8f6f 	isb	sy
 8002978:	f3bf 8f4f 	dsb	sy
 800297c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800297e:	bf00      	nop
 8002980:	e7fe      	b.n	8002980 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d002      	beq.n	800298e <xQueueGenericCreateStatic+0x52>
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d001      	beq.n	8002992 <xQueueGenericCreateStatic+0x56>
 800298e:	2301      	movs	r3, #1
 8002990:	e000      	b.n	8002994 <xQueueGenericCreateStatic+0x58>
 8002992:	2300      	movs	r3, #0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d10a      	bne.n	80029ae <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800299c:	f383 8811 	msr	BASEPRI, r3
 80029a0:	f3bf 8f6f 	isb	sy
 80029a4:	f3bf 8f4f 	dsb	sy
 80029a8:	623b      	str	r3, [r7, #32]
}
 80029aa:	bf00      	nop
 80029ac:	e7fe      	b.n	80029ac <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d102      	bne.n	80029ba <xQueueGenericCreateStatic+0x7e>
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d101      	bne.n	80029be <xQueueGenericCreateStatic+0x82>
 80029ba:	2301      	movs	r3, #1
 80029bc:	e000      	b.n	80029c0 <xQueueGenericCreateStatic+0x84>
 80029be:	2300      	movs	r3, #0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d10a      	bne.n	80029da <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80029c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029c8:	f383 8811 	msr	BASEPRI, r3
 80029cc:	f3bf 8f6f 	isb	sy
 80029d0:	f3bf 8f4f 	dsb	sy
 80029d4:	61fb      	str	r3, [r7, #28]
}
 80029d6:	bf00      	nop
 80029d8:	e7fe      	b.n	80029d8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80029da:	2348      	movs	r3, #72	; 0x48
 80029dc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	2b48      	cmp	r3, #72	; 0x48
 80029e2:	d00a      	beq.n	80029fa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80029e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029e8:	f383 8811 	msr	BASEPRI, r3
 80029ec:	f3bf 8f6f 	isb	sy
 80029f0:	f3bf 8f4f 	dsb	sy
 80029f4:	61bb      	str	r3, [r7, #24]
}
 80029f6:	bf00      	nop
 80029f8:	e7fe      	b.n	80029f8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80029fa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d00d      	beq.n	8002a22 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002a0e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a14:	9300      	str	r3, [sp, #0]
 8002a16:	4613      	mov	r3, r2
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	68b9      	ldr	r1, [r7, #8]
 8002a1c:	68f8      	ldr	r0, [r7, #12]
 8002a1e:	f000 f83f 	bl	8002aa0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3730      	adds	r7, #48	; 0x30
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b08a      	sub	sp, #40	; 0x28
 8002a30:	af02      	add	r7, sp, #8
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	4613      	mov	r3, r2
 8002a38:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d10a      	bne.n	8002a56 <xQueueGenericCreate+0x2a>
	__asm volatile
 8002a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a44:	f383 8811 	msr	BASEPRI, r3
 8002a48:	f3bf 8f6f 	isb	sy
 8002a4c:	f3bf 8f4f 	dsb	sy
 8002a50:	613b      	str	r3, [r7, #16]
}
 8002a52:	bf00      	nop
 8002a54:	e7fe      	b.n	8002a54 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	68ba      	ldr	r2, [r7, #8]
 8002a5a:	fb02 f303 	mul.w	r3, r2, r3
 8002a5e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	3348      	adds	r3, #72	; 0x48
 8002a64:	4618      	mov	r0, r3
 8002a66:	f001 fecf 	bl	8004808 <pvPortMalloc>
 8002a6a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d011      	beq.n	8002a96 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	3348      	adds	r3, #72	; 0x48
 8002a7a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002a84:	79fa      	ldrb	r2, [r7, #7]
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	9300      	str	r3, [sp, #0]
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	697a      	ldr	r2, [r7, #20]
 8002a8e:	68b9      	ldr	r1, [r7, #8]
 8002a90:	68f8      	ldr	r0, [r7, #12]
 8002a92:	f000 f805 	bl	8002aa0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002a96:	69bb      	ldr	r3, [r7, #24]
	}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3720      	adds	r7, #32
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	607a      	str	r2, [r7, #4]
 8002aac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d103      	bne.n	8002abc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	601a      	str	r2, [r3, #0]
 8002aba:	e002      	b.n	8002ac2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	68fa      	ldr	r2, [r7, #12]
 8002ac6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	68ba      	ldr	r2, [r7, #8]
 8002acc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002ace:	2101      	movs	r1, #1
 8002ad0:	69b8      	ldr	r0, [r7, #24]
 8002ad2:	f7ff fecb 	bl	800286c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002ad6:	bf00      	nop
 8002ad8:	3710      	adds	r7, #16
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}

08002ade <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8002ade:	b580      	push	{r7, lr}
 8002ae0:	b082      	sub	sp, #8
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d00e      	beq.n	8002b0a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002afe:	2300      	movs	r3, #0
 8002b00:	2200      	movs	r2, #0
 8002b02:	2100      	movs	r1, #0
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f000 f837 	bl	8002b78 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8002b0a:	bf00      	nop
 8002b0c:	3708      	adds	r7, #8
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}

08002b12 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8002b12:	b580      	push	{r7, lr}
 8002b14:	b086      	sub	sp, #24
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	4603      	mov	r3, r0
 8002b1a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	617b      	str	r3, [r7, #20]
 8002b20:	2300      	movs	r3, #0
 8002b22:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8002b24:	79fb      	ldrb	r3, [r7, #7]
 8002b26:	461a      	mov	r2, r3
 8002b28:	6939      	ldr	r1, [r7, #16]
 8002b2a:	6978      	ldr	r0, [r7, #20]
 8002b2c:	f7ff ff7e 	bl	8002a2c <xQueueGenericCreate>
 8002b30:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8002b32:	68f8      	ldr	r0, [r7, #12]
 8002b34:	f7ff ffd3 	bl	8002ade <prvInitialiseMutex>

		return xNewQueue;
 8002b38:	68fb      	ldr	r3, [r7, #12]
	}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3718      	adds	r7, #24
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8002b42:	b580      	push	{r7, lr}
 8002b44:	b088      	sub	sp, #32
 8002b46:	af02      	add	r7, sp, #8
 8002b48:	4603      	mov	r3, r0
 8002b4a:	6039      	str	r1, [r7, #0]
 8002b4c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	617b      	str	r3, [r7, #20]
 8002b52:	2300      	movs	r3, #0
 8002b54:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8002b56:	79fb      	ldrb	r3, [r7, #7]
 8002b58:	9300      	str	r3, [sp, #0]
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	6939      	ldr	r1, [r7, #16]
 8002b60:	6978      	ldr	r0, [r7, #20]
 8002b62:	f7ff feeb 	bl	800293c <xQueueGenericCreateStatic>
 8002b66:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8002b68:	68f8      	ldr	r0, [r7, #12]
 8002b6a:	f7ff ffb8 	bl	8002ade <prvInitialiseMutex>

		return xNewQueue;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
	}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3718      	adds	r7, #24
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b08e      	sub	sp, #56	; 0x38
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
 8002b84:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002b86:	2300      	movs	r3, #0
 8002b88:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d10a      	bne.n	8002baa <xQueueGenericSend+0x32>
	__asm volatile
 8002b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b98:	f383 8811 	msr	BASEPRI, r3
 8002b9c:	f3bf 8f6f 	isb	sy
 8002ba0:	f3bf 8f4f 	dsb	sy
 8002ba4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002ba6:	bf00      	nop
 8002ba8:	e7fe      	b.n	8002ba8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d103      	bne.n	8002bb8 <xQueueGenericSend+0x40>
 8002bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d101      	bne.n	8002bbc <xQueueGenericSend+0x44>
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e000      	b.n	8002bbe <xQueueGenericSend+0x46>
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d10a      	bne.n	8002bd8 <xQueueGenericSend+0x60>
	__asm volatile
 8002bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bc6:	f383 8811 	msr	BASEPRI, r3
 8002bca:	f3bf 8f6f 	isb	sy
 8002bce:	f3bf 8f4f 	dsb	sy
 8002bd2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002bd4:	bf00      	nop
 8002bd6:	e7fe      	b.n	8002bd6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d103      	bne.n	8002be6 <xQueueGenericSend+0x6e>
 8002bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d101      	bne.n	8002bea <xQueueGenericSend+0x72>
 8002be6:	2301      	movs	r3, #1
 8002be8:	e000      	b.n	8002bec <xQueueGenericSend+0x74>
 8002bea:	2300      	movs	r3, #0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d10a      	bne.n	8002c06 <xQueueGenericSend+0x8e>
	__asm volatile
 8002bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bf4:	f383 8811 	msr	BASEPRI, r3
 8002bf8:	f3bf 8f6f 	isb	sy
 8002bfc:	f3bf 8f4f 	dsb	sy
 8002c00:	623b      	str	r3, [r7, #32]
}
 8002c02:	bf00      	nop
 8002c04:	e7fe      	b.n	8002c04 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002c06:	f001 f8b3 	bl	8003d70 <xTaskGetSchedulerState>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d102      	bne.n	8002c16 <xQueueGenericSend+0x9e>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d101      	bne.n	8002c1a <xQueueGenericSend+0xa2>
 8002c16:	2301      	movs	r3, #1
 8002c18:	e000      	b.n	8002c1c <xQueueGenericSend+0xa4>
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d10a      	bne.n	8002c36 <xQueueGenericSend+0xbe>
	__asm volatile
 8002c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c24:	f383 8811 	msr	BASEPRI, r3
 8002c28:	f3bf 8f6f 	isb	sy
 8002c2c:	f3bf 8f4f 	dsb	sy
 8002c30:	61fb      	str	r3, [r7, #28]
}
 8002c32:	bf00      	nop
 8002c34:	e7fe      	b.n	8002c34 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002c36:	f001 fd05 	bl	8004644 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d302      	bcc.n	8002c4c <xQueueGenericSend+0xd4>
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d129      	bne.n	8002ca0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002c4c:	683a      	ldr	r2, [r7, #0]
 8002c4e:	68b9      	ldr	r1, [r7, #8]
 8002c50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c52:	f000 f9b3 	bl	8002fbc <prvCopyDataToQueue>
 8002c56:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d010      	beq.n	8002c82 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c62:	3324      	adds	r3, #36	; 0x24
 8002c64:	4618      	mov	r0, r3
 8002c66:	f000 fec3 	bl	80039f0 <xTaskRemoveFromEventList>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d013      	beq.n	8002c98 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002c70:	4b3f      	ldr	r3, [pc, #252]	; (8002d70 <xQueueGenericSend+0x1f8>)
 8002c72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c76:	601a      	str	r2, [r3, #0]
 8002c78:	f3bf 8f4f 	dsb	sy
 8002c7c:	f3bf 8f6f 	isb	sy
 8002c80:	e00a      	b.n	8002c98 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d007      	beq.n	8002c98 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002c88:	4b39      	ldr	r3, [pc, #228]	; (8002d70 <xQueueGenericSend+0x1f8>)
 8002c8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c8e:	601a      	str	r2, [r3, #0]
 8002c90:	f3bf 8f4f 	dsb	sy
 8002c94:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002c98:	f001 fd04 	bl	80046a4 <vPortExitCritical>
				return pdPASS;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e063      	b.n	8002d68 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d103      	bne.n	8002cae <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002ca6:	f001 fcfd 	bl	80046a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002caa:	2300      	movs	r3, #0
 8002cac:	e05c      	b.n	8002d68 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002cae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d106      	bne.n	8002cc2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002cb4:	f107 0314 	add.w	r3, r7, #20
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f000 fefb 	bl	8003ab4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002cc2:	f001 fcef 	bl	80046a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002cc6:	f000 fcab 	bl	8003620 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002cca:	f001 fcbb 	bl	8004644 <vPortEnterCritical>
 8002cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002cd4:	b25b      	sxtb	r3, r3
 8002cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cda:	d103      	bne.n	8002ce4 <xQueueGenericSend+0x16c>
 8002cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002cea:	b25b      	sxtb	r3, r3
 8002cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf0:	d103      	bne.n	8002cfa <xQueueGenericSend+0x182>
 8002cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002cfa:	f001 fcd3 	bl	80046a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002cfe:	1d3a      	adds	r2, r7, #4
 8002d00:	f107 0314 	add.w	r3, r7, #20
 8002d04:	4611      	mov	r1, r2
 8002d06:	4618      	mov	r0, r3
 8002d08:	f000 feea 	bl	8003ae0 <xTaskCheckForTimeOut>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d124      	bne.n	8002d5c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002d12:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d14:	f000 fa24 	bl	8003160 <prvIsQueueFull>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d018      	beq.n	8002d50 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d20:	3310      	adds	r3, #16
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	4611      	mov	r1, r2
 8002d26:	4618      	mov	r0, r3
 8002d28:	f000 fe3e 	bl	80039a8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002d2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d2e:	f000 f9af 	bl	8003090 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002d32:	f000 fc83 	bl	800363c <xTaskResumeAll>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	f47f af7c 	bne.w	8002c36 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002d3e:	4b0c      	ldr	r3, [pc, #48]	; (8002d70 <xQueueGenericSend+0x1f8>)
 8002d40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d44:	601a      	str	r2, [r3, #0]
 8002d46:	f3bf 8f4f 	dsb	sy
 8002d4a:	f3bf 8f6f 	isb	sy
 8002d4e:	e772      	b.n	8002c36 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002d50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d52:	f000 f99d 	bl	8003090 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002d56:	f000 fc71 	bl	800363c <xTaskResumeAll>
 8002d5a:	e76c      	b.n	8002c36 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002d5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d5e:	f000 f997 	bl	8003090 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002d62:	f000 fc6b 	bl	800363c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002d66:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3738      	adds	r7, #56	; 0x38
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	e000ed04 	.word	0xe000ed04

08002d74 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b08e      	sub	sp, #56	; 0x38
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8002d86:	2300      	movs	r3, #0
 8002d88:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d10a      	bne.n	8002da6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8002d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d94:	f383 8811 	msr	BASEPRI, r3
 8002d98:	f3bf 8f6f 	isb	sy
 8002d9c:	f3bf 8f4f 	dsb	sy
 8002da0:	623b      	str	r3, [r7, #32]
}
 8002da2:	bf00      	nop
 8002da4:	e7fe      	b.n	8002da4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d00a      	beq.n	8002dc4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8002dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db2:	f383 8811 	msr	BASEPRI, r3
 8002db6:	f3bf 8f6f 	isb	sy
 8002dba:	f3bf 8f4f 	dsb	sy
 8002dbe:	61fb      	str	r3, [r7, #28]
}
 8002dc0:	bf00      	nop
 8002dc2:	e7fe      	b.n	8002dc2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002dc4:	f000 ffd4 	bl	8003d70 <xTaskGetSchedulerState>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d102      	bne.n	8002dd4 <xQueueSemaphoreTake+0x60>
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d101      	bne.n	8002dd8 <xQueueSemaphoreTake+0x64>
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e000      	b.n	8002dda <xQueueSemaphoreTake+0x66>
 8002dd8:	2300      	movs	r3, #0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d10a      	bne.n	8002df4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8002dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002de2:	f383 8811 	msr	BASEPRI, r3
 8002de6:	f3bf 8f6f 	isb	sy
 8002dea:	f3bf 8f4f 	dsb	sy
 8002dee:	61bb      	str	r3, [r7, #24]
}
 8002df0:	bf00      	nop
 8002df2:	e7fe      	b.n	8002df2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002df4:	f001 fc26 	bl	8004644 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dfc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d024      	beq.n	8002e4e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e06:	1e5a      	subs	r2, r3, #1
 8002e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e0a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d104      	bne.n	8002e1e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8002e14:	f001 f954 	bl	80040c0 <pvTaskIncrementMutexHeldCount>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e1c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00f      	beq.n	8002e46 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e28:	3310      	adds	r3, #16
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f000 fde0 	bl	80039f0 <xTaskRemoveFromEventList>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d007      	beq.n	8002e46 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002e36:	4b54      	ldr	r3, [pc, #336]	; (8002f88 <xQueueSemaphoreTake+0x214>)
 8002e38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e3c:	601a      	str	r2, [r3, #0]
 8002e3e:	f3bf 8f4f 	dsb	sy
 8002e42:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002e46:	f001 fc2d 	bl	80046a4 <vPortExitCritical>
				return pdPASS;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e097      	b.n	8002f7e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d111      	bne.n	8002e78 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8002e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00a      	beq.n	8002e70 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8002e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e5e:	f383 8811 	msr	BASEPRI, r3
 8002e62:	f3bf 8f6f 	isb	sy
 8002e66:	f3bf 8f4f 	dsb	sy
 8002e6a:	617b      	str	r3, [r7, #20]
}
 8002e6c:	bf00      	nop
 8002e6e:	e7fe      	b.n	8002e6e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8002e70:	f001 fc18 	bl	80046a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002e74:	2300      	movs	r3, #0
 8002e76:	e082      	b.n	8002f7e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d106      	bne.n	8002e8c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e7e:	f107 030c 	add.w	r3, r7, #12
 8002e82:	4618      	mov	r0, r3
 8002e84:	f000 fe16 	bl	8003ab4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002e8c:	f001 fc0a 	bl	80046a4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002e90:	f000 fbc6 	bl	8003620 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002e94:	f001 fbd6 	bl	8004644 <vPortEnterCritical>
 8002e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e9e:	b25b      	sxtb	r3, r3
 8002ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ea4:	d103      	bne.n	8002eae <xQueueSemaphoreTake+0x13a>
 8002ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eb0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002eb4:	b25b      	sxtb	r3, r3
 8002eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eba:	d103      	bne.n	8002ec4 <xQueueSemaphoreTake+0x150>
 8002ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ec4:	f001 fbee 	bl	80046a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002ec8:	463a      	mov	r2, r7
 8002eca:	f107 030c 	add.w	r3, r7, #12
 8002ece:	4611      	mov	r1, r2
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f000 fe05 	bl	8003ae0 <xTaskCheckForTimeOut>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d132      	bne.n	8002f42 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002edc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002ede:	f000 f929 	bl	8003134 <prvIsQueueEmpty>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d026      	beq.n	8002f36 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d109      	bne.n	8002f04 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8002ef0:	f001 fba8 	bl	8004644 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f000 ff57 	bl	8003dac <xTaskPriorityInherit>
 8002efe:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8002f00:	f001 fbd0 	bl	80046a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f06:	3324      	adds	r3, #36	; 0x24
 8002f08:	683a      	ldr	r2, [r7, #0]
 8002f0a:	4611      	mov	r1, r2
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f000 fd4b 	bl	80039a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002f12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002f14:	f000 f8bc 	bl	8003090 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002f18:	f000 fb90 	bl	800363c <xTaskResumeAll>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	f47f af68 	bne.w	8002df4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8002f24:	4b18      	ldr	r3, [pc, #96]	; (8002f88 <xQueueSemaphoreTake+0x214>)
 8002f26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f2a:	601a      	str	r2, [r3, #0]
 8002f2c:	f3bf 8f4f 	dsb	sy
 8002f30:	f3bf 8f6f 	isb	sy
 8002f34:	e75e      	b.n	8002df4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8002f36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002f38:	f000 f8aa 	bl	8003090 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002f3c:	f000 fb7e 	bl	800363c <xTaskResumeAll>
 8002f40:	e758      	b.n	8002df4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8002f42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002f44:	f000 f8a4 	bl	8003090 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002f48:	f000 fb78 	bl	800363c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002f4e:	f000 f8f1 	bl	8003134 <prvIsQueueEmpty>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	f43f af4d 	beq.w	8002df4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8002f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d00d      	beq.n	8002f7c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8002f60:	f001 fb70 	bl	8004644 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8002f64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002f66:	f000 f811 	bl	8002f8c <prvGetDisinheritPriorityAfterTimeout>
 8002f6a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8002f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f72:	4618      	mov	r0, r3
 8002f74:	f001 f816 	bl	8003fa4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8002f78:	f001 fb94 	bl	80046a4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002f7c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3738      	adds	r7, #56	; 0x38
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	e000ed04 	.word	0xe000ed04

08002f8c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b085      	sub	sp, #20
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d006      	beq.n	8002faa <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f1c3 0307 	rsb	r3, r3, #7
 8002fa6:	60fb      	str	r3, [r7, #12]
 8002fa8:	e001      	b.n	8002fae <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8002faa:	2300      	movs	r3, #0
 8002fac:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8002fae:	68fb      	ldr	r3, [r7, #12]
	}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3714      	adds	r7, #20
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b086      	sub	sp, #24
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	60b9      	str	r1, [r7, #8]
 8002fc6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d10d      	bne.n	8002ff6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d14d      	bne.n	800307e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f000 ff56 	bl	8003e98 <xTaskPriorityDisinherit>
 8002fec:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	609a      	str	r2, [r3, #8]
 8002ff4:	e043      	b.n	800307e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d119      	bne.n	8003030 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6858      	ldr	r0, [r3, #4]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003004:	461a      	mov	r2, r3
 8003006:	68b9      	ldr	r1, [r7, #8]
 8003008:	f001 fe0e 	bl	8004c28 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	685a      	ldr	r2, [r3, #4]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003014:	441a      	add	r2, r3
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	685a      	ldr	r2, [r3, #4]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	429a      	cmp	r2, r3
 8003024:	d32b      	bcc.n	800307e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	605a      	str	r2, [r3, #4]
 800302e:	e026      	b.n	800307e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	68d8      	ldr	r0, [r3, #12]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003038:	461a      	mov	r2, r3
 800303a:	68b9      	ldr	r1, [r7, #8]
 800303c:	f001 fdf4 	bl	8004c28 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	68da      	ldr	r2, [r3, #12]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003048:	425b      	negs	r3, r3
 800304a:	441a      	add	r2, r3
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	68da      	ldr	r2, [r3, #12]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	429a      	cmp	r2, r3
 800305a:	d207      	bcs.n	800306c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	689a      	ldr	r2, [r3, #8]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003064:	425b      	negs	r3, r3
 8003066:	441a      	add	r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2b02      	cmp	r3, #2
 8003070:	d105      	bne.n	800307e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d002      	beq.n	800307e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	3b01      	subs	r3, #1
 800307c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	1c5a      	adds	r2, r3, #1
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003086:	697b      	ldr	r3, [r7, #20]
}
 8003088:	4618      	mov	r0, r3
 800308a:	3718      	adds	r7, #24
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003098:	f001 fad4 	bl	8004644 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030a2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80030a4:	e011      	b.n	80030ca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d012      	beq.n	80030d4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	3324      	adds	r3, #36	; 0x24
 80030b2:	4618      	mov	r0, r3
 80030b4:	f000 fc9c 	bl	80039f0 <xTaskRemoveFromEventList>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d001      	beq.n	80030c2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80030be:	f000 fd71 	bl	8003ba4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80030c2:	7bfb      	ldrb	r3, [r7, #15]
 80030c4:	3b01      	subs	r3, #1
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80030ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	dce9      	bgt.n	80030a6 <prvUnlockQueue+0x16>
 80030d2:	e000      	b.n	80030d6 <prvUnlockQueue+0x46>
					break;
 80030d4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	22ff      	movs	r2, #255	; 0xff
 80030da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80030de:	f001 fae1 	bl	80046a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80030e2:	f001 faaf 	bl	8004644 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030ec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80030ee:	e011      	b.n	8003114 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	691b      	ldr	r3, [r3, #16]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d012      	beq.n	800311e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	3310      	adds	r3, #16
 80030fc:	4618      	mov	r0, r3
 80030fe:	f000 fc77 	bl	80039f0 <xTaskRemoveFromEventList>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d001      	beq.n	800310c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003108:	f000 fd4c 	bl	8003ba4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800310c:	7bbb      	ldrb	r3, [r7, #14]
 800310e:	3b01      	subs	r3, #1
 8003110:	b2db      	uxtb	r3, r3
 8003112:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003114:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003118:	2b00      	cmp	r3, #0
 800311a:	dce9      	bgt.n	80030f0 <prvUnlockQueue+0x60>
 800311c:	e000      	b.n	8003120 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800311e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	22ff      	movs	r2, #255	; 0xff
 8003124:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003128:	f001 fabc 	bl	80046a4 <vPortExitCritical>
}
 800312c:	bf00      	nop
 800312e:	3710      	adds	r7, #16
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b084      	sub	sp, #16
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800313c:	f001 fa82 	bl	8004644 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003144:	2b00      	cmp	r3, #0
 8003146:	d102      	bne.n	800314e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003148:	2301      	movs	r3, #1
 800314a:	60fb      	str	r3, [r7, #12]
 800314c:	e001      	b.n	8003152 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800314e:	2300      	movs	r3, #0
 8003150:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003152:	f001 faa7 	bl	80046a4 <vPortExitCritical>

	return xReturn;
 8003156:	68fb      	ldr	r3, [r7, #12]
}
 8003158:	4618      	mov	r0, r3
 800315a:	3710      	adds	r7, #16
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003168:	f001 fa6c 	bl	8004644 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003174:	429a      	cmp	r2, r3
 8003176:	d102      	bne.n	800317e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003178:	2301      	movs	r3, #1
 800317a:	60fb      	str	r3, [r7, #12]
 800317c:	e001      	b.n	8003182 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800317e:	2300      	movs	r3, #0
 8003180:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003182:	f001 fa8f 	bl	80046a4 <vPortExitCritical>

	return xReturn;
 8003186:	68fb      	ldr	r3, [r7, #12]
}
 8003188:	4618      	mov	r0, r3
 800318a:	3710      	adds	r7, #16
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003190:	b580      	push	{r7, lr}
 8003192:	b08e      	sub	sp, #56	; 0x38
 8003194:	af04      	add	r7, sp, #16
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	60b9      	str	r1, [r7, #8]
 800319a:	607a      	str	r2, [r7, #4]
 800319c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800319e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d10a      	bne.n	80031ba <xTaskCreateStatic+0x2a>
	__asm volatile
 80031a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031a8:	f383 8811 	msr	BASEPRI, r3
 80031ac:	f3bf 8f6f 	isb	sy
 80031b0:	f3bf 8f4f 	dsb	sy
 80031b4:	623b      	str	r3, [r7, #32]
}
 80031b6:	bf00      	nop
 80031b8:	e7fe      	b.n	80031b8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80031ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d10a      	bne.n	80031d6 <xTaskCreateStatic+0x46>
	__asm volatile
 80031c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031c4:	f383 8811 	msr	BASEPRI, r3
 80031c8:	f3bf 8f6f 	isb	sy
 80031cc:	f3bf 8f4f 	dsb	sy
 80031d0:	61fb      	str	r3, [r7, #28]
}
 80031d2:	bf00      	nop
 80031d4:	e7fe      	b.n	80031d4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80031d6:	23b4      	movs	r3, #180	; 0xb4
 80031d8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	2bb4      	cmp	r3, #180	; 0xb4
 80031de:	d00a      	beq.n	80031f6 <xTaskCreateStatic+0x66>
	__asm volatile
 80031e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031e4:	f383 8811 	msr	BASEPRI, r3
 80031e8:	f3bf 8f6f 	isb	sy
 80031ec:	f3bf 8f4f 	dsb	sy
 80031f0:	61bb      	str	r3, [r7, #24]
}
 80031f2:	bf00      	nop
 80031f4:	e7fe      	b.n	80031f4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80031f6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80031f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d01e      	beq.n	800323c <xTaskCreateStatic+0xac>
 80031fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003200:	2b00      	cmp	r3, #0
 8003202:	d01b      	beq.n	800323c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003206:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800320c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800320e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003210:	2202      	movs	r2, #2
 8003212:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003216:	2300      	movs	r3, #0
 8003218:	9303      	str	r3, [sp, #12]
 800321a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321c:	9302      	str	r3, [sp, #8]
 800321e:	f107 0314 	add.w	r3, r7, #20
 8003222:	9301      	str	r3, [sp, #4]
 8003224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003226:	9300      	str	r3, [sp, #0]
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	68b9      	ldr	r1, [r7, #8]
 800322e:	68f8      	ldr	r0, [r7, #12]
 8003230:	f000 f850 	bl	80032d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003234:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003236:	f000 f8eb 	bl	8003410 <prvAddNewTaskToReadyList>
 800323a:	e001      	b.n	8003240 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800323c:	2300      	movs	r3, #0
 800323e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003240:	697b      	ldr	r3, [r7, #20]
	}
 8003242:	4618      	mov	r0, r3
 8003244:	3728      	adds	r7, #40	; 0x28
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}

0800324a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800324a:	b580      	push	{r7, lr}
 800324c:	b08c      	sub	sp, #48	; 0x30
 800324e:	af04      	add	r7, sp, #16
 8003250:	60f8      	str	r0, [r7, #12]
 8003252:	60b9      	str	r1, [r7, #8]
 8003254:	603b      	str	r3, [r7, #0]
 8003256:	4613      	mov	r3, r2
 8003258:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800325a:	88fb      	ldrh	r3, [r7, #6]
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	4618      	mov	r0, r3
 8003260:	f001 fad2 	bl	8004808 <pvPortMalloc>
 8003264:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d00e      	beq.n	800328a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800326c:	20b4      	movs	r0, #180	; 0xb4
 800326e:	f001 facb 	bl	8004808 <pvPortMalloc>
 8003272:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d003      	beq.n	8003282 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	697a      	ldr	r2, [r7, #20]
 800327e:	631a      	str	r2, [r3, #48]	; 0x30
 8003280:	e005      	b.n	800328e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003282:	6978      	ldr	r0, [r7, #20]
 8003284:	f001 fb8c 	bl	80049a0 <vPortFree>
 8003288:	e001      	b.n	800328e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800328a:	2300      	movs	r3, #0
 800328c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d017      	beq.n	80032c4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	2200      	movs	r2, #0
 8003298:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800329c:	88fa      	ldrh	r2, [r7, #6]
 800329e:	2300      	movs	r3, #0
 80032a0:	9303      	str	r3, [sp, #12]
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	9302      	str	r3, [sp, #8]
 80032a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032a8:	9301      	str	r3, [sp, #4]
 80032aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ac:	9300      	str	r3, [sp, #0]
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	68b9      	ldr	r1, [r7, #8]
 80032b2:	68f8      	ldr	r0, [r7, #12]
 80032b4:	f000 f80e 	bl	80032d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80032b8:	69f8      	ldr	r0, [r7, #28]
 80032ba:	f000 f8a9 	bl	8003410 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80032be:	2301      	movs	r3, #1
 80032c0:	61bb      	str	r3, [r7, #24]
 80032c2:	e002      	b.n	80032ca <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80032c4:	f04f 33ff 	mov.w	r3, #4294967295
 80032c8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80032ca:	69bb      	ldr	r3, [r7, #24]
	}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3720      	adds	r7, #32
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b088      	sub	sp, #32
 80032d8:	af00      	add	r7, sp, #0
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	60b9      	str	r1, [r7, #8]
 80032de:	607a      	str	r2, [r7, #4]
 80032e0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80032e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80032ec:	3b01      	subs	r3, #1
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	4413      	add	r3, r2
 80032f2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	f023 0307 	bic.w	r3, r3, #7
 80032fa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	f003 0307 	and.w	r3, r3, #7
 8003302:	2b00      	cmp	r3, #0
 8003304:	d00a      	beq.n	800331c <prvInitialiseNewTask+0x48>
	__asm volatile
 8003306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800330a:	f383 8811 	msr	BASEPRI, r3
 800330e:	f3bf 8f6f 	isb	sy
 8003312:	f3bf 8f4f 	dsb	sy
 8003316:	617b      	str	r3, [r7, #20]
}
 8003318:	bf00      	nop
 800331a:	e7fe      	b.n	800331a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d01f      	beq.n	8003362 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003322:	2300      	movs	r3, #0
 8003324:	61fb      	str	r3, [r7, #28]
 8003326:	e012      	b.n	800334e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003328:	68ba      	ldr	r2, [r7, #8]
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	4413      	add	r3, r2
 800332e:	7819      	ldrb	r1, [r3, #0]
 8003330:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	4413      	add	r3, r2
 8003336:	3334      	adds	r3, #52	; 0x34
 8003338:	460a      	mov	r2, r1
 800333a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800333c:	68ba      	ldr	r2, [r7, #8]
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	4413      	add	r3, r2
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d006      	beq.n	8003356 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	3301      	adds	r3, #1
 800334c:	61fb      	str	r3, [r7, #28]
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	2b0f      	cmp	r3, #15
 8003352:	d9e9      	bls.n	8003328 <prvInitialiseNewTask+0x54>
 8003354:	e000      	b.n	8003358 <prvInitialiseNewTask+0x84>
			{
				break;
 8003356:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800335a:	2200      	movs	r2, #0
 800335c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003360:	e003      	b.n	800336a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003364:	2200      	movs	r2, #0
 8003366:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800336a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800336c:	2b06      	cmp	r3, #6
 800336e:	d901      	bls.n	8003374 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003370:	2306      	movs	r3, #6
 8003372:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003376:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003378:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800337a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800337c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800337e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003382:	2200      	movs	r2, #0
 8003384:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003388:	3304      	adds	r3, #4
 800338a:	4618      	mov	r0, r3
 800338c:	f7ff f9d9 	bl	8002742 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003392:	3318      	adds	r3, #24
 8003394:	4618      	mov	r0, r3
 8003396:	f7ff f9d4 	bl	8002742 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800339a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800339c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800339e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033a2:	f1c3 0207 	rsb	r2, r3, #7
 80033a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80033aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033ae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80033b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b2:	2200      	movs	r2, #0
 80033b4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80033b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80033c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c2:	334c      	adds	r3, #76	; 0x4c
 80033c4:	2260      	movs	r2, #96	; 0x60
 80033c6:	2100      	movs	r1, #0
 80033c8:	4618      	mov	r0, r3
 80033ca:	f001 fc3b 	bl	8004c44 <memset>
 80033ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d0:	4a0c      	ldr	r2, [pc, #48]	; (8003404 <prvInitialiseNewTask+0x130>)
 80033d2:	651a      	str	r2, [r3, #80]	; 0x50
 80033d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d6:	4a0c      	ldr	r2, [pc, #48]	; (8003408 <prvInitialiseNewTask+0x134>)
 80033d8:	655a      	str	r2, [r3, #84]	; 0x54
 80033da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033dc:	4a0b      	ldr	r2, [pc, #44]	; (800340c <prvInitialiseNewTask+0x138>)
 80033de:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80033e0:	683a      	ldr	r2, [r7, #0]
 80033e2:	68f9      	ldr	r1, [r7, #12]
 80033e4:	69b8      	ldr	r0, [r7, #24]
 80033e6:	f001 f803 	bl	80043f0 <pxPortInitialiseStack>
 80033ea:	4602      	mov	r2, r0
 80033ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ee:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80033f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d002      	beq.n	80033fc <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80033f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033fa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80033fc:	bf00      	nop
 80033fe:	3720      	adds	r7, #32
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	08004eec 	.word	0x08004eec
 8003408:	08004f0c 	.word	0x08004f0c
 800340c:	08004ecc 	.word	0x08004ecc

08003410 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003418:	f001 f914 	bl	8004644 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800341c:	4b2a      	ldr	r3, [pc, #168]	; (80034c8 <prvAddNewTaskToReadyList+0xb8>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	3301      	adds	r3, #1
 8003422:	4a29      	ldr	r2, [pc, #164]	; (80034c8 <prvAddNewTaskToReadyList+0xb8>)
 8003424:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003426:	4b29      	ldr	r3, [pc, #164]	; (80034cc <prvAddNewTaskToReadyList+0xbc>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d109      	bne.n	8003442 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800342e:	4a27      	ldr	r2, [pc, #156]	; (80034cc <prvAddNewTaskToReadyList+0xbc>)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003434:	4b24      	ldr	r3, [pc, #144]	; (80034c8 <prvAddNewTaskToReadyList+0xb8>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2b01      	cmp	r3, #1
 800343a:	d110      	bne.n	800345e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800343c:	f000 fbd6 	bl	8003bec <prvInitialiseTaskLists>
 8003440:	e00d      	b.n	800345e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003442:	4b23      	ldr	r3, [pc, #140]	; (80034d0 <prvAddNewTaskToReadyList+0xc0>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d109      	bne.n	800345e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800344a:	4b20      	ldr	r3, [pc, #128]	; (80034cc <prvAddNewTaskToReadyList+0xbc>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003454:	429a      	cmp	r2, r3
 8003456:	d802      	bhi.n	800345e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003458:	4a1c      	ldr	r2, [pc, #112]	; (80034cc <prvAddNewTaskToReadyList+0xbc>)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800345e:	4b1d      	ldr	r3, [pc, #116]	; (80034d4 <prvAddNewTaskToReadyList+0xc4>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	3301      	adds	r3, #1
 8003464:	4a1b      	ldr	r2, [pc, #108]	; (80034d4 <prvAddNewTaskToReadyList+0xc4>)
 8003466:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346c:	2201      	movs	r2, #1
 800346e:	409a      	lsls	r2, r3
 8003470:	4b19      	ldr	r3, [pc, #100]	; (80034d8 <prvAddNewTaskToReadyList+0xc8>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4313      	orrs	r3, r2
 8003476:	4a18      	ldr	r2, [pc, #96]	; (80034d8 <prvAddNewTaskToReadyList+0xc8>)
 8003478:	6013      	str	r3, [r2, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800347e:	4613      	mov	r3, r2
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	4413      	add	r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	4a15      	ldr	r2, [pc, #84]	; (80034dc <prvAddNewTaskToReadyList+0xcc>)
 8003488:	441a      	add	r2, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	3304      	adds	r3, #4
 800348e:	4619      	mov	r1, r3
 8003490:	4610      	mov	r0, r2
 8003492:	f7ff f963 	bl	800275c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003496:	f001 f905 	bl	80046a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800349a:	4b0d      	ldr	r3, [pc, #52]	; (80034d0 <prvAddNewTaskToReadyList+0xc0>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00e      	beq.n	80034c0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80034a2:	4b0a      	ldr	r3, [pc, #40]	; (80034cc <prvAddNewTaskToReadyList+0xbc>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d207      	bcs.n	80034c0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80034b0:	4b0b      	ldr	r3, [pc, #44]	; (80034e0 <prvAddNewTaskToReadyList+0xd0>)
 80034b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034b6:	601a      	str	r2, [r3, #0]
 80034b8:	f3bf 8f4f 	dsb	sy
 80034bc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80034c0:	bf00      	nop
 80034c2:	3708      	adds	r7, #8
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	20000444 	.word	0x20000444
 80034cc:	20000344 	.word	0x20000344
 80034d0:	20000450 	.word	0x20000450
 80034d4:	20000460 	.word	0x20000460
 80034d8:	2000044c 	.word	0x2000044c
 80034dc:	20000348 	.word	0x20000348
 80034e0:	e000ed04 	.word	0xe000ed04

080034e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80034ec:	2300      	movs	r3, #0
 80034ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d017      	beq.n	8003526 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80034f6:	4b13      	ldr	r3, [pc, #76]	; (8003544 <vTaskDelay+0x60>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00a      	beq.n	8003514 <vTaskDelay+0x30>
	__asm volatile
 80034fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003502:	f383 8811 	msr	BASEPRI, r3
 8003506:	f3bf 8f6f 	isb	sy
 800350a:	f3bf 8f4f 	dsb	sy
 800350e:	60bb      	str	r3, [r7, #8]
}
 8003510:	bf00      	nop
 8003512:	e7fe      	b.n	8003512 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003514:	f000 f884 	bl	8003620 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003518:	2100      	movs	r1, #0
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 ff02 	bl	8004324 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003520:	f000 f88c 	bl	800363c <xTaskResumeAll>
 8003524:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d107      	bne.n	800353c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800352c:	4b06      	ldr	r3, [pc, #24]	; (8003548 <vTaskDelay+0x64>)
 800352e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003532:	601a      	str	r2, [r3, #0]
 8003534:	f3bf 8f4f 	dsb	sy
 8003538:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800353c:	bf00      	nop
 800353e:	3710      	adds	r7, #16
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}
 8003544:	2000046c 	.word	0x2000046c
 8003548:	e000ed04 	.word	0xe000ed04

0800354c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b08a      	sub	sp, #40	; 0x28
 8003550:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003552:	2300      	movs	r3, #0
 8003554:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003556:	2300      	movs	r3, #0
 8003558:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800355a:	463a      	mov	r2, r7
 800355c:	1d39      	adds	r1, r7, #4
 800355e:	f107 0308 	add.w	r3, r7, #8
 8003562:	4618      	mov	r0, r3
 8003564:	f7fc ffb0 	bl	80004c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003568:	6839      	ldr	r1, [r7, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	68ba      	ldr	r2, [r7, #8]
 800356e:	9202      	str	r2, [sp, #8]
 8003570:	9301      	str	r3, [sp, #4]
 8003572:	2300      	movs	r3, #0
 8003574:	9300      	str	r3, [sp, #0]
 8003576:	2300      	movs	r3, #0
 8003578:	460a      	mov	r2, r1
 800357a:	4921      	ldr	r1, [pc, #132]	; (8003600 <vTaskStartScheduler+0xb4>)
 800357c:	4821      	ldr	r0, [pc, #132]	; (8003604 <vTaskStartScheduler+0xb8>)
 800357e:	f7ff fe07 	bl	8003190 <xTaskCreateStatic>
 8003582:	4603      	mov	r3, r0
 8003584:	4a20      	ldr	r2, [pc, #128]	; (8003608 <vTaskStartScheduler+0xbc>)
 8003586:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003588:	4b1f      	ldr	r3, [pc, #124]	; (8003608 <vTaskStartScheduler+0xbc>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d002      	beq.n	8003596 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003590:	2301      	movs	r3, #1
 8003592:	617b      	str	r3, [r7, #20]
 8003594:	e001      	b.n	800359a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003596:	2300      	movs	r3, #0
 8003598:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	2b01      	cmp	r3, #1
 800359e:	d11b      	bne.n	80035d8 <vTaskStartScheduler+0x8c>
	__asm volatile
 80035a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035a4:	f383 8811 	msr	BASEPRI, r3
 80035a8:	f3bf 8f6f 	isb	sy
 80035ac:	f3bf 8f4f 	dsb	sy
 80035b0:	613b      	str	r3, [r7, #16]
}
 80035b2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80035b4:	4b15      	ldr	r3, [pc, #84]	; (800360c <vTaskStartScheduler+0xc0>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	334c      	adds	r3, #76	; 0x4c
 80035ba:	4a15      	ldr	r2, [pc, #84]	; (8003610 <vTaskStartScheduler+0xc4>)
 80035bc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80035be:	4b15      	ldr	r3, [pc, #84]	; (8003614 <vTaskStartScheduler+0xc8>)
 80035c0:	f04f 32ff 	mov.w	r2, #4294967295
 80035c4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80035c6:	4b14      	ldr	r3, [pc, #80]	; (8003618 <vTaskStartScheduler+0xcc>)
 80035c8:	2201      	movs	r2, #1
 80035ca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80035cc:	4b13      	ldr	r3, [pc, #76]	; (800361c <vTaskStartScheduler+0xd0>)
 80035ce:	2200      	movs	r2, #0
 80035d0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80035d2:	f000 ff95 	bl	8004500 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80035d6:	e00e      	b.n	80035f6 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035de:	d10a      	bne.n	80035f6 <vTaskStartScheduler+0xaa>
	__asm volatile
 80035e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035e4:	f383 8811 	msr	BASEPRI, r3
 80035e8:	f3bf 8f6f 	isb	sy
 80035ec:	f3bf 8f4f 	dsb	sy
 80035f0:	60fb      	str	r3, [r7, #12]
}
 80035f2:	bf00      	nop
 80035f4:	e7fe      	b.n	80035f4 <vTaskStartScheduler+0xa8>
}
 80035f6:	bf00      	nop
 80035f8:	3718      	adds	r7, #24
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	08004eac 	.word	0x08004eac
 8003604:	08003bbd 	.word	0x08003bbd
 8003608:	20000468 	.word	0x20000468
 800360c:	20000344 	.word	0x20000344
 8003610:	20000010 	.word	0x20000010
 8003614:	20000464 	.word	0x20000464
 8003618:	20000450 	.word	0x20000450
 800361c:	20000448 	.word	0x20000448

08003620 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003620:	b480      	push	{r7}
 8003622:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003624:	4b04      	ldr	r3, [pc, #16]	; (8003638 <vTaskSuspendAll+0x18>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	3301      	adds	r3, #1
 800362a:	4a03      	ldr	r2, [pc, #12]	; (8003638 <vTaskSuspendAll+0x18>)
 800362c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800362e:	bf00      	nop
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr
 8003638:	2000046c 	.word	0x2000046c

0800363c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003642:	2300      	movs	r3, #0
 8003644:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003646:	2300      	movs	r3, #0
 8003648:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800364a:	4b41      	ldr	r3, [pc, #260]	; (8003750 <xTaskResumeAll+0x114>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d10a      	bne.n	8003668 <xTaskResumeAll+0x2c>
	__asm volatile
 8003652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003656:	f383 8811 	msr	BASEPRI, r3
 800365a:	f3bf 8f6f 	isb	sy
 800365e:	f3bf 8f4f 	dsb	sy
 8003662:	603b      	str	r3, [r7, #0]
}
 8003664:	bf00      	nop
 8003666:	e7fe      	b.n	8003666 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003668:	f000 ffec 	bl	8004644 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800366c:	4b38      	ldr	r3, [pc, #224]	; (8003750 <xTaskResumeAll+0x114>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	3b01      	subs	r3, #1
 8003672:	4a37      	ldr	r2, [pc, #220]	; (8003750 <xTaskResumeAll+0x114>)
 8003674:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003676:	4b36      	ldr	r3, [pc, #216]	; (8003750 <xTaskResumeAll+0x114>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d161      	bne.n	8003742 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800367e:	4b35      	ldr	r3, [pc, #212]	; (8003754 <xTaskResumeAll+0x118>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d05d      	beq.n	8003742 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003686:	e02e      	b.n	80036e6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003688:	4b33      	ldr	r3, [pc, #204]	; (8003758 <xTaskResumeAll+0x11c>)
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	3318      	adds	r3, #24
 8003694:	4618      	mov	r0, r3
 8003696:	f7ff f8be 	bl	8002816 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	3304      	adds	r3, #4
 800369e:	4618      	mov	r0, r3
 80036a0:	f7ff f8b9 	bl	8002816 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a8:	2201      	movs	r2, #1
 80036aa:	409a      	lsls	r2, r3
 80036ac:	4b2b      	ldr	r3, [pc, #172]	; (800375c <xTaskResumeAll+0x120>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	4a2a      	ldr	r2, [pc, #168]	; (800375c <xTaskResumeAll+0x120>)
 80036b4:	6013      	str	r3, [r2, #0]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ba:	4613      	mov	r3, r2
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	4413      	add	r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	4a27      	ldr	r2, [pc, #156]	; (8003760 <xTaskResumeAll+0x124>)
 80036c4:	441a      	add	r2, r3
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	3304      	adds	r3, #4
 80036ca:	4619      	mov	r1, r3
 80036cc:	4610      	mov	r0, r2
 80036ce:	f7ff f845 	bl	800275c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036d6:	4b23      	ldr	r3, [pc, #140]	; (8003764 <xTaskResumeAll+0x128>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036dc:	429a      	cmp	r2, r3
 80036de:	d302      	bcc.n	80036e6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80036e0:	4b21      	ldr	r3, [pc, #132]	; (8003768 <xTaskResumeAll+0x12c>)
 80036e2:	2201      	movs	r2, #1
 80036e4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80036e6:	4b1c      	ldr	r3, [pc, #112]	; (8003758 <xTaskResumeAll+0x11c>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d1cc      	bne.n	8003688 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d001      	beq.n	80036f8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80036f4:	f000 fb1c 	bl	8003d30 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80036f8:	4b1c      	ldr	r3, [pc, #112]	; (800376c <xTaskResumeAll+0x130>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d010      	beq.n	8003726 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003704:	f000 f836 	bl	8003774 <xTaskIncrementTick>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d002      	beq.n	8003714 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800370e:	4b16      	ldr	r3, [pc, #88]	; (8003768 <xTaskResumeAll+0x12c>)
 8003710:	2201      	movs	r2, #1
 8003712:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	3b01      	subs	r3, #1
 8003718:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d1f1      	bne.n	8003704 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8003720:	4b12      	ldr	r3, [pc, #72]	; (800376c <xTaskResumeAll+0x130>)
 8003722:	2200      	movs	r2, #0
 8003724:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003726:	4b10      	ldr	r3, [pc, #64]	; (8003768 <xTaskResumeAll+0x12c>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d009      	beq.n	8003742 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800372e:	2301      	movs	r3, #1
 8003730:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003732:	4b0f      	ldr	r3, [pc, #60]	; (8003770 <xTaskResumeAll+0x134>)
 8003734:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003738:	601a      	str	r2, [r3, #0]
 800373a:	f3bf 8f4f 	dsb	sy
 800373e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003742:	f000 ffaf 	bl	80046a4 <vPortExitCritical>

	return xAlreadyYielded;
 8003746:	68bb      	ldr	r3, [r7, #8]
}
 8003748:	4618      	mov	r0, r3
 800374a:	3710      	adds	r7, #16
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	2000046c 	.word	0x2000046c
 8003754:	20000444 	.word	0x20000444
 8003758:	20000404 	.word	0x20000404
 800375c:	2000044c 	.word	0x2000044c
 8003760:	20000348 	.word	0x20000348
 8003764:	20000344 	.word	0x20000344
 8003768:	20000458 	.word	0x20000458
 800376c:	20000454 	.word	0x20000454
 8003770:	e000ed04 	.word	0xe000ed04

08003774 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b086      	sub	sp, #24
 8003778:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800377a:	2300      	movs	r3, #0
 800377c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800377e:	4b4e      	ldr	r3, [pc, #312]	; (80038b8 <xTaskIncrementTick+0x144>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2b00      	cmp	r3, #0
 8003784:	f040 808e 	bne.w	80038a4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003788:	4b4c      	ldr	r3, [pc, #304]	; (80038bc <xTaskIncrementTick+0x148>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	3301      	adds	r3, #1
 800378e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003790:	4a4a      	ldr	r2, [pc, #296]	; (80038bc <xTaskIncrementTick+0x148>)
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d120      	bne.n	80037de <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800379c:	4b48      	ldr	r3, [pc, #288]	; (80038c0 <xTaskIncrementTick+0x14c>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d00a      	beq.n	80037bc <xTaskIncrementTick+0x48>
	__asm volatile
 80037a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037aa:	f383 8811 	msr	BASEPRI, r3
 80037ae:	f3bf 8f6f 	isb	sy
 80037b2:	f3bf 8f4f 	dsb	sy
 80037b6:	603b      	str	r3, [r7, #0]
}
 80037b8:	bf00      	nop
 80037ba:	e7fe      	b.n	80037ba <xTaskIncrementTick+0x46>
 80037bc:	4b40      	ldr	r3, [pc, #256]	; (80038c0 <xTaskIncrementTick+0x14c>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	60fb      	str	r3, [r7, #12]
 80037c2:	4b40      	ldr	r3, [pc, #256]	; (80038c4 <xTaskIncrementTick+0x150>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a3e      	ldr	r2, [pc, #248]	; (80038c0 <xTaskIncrementTick+0x14c>)
 80037c8:	6013      	str	r3, [r2, #0]
 80037ca:	4a3e      	ldr	r2, [pc, #248]	; (80038c4 <xTaskIncrementTick+0x150>)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6013      	str	r3, [r2, #0]
 80037d0:	4b3d      	ldr	r3, [pc, #244]	; (80038c8 <xTaskIncrementTick+0x154>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	3301      	adds	r3, #1
 80037d6:	4a3c      	ldr	r2, [pc, #240]	; (80038c8 <xTaskIncrementTick+0x154>)
 80037d8:	6013      	str	r3, [r2, #0]
 80037da:	f000 faa9 	bl	8003d30 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80037de:	4b3b      	ldr	r3, [pc, #236]	; (80038cc <xTaskIncrementTick+0x158>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	693a      	ldr	r2, [r7, #16]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d348      	bcc.n	800387a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037e8:	4b35      	ldr	r3, [pc, #212]	; (80038c0 <xTaskIncrementTick+0x14c>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d104      	bne.n	80037fc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037f2:	4b36      	ldr	r3, [pc, #216]	; (80038cc <xTaskIncrementTick+0x158>)
 80037f4:	f04f 32ff 	mov.w	r2, #4294967295
 80037f8:	601a      	str	r2, [r3, #0]
					break;
 80037fa:	e03e      	b.n	800387a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037fc:	4b30      	ldr	r3, [pc, #192]	; (80038c0 <xTaskIncrementTick+0x14c>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800380c:	693a      	ldr	r2, [r7, #16]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	429a      	cmp	r2, r3
 8003812:	d203      	bcs.n	800381c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003814:	4a2d      	ldr	r2, [pc, #180]	; (80038cc <xTaskIncrementTick+0x158>)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800381a:	e02e      	b.n	800387a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	3304      	adds	r3, #4
 8003820:	4618      	mov	r0, r3
 8003822:	f7fe fff8 	bl	8002816 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800382a:	2b00      	cmp	r3, #0
 800382c:	d004      	beq.n	8003838 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	3318      	adds	r3, #24
 8003832:	4618      	mov	r0, r3
 8003834:	f7fe ffef 	bl	8002816 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383c:	2201      	movs	r2, #1
 800383e:	409a      	lsls	r2, r3
 8003840:	4b23      	ldr	r3, [pc, #140]	; (80038d0 <xTaskIncrementTick+0x15c>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4313      	orrs	r3, r2
 8003846:	4a22      	ldr	r2, [pc, #136]	; (80038d0 <xTaskIncrementTick+0x15c>)
 8003848:	6013      	str	r3, [r2, #0]
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800384e:	4613      	mov	r3, r2
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	4413      	add	r3, r2
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	4a1f      	ldr	r2, [pc, #124]	; (80038d4 <xTaskIncrementTick+0x160>)
 8003858:	441a      	add	r2, r3
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	3304      	adds	r3, #4
 800385e:	4619      	mov	r1, r3
 8003860:	4610      	mov	r0, r2
 8003862:	f7fe ff7b 	bl	800275c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800386a:	4b1b      	ldr	r3, [pc, #108]	; (80038d8 <xTaskIncrementTick+0x164>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003870:	429a      	cmp	r2, r3
 8003872:	d3b9      	bcc.n	80037e8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003874:	2301      	movs	r3, #1
 8003876:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003878:	e7b6      	b.n	80037e8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800387a:	4b17      	ldr	r3, [pc, #92]	; (80038d8 <xTaskIncrementTick+0x164>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003880:	4914      	ldr	r1, [pc, #80]	; (80038d4 <xTaskIncrementTick+0x160>)
 8003882:	4613      	mov	r3, r2
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	4413      	add	r3, r2
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	440b      	add	r3, r1
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2b01      	cmp	r3, #1
 8003890:	d901      	bls.n	8003896 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8003892:	2301      	movs	r3, #1
 8003894:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003896:	4b11      	ldr	r3, [pc, #68]	; (80038dc <xTaskIncrementTick+0x168>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d007      	beq.n	80038ae <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800389e:	2301      	movs	r3, #1
 80038a0:	617b      	str	r3, [r7, #20]
 80038a2:	e004      	b.n	80038ae <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80038a4:	4b0e      	ldr	r3, [pc, #56]	; (80038e0 <xTaskIncrementTick+0x16c>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	3301      	adds	r3, #1
 80038aa:	4a0d      	ldr	r2, [pc, #52]	; (80038e0 <xTaskIncrementTick+0x16c>)
 80038ac:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80038ae:	697b      	ldr	r3, [r7, #20]
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3718      	adds	r7, #24
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	2000046c 	.word	0x2000046c
 80038bc:	20000448 	.word	0x20000448
 80038c0:	200003fc 	.word	0x200003fc
 80038c4:	20000400 	.word	0x20000400
 80038c8:	2000045c 	.word	0x2000045c
 80038cc:	20000464 	.word	0x20000464
 80038d0:	2000044c 	.word	0x2000044c
 80038d4:	20000348 	.word	0x20000348
 80038d8:	20000344 	.word	0x20000344
 80038dc:	20000458 	.word	0x20000458
 80038e0:	20000454 	.word	0x20000454

080038e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80038e4:	b480      	push	{r7}
 80038e6:	b087      	sub	sp, #28
 80038e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80038ea:	4b29      	ldr	r3, [pc, #164]	; (8003990 <vTaskSwitchContext+0xac>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d003      	beq.n	80038fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80038f2:	4b28      	ldr	r3, [pc, #160]	; (8003994 <vTaskSwitchContext+0xb0>)
 80038f4:	2201      	movs	r2, #1
 80038f6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80038f8:	e044      	b.n	8003984 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80038fa:	4b26      	ldr	r3, [pc, #152]	; (8003994 <vTaskSwitchContext+0xb0>)
 80038fc:	2200      	movs	r2, #0
 80038fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003900:	4b25      	ldr	r3, [pc, #148]	; (8003998 <vTaskSwitchContext+0xb4>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	fab3 f383 	clz	r3, r3
 800390c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800390e:	7afb      	ldrb	r3, [r7, #11]
 8003910:	f1c3 031f 	rsb	r3, r3, #31
 8003914:	617b      	str	r3, [r7, #20]
 8003916:	4921      	ldr	r1, [pc, #132]	; (800399c <vTaskSwitchContext+0xb8>)
 8003918:	697a      	ldr	r2, [r7, #20]
 800391a:	4613      	mov	r3, r2
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	4413      	add	r3, r2
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	440b      	add	r3, r1
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d10a      	bne.n	8003940 <vTaskSwitchContext+0x5c>
	__asm volatile
 800392a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800392e:	f383 8811 	msr	BASEPRI, r3
 8003932:	f3bf 8f6f 	isb	sy
 8003936:	f3bf 8f4f 	dsb	sy
 800393a:	607b      	str	r3, [r7, #4]
}
 800393c:	bf00      	nop
 800393e:	e7fe      	b.n	800393e <vTaskSwitchContext+0x5a>
 8003940:	697a      	ldr	r2, [r7, #20]
 8003942:	4613      	mov	r3, r2
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	4413      	add	r3, r2
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	4a14      	ldr	r2, [pc, #80]	; (800399c <vTaskSwitchContext+0xb8>)
 800394c:	4413      	add	r3, r2
 800394e:	613b      	str	r3, [r7, #16]
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	685a      	ldr	r2, [r3, #4]
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	605a      	str	r2, [r3, #4]
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	685a      	ldr	r2, [r3, #4]
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	3308      	adds	r3, #8
 8003962:	429a      	cmp	r2, r3
 8003964:	d104      	bne.n	8003970 <vTaskSwitchContext+0x8c>
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	685a      	ldr	r2, [r3, #4]
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	605a      	str	r2, [r3, #4]
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	4a0a      	ldr	r2, [pc, #40]	; (80039a0 <vTaskSwitchContext+0xbc>)
 8003978:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800397a:	4b09      	ldr	r3, [pc, #36]	; (80039a0 <vTaskSwitchContext+0xbc>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	334c      	adds	r3, #76	; 0x4c
 8003980:	4a08      	ldr	r2, [pc, #32]	; (80039a4 <vTaskSwitchContext+0xc0>)
 8003982:	6013      	str	r3, [r2, #0]
}
 8003984:	bf00      	nop
 8003986:	371c      	adds	r7, #28
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr
 8003990:	2000046c 	.word	0x2000046c
 8003994:	20000458 	.word	0x20000458
 8003998:	2000044c 	.word	0x2000044c
 800399c:	20000348 	.word	0x20000348
 80039a0:	20000344 	.word	0x20000344
 80039a4:	20000010 	.word	0x20000010

080039a8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d10a      	bne.n	80039ce <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80039b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039bc:	f383 8811 	msr	BASEPRI, r3
 80039c0:	f3bf 8f6f 	isb	sy
 80039c4:	f3bf 8f4f 	dsb	sy
 80039c8:	60fb      	str	r3, [r7, #12]
}
 80039ca:	bf00      	nop
 80039cc:	e7fe      	b.n	80039cc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80039ce:	4b07      	ldr	r3, [pc, #28]	; (80039ec <vTaskPlaceOnEventList+0x44>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	3318      	adds	r3, #24
 80039d4:	4619      	mov	r1, r3
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f7fe fee4 	bl	80027a4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80039dc:	2101      	movs	r1, #1
 80039de:	6838      	ldr	r0, [r7, #0]
 80039e0:	f000 fca0 	bl	8004324 <prvAddCurrentTaskToDelayedList>
}
 80039e4:	bf00      	nop
 80039e6:	3710      	adds	r7, #16
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	20000344 	.word	0x20000344

080039f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b086      	sub	sp, #24
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d10a      	bne.n	8003a1c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a0a:	f383 8811 	msr	BASEPRI, r3
 8003a0e:	f3bf 8f6f 	isb	sy
 8003a12:	f3bf 8f4f 	dsb	sy
 8003a16:	60fb      	str	r3, [r7, #12]
}
 8003a18:	bf00      	nop
 8003a1a:	e7fe      	b.n	8003a1a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	3318      	adds	r3, #24
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7fe fef8 	bl	8002816 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a26:	4b1d      	ldr	r3, [pc, #116]	; (8003a9c <xTaskRemoveFromEventList+0xac>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d11c      	bne.n	8003a68 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	3304      	adds	r3, #4
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7fe feef 	bl	8002816 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	409a      	lsls	r2, r3
 8003a40:	4b17      	ldr	r3, [pc, #92]	; (8003aa0 <xTaskRemoveFromEventList+0xb0>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	4a16      	ldr	r2, [pc, #88]	; (8003aa0 <xTaskRemoveFromEventList+0xb0>)
 8003a48:	6013      	str	r3, [r2, #0]
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a4e:	4613      	mov	r3, r2
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	4413      	add	r3, r2
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	4a13      	ldr	r2, [pc, #76]	; (8003aa4 <xTaskRemoveFromEventList+0xb4>)
 8003a58:	441a      	add	r2, r3
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	3304      	adds	r3, #4
 8003a5e:	4619      	mov	r1, r3
 8003a60:	4610      	mov	r0, r2
 8003a62:	f7fe fe7b 	bl	800275c <vListInsertEnd>
 8003a66:	e005      	b.n	8003a74 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	3318      	adds	r3, #24
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	480e      	ldr	r0, [pc, #56]	; (8003aa8 <xTaskRemoveFromEventList+0xb8>)
 8003a70:	f7fe fe74 	bl	800275c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a78:	4b0c      	ldr	r3, [pc, #48]	; (8003aac <xTaskRemoveFromEventList+0xbc>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d905      	bls.n	8003a8e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003a82:	2301      	movs	r3, #1
 8003a84:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003a86:	4b0a      	ldr	r3, [pc, #40]	; (8003ab0 <xTaskRemoveFromEventList+0xc0>)
 8003a88:	2201      	movs	r2, #1
 8003a8a:	601a      	str	r2, [r3, #0]
 8003a8c:	e001      	b.n	8003a92 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003a92:	697b      	ldr	r3, [r7, #20]
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3718      	adds	r7, #24
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	2000046c 	.word	0x2000046c
 8003aa0:	2000044c 	.word	0x2000044c
 8003aa4:	20000348 	.word	0x20000348
 8003aa8:	20000404 	.word	0x20000404
 8003aac:	20000344 	.word	0x20000344
 8003ab0:	20000458 	.word	0x20000458

08003ab4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003abc:	4b06      	ldr	r3, [pc, #24]	; (8003ad8 <vTaskInternalSetTimeOutState+0x24>)
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003ac4:	4b05      	ldr	r3, [pc, #20]	; (8003adc <vTaskInternalSetTimeOutState+0x28>)
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	605a      	str	r2, [r3, #4]
}
 8003acc:	bf00      	nop
 8003ace:	370c      	adds	r7, #12
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr
 8003ad8:	2000045c 	.word	0x2000045c
 8003adc:	20000448 	.word	0x20000448

08003ae0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b088      	sub	sp, #32
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d10a      	bne.n	8003b06 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af4:	f383 8811 	msr	BASEPRI, r3
 8003af8:	f3bf 8f6f 	isb	sy
 8003afc:	f3bf 8f4f 	dsb	sy
 8003b00:	613b      	str	r3, [r7, #16]
}
 8003b02:	bf00      	nop
 8003b04:	e7fe      	b.n	8003b04 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d10a      	bne.n	8003b22 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b10:	f383 8811 	msr	BASEPRI, r3
 8003b14:	f3bf 8f6f 	isb	sy
 8003b18:	f3bf 8f4f 	dsb	sy
 8003b1c:	60fb      	str	r3, [r7, #12]
}
 8003b1e:	bf00      	nop
 8003b20:	e7fe      	b.n	8003b20 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003b22:	f000 fd8f 	bl	8004644 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003b26:	4b1d      	ldr	r3, [pc, #116]	; (8003b9c <xTaskCheckForTimeOut+0xbc>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	69ba      	ldr	r2, [r7, #24]
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b3e:	d102      	bne.n	8003b46 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003b40:	2300      	movs	r3, #0
 8003b42:	61fb      	str	r3, [r7, #28]
 8003b44:	e023      	b.n	8003b8e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	4b15      	ldr	r3, [pc, #84]	; (8003ba0 <xTaskCheckForTimeOut+0xc0>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d007      	beq.n	8003b62 <xTaskCheckForTimeOut+0x82>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	69ba      	ldr	r2, [r7, #24]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d302      	bcc.n	8003b62 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	61fb      	str	r3, [r7, #28]
 8003b60:	e015      	b.n	8003b8e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	697a      	ldr	r2, [r7, #20]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d20b      	bcs.n	8003b84 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	1ad2      	subs	r2, r2, r3
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f7ff ff9b 	bl	8003ab4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	61fb      	str	r3, [r7, #28]
 8003b82:	e004      	b.n	8003b8e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	2200      	movs	r2, #0
 8003b88:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003b8e:	f000 fd89 	bl	80046a4 <vPortExitCritical>

	return xReturn;
 8003b92:	69fb      	ldr	r3, [r7, #28]
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3720      	adds	r7, #32
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	20000448 	.word	0x20000448
 8003ba0:	2000045c 	.word	0x2000045c

08003ba4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003ba8:	4b03      	ldr	r3, [pc, #12]	; (8003bb8 <vTaskMissedYield+0x14>)
 8003baa:	2201      	movs	r2, #1
 8003bac:	601a      	str	r2, [r3, #0]
}
 8003bae:	bf00      	nop
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr
 8003bb8:	20000458 	.word	0x20000458

08003bbc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003bc4:	f000 f852 	bl	8003c6c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003bc8:	4b06      	ldr	r3, [pc, #24]	; (8003be4 <prvIdleTask+0x28>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d9f9      	bls.n	8003bc4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003bd0:	4b05      	ldr	r3, [pc, #20]	; (8003be8 <prvIdleTask+0x2c>)
 8003bd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bd6:	601a      	str	r2, [r3, #0]
 8003bd8:	f3bf 8f4f 	dsb	sy
 8003bdc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003be0:	e7f0      	b.n	8003bc4 <prvIdleTask+0x8>
 8003be2:	bf00      	nop
 8003be4:	20000348 	.word	0x20000348
 8003be8:	e000ed04 	.word	0xe000ed04

08003bec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b082      	sub	sp, #8
 8003bf0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	607b      	str	r3, [r7, #4]
 8003bf6:	e00c      	b.n	8003c12 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	4413      	add	r3, r2
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	4a12      	ldr	r2, [pc, #72]	; (8003c4c <prvInitialiseTaskLists+0x60>)
 8003c04:	4413      	add	r3, r2
 8003c06:	4618      	mov	r0, r3
 8003c08:	f7fe fd7b 	bl	8002702 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	3301      	adds	r3, #1
 8003c10:	607b      	str	r3, [r7, #4]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2b06      	cmp	r3, #6
 8003c16:	d9ef      	bls.n	8003bf8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003c18:	480d      	ldr	r0, [pc, #52]	; (8003c50 <prvInitialiseTaskLists+0x64>)
 8003c1a:	f7fe fd72 	bl	8002702 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003c1e:	480d      	ldr	r0, [pc, #52]	; (8003c54 <prvInitialiseTaskLists+0x68>)
 8003c20:	f7fe fd6f 	bl	8002702 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003c24:	480c      	ldr	r0, [pc, #48]	; (8003c58 <prvInitialiseTaskLists+0x6c>)
 8003c26:	f7fe fd6c 	bl	8002702 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003c2a:	480c      	ldr	r0, [pc, #48]	; (8003c5c <prvInitialiseTaskLists+0x70>)
 8003c2c:	f7fe fd69 	bl	8002702 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003c30:	480b      	ldr	r0, [pc, #44]	; (8003c60 <prvInitialiseTaskLists+0x74>)
 8003c32:	f7fe fd66 	bl	8002702 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003c36:	4b0b      	ldr	r3, [pc, #44]	; (8003c64 <prvInitialiseTaskLists+0x78>)
 8003c38:	4a05      	ldr	r2, [pc, #20]	; (8003c50 <prvInitialiseTaskLists+0x64>)
 8003c3a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003c3c:	4b0a      	ldr	r3, [pc, #40]	; (8003c68 <prvInitialiseTaskLists+0x7c>)
 8003c3e:	4a05      	ldr	r2, [pc, #20]	; (8003c54 <prvInitialiseTaskLists+0x68>)
 8003c40:	601a      	str	r2, [r3, #0]
}
 8003c42:	bf00      	nop
 8003c44:	3708      	adds	r7, #8
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	20000348 	.word	0x20000348
 8003c50:	200003d4 	.word	0x200003d4
 8003c54:	200003e8 	.word	0x200003e8
 8003c58:	20000404 	.word	0x20000404
 8003c5c:	20000418 	.word	0x20000418
 8003c60:	20000430 	.word	0x20000430
 8003c64:	200003fc 	.word	0x200003fc
 8003c68:	20000400 	.word	0x20000400

08003c6c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b082      	sub	sp, #8
 8003c70:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c72:	e019      	b.n	8003ca8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003c74:	f000 fce6 	bl	8004644 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c78:	4b10      	ldr	r3, [pc, #64]	; (8003cbc <prvCheckTasksWaitingTermination+0x50>)
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	3304      	adds	r3, #4
 8003c84:	4618      	mov	r0, r3
 8003c86:	f7fe fdc6 	bl	8002816 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003c8a:	4b0d      	ldr	r3, [pc, #52]	; (8003cc0 <prvCheckTasksWaitingTermination+0x54>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	4a0b      	ldr	r2, [pc, #44]	; (8003cc0 <prvCheckTasksWaitingTermination+0x54>)
 8003c92:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003c94:	4b0b      	ldr	r3, [pc, #44]	; (8003cc4 <prvCheckTasksWaitingTermination+0x58>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	3b01      	subs	r3, #1
 8003c9a:	4a0a      	ldr	r2, [pc, #40]	; (8003cc4 <prvCheckTasksWaitingTermination+0x58>)
 8003c9c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003c9e:	f000 fd01 	bl	80046a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 f810 	bl	8003cc8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ca8:	4b06      	ldr	r3, [pc, #24]	; (8003cc4 <prvCheckTasksWaitingTermination+0x58>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d1e1      	bne.n	8003c74 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003cb0:	bf00      	nop
 8003cb2:	bf00      	nop
 8003cb4:	3708      	adds	r7, #8
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	20000418 	.word	0x20000418
 8003cc0:	20000444 	.word	0x20000444
 8003cc4:	2000042c 	.word	0x2000042c

08003cc8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	334c      	adds	r3, #76	; 0x4c
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f000 ffcb 	bl	8004c70 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d108      	bne.n	8003cf6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f000 fe59 	bl	80049a0 <vPortFree>
				vPortFree( pxTCB );
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 fe56 	bl	80049a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003cf4:	e018      	b.n	8003d28 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d103      	bne.n	8003d08 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f000 fe4d 	bl	80049a0 <vPortFree>
	}
 8003d06:	e00f      	b.n	8003d28 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d00a      	beq.n	8003d28 <prvDeleteTCB+0x60>
	__asm volatile
 8003d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d16:	f383 8811 	msr	BASEPRI, r3
 8003d1a:	f3bf 8f6f 	isb	sy
 8003d1e:	f3bf 8f4f 	dsb	sy
 8003d22:	60fb      	str	r3, [r7, #12]
}
 8003d24:	bf00      	nop
 8003d26:	e7fe      	b.n	8003d26 <prvDeleteTCB+0x5e>
	}
 8003d28:	bf00      	nop
 8003d2a:	3710      	adds	r7, #16
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d36:	4b0c      	ldr	r3, [pc, #48]	; (8003d68 <prvResetNextTaskUnblockTime+0x38>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d104      	bne.n	8003d4a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003d40:	4b0a      	ldr	r3, [pc, #40]	; (8003d6c <prvResetNextTaskUnblockTime+0x3c>)
 8003d42:	f04f 32ff 	mov.w	r2, #4294967295
 8003d46:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003d48:	e008      	b.n	8003d5c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d4a:	4b07      	ldr	r3, [pc, #28]	; (8003d68 <prvResetNextTaskUnblockTime+0x38>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	4a04      	ldr	r2, [pc, #16]	; (8003d6c <prvResetNextTaskUnblockTime+0x3c>)
 8003d5a:	6013      	str	r3, [r2, #0]
}
 8003d5c:	bf00      	nop
 8003d5e:	370c      	adds	r7, #12
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr
 8003d68:	200003fc 	.word	0x200003fc
 8003d6c:	20000464 	.word	0x20000464

08003d70 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003d76:	4b0b      	ldr	r3, [pc, #44]	; (8003da4 <xTaskGetSchedulerState+0x34>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d102      	bne.n	8003d84 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	607b      	str	r3, [r7, #4]
 8003d82:	e008      	b.n	8003d96 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d84:	4b08      	ldr	r3, [pc, #32]	; (8003da8 <xTaskGetSchedulerState+0x38>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d102      	bne.n	8003d92 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003d8c:	2302      	movs	r3, #2
 8003d8e:	607b      	str	r3, [r7, #4]
 8003d90:	e001      	b.n	8003d96 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003d92:	2300      	movs	r3, #0
 8003d94:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003d96:	687b      	ldr	r3, [r7, #4]
	}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr
 8003da4:	20000450 	.word	0x20000450
 8003da8:	2000046c 	.word	0x2000046c

08003dac <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8003db8:	2300      	movs	r3, #0
 8003dba:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d05e      	beq.n	8003e80 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dc6:	4b31      	ldr	r3, [pc, #196]	; (8003e8c <xTaskPriorityInherit+0xe0>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d24e      	bcs.n	8003e6e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	699b      	ldr	r3, [r3, #24]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	db06      	blt.n	8003de6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003dd8:	4b2c      	ldr	r3, [pc, #176]	; (8003e8c <xTaskPriorityInherit+0xe0>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dde:	f1c3 0207 	rsb	r2, r3, #7
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	6959      	ldr	r1, [r3, #20]
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dee:	4613      	mov	r3, r2
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	4413      	add	r3, r2
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	4a26      	ldr	r2, [pc, #152]	; (8003e90 <xTaskPriorityInherit+0xe4>)
 8003df8:	4413      	add	r3, r2
 8003dfa:	4299      	cmp	r1, r3
 8003dfc:	d12f      	bne.n	8003e5e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	3304      	adds	r3, #4
 8003e02:	4618      	mov	r0, r3
 8003e04:	f7fe fd07 	bl	8002816 <uxListRemove>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d10a      	bne.n	8003e24 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e12:	2201      	movs	r2, #1
 8003e14:	fa02 f303 	lsl.w	r3, r2, r3
 8003e18:	43da      	mvns	r2, r3
 8003e1a:	4b1e      	ldr	r3, [pc, #120]	; (8003e94 <xTaskPriorityInherit+0xe8>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4013      	ands	r3, r2
 8003e20:	4a1c      	ldr	r2, [pc, #112]	; (8003e94 <xTaskPriorityInherit+0xe8>)
 8003e22:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003e24:	4b19      	ldr	r3, [pc, #100]	; (8003e8c <xTaskPriorityInherit+0xe0>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e32:	2201      	movs	r2, #1
 8003e34:	409a      	lsls	r2, r3
 8003e36:	4b17      	ldr	r3, [pc, #92]	; (8003e94 <xTaskPriorityInherit+0xe8>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	4a15      	ldr	r2, [pc, #84]	; (8003e94 <xTaskPriorityInherit+0xe8>)
 8003e3e:	6013      	str	r3, [r2, #0]
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e44:	4613      	mov	r3, r2
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	4413      	add	r3, r2
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	4a10      	ldr	r2, [pc, #64]	; (8003e90 <xTaskPriorityInherit+0xe4>)
 8003e4e:	441a      	add	r2, r3
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	3304      	adds	r3, #4
 8003e54:	4619      	mov	r1, r3
 8003e56:	4610      	mov	r0, r2
 8003e58:	f7fe fc80 	bl	800275c <vListInsertEnd>
 8003e5c:	e004      	b.n	8003e68 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003e5e:	4b0b      	ldr	r3, [pc, #44]	; (8003e8c <xTaskPriorityInherit+0xe0>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	60fb      	str	r3, [r7, #12]
 8003e6c:	e008      	b.n	8003e80 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e72:	4b06      	ldr	r3, [pc, #24]	; (8003e8c <xTaskPriorityInherit+0xe0>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d201      	bcs.n	8003e80 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003e80:	68fb      	ldr	r3, [r7, #12]
	}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3710      	adds	r7, #16
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	20000344 	.word	0x20000344
 8003e90:	20000348 	.word	0x20000348
 8003e94:	2000044c 	.word	0x2000044c

08003e98 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b086      	sub	sp, #24
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d06e      	beq.n	8003f8c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003eae:	4b3a      	ldr	r3, [pc, #232]	; (8003f98 <xTaskPriorityDisinherit+0x100>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	693a      	ldr	r2, [r7, #16]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d00a      	beq.n	8003ece <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ebc:	f383 8811 	msr	BASEPRI, r3
 8003ec0:	f3bf 8f6f 	isb	sy
 8003ec4:	f3bf 8f4f 	dsb	sy
 8003ec8:	60fb      	str	r3, [r7, #12]
}
 8003eca:	bf00      	nop
 8003ecc:	e7fe      	b.n	8003ecc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d10a      	bne.n	8003eec <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eda:	f383 8811 	msr	BASEPRI, r3
 8003ede:	f3bf 8f6f 	isb	sy
 8003ee2:	f3bf 8f4f 	dsb	sy
 8003ee6:	60bb      	str	r3, [r7, #8]
}
 8003ee8:	bf00      	nop
 8003eea:	e7fe      	b.n	8003eea <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ef0:	1e5a      	subs	r2, r3, #1
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d044      	beq.n	8003f8c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d140      	bne.n	8003f8c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	3304      	adds	r3, #4
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f7fe fc81 	bl	8002816 <uxListRemove>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d115      	bne.n	8003f46 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f1e:	491f      	ldr	r1, [pc, #124]	; (8003f9c <xTaskPriorityDisinherit+0x104>)
 8003f20:	4613      	mov	r3, r2
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	4413      	add	r3, r2
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	440b      	add	r3, r1
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d10a      	bne.n	8003f46 <xTaskPriorityDisinherit+0xae>
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f34:	2201      	movs	r2, #1
 8003f36:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3a:	43da      	mvns	r2, r3
 8003f3c:	4b18      	ldr	r3, [pc, #96]	; (8003fa0 <xTaskPriorityDisinherit+0x108>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4013      	ands	r3, r2
 8003f42:	4a17      	ldr	r2, [pc, #92]	; (8003fa0 <xTaskPriorityDisinherit+0x108>)
 8003f44:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f52:	f1c3 0207 	rsb	r2, r3, #7
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f5e:	2201      	movs	r2, #1
 8003f60:	409a      	lsls	r2, r3
 8003f62:	4b0f      	ldr	r3, [pc, #60]	; (8003fa0 <xTaskPriorityDisinherit+0x108>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	4a0d      	ldr	r2, [pc, #52]	; (8003fa0 <xTaskPriorityDisinherit+0x108>)
 8003f6a:	6013      	str	r3, [r2, #0]
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f70:	4613      	mov	r3, r2
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	4413      	add	r3, r2
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	4a08      	ldr	r2, [pc, #32]	; (8003f9c <xTaskPriorityDisinherit+0x104>)
 8003f7a:	441a      	add	r2, r3
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	3304      	adds	r3, #4
 8003f80:	4619      	mov	r1, r3
 8003f82:	4610      	mov	r0, r2
 8003f84:	f7fe fbea 	bl	800275c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003f8c:	697b      	ldr	r3, [r7, #20]
	}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3718      	adds	r7, #24
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	20000344 	.word	0x20000344
 8003f9c:	20000348 	.word	0x20000348
 8003fa0:	2000044c 	.word	0x2000044c

08003fa4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b088      	sub	sp, #32
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d077      	beq.n	80040ac <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d10a      	bne.n	8003fda <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8003fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc8:	f383 8811 	msr	BASEPRI, r3
 8003fcc:	f3bf 8f6f 	isb	sy
 8003fd0:	f3bf 8f4f 	dsb	sy
 8003fd4:	60fb      	str	r3, [r7, #12]
}
 8003fd6:	bf00      	nop
 8003fd8:	e7fe      	b.n	8003fd8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fde:	683a      	ldr	r2, [r7, #0]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d902      	bls.n	8003fea <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	61fb      	str	r3, [r7, #28]
 8003fe8:	e002      	b.n	8003ff0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fee:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff4:	69fa      	ldr	r2, [r7, #28]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d058      	beq.n	80040ac <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ffe:	697a      	ldr	r2, [r7, #20]
 8004000:	429a      	cmp	r2, r3
 8004002:	d153      	bne.n	80040ac <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004004:	4b2b      	ldr	r3, [pc, #172]	; (80040b4 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	69ba      	ldr	r2, [r7, #24]
 800400a:	429a      	cmp	r2, r3
 800400c:	d10a      	bne.n	8004024 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800400e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004012:	f383 8811 	msr	BASEPRI, r3
 8004016:	f3bf 8f6f 	isb	sy
 800401a:	f3bf 8f4f 	dsb	sy
 800401e:	60bb      	str	r3, [r7, #8]
}
 8004020:	bf00      	nop
 8004022:	e7fe      	b.n	8004022 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004024:	69bb      	ldr	r3, [r7, #24]
 8004026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004028:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	69fa      	ldr	r2, [r7, #28]
 800402e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	699b      	ldr	r3, [r3, #24]
 8004034:	2b00      	cmp	r3, #0
 8004036:	db04      	blt.n	8004042 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	f1c3 0207 	rsb	r2, r3, #7
 800403e:	69bb      	ldr	r3, [r7, #24]
 8004040:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	6959      	ldr	r1, [r3, #20]
 8004046:	693a      	ldr	r2, [r7, #16]
 8004048:	4613      	mov	r3, r2
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	4413      	add	r3, r2
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	4a19      	ldr	r2, [pc, #100]	; (80040b8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8004052:	4413      	add	r3, r2
 8004054:	4299      	cmp	r1, r3
 8004056:	d129      	bne.n	80040ac <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	3304      	adds	r3, #4
 800405c:	4618      	mov	r0, r3
 800405e:	f7fe fbda 	bl	8002816 <uxListRemove>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d10a      	bne.n	800407e <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004068:	69bb      	ldr	r3, [r7, #24]
 800406a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800406c:	2201      	movs	r2, #1
 800406e:	fa02 f303 	lsl.w	r3, r2, r3
 8004072:	43da      	mvns	r2, r3
 8004074:	4b11      	ldr	r3, [pc, #68]	; (80040bc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4013      	ands	r3, r2
 800407a:	4a10      	ldr	r2, [pc, #64]	; (80040bc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800407c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004082:	2201      	movs	r2, #1
 8004084:	409a      	lsls	r2, r3
 8004086:	4b0d      	ldr	r3, [pc, #52]	; (80040bc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4313      	orrs	r3, r2
 800408c:	4a0b      	ldr	r2, [pc, #44]	; (80040bc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800408e:	6013      	str	r3, [r2, #0]
 8004090:	69bb      	ldr	r3, [r7, #24]
 8004092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004094:	4613      	mov	r3, r2
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	4413      	add	r3, r2
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	4a06      	ldr	r2, [pc, #24]	; (80040b8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800409e:	441a      	add	r2, r3
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	3304      	adds	r3, #4
 80040a4:	4619      	mov	r1, r3
 80040a6:	4610      	mov	r0, r2
 80040a8:	f7fe fb58 	bl	800275c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80040ac:	bf00      	nop
 80040ae:	3720      	adds	r7, #32
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	20000344 	.word	0x20000344
 80040b8:	20000348 	.word	0x20000348
 80040bc:	2000044c 	.word	0x2000044c

080040c0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80040c0:	b480      	push	{r7}
 80040c2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80040c4:	4b07      	ldr	r3, [pc, #28]	; (80040e4 <pvTaskIncrementMutexHeldCount+0x24>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d004      	beq.n	80040d6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80040cc:	4b05      	ldr	r3, [pc, #20]	; (80040e4 <pvTaskIncrementMutexHeldCount+0x24>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80040d2:	3201      	adds	r2, #1
 80040d4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80040d6:	4b03      	ldr	r3, [pc, #12]	; (80040e4 <pvTaskIncrementMutexHeldCount+0x24>)
 80040d8:	681b      	ldr	r3, [r3, #0]
	}
 80040da:	4618      	mov	r0, r3
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr
 80040e4:	20000344 	.word	0x20000344

080040e8 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b086      	sub	sp, #24
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	60f8      	str	r0, [r7, #12]
 80040f0:	60b9      	str	r1, [r7, #8]
 80040f2:	607a      	str	r2, [r7, #4]
 80040f4:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80040f6:	f000 faa5 	bl	8004644 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80040fa:	4b29      	ldr	r3, [pc, #164]	; (80041a0 <xTaskNotifyWait+0xb8>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8004102:	b2db      	uxtb	r3, r3
 8004104:	2b02      	cmp	r3, #2
 8004106:	d01c      	beq.n	8004142 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8004108:	4b25      	ldr	r3, [pc, #148]	; (80041a0 <xTaskNotifyWait+0xb8>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
 8004110:	68fa      	ldr	r2, [r7, #12]
 8004112:	43d2      	mvns	r2, r2
 8004114:	400a      	ands	r2, r1
 8004116:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800411a:	4b21      	ldr	r3, [pc, #132]	; (80041a0 <xTaskNotifyWait+0xb8>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

				if( xTicksToWait > ( TickType_t ) 0 )
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d00b      	beq.n	8004142 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800412a:	2101      	movs	r1, #1
 800412c:	6838      	ldr	r0, [r7, #0]
 800412e:	f000 f8f9 	bl	8004324 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8004132:	4b1c      	ldr	r3, [pc, #112]	; (80041a4 <xTaskNotifyWait+0xbc>)
 8004134:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004138:	601a      	str	r2, [r3, #0]
 800413a:	f3bf 8f4f 	dsb	sy
 800413e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8004142:	f000 faaf 	bl	80046a4 <vPortExitCritical>

		taskENTER_CRITICAL();
 8004146:	f000 fa7d 	bl	8004644 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d005      	beq.n	800415c <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8004150:	4b13      	ldr	r3, [pc, #76]	; (80041a0 <xTaskNotifyWait+0xb8>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800415c:	4b10      	ldr	r3, [pc, #64]	; (80041a0 <xTaskNotifyWait+0xb8>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8004164:	b2db      	uxtb	r3, r3
 8004166:	2b02      	cmp	r3, #2
 8004168:	d002      	beq.n	8004170 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800416a:	2300      	movs	r3, #0
 800416c:	617b      	str	r3, [r7, #20]
 800416e:	e00a      	b.n	8004186 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8004170:	4b0b      	ldr	r3, [pc, #44]	; (80041a0 <xTaskNotifyWait+0xb8>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
 8004178:	68ba      	ldr	r2, [r7, #8]
 800417a:	43d2      	mvns	r2, r2
 800417c:	400a      	ands	r2, r1
 800417e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
				xReturn = pdTRUE;
 8004182:	2301      	movs	r3, #1
 8004184:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004186:	4b06      	ldr	r3, [pc, #24]	; (80041a0 <xTaskNotifyWait+0xb8>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2200      	movs	r2, #0
 800418c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
		}
		taskEXIT_CRITICAL();
 8004190:	f000 fa88 	bl	80046a4 <vPortExitCritical>

		return xReturn;
 8004194:	697b      	ldr	r3, [r7, #20]
	}
 8004196:	4618      	mov	r0, r3
 8004198:	3718      	adds	r7, #24
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	20000344 	.word	0x20000344
 80041a4:	e000ed04 	.word	0xe000ed04

080041a8 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b08a      	sub	sp, #40	; 0x28
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	603b      	str	r3, [r7, #0]
 80041b4:	4613      	mov	r3, r2
 80041b6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80041b8:	2301      	movs	r3, #1
 80041ba:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d10a      	bne.n	80041d8 <xTaskGenericNotify+0x30>
	__asm volatile
 80041c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c6:	f383 8811 	msr	BASEPRI, r3
 80041ca:	f3bf 8f6f 	isb	sy
 80041ce:	f3bf 8f4f 	dsb	sy
 80041d2:	61bb      	str	r3, [r7, #24]
}
 80041d4:	bf00      	nop
 80041d6:	e7fe      	b.n	80041d6 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80041dc:	f000 fa32 	bl	8004644 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d004      	beq.n	80041f0 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80041e6:	6a3b      	ldr	r3, [r7, #32]
 80041e8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80041f0:	6a3b      	ldr	r3, [r7, #32]
 80041f2:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80041f6:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80041f8:	6a3b      	ldr	r3, [r7, #32]
 80041fa:	2202      	movs	r2, #2
 80041fc:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

			switch( eAction )
 8004200:	79fb      	ldrb	r3, [r7, #7]
 8004202:	2b04      	cmp	r3, #4
 8004204:	d82d      	bhi.n	8004262 <xTaskGenericNotify+0xba>
 8004206:	a201      	add	r2, pc, #4	; (adr r2, 800420c <xTaskGenericNotify+0x64>)
 8004208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800420c:	08004285 	.word	0x08004285
 8004210:	08004221 	.word	0x08004221
 8004214:	08004233 	.word	0x08004233
 8004218:	08004243 	.word	0x08004243
 800421c:	0800424d 	.word	0x0800424d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8004220:	6a3b      	ldr	r3, [r7, #32]
 8004222:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	431a      	orrs	r2, r3
 800422a:	6a3b      	ldr	r3, [r7, #32]
 800422c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8004230:	e02b      	b.n	800428a <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8004232:	6a3b      	ldr	r3, [r7, #32]
 8004234:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004238:	1c5a      	adds	r2, r3, #1
 800423a:	6a3b      	ldr	r3, [r7, #32]
 800423c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8004240:	e023      	b.n	800428a <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8004242:	6a3b      	ldr	r3, [r7, #32]
 8004244:	68ba      	ldr	r2, [r7, #8]
 8004246:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 800424a:	e01e      	b.n	800428a <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800424c:	7ffb      	ldrb	r3, [r7, #31]
 800424e:	2b02      	cmp	r3, #2
 8004250:	d004      	beq.n	800425c <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8004252:	6a3b      	ldr	r3, [r7, #32]
 8004254:	68ba      	ldr	r2, [r7, #8]
 8004256:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800425a:	e016      	b.n	800428a <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 800425c:	2300      	movs	r3, #0
 800425e:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8004260:	e013      	b.n	800428a <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8004262:	6a3b      	ldr	r3, [r7, #32]
 8004264:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800426c:	d00c      	beq.n	8004288 <xTaskGenericNotify+0xe0>
	__asm volatile
 800426e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004272:	f383 8811 	msr	BASEPRI, r3
 8004276:	f3bf 8f6f 	isb	sy
 800427a:	f3bf 8f4f 	dsb	sy
 800427e:	617b      	str	r3, [r7, #20]
}
 8004280:	bf00      	nop
 8004282:	e7fe      	b.n	8004282 <xTaskGenericNotify+0xda>
					break;
 8004284:	bf00      	nop
 8004286:	e000      	b.n	800428a <xTaskGenericNotify+0xe2>

					break;
 8004288:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800428a:	7ffb      	ldrb	r3, [r7, #31]
 800428c:	2b01      	cmp	r3, #1
 800428e:	d139      	bne.n	8004304 <xTaskGenericNotify+0x15c>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004290:	6a3b      	ldr	r3, [r7, #32]
 8004292:	3304      	adds	r3, #4
 8004294:	4618      	mov	r0, r3
 8004296:	f7fe fabe 	bl	8002816 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800429a:	6a3b      	ldr	r3, [r7, #32]
 800429c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800429e:	2201      	movs	r2, #1
 80042a0:	409a      	lsls	r2, r3
 80042a2:	4b1c      	ldr	r3, [pc, #112]	; (8004314 <xTaskGenericNotify+0x16c>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	4a1a      	ldr	r2, [pc, #104]	; (8004314 <xTaskGenericNotify+0x16c>)
 80042aa:	6013      	str	r3, [r2, #0]
 80042ac:	6a3b      	ldr	r3, [r7, #32]
 80042ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042b0:	4613      	mov	r3, r2
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	4413      	add	r3, r2
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	4a17      	ldr	r2, [pc, #92]	; (8004318 <xTaskGenericNotify+0x170>)
 80042ba:	441a      	add	r2, r3
 80042bc:	6a3b      	ldr	r3, [r7, #32]
 80042be:	3304      	adds	r3, #4
 80042c0:	4619      	mov	r1, r3
 80042c2:	4610      	mov	r0, r2
 80042c4:	f7fe fa4a 	bl	800275c <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80042c8:	6a3b      	ldr	r3, [r7, #32]
 80042ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d00a      	beq.n	80042e6 <xTaskGenericNotify+0x13e>
	__asm volatile
 80042d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d4:	f383 8811 	msr	BASEPRI, r3
 80042d8:	f3bf 8f6f 	isb	sy
 80042dc:	f3bf 8f4f 	dsb	sy
 80042e0:	613b      	str	r3, [r7, #16]
}
 80042e2:	bf00      	nop
 80042e4:	e7fe      	b.n	80042e4 <xTaskGenericNotify+0x13c>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80042e6:	6a3b      	ldr	r3, [r7, #32]
 80042e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042ea:	4b0c      	ldr	r3, [pc, #48]	; (800431c <xTaskGenericNotify+0x174>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d907      	bls.n	8004304 <xTaskGenericNotify+0x15c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80042f4:	4b0a      	ldr	r3, [pc, #40]	; (8004320 <xTaskGenericNotify+0x178>)
 80042f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042fa:	601a      	str	r2, [r3, #0]
 80042fc:	f3bf 8f4f 	dsb	sy
 8004300:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8004304:	f000 f9ce 	bl	80046a4 <vPortExitCritical>

		return xReturn;
 8004308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800430a:	4618      	mov	r0, r3
 800430c:	3728      	adds	r7, #40	; 0x28
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	2000044c 	.word	0x2000044c
 8004318:	20000348 	.word	0x20000348
 800431c:	20000344 	.word	0x20000344
 8004320:	e000ed04 	.word	0xe000ed04

08004324 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800432e:	4b29      	ldr	r3, [pc, #164]	; (80043d4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004334:	4b28      	ldr	r3, [pc, #160]	; (80043d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	3304      	adds	r3, #4
 800433a:	4618      	mov	r0, r3
 800433c:	f7fe fa6b 	bl	8002816 <uxListRemove>
 8004340:	4603      	mov	r3, r0
 8004342:	2b00      	cmp	r3, #0
 8004344:	d10b      	bne.n	800435e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004346:	4b24      	ldr	r3, [pc, #144]	; (80043d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800434c:	2201      	movs	r2, #1
 800434e:	fa02 f303 	lsl.w	r3, r2, r3
 8004352:	43da      	mvns	r2, r3
 8004354:	4b21      	ldr	r3, [pc, #132]	; (80043dc <prvAddCurrentTaskToDelayedList+0xb8>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4013      	ands	r3, r2
 800435a:	4a20      	ldr	r2, [pc, #128]	; (80043dc <prvAddCurrentTaskToDelayedList+0xb8>)
 800435c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004364:	d10a      	bne.n	800437c <prvAddCurrentTaskToDelayedList+0x58>
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d007      	beq.n	800437c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800436c:	4b1a      	ldr	r3, [pc, #104]	; (80043d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	3304      	adds	r3, #4
 8004372:	4619      	mov	r1, r3
 8004374:	481a      	ldr	r0, [pc, #104]	; (80043e0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004376:	f7fe f9f1 	bl	800275c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800437a:	e026      	b.n	80043ca <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800437c:	68fa      	ldr	r2, [r7, #12]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4413      	add	r3, r2
 8004382:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004384:	4b14      	ldr	r3, [pc, #80]	; (80043d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	68ba      	ldr	r2, [r7, #8]
 800438a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800438c:	68ba      	ldr	r2, [r7, #8]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	429a      	cmp	r2, r3
 8004392:	d209      	bcs.n	80043a8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004394:	4b13      	ldr	r3, [pc, #76]	; (80043e4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	4b0f      	ldr	r3, [pc, #60]	; (80043d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	3304      	adds	r3, #4
 800439e:	4619      	mov	r1, r3
 80043a0:	4610      	mov	r0, r2
 80043a2:	f7fe f9ff 	bl	80027a4 <vListInsert>
}
 80043a6:	e010      	b.n	80043ca <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043a8:	4b0f      	ldr	r3, [pc, #60]	; (80043e8 <prvAddCurrentTaskToDelayedList+0xc4>)
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	4b0a      	ldr	r3, [pc, #40]	; (80043d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	3304      	adds	r3, #4
 80043b2:	4619      	mov	r1, r3
 80043b4:	4610      	mov	r0, r2
 80043b6:	f7fe f9f5 	bl	80027a4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80043ba:	4b0c      	ldr	r3, [pc, #48]	; (80043ec <prvAddCurrentTaskToDelayedList+0xc8>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	68ba      	ldr	r2, [r7, #8]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d202      	bcs.n	80043ca <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80043c4:	4a09      	ldr	r2, [pc, #36]	; (80043ec <prvAddCurrentTaskToDelayedList+0xc8>)
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	6013      	str	r3, [r2, #0]
}
 80043ca:	bf00      	nop
 80043cc:	3710      	adds	r7, #16
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	20000448 	.word	0x20000448
 80043d8:	20000344 	.word	0x20000344
 80043dc:	2000044c 	.word	0x2000044c
 80043e0:	20000430 	.word	0x20000430
 80043e4:	20000400 	.word	0x20000400
 80043e8:	200003fc 	.word	0x200003fc
 80043ec:	20000464 	.word	0x20000464

080043f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80043f0:	b480      	push	{r7}
 80043f2:	b085      	sub	sp, #20
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	60b9      	str	r1, [r7, #8]
 80043fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	3b04      	subs	r3, #4
 8004400:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004408:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	3b04      	subs	r3, #4
 800440e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	f023 0201 	bic.w	r2, r3, #1
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	3b04      	subs	r3, #4
 800441e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004420:	4a0c      	ldr	r2, [pc, #48]	; (8004454 <pxPortInitialiseStack+0x64>)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	3b14      	subs	r3, #20
 800442a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	3b04      	subs	r3, #4
 8004436:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f06f 0202 	mvn.w	r2, #2
 800443e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	3b20      	subs	r3, #32
 8004444:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004446:	68fb      	ldr	r3, [r7, #12]
}
 8004448:	4618      	mov	r0, r3
 800444a:	3714      	adds	r7, #20
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr
 8004454:	08004459 	.word	0x08004459

08004458 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004458:	b480      	push	{r7}
 800445a:	b085      	sub	sp, #20
 800445c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800445e:	2300      	movs	r3, #0
 8004460:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004462:	4b12      	ldr	r3, [pc, #72]	; (80044ac <prvTaskExitError+0x54>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800446a:	d00a      	beq.n	8004482 <prvTaskExitError+0x2a>
	__asm volatile
 800446c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004470:	f383 8811 	msr	BASEPRI, r3
 8004474:	f3bf 8f6f 	isb	sy
 8004478:	f3bf 8f4f 	dsb	sy
 800447c:	60fb      	str	r3, [r7, #12]
}
 800447e:	bf00      	nop
 8004480:	e7fe      	b.n	8004480 <prvTaskExitError+0x28>
	__asm volatile
 8004482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004486:	f383 8811 	msr	BASEPRI, r3
 800448a:	f3bf 8f6f 	isb	sy
 800448e:	f3bf 8f4f 	dsb	sy
 8004492:	60bb      	str	r3, [r7, #8]
}
 8004494:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004496:	bf00      	nop
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d0fc      	beq.n	8004498 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800449e:	bf00      	nop
 80044a0:	bf00      	nop
 80044a2:	3714      	adds	r7, #20
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr
 80044ac:	2000000c 	.word	0x2000000c

080044b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80044b0:	4b07      	ldr	r3, [pc, #28]	; (80044d0 <pxCurrentTCBConst2>)
 80044b2:	6819      	ldr	r1, [r3, #0]
 80044b4:	6808      	ldr	r0, [r1, #0]
 80044b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044ba:	f380 8809 	msr	PSP, r0
 80044be:	f3bf 8f6f 	isb	sy
 80044c2:	f04f 0000 	mov.w	r0, #0
 80044c6:	f380 8811 	msr	BASEPRI, r0
 80044ca:	4770      	bx	lr
 80044cc:	f3af 8000 	nop.w

080044d0 <pxCurrentTCBConst2>:
 80044d0:	20000344 	.word	0x20000344
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80044d4:	bf00      	nop
 80044d6:	bf00      	nop

080044d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80044d8:	4808      	ldr	r0, [pc, #32]	; (80044fc <prvPortStartFirstTask+0x24>)
 80044da:	6800      	ldr	r0, [r0, #0]
 80044dc:	6800      	ldr	r0, [r0, #0]
 80044de:	f380 8808 	msr	MSP, r0
 80044e2:	f04f 0000 	mov.w	r0, #0
 80044e6:	f380 8814 	msr	CONTROL, r0
 80044ea:	b662      	cpsie	i
 80044ec:	b661      	cpsie	f
 80044ee:	f3bf 8f4f 	dsb	sy
 80044f2:	f3bf 8f6f 	isb	sy
 80044f6:	df00      	svc	0
 80044f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80044fa:	bf00      	nop
 80044fc:	e000ed08 	.word	0xe000ed08

08004500 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b086      	sub	sp, #24
 8004504:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004506:	4b46      	ldr	r3, [pc, #280]	; (8004620 <xPortStartScheduler+0x120>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a46      	ldr	r2, [pc, #280]	; (8004624 <xPortStartScheduler+0x124>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d10a      	bne.n	8004526 <xPortStartScheduler+0x26>
	__asm volatile
 8004510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004514:	f383 8811 	msr	BASEPRI, r3
 8004518:	f3bf 8f6f 	isb	sy
 800451c:	f3bf 8f4f 	dsb	sy
 8004520:	613b      	str	r3, [r7, #16]
}
 8004522:	bf00      	nop
 8004524:	e7fe      	b.n	8004524 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004526:	4b3e      	ldr	r3, [pc, #248]	; (8004620 <xPortStartScheduler+0x120>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a3f      	ldr	r2, [pc, #252]	; (8004628 <xPortStartScheduler+0x128>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d10a      	bne.n	8004546 <xPortStartScheduler+0x46>
	__asm volatile
 8004530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004534:	f383 8811 	msr	BASEPRI, r3
 8004538:	f3bf 8f6f 	isb	sy
 800453c:	f3bf 8f4f 	dsb	sy
 8004540:	60fb      	str	r3, [r7, #12]
}
 8004542:	bf00      	nop
 8004544:	e7fe      	b.n	8004544 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004546:	4b39      	ldr	r3, [pc, #228]	; (800462c <xPortStartScheduler+0x12c>)
 8004548:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	781b      	ldrb	r3, [r3, #0]
 800454e:	b2db      	uxtb	r3, r3
 8004550:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	22ff      	movs	r2, #255	; 0xff
 8004556:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	b2db      	uxtb	r3, r3
 800455e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004560:	78fb      	ldrb	r3, [r7, #3]
 8004562:	b2db      	uxtb	r3, r3
 8004564:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004568:	b2da      	uxtb	r2, r3
 800456a:	4b31      	ldr	r3, [pc, #196]	; (8004630 <xPortStartScheduler+0x130>)
 800456c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800456e:	4b31      	ldr	r3, [pc, #196]	; (8004634 <xPortStartScheduler+0x134>)
 8004570:	2207      	movs	r2, #7
 8004572:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004574:	e009      	b.n	800458a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004576:	4b2f      	ldr	r3, [pc, #188]	; (8004634 <xPortStartScheduler+0x134>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	3b01      	subs	r3, #1
 800457c:	4a2d      	ldr	r2, [pc, #180]	; (8004634 <xPortStartScheduler+0x134>)
 800457e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004580:	78fb      	ldrb	r3, [r7, #3]
 8004582:	b2db      	uxtb	r3, r3
 8004584:	005b      	lsls	r3, r3, #1
 8004586:	b2db      	uxtb	r3, r3
 8004588:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800458a:	78fb      	ldrb	r3, [r7, #3]
 800458c:	b2db      	uxtb	r3, r3
 800458e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004592:	2b80      	cmp	r3, #128	; 0x80
 8004594:	d0ef      	beq.n	8004576 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004596:	4b27      	ldr	r3, [pc, #156]	; (8004634 <xPortStartScheduler+0x134>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f1c3 0307 	rsb	r3, r3, #7
 800459e:	2b04      	cmp	r3, #4
 80045a0:	d00a      	beq.n	80045b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80045a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a6:	f383 8811 	msr	BASEPRI, r3
 80045aa:	f3bf 8f6f 	isb	sy
 80045ae:	f3bf 8f4f 	dsb	sy
 80045b2:	60bb      	str	r3, [r7, #8]
}
 80045b4:	bf00      	nop
 80045b6:	e7fe      	b.n	80045b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80045b8:	4b1e      	ldr	r3, [pc, #120]	; (8004634 <xPortStartScheduler+0x134>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	021b      	lsls	r3, r3, #8
 80045be:	4a1d      	ldr	r2, [pc, #116]	; (8004634 <xPortStartScheduler+0x134>)
 80045c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80045c2:	4b1c      	ldr	r3, [pc, #112]	; (8004634 <xPortStartScheduler+0x134>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80045ca:	4a1a      	ldr	r2, [pc, #104]	; (8004634 <xPortStartScheduler+0x134>)
 80045cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	b2da      	uxtb	r2, r3
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80045d6:	4b18      	ldr	r3, [pc, #96]	; (8004638 <xPortStartScheduler+0x138>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a17      	ldr	r2, [pc, #92]	; (8004638 <xPortStartScheduler+0x138>)
 80045dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80045e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80045e2:	4b15      	ldr	r3, [pc, #84]	; (8004638 <xPortStartScheduler+0x138>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a14      	ldr	r2, [pc, #80]	; (8004638 <xPortStartScheduler+0x138>)
 80045e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80045ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80045ee:	f000 f8dd 	bl	80047ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80045f2:	4b12      	ldr	r3, [pc, #72]	; (800463c <xPortStartScheduler+0x13c>)
 80045f4:	2200      	movs	r2, #0
 80045f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80045f8:	f000 f8fc 	bl	80047f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80045fc:	4b10      	ldr	r3, [pc, #64]	; (8004640 <xPortStartScheduler+0x140>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a0f      	ldr	r2, [pc, #60]	; (8004640 <xPortStartScheduler+0x140>)
 8004602:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004606:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004608:	f7ff ff66 	bl	80044d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800460c:	f7ff f96a 	bl	80038e4 <vTaskSwitchContext>
	prvTaskExitError();
 8004610:	f7ff ff22 	bl	8004458 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	3718      	adds	r7, #24
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	e000ed00 	.word	0xe000ed00
 8004624:	410fc271 	.word	0x410fc271
 8004628:	410fc270 	.word	0x410fc270
 800462c:	e000e400 	.word	0xe000e400
 8004630:	20000470 	.word	0x20000470
 8004634:	20000474 	.word	0x20000474
 8004638:	e000ed20 	.word	0xe000ed20
 800463c:	2000000c 	.word	0x2000000c
 8004640:	e000ef34 	.word	0xe000ef34

08004644 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
	__asm volatile
 800464a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800464e:	f383 8811 	msr	BASEPRI, r3
 8004652:	f3bf 8f6f 	isb	sy
 8004656:	f3bf 8f4f 	dsb	sy
 800465a:	607b      	str	r3, [r7, #4]
}
 800465c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800465e:	4b0f      	ldr	r3, [pc, #60]	; (800469c <vPortEnterCritical+0x58>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	3301      	adds	r3, #1
 8004664:	4a0d      	ldr	r2, [pc, #52]	; (800469c <vPortEnterCritical+0x58>)
 8004666:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004668:	4b0c      	ldr	r3, [pc, #48]	; (800469c <vPortEnterCritical+0x58>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2b01      	cmp	r3, #1
 800466e:	d10f      	bne.n	8004690 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004670:	4b0b      	ldr	r3, [pc, #44]	; (80046a0 <vPortEnterCritical+0x5c>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	b2db      	uxtb	r3, r3
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00a      	beq.n	8004690 <vPortEnterCritical+0x4c>
	__asm volatile
 800467a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800467e:	f383 8811 	msr	BASEPRI, r3
 8004682:	f3bf 8f6f 	isb	sy
 8004686:	f3bf 8f4f 	dsb	sy
 800468a:	603b      	str	r3, [r7, #0]
}
 800468c:	bf00      	nop
 800468e:	e7fe      	b.n	800468e <vPortEnterCritical+0x4a>
	}
}
 8004690:	bf00      	nop
 8004692:	370c      	adds	r7, #12
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr
 800469c:	2000000c 	.word	0x2000000c
 80046a0:	e000ed04 	.word	0xe000ed04

080046a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80046aa:	4b12      	ldr	r3, [pc, #72]	; (80046f4 <vPortExitCritical+0x50>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d10a      	bne.n	80046c8 <vPortExitCritical+0x24>
	__asm volatile
 80046b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b6:	f383 8811 	msr	BASEPRI, r3
 80046ba:	f3bf 8f6f 	isb	sy
 80046be:	f3bf 8f4f 	dsb	sy
 80046c2:	607b      	str	r3, [r7, #4]
}
 80046c4:	bf00      	nop
 80046c6:	e7fe      	b.n	80046c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80046c8:	4b0a      	ldr	r3, [pc, #40]	; (80046f4 <vPortExitCritical+0x50>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	3b01      	subs	r3, #1
 80046ce:	4a09      	ldr	r2, [pc, #36]	; (80046f4 <vPortExitCritical+0x50>)
 80046d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80046d2:	4b08      	ldr	r3, [pc, #32]	; (80046f4 <vPortExitCritical+0x50>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d105      	bne.n	80046e6 <vPortExitCritical+0x42>
 80046da:	2300      	movs	r3, #0
 80046dc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80046e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80046e6:	bf00      	nop
 80046e8:	370c      	adds	r7, #12
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr
 80046f2:	bf00      	nop
 80046f4:	2000000c 	.word	0x2000000c
	...

08004700 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004700:	f3ef 8009 	mrs	r0, PSP
 8004704:	f3bf 8f6f 	isb	sy
 8004708:	4b15      	ldr	r3, [pc, #84]	; (8004760 <pxCurrentTCBConst>)
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	f01e 0f10 	tst.w	lr, #16
 8004710:	bf08      	it	eq
 8004712:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004716:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800471a:	6010      	str	r0, [r2, #0]
 800471c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004720:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004724:	f380 8811 	msr	BASEPRI, r0
 8004728:	f3bf 8f4f 	dsb	sy
 800472c:	f3bf 8f6f 	isb	sy
 8004730:	f7ff f8d8 	bl	80038e4 <vTaskSwitchContext>
 8004734:	f04f 0000 	mov.w	r0, #0
 8004738:	f380 8811 	msr	BASEPRI, r0
 800473c:	bc09      	pop	{r0, r3}
 800473e:	6819      	ldr	r1, [r3, #0]
 8004740:	6808      	ldr	r0, [r1, #0]
 8004742:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004746:	f01e 0f10 	tst.w	lr, #16
 800474a:	bf08      	it	eq
 800474c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004750:	f380 8809 	msr	PSP, r0
 8004754:	f3bf 8f6f 	isb	sy
 8004758:	4770      	bx	lr
 800475a:	bf00      	nop
 800475c:	f3af 8000 	nop.w

08004760 <pxCurrentTCBConst>:
 8004760:	20000344 	.word	0x20000344
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004764:	bf00      	nop
 8004766:	bf00      	nop

08004768 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b082      	sub	sp, #8
 800476c:	af00      	add	r7, sp, #0
	__asm volatile
 800476e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004772:	f383 8811 	msr	BASEPRI, r3
 8004776:	f3bf 8f6f 	isb	sy
 800477a:	f3bf 8f4f 	dsb	sy
 800477e:	607b      	str	r3, [r7, #4]
}
 8004780:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004782:	f7fe fff7 	bl	8003774 <xTaskIncrementTick>
 8004786:	4603      	mov	r3, r0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d003      	beq.n	8004794 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800478c:	4b06      	ldr	r3, [pc, #24]	; (80047a8 <SysTick_Handler+0x40>)
 800478e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004792:	601a      	str	r2, [r3, #0]
 8004794:	2300      	movs	r3, #0
 8004796:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	f383 8811 	msr	BASEPRI, r3
}
 800479e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80047a0:	bf00      	nop
 80047a2:	3708      	adds	r7, #8
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	e000ed04 	.word	0xe000ed04

080047ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80047ac:	b480      	push	{r7}
 80047ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80047b0:	4b0b      	ldr	r3, [pc, #44]	; (80047e0 <vPortSetupTimerInterrupt+0x34>)
 80047b2:	2200      	movs	r2, #0
 80047b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80047b6:	4b0b      	ldr	r3, [pc, #44]	; (80047e4 <vPortSetupTimerInterrupt+0x38>)
 80047b8:	2200      	movs	r2, #0
 80047ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80047bc:	4b0a      	ldr	r3, [pc, #40]	; (80047e8 <vPortSetupTimerInterrupt+0x3c>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a0a      	ldr	r2, [pc, #40]	; (80047ec <vPortSetupTimerInterrupt+0x40>)
 80047c2:	fba2 2303 	umull	r2, r3, r2, r3
 80047c6:	099b      	lsrs	r3, r3, #6
 80047c8:	4a09      	ldr	r2, [pc, #36]	; (80047f0 <vPortSetupTimerInterrupt+0x44>)
 80047ca:	3b01      	subs	r3, #1
 80047cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80047ce:	4b04      	ldr	r3, [pc, #16]	; (80047e0 <vPortSetupTimerInterrupt+0x34>)
 80047d0:	2207      	movs	r2, #7
 80047d2:	601a      	str	r2, [r3, #0]
}
 80047d4:	bf00      	nop
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr
 80047de:	bf00      	nop
 80047e0:	e000e010 	.word	0xe000e010
 80047e4:	e000e018 	.word	0xe000e018
 80047e8:	20000000 	.word	0x20000000
 80047ec:	10624dd3 	.word	0x10624dd3
 80047f0:	e000e014 	.word	0xe000e014

080047f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80047f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004804 <vPortEnableVFP+0x10>
 80047f8:	6801      	ldr	r1, [r0, #0]
 80047fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80047fe:	6001      	str	r1, [r0, #0]
 8004800:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004802:	bf00      	nop
 8004804:	e000ed88 	.word	0xe000ed88

08004808 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b08a      	sub	sp, #40	; 0x28
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004810:	2300      	movs	r3, #0
 8004812:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004814:	f7fe ff04 	bl	8003620 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004818:	4b5b      	ldr	r3, [pc, #364]	; (8004988 <pvPortMalloc+0x180>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d101      	bne.n	8004824 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004820:	f000 f920 	bl	8004a64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004824:	4b59      	ldr	r3, [pc, #356]	; (800498c <pvPortMalloc+0x184>)
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4013      	ands	r3, r2
 800482c:	2b00      	cmp	r3, #0
 800482e:	f040 8093 	bne.w	8004958 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d01d      	beq.n	8004874 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004838:	2208      	movs	r2, #8
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4413      	add	r3, r2
 800483e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f003 0307 	and.w	r3, r3, #7
 8004846:	2b00      	cmp	r3, #0
 8004848:	d014      	beq.n	8004874 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f023 0307 	bic.w	r3, r3, #7
 8004850:	3308      	adds	r3, #8
 8004852:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f003 0307 	and.w	r3, r3, #7
 800485a:	2b00      	cmp	r3, #0
 800485c:	d00a      	beq.n	8004874 <pvPortMalloc+0x6c>
	__asm volatile
 800485e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004862:	f383 8811 	msr	BASEPRI, r3
 8004866:	f3bf 8f6f 	isb	sy
 800486a:	f3bf 8f4f 	dsb	sy
 800486e:	617b      	str	r3, [r7, #20]
}
 8004870:	bf00      	nop
 8004872:	e7fe      	b.n	8004872 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d06e      	beq.n	8004958 <pvPortMalloc+0x150>
 800487a:	4b45      	ldr	r3, [pc, #276]	; (8004990 <pvPortMalloc+0x188>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	429a      	cmp	r2, r3
 8004882:	d869      	bhi.n	8004958 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004884:	4b43      	ldr	r3, [pc, #268]	; (8004994 <pvPortMalloc+0x18c>)
 8004886:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004888:	4b42      	ldr	r3, [pc, #264]	; (8004994 <pvPortMalloc+0x18c>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800488e:	e004      	b.n	800489a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004892:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800489a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d903      	bls.n	80048ac <pvPortMalloc+0xa4>
 80048a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d1f1      	bne.n	8004890 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80048ac:	4b36      	ldr	r3, [pc, #216]	; (8004988 <pvPortMalloc+0x180>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d050      	beq.n	8004958 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80048b6:	6a3b      	ldr	r3, [r7, #32]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2208      	movs	r2, #8
 80048bc:	4413      	add	r3, r2
 80048be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80048c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	6a3b      	ldr	r3, [r7, #32]
 80048c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80048c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ca:	685a      	ldr	r2, [r3, #4]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	1ad2      	subs	r2, r2, r3
 80048d0:	2308      	movs	r3, #8
 80048d2:	005b      	lsls	r3, r3, #1
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d91f      	bls.n	8004918 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80048d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4413      	add	r3, r2
 80048de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80048e0:	69bb      	ldr	r3, [r7, #24]
 80048e2:	f003 0307 	and.w	r3, r3, #7
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d00a      	beq.n	8004900 <pvPortMalloc+0xf8>
	__asm volatile
 80048ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ee:	f383 8811 	msr	BASEPRI, r3
 80048f2:	f3bf 8f6f 	isb	sy
 80048f6:	f3bf 8f4f 	dsb	sy
 80048fa:	613b      	str	r3, [r7, #16]
}
 80048fc:	bf00      	nop
 80048fe:	e7fe      	b.n	80048fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004902:	685a      	ldr	r2, [r3, #4]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	1ad2      	subs	r2, r2, r3
 8004908:	69bb      	ldr	r3, [r7, #24]
 800490a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800490c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004912:	69b8      	ldr	r0, [r7, #24]
 8004914:	f000 f908 	bl	8004b28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004918:	4b1d      	ldr	r3, [pc, #116]	; (8004990 <pvPortMalloc+0x188>)
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	4a1b      	ldr	r2, [pc, #108]	; (8004990 <pvPortMalloc+0x188>)
 8004924:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004926:	4b1a      	ldr	r3, [pc, #104]	; (8004990 <pvPortMalloc+0x188>)
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	4b1b      	ldr	r3, [pc, #108]	; (8004998 <pvPortMalloc+0x190>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	429a      	cmp	r2, r3
 8004930:	d203      	bcs.n	800493a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004932:	4b17      	ldr	r3, [pc, #92]	; (8004990 <pvPortMalloc+0x188>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a18      	ldr	r2, [pc, #96]	; (8004998 <pvPortMalloc+0x190>)
 8004938:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800493a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493c:	685a      	ldr	r2, [r3, #4]
 800493e:	4b13      	ldr	r3, [pc, #76]	; (800498c <pvPortMalloc+0x184>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	431a      	orrs	r2, r3
 8004944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004946:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494a:	2200      	movs	r2, #0
 800494c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800494e:	4b13      	ldr	r3, [pc, #76]	; (800499c <pvPortMalloc+0x194>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	3301      	adds	r3, #1
 8004954:	4a11      	ldr	r2, [pc, #68]	; (800499c <pvPortMalloc+0x194>)
 8004956:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004958:	f7fe fe70 	bl	800363c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	f003 0307 	and.w	r3, r3, #7
 8004962:	2b00      	cmp	r3, #0
 8004964:	d00a      	beq.n	800497c <pvPortMalloc+0x174>
	__asm volatile
 8004966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800496a:	f383 8811 	msr	BASEPRI, r3
 800496e:	f3bf 8f6f 	isb	sy
 8004972:	f3bf 8f4f 	dsb	sy
 8004976:	60fb      	str	r3, [r7, #12]
}
 8004978:	bf00      	nop
 800497a:	e7fe      	b.n	800497a <pvPortMalloc+0x172>
	return pvReturn;
 800497c:	69fb      	ldr	r3, [r7, #28]
}
 800497e:	4618      	mov	r0, r3
 8004980:	3728      	adds	r7, #40	; 0x28
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	20004080 	.word	0x20004080
 800498c:	20004094 	.word	0x20004094
 8004990:	20004084 	.word	0x20004084
 8004994:	20004078 	.word	0x20004078
 8004998:	20004088 	.word	0x20004088
 800499c:	2000408c 	.word	0x2000408c

080049a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b086      	sub	sp, #24
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d04d      	beq.n	8004a4e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80049b2:	2308      	movs	r3, #8
 80049b4:	425b      	negs	r3, r3
 80049b6:	697a      	ldr	r2, [r7, #20]
 80049b8:	4413      	add	r3, r2
 80049ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	685a      	ldr	r2, [r3, #4]
 80049c4:	4b24      	ldr	r3, [pc, #144]	; (8004a58 <vPortFree+0xb8>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4013      	ands	r3, r2
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d10a      	bne.n	80049e4 <vPortFree+0x44>
	__asm volatile
 80049ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d2:	f383 8811 	msr	BASEPRI, r3
 80049d6:	f3bf 8f6f 	isb	sy
 80049da:	f3bf 8f4f 	dsb	sy
 80049de:	60fb      	str	r3, [r7, #12]
}
 80049e0:	bf00      	nop
 80049e2:	e7fe      	b.n	80049e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d00a      	beq.n	8004a02 <vPortFree+0x62>
	__asm volatile
 80049ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f0:	f383 8811 	msr	BASEPRI, r3
 80049f4:	f3bf 8f6f 	isb	sy
 80049f8:	f3bf 8f4f 	dsb	sy
 80049fc:	60bb      	str	r3, [r7, #8]
}
 80049fe:	bf00      	nop
 8004a00:	e7fe      	b.n	8004a00 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	685a      	ldr	r2, [r3, #4]
 8004a06:	4b14      	ldr	r3, [pc, #80]	; (8004a58 <vPortFree+0xb8>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d01e      	beq.n	8004a4e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d11a      	bne.n	8004a4e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	685a      	ldr	r2, [r3, #4]
 8004a1c:	4b0e      	ldr	r3, [pc, #56]	; (8004a58 <vPortFree+0xb8>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	43db      	mvns	r3, r3
 8004a22:	401a      	ands	r2, r3
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004a28:	f7fe fdfa 	bl	8003620 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	685a      	ldr	r2, [r3, #4]
 8004a30:	4b0a      	ldr	r3, [pc, #40]	; (8004a5c <vPortFree+0xbc>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4413      	add	r3, r2
 8004a36:	4a09      	ldr	r2, [pc, #36]	; (8004a5c <vPortFree+0xbc>)
 8004a38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004a3a:	6938      	ldr	r0, [r7, #16]
 8004a3c:	f000 f874 	bl	8004b28 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004a40:	4b07      	ldr	r3, [pc, #28]	; (8004a60 <vPortFree+0xc0>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	3301      	adds	r3, #1
 8004a46:	4a06      	ldr	r2, [pc, #24]	; (8004a60 <vPortFree+0xc0>)
 8004a48:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004a4a:	f7fe fdf7 	bl	800363c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004a4e:	bf00      	nop
 8004a50:	3718      	adds	r7, #24
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	20004094 	.word	0x20004094
 8004a5c:	20004084 	.word	0x20004084
 8004a60:	20004090 	.word	0x20004090

08004a64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004a64:	b480      	push	{r7}
 8004a66:	b085      	sub	sp, #20
 8004a68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004a6a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004a6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004a70:	4b27      	ldr	r3, [pc, #156]	; (8004b10 <prvHeapInit+0xac>)
 8004a72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f003 0307 	and.w	r3, r3, #7
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d00c      	beq.n	8004a98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	3307      	adds	r3, #7
 8004a82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f023 0307 	bic.w	r3, r3, #7
 8004a8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004a8c:	68ba      	ldr	r2, [r7, #8]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	4a1f      	ldr	r2, [pc, #124]	; (8004b10 <prvHeapInit+0xac>)
 8004a94:	4413      	add	r3, r2
 8004a96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004a9c:	4a1d      	ldr	r2, [pc, #116]	; (8004b14 <prvHeapInit+0xb0>)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004aa2:	4b1c      	ldr	r3, [pc, #112]	; (8004b14 <prvHeapInit+0xb0>)
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	68ba      	ldr	r2, [r7, #8]
 8004aac:	4413      	add	r3, r2
 8004aae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004ab0:	2208      	movs	r2, #8
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	1a9b      	subs	r3, r3, r2
 8004ab6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f023 0307 	bic.w	r3, r3, #7
 8004abe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	4a15      	ldr	r2, [pc, #84]	; (8004b18 <prvHeapInit+0xb4>)
 8004ac4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004ac6:	4b14      	ldr	r3, [pc, #80]	; (8004b18 <prvHeapInit+0xb4>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	2200      	movs	r2, #0
 8004acc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004ace:	4b12      	ldr	r3, [pc, #72]	; (8004b18 <prvHeapInit+0xb4>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	68fa      	ldr	r2, [r7, #12]
 8004ade:	1ad2      	subs	r2, r2, r3
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004ae4:	4b0c      	ldr	r3, [pc, #48]	; (8004b18 <prvHeapInit+0xb4>)
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	4a0a      	ldr	r2, [pc, #40]	; (8004b1c <prvHeapInit+0xb8>)
 8004af2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	4a09      	ldr	r2, [pc, #36]	; (8004b20 <prvHeapInit+0xbc>)
 8004afa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004afc:	4b09      	ldr	r3, [pc, #36]	; (8004b24 <prvHeapInit+0xc0>)
 8004afe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004b02:	601a      	str	r2, [r3, #0]
}
 8004b04:	bf00      	nop
 8004b06:	3714      	adds	r7, #20
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr
 8004b10:	20000478 	.word	0x20000478
 8004b14:	20004078 	.word	0x20004078
 8004b18:	20004080 	.word	0x20004080
 8004b1c:	20004088 	.word	0x20004088
 8004b20:	20004084 	.word	0x20004084
 8004b24:	20004094 	.word	0x20004094

08004b28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b085      	sub	sp, #20
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004b30:	4b28      	ldr	r3, [pc, #160]	; (8004bd4 <prvInsertBlockIntoFreeList+0xac>)
 8004b32:	60fb      	str	r3, [r7, #12]
 8004b34:	e002      	b.n	8004b3c <prvInsertBlockIntoFreeList+0x14>
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	60fb      	str	r3, [r7, #12]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d8f7      	bhi.n	8004b36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	68ba      	ldr	r2, [r7, #8]
 8004b50:	4413      	add	r3, r2
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d108      	bne.n	8004b6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	685a      	ldr	r2, [r3, #4]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	441a      	add	r2, r3
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	68ba      	ldr	r2, [r7, #8]
 8004b74:	441a      	add	r2, r3
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d118      	bne.n	8004bb0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	4b15      	ldr	r3, [pc, #84]	; (8004bd8 <prvInsertBlockIntoFreeList+0xb0>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d00d      	beq.n	8004ba6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	685a      	ldr	r2, [r3, #4]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	441a      	add	r2, r3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	601a      	str	r2, [r3, #0]
 8004ba4:	e008      	b.n	8004bb8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004ba6:	4b0c      	ldr	r3, [pc, #48]	; (8004bd8 <prvInsertBlockIntoFreeList+0xb0>)
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	601a      	str	r2, [r3, #0]
 8004bae:	e003      	b.n	8004bb8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004bb8:	68fa      	ldr	r2, [r7, #12]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d002      	beq.n	8004bc6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004bc6:	bf00      	nop
 8004bc8:	3714      	adds	r7, #20
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr
 8004bd2:	bf00      	nop
 8004bd4:	20004078 	.word	0x20004078
 8004bd8:	20004080 	.word	0x20004080

08004bdc <__libc_init_array>:
 8004bdc:	b570      	push	{r4, r5, r6, lr}
 8004bde:	4d0d      	ldr	r5, [pc, #52]	; (8004c14 <__libc_init_array+0x38>)
 8004be0:	4c0d      	ldr	r4, [pc, #52]	; (8004c18 <__libc_init_array+0x3c>)
 8004be2:	1b64      	subs	r4, r4, r5
 8004be4:	10a4      	asrs	r4, r4, #2
 8004be6:	2600      	movs	r6, #0
 8004be8:	42a6      	cmp	r6, r4
 8004bea:	d109      	bne.n	8004c00 <__libc_init_array+0x24>
 8004bec:	4d0b      	ldr	r5, [pc, #44]	; (8004c1c <__libc_init_array+0x40>)
 8004bee:	4c0c      	ldr	r4, [pc, #48]	; (8004c20 <__libc_init_array+0x44>)
 8004bf0:	f000 f8f6 	bl	8004de0 <_init>
 8004bf4:	1b64      	subs	r4, r4, r5
 8004bf6:	10a4      	asrs	r4, r4, #2
 8004bf8:	2600      	movs	r6, #0
 8004bfa:	42a6      	cmp	r6, r4
 8004bfc:	d105      	bne.n	8004c0a <__libc_init_array+0x2e>
 8004bfe:	bd70      	pop	{r4, r5, r6, pc}
 8004c00:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c04:	4798      	blx	r3
 8004c06:	3601      	adds	r6, #1
 8004c08:	e7ee      	b.n	8004be8 <__libc_init_array+0xc>
 8004c0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c0e:	4798      	blx	r3
 8004c10:	3601      	adds	r6, #1
 8004c12:	e7f2      	b.n	8004bfa <__libc_init_array+0x1e>
 8004c14:	08004f34 	.word	0x08004f34
 8004c18:	08004f34 	.word	0x08004f34
 8004c1c:	08004f34 	.word	0x08004f34
 8004c20:	08004f38 	.word	0x08004f38

08004c24 <__retarget_lock_acquire_recursive>:
 8004c24:	4770      	bx	lr

08004c26 <__retarget_lock_release_recursive>:
 8004c26:	4770      	bx	lr

08004c28 <memcpy>:
 8004c28:	440a      	add	r2, r1
 8004c2a:	4291      	cmp	r1, r2
 8004c2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004c30:	d100      	bne.n	8004c34 <memcpy+0xc>
 8004c32:	4770      	bx	lr
 8004c34:	b510      	push	{r4, lr}
 8004c36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c3e:	4291      	cmp	r1, r2
 8004c40:	d1f9      	bne.n	8004c36 <memcpy+0xe>
 8004c42:	bd10      	pop	{r4, pc}

08004c44 <memset>:
 8004c44:	4402      	add	r2, r0
 8004c46:	4603      	mov	r3, r0
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d100      	bne.n	8004c4e <memset+0xa>
 8004c4c:	4770      	bx	lr
 8004c4e:	f803 1b01 	strb.w	r1, [r3], #1
 8004c52:	e7f9      	b.n	8004c48 <memset+0x4>

08004c54 <cleanup_glue>:
 8004c54:	b538      	push	{r3, r4, r5, lr}
 8004c56:	460c      	mov	r4, r1
 8004c58:	6809      	ldr	r1, [r1, #0]
 8004c5a:	4605      	mov	r5, r0
 8004c5c:	b109      	cbz	r1, 8004c62 <cleanup_glue+0xe>
 8004c5e:	f7ff fff9 	bl	8004c54 <cleanup_glue>
 8004c62:	4621      	mov	r1, r4
 8004c64:	4628      	mov	r0, r5
 8004c66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c6a:	f000 b869 	b.w	8004d40 <_free_r>
	...

08004c70 <_reclaim_reent>:
 8004c70:	4b2c      	ldr	r3, [pc, #176]	; (8004d24 <_reclaim_reent+0xb4>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4283      	cmp	r3, r0
 8004c76:	b570      	push	{r4, r5, r6, lr}
 8004c78:	4604      	mov	r4, r0
 8004c7a:	d051      	beq.n	8004d20 <_reclaim_reent+0xb0>
 8004c7c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004c7e:	b143      	cbz	r3, 8004c92 <_reclaim_reent+0x22>
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d14a      	bne.n	8004d1c <_reclaim_reent+0xac>
 8004c86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c88:	6819      	ldr	r1, [r3, #0]
 8004c8a:	b111      	cbz	r1, 8004c92 <_reclaim_reent+0x22>
 8004c8c:	4620      	mov	r0, r4
 8004c8e:	f000 f857 	bl	8004d40 <_free_r>
 8004c92:	6961      	ldr	r1, [r4, #20]
 8004c94:	b111      	cbz	r1, 8004c9c <_reclaim_reent+0x2c>
 8004c96:	4620      	mov	r0, r4
 8004c98:	f000 f852 	bl	8004d40 <_free_r>
 8004c9c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004c9e:	b111      	cbz	r1, 8004ca6 <_reclaim_reent+0x36>
 8004ca0:	4620      	mov	r0, r4
 8004ca2:	f000 f84d 	bl	8004d40 <_free_r>
 8004ca6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004ca8:	b111      	cbz	r1, 8004cb0 <_reclaim_reent+0x40>
 8004caa:	4620      	mov	r0, r4
 8004cac:	f000 f848 	bl	8004d40 <_free_r>
 8004cb0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004cb2:	b111      	cbz	r1, 8004cba <_reclaim_reent+0x4a>
 8004cb4:	4620      	mov	r0, r4
 8004cb6:	f000 f843 	bl	8004d40 <_free_r>
 8004cba:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004cbc:	b111      	cbz	r1, 8004cc4 <_reclaim_reent+0x54>
 8004cbe:	4620      	mov	r0, r4
 8004cc0:	f000 f83e 	bl	8004d40 <_free_r>
 8004cc4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004cc6:	b111      	cbz	r1, 8004cce <_reclaim_reent+0x5e>
 8004cc8:	4620      	mov	r0, r4
 8004cca:	f000 f839 	bl	8004d40 <_free_r>
 8004cce:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004cd0:	b111      	cbz	r1, 8004cd8 <_reclaim_reent+0x68>
 8004cd2:	4620      	mov	r0, r4
 8004cd4:	f000 f834 	bl	8004d40 <_free_r>
 8004cd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004cda:	b111      	cbz	r1, 8004ce2 <_reclaim_reent+0x72>
 8004cdc:	4620      	mov	r0, r4
 8004cde:	f000 f82f 	bl	8004d40 <_free_r>
 8004ce2:	69a3      	ldr	r3, [r4, #24]
 8004ce4:	b1e3      	cbz	r3, 8004d20 <_reclaim_reent+0xb0>
 8004ce6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004ce8:	4620      	mov	r0, r4
 8004cea:	4798      	blx	r3
 8004cec:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004cee:	b1b9      	cbz	r1, 8004d20 <_reclaim_reent+0xb0>
 8004cf0:	4620      	mov	r0, r4
 8004cf2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004cf6:	f7ff bfad 	b.w	8004c54 <cleanup_glue>
 8004cfa:	5949      	ldr	r1, [r1, r5]
 8004cfc:	b941      	cbnz	r1, 8004d10 <_reclaim_reent+0xa0>
 8004cfe:	3504      	adds	r5, #4
 8004d00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d02:	2d80      	cmp	r5, #128	; 0x80
 8004d04:	68d9      	ldr	r1, [r3, #12]
 8004d06:	d1f8      	bne.n	8004cfa <_reclaim_reent+0x8a>
 8004d08:	4620      	mov	r0, r4
 8004d0a:	f000 f819 	bl	8004d40 <_free_r>
 8004d0e:	e7ba      	b.n	8004c86 <_reclaim_reent+0x16>
 8004d10:	680e      	ldr	r6, [r1, #0]
 8004d12:	4620      	mov	r0, r4
 8004d14:	f000 f814 	bl	8004d40 <_free_r>
 8004d18:	4631      	mov	r1, r6
 8004d1a:	e7ef      	b.n	8004cfc <_reclaim_reent+0x8c>
 8004d1c:	2500      	movs	r5, #0
 8004d1e:	e7ef      	b.n	8004d00 <_reclaim_reent+0x90>
 8004d20:	bd70      	pop	{r4, r5, r6, pc}
 8004d22:	bf00      	nop
 8004d24:	20000010 	.word	0x20000010

08004d28 <__malloc_lock>:
 8004d28:	4801      	ldr	r0, [pc, #4]	; (8004d30 <__malloc_lock+0x8>)
 8004d2a:	f7ff bf7b 	b.w	8004c24 <__retarget_lock_acquire_recursive>
 8004d2e:	bf00      	nop
 8004d30:	20004140 	.word	0x20004140

08004d34 <__malloc_unlock>:
 8004d34:	4801      	ldr	r0, [pc, #4]	; (8004d3c <__malloc_unlock+0x8>)
 8004d36:	f7ff bf76 	b.w	8004c26 <__retarget_lock_release_recursive>
 8004d3a:	bf00      	nop
 8004d3c:	20004140 	.word	0x20004140

08004d40 <_free_r>:
 8004d40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d42:	2900      	cmp	r1, #0
 8004d44:	d048      	beq.n	8004dd8 <_free_r+0x98>
 8004d46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d4a:	9001      	str	r0, [sp, #4]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	f1a1 0404 	sub.w	r4, r1, #4
 8004d52:	bfb8      	it	lt
 8004d54:	18e4      	addlt	r4, r4, r3
 8004d56:	f7ff ffe7 	bl	8004d28 <__malloc_lock>
 8004d5a:	4a20      	ldr	r2, [pc, #128]	; (8004ddc <_free_r+0x9c>)
 8004d5c:	9801      	ldr	r0, [sp, #4]
 8004d5e:	6813      	ldr	r3, [r2, #0]
 8004d60:	4615      	mov	r5, r2
 8004d62:	b933      	cbnz	r3, 8004d72 <_free_r+0x32>
 8004d64:	6063      	str	r3, [r4, #4]
 8004d66:	6014      	str	r4, [r2, #0]
 8004d68:	b003      	add	sp, #12
 8004d6a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d6e:	f7ff bfe1 	b.w	8004d34 <__malloc_unlock>
 8004d72:	42a3      	cmp	r3, r4
 8004d74:	d90b      	bls.n	8004d8e <_free_r+0x4e>
 8004d76:	6821      	ldr	r1, [r4, #0]
 8004d78:	1862      	adds	r2, r4, r1
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	bf04      	itt	eq
 8004d7e:	681a      	ldreq	r2, [r3, #0]
 8004d80:	685b      	ldreq	r3, [r3, #4]
 8004d82:	6063      	str	r3, [r4, #4]
 8004d84:	bf04      	itt	eq
 8004d86:	1852      	addeq	r2, r2, r1
 8004d88:	6022      	streq	r2, [r4, #0]
 8004d8a:	602c      	str	r4, [r5, #0]
 8004d8c:	e7ec      	b.n	8004d68 <_free_r+0x28>
 8004d8e:	461a      	mov	r2, r3
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	b10b      	cbz	r3, 8004d98 <_free_r+0x58>
 8004d94:	42a3      	cmp	r3, r4
 8004d96:	d9fa      	bls.n	8004d8e <_free_r+0x4e>
 8004d98:	6811      	ldr	r1, [r2, #0]
 8004d9a:	1855      	adds	r5, r2, r1
 8004d9c:	42a5      	cmp	r5, r4
 8004d9e:	d10b      	bne.n	8004db8 <_free_r+0x78>
 8004da0:	6824      	ldr	r4, [r4, #0]
 8004da2:	4421      	add	r1, r4
 8004da4:	1854      	adds	r4, r2, r1
 8004da6:	42a3      	cmp	r3, r4
 8004da8:	6011      	str	r1, [r2, #0]
 8004daa:	d1dd      	bne.n	8004d68 <_free_r+0x28>
 8004dac:	681c      	ldr	r4, [r3, #0]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	6053      	str	r3, [r2, #4]
 8004db2:	4421      	add	r1, r4
 8004db4:	6011      	str	r1, [r2, #0]
 8004db6:	e7d7      	b.n	8004d68 <_free_r+0x28>
 8004db8:	d902      	bls.n	8004dc0 <_free_r+0x80>
 8004dba:	230c      	movs	r3, #12
 8004dbc:	6003      	str	r3, [r0, #0]
 8004dbe:	e7d3      	b.n	8004d68 <_free_r+0x28>
 8004dc0:	6825      	ldr	r5, [r4, #0]
 8004dc2:	1961      	adds	r1, r4, r5
 8004dc4:	428b      	cmp	r3, r1
 8004dc6:	bf04      	itt	eq
 8004dc8:	6819      	ldreq	r1, [r3, #0]
 8004dca:	685b      	ldreq	r3, [r3, #4]
 8004dcc:	6063      	str	r3, [r4, #4]
 8004dce:	bf04      	itt	eq
 8004dd0:	1949      	addeq	r1, r1, r5
 8004dd2:	6021      	streq	r1, [r4, #0]
 8004dd4:	6054      	str	r4, [r2, #4]
 8004dd6:	e7c7      	b.n	8004d68 <_free_r+0x28>
 8004dd8:	b003      	add	sp, #12
 8004dda:	bd30      	pop	{r4, r5, pc}
 8004ddc:	20004098 	.word	0x20004098

08004de0 <_init>:
 8004de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004de2:	bf00      	nop
 8004de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004de6:	bc08      	pop	{r3}
 8004de8:	469e      	mov	lr, r3
 8004dea:	4770      	bx	lr

08004dec <_fini>:
 8004dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dee:	bf00      	nop
 8004df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004df2:	bc08      	pop	{r3}
 8004df4:	469e      	mov	lr, r3
 8004df6:	4770      	bx	lr
