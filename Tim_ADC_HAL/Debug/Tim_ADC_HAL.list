
Tim_ADC_HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b4c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001cd4  08001cd4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001cd4  08001cd4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001cd4  08001cd4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001cd4  08001cd4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001cd4  08001cd4  00011cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001cd8  08001cd8  00011cd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001cdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000b4  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000c0  200000c0  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000acaa  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018c7  00000000  00000000  0002ace6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ad0  00000000  00000000  0002c5b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a08  00000000  00000000  0002d080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021130  00000000  00000000  0002da88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bfc2  00000000  00000000  0004ebb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d10dc  00000000  00000000  0005ab7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0012bc56  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002cbc  00000000  00000000  0012bcac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001cbc 	.word	0x08001cbc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001cbc 	.word	0x08001cbc

080001c8 <main>:
TIM_HandleTypeDef myTimerHandle;

uint8_t adcValue; // 8 res , 8bit = optimised

int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
	//call in config functions
	HAL_Init();
 80001cc:	f000 fa1a 	bl	8000604 <HAL_Init>
	GPIO_Config(); //for led and analog input
 80001d0:	f000 f810 	bl	80001f4 <GPIO_Config>
	ADC_Config(); // ADC
 80001d4:	f000 f86a 	bl	80002ac <ADC_Config>
	TIM_Config();
 80001d8:	f000 f8be 	bl	8000358 <TIM_Config>

	//start timer and adc (as interrupt)
	HAL_TIM_Base_Start(&myTimerHandle);
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <main+0x24>)
 80001de:	f001 fa63 	bl	80016a8 <HAL_TIM_Base_Start>
	HAL_ADC_Start_IT(&myADChandle); //start ADC as interrupt, define ADC interrupt conversion complt call back at end
 80001e2:	4803      	ldr	r0, [pc, #12]	; (80001f0 <main+0x28>)
 80001e4:	f000 fab8 	bl	8000758 <HAL_ADC_Start_IT>

	while(1)
 80001e8:	e7fe      	b.n	80001e8 <main+0x20>
 80001ea:	bf00      	nop
 80001ec:	20000028 	.word	0x20000028
 80001f0:	20000074 	.word	0x20000074

080001f4 <GPIO_Config>:
	}

}

void GPIO_Config(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b088      	sub	sp, #32
 80001f8:	af00      	add	r7, sp, #0
	//enable GPIOA (ADC) + GPIOD (led) clk
	__HAL_RCC_GPIOA_CLK_ENABLE(); // analog input
 80001fa:	2300      	movs	r3, #0
 80001fc:	60bb      	str	r3, [r7, #8]
 80001fe:	4b27      	ldr	r3, [pc, #156]	; (800029c <GPIO_Config+0xa8>)
 8000200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000202:	4a26      	ldr	r2, [pc, #152]	; (800029c <GPIO_Config+0xa8>)
 8000204:	f043 0301 	orr.w	r3, r3, #1
 8000208:	6313      	str	r3, [r2, #48]	; 0x30
 800020a:	4b24      	ldr	r3, [pc, #144]	; (800029c <GPIO_Config+0xa8>)
 800020c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800020e:	f003 0301 	and.w	r3, r3, #1
 8000212:	60bb      	str	r3, [r7, #8]
 8000214:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE(); // led
 8000216:	2300      	movs	r3, #0
 8000218:	607b      	str	r3, [r7, #4]
 800021a:	4b20      	ldr	r3, [pc, #128]	; (800029c <GPIO_Config+0xa8>)
 800021c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800021e:	4a1f      	ldr	r2, [pc, #124]	; (800029c <GPIO_Config+0xa8>)
 8000220:	f043 0308 	orr.w	r3, r3, #8
 8000224:	6313      	str	r3, [r2, #48]	; 0x30
 8000226:	4b1d      	ldr	r3, [pc, #116]	; (800029c <GPIO_Config+0xa8>)
 8000228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800022a:	f003 0308 	and.w	r3, r3, #8
 800022e:	607b      	str	r3, [r7, #4]
 8000230:	687b      	ldr	r3, [r7, #4]

	// ADC (port A) config struct for INIT
	GPIO_InitTypeDef myPinINIT; //typedef hold the values for both ADC + LED, reset when define pin/mode on LED

	myPinINIT.Pin = GPIO_PIN_0;  //ADC pin 0 (PA0)
 8000232:	2301      	movs	r3, #1
 8000234:	60fb      	str	r3, [r7, #12]
	myPinINIT.Mode = GPIO_MODE_ANALOG; //analog from .h
 8000236:	2303      	movs	r3, #3
 8000238:	613b      	str	r3, [r7, #16]

	//INIT for port A
	HAL_GPIO_Init(GPIOA, &myPinINIT);
 800023a:	f107 030c 	add.w	r3, r7, #12
 800023e:	4619      	mov	r1, r3
 8000240:	4817      	ldr	r0, [pc, #92]	; (80002a0 <GPIO_Config+0xac>)
 8000242:	f001 f81f 	bl	8001284 <HAL_GPIO_Init>

	//LED (port D) config struct for INIT
	myPinINIT.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_12 | GPIO_PIN_12 ;
 8000246:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800024a:	60fb      	str	r3, [r7, #12]
	myPinINIT.Mode = GPIO_MODE_OUTPUT_PP;
 800024c:	2301      	movs	r3, #1
 800024e:	613b      	str	r3, [r7, #16]
	//INIT for port D
	HAL_GPIO_Init(GPIOD,&myPinINIT);
 8000250:	f107 030c 	add.w	r3, r7, #12
 8000254:	4619      	mov	r1, r3
 8000256:	4813      	ldr	r0, [pc, #76]	; (80002a4 <GPIO_Config+0xb0>)
 8000258:	f001 f814 	bl	8001284 <HAL_GPIO_Init>

	//Enable systick interrupt
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800025c:	f001 f9c8 	bl	80015f0 <HAL_RCC_GetHCLKFreq>
 8000260:	4603      	mov	r3, r0
 8000262:	4a11      	ldr	r2, [pc, #68]	; (80002a8 <GPIO_Config+0xb4>)
 8000264:	fba2 2303 	umull	r2, r3, r2, r3
 8000268:	099b      	lsrs	r3, r3, #6
 800026a:	4618      	mov	r0, r3
 800026c:	f000 ffe1 	bl	8001232 <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000270:	2004      	movs	r0, #4
 8000272:	f000 ffeb 	bl	800124c <HAL_SYSTICK_CLKSourceConfig>
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000276:	2200      	movs	r2, #0
 8000278:	2100      	movs	r1, #0
 800027a:	f04f 30ff 	mov.w	r0, #4294967295
 800027e:	f000 ffae 	bl	80011de <HAL_NVIC_SetPriority>

	//Enable ADC interrupt
	HAL_NVIC_SetPriority(ADC_IRQn, 0 ,0 );
 8000282:	2200      	movs	r2, #0
 8000284:	2100      	movs	r1, #0
 8000286:	2012      	movs	r0, #18
 8000288:	f000 ffa9 	bl	80011de <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(ADC_IRQn);
 800028c:	2012      	movs	r0, #18
 800028e:	f000 ffc2 	bl	8001216 <HAL_NVIC_EnableIRQ>

}
 8000292:	bf00      	nop
 8000294:	3720      	adds	r7, #32
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}
 800029a:	bf00      	nop
 800029c:	40023800 	.word	0x40023800
 80002a0:	40020000 	.word	0x40020000
 80002a4:	40020c00 	.word	0x40020c00
 80002a8:	10624dd3 	.word	0x10624dd3

080002ac <ADC_Config>:

void ADC_Config(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b086      	sub	sp, #24
 80002b0:	af00      	add	r7, sp, #0
	//Enable ADC clk
	__HAL_RCC_ADC1_CLK_ENABLE();
 80002b2:	2300      	movs	r3, #0
 80002b4:	607b      	str	r3, [r7, #4]
 80002b6:	4b25      	ldr	r3, [pc, #148]	; (800034c <ADC_Config+0xa0>)
 80002b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002ba:	4a24      	ldr	r2, [pc, #144]	; (800034c <ADC_Config+0xa0>)
 80002bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002c0:	6453      	str	r3, [r2, #68]	; 0x44
 80002c2:	4b22      	ldr	r3, [pc, #136]	; (800034c <ADC_Config+0xa0>)
 80002c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80002ca:	607b      	str	r3, [r7, #4]
 80002cc:	687b      	ldr	r3, [r7, #4]

	//config ADC for INIT, globally defined ADC typedef , same config seen in cubemx too
	myADChandle.Instance = ADC1; // set instance to ADC1
 80002ce:	4b20      	ldr	r3, [pc, #128]	; (8000350 <ADC_Config+0xa4>)
 80002d0:	4a20      	ldr	r2, [pc, #128]	; (8000354 <ADC_Config+0xa8>)
 80002d2:	601a      	str	r2, [r3, #0]
	myADChandle.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;// divide ADC mother clock (not timer trig clk)
 80002d4:	4b1e      	ldr	r3, [pc, #120]	; (8000350 <ADC_Config+0xa4>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	605a      	str	r2, [r3, #4]
	myADChandle.Init.ContinuousConvMode = DISABLE; // as only using external trigger mode
 80002da:	4b1d      	ldr	r3, [pc, #116]	; (8000350 <ADC_Config+0xa4>)
 80002dc:	2200      	movs	r2, #0
 80002de:	761a      	strb	r2, [r3, #24]
	myADChandle.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002e0:	4b1b      	ldr	r3, [pc, #108]	; (8000350 <ADC_Config+0xa4>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	60da      	str	r2, [r3, #12]
	myADChandle.Init.DiscontinuousConvMode = DISABLE;
 80002e6:	4b1a      	ldr	r3, [pc, #104]	; (8000350 <ADC_Config+0xa4>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	f883 2020 	strb.w	r2, [r3, #32]
	myADChandle.Init.DMAContinuousRequests = DISABLE;
 80002ee:	4b18      	ldr	r3, [pc, #96]	; (8000350 <ADC_Config+0xa4>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	myADChandle.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80002f6:	4b16      	ldr	r3, [pc, #88]	; (8000350 <ADC_Config+0xa4>)
 80002f8:	2201      	movs	r2, #1
 80002fa:	615a      	str	r2, [r3, #20]
	myADChandle.Init.ExternalTrigConv = ADC_EXTERNALTRIG2_T2_TRGO;
 80002fc:	4b14      	ldr	r3, [pc, #80]	; (8000350 <ADC_Config+0xa4>)
 80002fe:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000302:	629a      	str	r2, [r3, #40]	; 0x28
	myADChandle.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000304:	4b12      	ldr	r3, [pc, #72]	; (8000350 <ADC_Config+0xa4>)
 8000306:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800030a:	62da      	str	r2, [r3, #44]	; 0x2c
	myADChandle.Init.NbrOfConversion = 1;
 800030c:	4b10      	ldr	r3, [pc, #64]	; (8000350 <ADC_Config+0xa4>)
 800030e:	2201      	movs	r2, #1
 8000310:	61da      	str	r2, [r3, #28]
	myADChandle.Init.Resolution = ADC_RESOLUTION8b;
 8000312:	4b0f      	ldr	r3, [pc, #60]	; (8000350 <ADC_Config+0xa4>)
 8000314:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000318:	609a      	str	r2, [r3, #8]
	myADChandle.Init.ScanConvMode = DISABLE;
 800031a:	4b0d      	ldr	r3, [pc, #52]	; (8000350 <ADC_Config+0xa4>)
 800031c:	2200      	movs	r2, #0
 800031e:	611a      	str	r2, [r3, #16]

	//ADC INIT
	HAL_ADC_Init(&myADChandle);
 8000320:	480b      	ldr	r0, [pc, #44]	; (8000350 <ADC_Config+0xa4>)
 8000322:	f000 f9d5 	bl	80006d0 <HAL_ADC_Init>

	//ADC channel config
	ADC_ChannelConfTypeDef myChannelConfig; //global typedef struct

	myChannelConfig.Channel = ADC_CHANNEL_1;
 8000326:	2301      	movs	r3, #1
 8000328:	60bb      	str	r3, [r7, #8]
	myChannelConfig.Offset = 0;
 800032a:	2300      	movs	r3, #0
 800032c:	617b      	str	r3, [r7, #20]
	myChannelConfig.Rank = 1;
 800032e:	2301      	movs	r3, #1
 8000330:	60fb      	str	r3, [r7, #12]
	myChannelConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000332:	2302      	movs	r3, #2
 8000334:	613b      	str	r3, [r7, #16]
	HAL_ADC_ConfigChannel(&myADChandle , &myChannelConfig);
 8000336:	f107 0308 	add.w	r3, r7, #8
 800033a:	4619      	mov	r1, r3
 800033c:	4804      	ldr	r0, [pc, #16]	; (8000350 <ADC_Config+0xa4>)
 800033e:	f000 fc4b 	bl	8000bd8 <HAL_ADC_ConfigChannel>

}
 8000342:	bf00      	nop
 8000344:	3718      	adds	r7, #24
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	40023800 	.word	0x40023800
 8000350:	20000074 	.word	0x20000074
 8000354:	40012000 	.word	0x40012000

08000358 <TIM_Config>:

void TIM_Config(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b088      	sub	sp, #32
 800035c:	af00      	add	r7, sp, #0
	//Enable TIM2 clk
	__HAL_RCC_TIM2_CLK_ENABLE();
 800035e:	2300      	movs	r3, #0
 8000360:	607b      	str	r3, [r7, #4]
 8000362:	4b1b      	ldr	r3, [pc, #108]	; (80003d0 <TIM_Config+0x78>)
 8000364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000366:	4a1a      	ldr	r2, [pc, #104]	; (80003d0 <TIM_Config+0x78>)
 8000368:	f043 0301 	orr.w	r3, r3, #1
 800036c:	6413      	str	r3, [r2, #64]	; 0x40
 800036e:	4b18      	ldr	r3, [pc, #96]	; (80003d0 <TIM_Config+0x78>)
 8000370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000372:	f003 0301 	and.w	r3, r3, #1
 8000376:	607b      	str	r3, [r7, #4]
 8000378:	687b      	ldr	r3, [r7, #4]

	//TIM config (struct) for INIT, define handletypedef globally
	myTimerHandle.Instance = TIM2; //set instance to TIM2
 800037a:	4b16      	ldr	r3, [pc, #88]	; (80003d4 <TIM_Config+0x7c>)
 800037c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000380:	601a      	str	r2, [r3, #0]
	myTimerHandle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1; //clk division =1
 8000382:	4b14      	ldr	r3, [pc, #80]	; (80003d4 <TIM_Config+0x7c>)
 8000384:	2200      	movs	r2, #0
 8000386:	611a      	str	r2, [r3, #16]
	myTimerHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000388:	4b12      	ldr	r3, [pc, #72]	; (80003d4 <TIM_Config+0x7c>)
 800038a:	2200      	movs	r2, #0
 800038c:	609a      	str	r2, [r3, #8]
	myTimerHandle.Init.Period = 16000 - 1; // -1 due to 0 being the start ,still just 16000
 800038e:	4b11      	ldr	r3, [pc, #68]	; (80003d4 <TIM_Config+0x7c>)
 8000390:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000394:	60da      	str	r2, [r3, #12]
	myTimerHandle.Init.Prescaler = 100 - 1; // prescaler was 16000 before?
 8000396:	4b0f      	ldr	r3, [pc, #60]	; (80003d4 <TIM_Config+0x7c>)
 8000398:	2263      	movs	r2, #99	; 0x63
 800039a:	605a      	str	r2, [r3, #4]

	//INIT
	HAL_TIM_Base_Init(&myTimerHandle);
 800039c:	480d      	ldr	r0, [pc, #52]	; (80003d4 <TIM_Config+0x7c>)
 800039e:	f001 f933 	bl	8001608 <HAL_TIM_Base_Init>

	//TIM CLK source config
	TIM_ClockConfigTypeDef myClkSrcConfig; // struct
	myClkSrcConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003a6:	613b      	str	r3, [r7, #16]

	HAL_TIM_ConfigClockSource(&myTimerHandle, &myClkSrcConfig); // implement the configs
 80003a8:	f107 0310 	add.w	r3, r7, #16
 80003ac:	4619      	mov	r1, r3
 80003ae:	4809      	ldr	r0, [pc, #36]	; (80003d4 <TIM_Config+0x7c>)
 80003b0:	f001 f9e2 	bl	8001778 <HAL_TIM_ConfigClockSource>

	//TIM master config, define a type def
	TIM_MasterConfigTypeDef myMasterConfig;
	//configs
	myMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80003b4:	2320      	movs	r3, #32
 80003b6:	60bb      	str	r3, [r7, #8]
	myMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003b8:	2300      	movs	r3, #0
 80003ba:	60fb      	str	r3, [r7, #12]

	//INIT master
	HAL_TIMEx_MasterConfigSynchronization(&myTimerHandle, &myMasterConfig);
 80003bc:	f107 0308 	add.w	r3, r7, #8
 80003c0:	4619      	mov	r1, r3
 80003c2:	4804      	ldr	r0, [pc, #16]	; (80003d4 <TIM_Config+0x7c>)
 80003c4:	f001 fbda 	bl	8001b7c <HAL_TIMEx_MasterConfigSynchronization>


}
 80003c8:	bf00      	nop
 80003ca:	3720      	adds	r7, #32
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd80      	pop	{r7, pc}
 80003d0:	40023800 	.word	0x40023800
 80003d4:	20000028 	.word	0x20000028

080003d8 <ADC_IRQHandler>:
//	HAL_IncTick();
//	HAL_SYSTICK_IRQHandler();
//}

void ADC_IRQHandler(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
	HAL_ADC_IRQHandler(&myADChandle);
 80003dc:	4802      	ldr	r0, [pc, #8]	; (80003e8 <ADC_IRQHandler+0x10>)
 80003de:	f000 fa99 	bl	8000914 <HAL_ADC_IRQHandler>
}
 80003e2:	bf00      	nop
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	20000074 	.word	0x20000074

080003ec <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */

  //read adcValue
  adcValue = HAL_ADC_GetValue(&myADChandle);
 80003f4:	4807      	ldr	r0, [pc, #28]	; (8000414 <HAL_ADC_ConvCpltCallback+0x28>)
 80003f6:	f000 fbce 	bl	8000b96 <HAL_ADC_GetValue>
 80003fa:	4603      	mov	r3, r0
 80003fc:	b2da      	uxtb	r2, r3
 80003fe:	4b06      	ldr	r3, [pc, #24]	; (8000418 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000400:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12); //show led
 8000402:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000406:	4805      	ldr	r0, [pc, #20]	; (800041c <HAL_ADC_ConvCpltCallback+0x30>)
 8000408:	f001 f8d8 	bl	80015bc <HAL_GPIO_TogglePin>
}
 800040c:	bf00      	nop
 800040e:	3708      	adds	r7, #8
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}
 8000414:	20000074 	.word	0x20000074
 8000418:	20000070 	.word	0x20000070
 800041c:	40020c00 	.word	0x40020c00

08000420 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000420:	b480      	push	{r7}
 8000422:	b083      	sub	sp, #12
 8000424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000426:	2300      	movs	r3, #0
 8000428:	607b      	str	r3, [r7, #4]
 800042a:	4b10      	ldr	r3, [pc, #64]	; (800046c <HAL_MspInit+0x4c>)
 800042c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800042e:	4a0f      	ldr	r2, [pc, #60]	; (800046c <HAL_MspInit+0x4c>)
 8000430:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000434:	6453      	str	r3, [r2, #68]	; 0x44
 8000436:	4b0d      	ldr	r3, [pc, #52]	; (800046c <HAL_MspInit+0x4c>)
 8000438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800043a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800043e:	607b      	str	r3, [r7, #4]
 8000440:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000442:	2300      	movs	r3, #0
 8000444:	603b      	str	r3, [r7, #0]
 8000446:	4b09      	ldr	r3, [pc, #36]	; (800046c <HAL_MspInit+0x4c>)
 8000448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800044a:	4a08      	ldr	r2, [pc, #32]	; (800046c <HAL_MspInit+0x4c>)
 800044c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000450:	6413      	str	r3, [r2, #64]	; 0x40
 8000452:	4b06      	ldr	r3, [pc, #24]	; (800046c <HAL_MspInit+0x4c>)
 8000454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800045a:	603b      	str	r3, [r7, #0]
 800045c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800045e:	bf00      	nop
 8000460:	370c      	adds	r7, #12
 8000462:	46bd      	mov	sp, r7
 8000464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000468:	4770      	bx	lr
 800046a:	bf00      	nop
 800046c:	40023800 	.word	0x40023800

08000470 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b08a      	sub	sp, #40	; 0x28
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000478:	f107 0314 	add.w	r3, r7, #20
 800047c:	2200      	movs	r2, #0
 800047e:	601a      	str	r2, [r3, #0]
 8000480:	605a      	str	r2, [r3, #4]
 8000482:	609a      	str	r2, [r3, #8]
 8000484:	60da      	str	r2, [r3, #12]
 8000486:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	4a17      	ldr	r2, [pc, #92]	; (80004ec <HAL_ADC_MspInit+0x7c>)
 800048e:	4293      	cmp	r3, r2
 8000490:	d127      	bne.n	80004e2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000492:	2300      	movs	r3, #0
 8000494:	613b      	str	r3, [r7, #16]
 8000496:	4b16      	ldr	r3, [pc, #88]	; (80004f0 <HAL_ADC_MspInit+0x80>)
 8000498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800049a:	4a15      	ldr	r2, [pc, #84]	; (80004f0 <HAL_ADC_MspInit+0x80>)
 800049c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004a0:	6453      	str	r3, [r2, #68]	; 0x44
 80004a2:	4b13      	ldr	r3, [pc, #76]	; (80004f0 <HAL_ADC_MspInit+0x80>)
 80004a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80004aa:	613b      	str	r3, [r7, #16]
 80004ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ae:	2300      	movs	r3, #0
 80004b0:	60fb      	str	r3, [r7, #12]
 80004b2:	4b0f      	ldr	r3, [pc, #60]	; (80004f0 <HAL_ADC_MspInit+0x80>)
 80004b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004b6:	4a0e      	ldr	r2, [pc, #56]	; (80004f0 <HAL_ADC_MspInit+0x80>)
 80004b8:	f043 0301 	orr.w	r3, r3, #1
 80004bc:	6313      	str	r3, [r2, #48]	; 0x30
 80004be:	4b0c      	ldr	r3, [pc, #48]	; (80004f0 <HAL_ADC_MspInit+0x80>)
 80004c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004c2:	f003 0301 	and.w	r3, r3, #1
 80004c6:	60fb      	str	r3, [r7, #12]
 80004c8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80004ca:	2301      	movs	r3, #1
 80004cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004ce:	2303      	movs	r3, #3
 80004d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d2:	2300      	movs	r3, #0
 80004d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004d6:	f107 0314 	add.w	r3, r7, #20
 80004da:	4619      	mov	r1, r3
 80004dc:	4805      	ldr	r0, [pc, #20]	; (80004f4 <HAL_ADC_MspInit+0x84>)
 80004de:	f000 fed1 	bl	8001284 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80004e2:	bf00      	nop
 80004e4:	3728      	adds	r7, #40	; 0x28
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	40012000 	.word	0x40012000
 80004f0:	40023800 	.word	0x40023800
 80004f4:	40020000 	.word	0x40020000

080004f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80004f8:	b480      	push	{r7}
 80004fa:	b085      	sub	sp, #20
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000508:	d10d      	bne.n	8000526 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800050a:	2300      	movs	r3, #0
 800050c:	60fb      	str	r3, [r7, #12]
 800050e:	4b09      	ldr	r3, [pc, #36]	; (8000534 <HAL_TIM_Base_MspInit+0x3c>)
 8000510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000512:	4a08      	ldr	r2, [pc, #32]	; (8000534 <HAL_TIM_Base_MspInit+0x3c>)
 8000514:	f043 0301 	orr.w	r3, r3, #1
 8000518:	6413      	str	r3, [r2, #64]	; 0x40
 800051a:	4b06      	ldr	r3, [pc, #24]	; (8000534 <HAL_TIM_Base_MspInit+0x3c>)
 800051c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800051e:	f003 0301 	and.w	r3, r3, #1
 8000522:	60fb      	str	r3, [r7, #12]
 8000524:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000526:	bf00      	nop
 8000528:	3714      	adds	r7, #20
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	40023800 	.word	0x40023800

08000538 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800053c:	e7fe      	b.n	800053c <NMI_Handler+0x4>

0800053e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800053e:	b480      	push	{r7}
 8000540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000542:	e7fe      	b.n	8000542 <HardFault_Handler+0x4>

08000544 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000548:	e7fe      	b.n	8000548 <MemManage_Handler+0x4>

0800054a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800054a:	b480      	push	{r7}
 800054c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800054e:	e7fe      	b.n	800054e <BusFault_Handler+0x4>

08000550 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000554:	e7fe      	b.n	8000554 <UsageFault_Handler+0x4>

08000556 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000556:	b480      	push	{r7}
 8000558:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800055a:	bf00      	nop
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr

08000564 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000568:	bf00      	nop
 800056a:	46bd      	mov	sp, r7
 800056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000570:	4770      	bx	lr

08000572 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000572:	b480      	push	{r7}
 8000574:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000576:	bf00      	nop
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr

08000580 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000584:	f000 f890 	bl	80006a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000588:	bf00      	nop
 800058a:	bd80      	pop	{r7, pc}

0800058c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000590:	4b06      	ldr	r3, [pc, #24]	; (80005ac <SystemInit+0x20>)
 8000592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000596:	4a05      	ldr	r2, [pc, #20]	; (80005ac <SystemInit+0x20>)
 8000598:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800059c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005a0:	bf00      	nop
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	e000ed00 	.word	0xe000ed00

080005b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80005b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80005b4:	480d      	ldr	r0, [pc, #52]	; (80005ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80005b6:	490e      	ldr	r1, [pc, #56]	; (80005f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80005b8:	4a0e      	ldr	r2, [pc, #56]	; (80005f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80005ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005bc:	e002      	b.n	80005c4 <LoopCopyDataInit>

080005be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005c2:	3304      	adds	r3, #4

080005c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005c8:	d3f9      	bcc.n	80005be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ca:	4a0b      	ldr	r2, [pc, #44]	; (80005f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80005cc:	4c0b      	ldr	r4, [pc, #44]	; (80005fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80005ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005d0:	e001      	b.n	80005d6 <LoopFillZerobss>

080005d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005d4:	3204      	adds	r2, #4

080005d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005d8:	d3fb      	bcc.n	80005d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80005da:	f7ff ffd7 	bl	800058c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005de:	f001 fb49 	bl	8001c74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80005e2:	f7ff fdf1 	bl	80001c8 <main>
  bx  lr    
 80005e6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80005e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005f0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80005f4:	08001cdc 	.word	0x08001cdc
  ldr r2, =_sbss
 80005f8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005fc:	200000c0 	.word	0x200000c0

08000600 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000600:	e7fe      	b.n	8000600 <CAN1_RX0_IRQHandler>
	...

08000604 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000608:	4b0e      	ldr	r3, [pc, #56]	; (8000644 <HAL_Init+0x40>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a0d      	ldr	r2, [pc, #52]	; (8000644 <HAL_Init+0x40>)
 800060e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000612:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000614:	4b0b      	ldr	r3, [pc, #44]	; (8000644 <HAL_Init+0x40>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a0a      	ldr	r2, [pc, #40]	; (8000644 <HAL_Init+0x40>)
 800061a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800061e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000620:	4b08      	ldr	r3, [pc, #32]	; (8000644 <HAL_Init+0x40>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a07      	ldr	r2, [pc, #28]	; (8000644 <HAL_Init+0x40>)
 8000626:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800062a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800062c:	2003      	movs	r0, #3
 800062e:	f000 fdcb 	bl	80011c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000632:	200f      	movs	r0, #15
 8000634:	f000 f808 	bl	8000648 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000638:	f7ff fef2 	bl	8000420 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800063c:	2300      	movs	r3, #0
}
 800063e:	4618      	mov	r0, r3
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40023c00 	.word	0x40023c00

08000648 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000650:	4b12      	ldr	r3, [pc, #72]	; (800069c <HAL_InitTick+0x54>)
 8000652:	681a      	ldr	r2, [r3, #0]
 8000654:	4b12      	ldr	r3, [pc, #72]	; (80006a0 <HAL_InitTick+0x58>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	4619      	mov	r1, r3
 800065a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800065e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000662:	fbb2 f3f3 	udiv	r3, r2, r3
 8000666:	4618      	mov	r0, r3
 8000668:	f000 fde3 	bl	8001232 <HAL_SYSTICK_Config>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000672:	2301      	movs	r3, #1
 8000674:	e00e      	b.n	8000694 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	2b0f      	cmp	r3, #15
 800067a:	d80a      	bhi.n	8000692 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800067c:	2200      	movs	r2, #0
 800067e:	6879      	ldr	r1, [r7, #4]
 8000680:	f04f 30ff 	mov.w	r0, #4294967295
 8000684:	f000 fdab 	bl	80011de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000688:	4a06      	ldr	r2, [pc, #24]	; (80006a4 <HAL_InitTick+0x5c>)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800068e:	2300      	movs	r3, #0
 8000690:	e000      	b.n	8000694 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000692:	2301      	movs	r3, #1
}
 8000694:	4618      	mov	r0, r3
 8000696:	3708      	adds	r7, #8
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	20000000 	.word	0x20000000
 80006a0:	20000008 	.word	0x20000008
 80006a4:	20000004 	.word	0x20000004

080006a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006ac:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <HAL_IncTick+0x20>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	461a      	mov	r2, r3
 80006b2:	4b06      	ldr	r3, [pc, #24]	; (80006cc <HAL_IncTick+0x24>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	4413      	add	r3, r2
 80006b8:	4a04      	ldr	r2, [pc, #16]	; (80006cc <HAL_IncTick+0x24>)
 80006ba:	6013      	str	r3, [r2, #0]
}
 80006bc:	bf00      	nop
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	20000008 	.word	0x20000008
 80006cc:	200000bc 	.word	0x200000bc

080006d0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80006d8:	2300      	movs	r3, #0
 80006da:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d101      	bne.n	80006e6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80006e2:	2301      	movs	r3, #1
 80006e4:	e033      	b.n	800074e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d109      	bne.n	8000702 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80006ee:	6878      	ldr	r0, [r7, #4]
 80006f0:	f7ff febe 	bl	8000470 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	2200      	movs	r2, #0
 80006f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	2200      	movs	r2, #0
 80006fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000706:	f003 0310 	and.w	r3, r3, #16
 800070a:	2b00      	cmp	r3, #0
 800070c:	d118      	bne.n	8000740 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000712:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000716:	f023 0302 	bic.w	r3, r3, #2
 800071a:	f043 0202 	orr.w	r2, r3, #2
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000722:	6878      	ldr	r0, [r7, #4]
 8000724:	f000 fb7a 	bl	8000e1c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	2200      	movs	r2, #0
 800072c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000732:	f023 0303 	bic.w	r3, r3, #3
 8000736:	f043 0201 	orr.w	r2, r3, #1
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	641a      	str	r2, [r3, #64]	; 0x40
 800073e:	e001      	b.n	8000744 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000740:	2301      	movs	r3, #1
 8000742:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	2200      	movs	r2, #0
 8000748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800074c:	7bfb      	ldrb	r3, [r7, #15]
}
 800074e:	4618      	mov	r0, r3
 8000750:	3710      	adds	r7, #16
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
	...

08000758 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8000758:	b480      	push	{r7}
 800075a:	b085      	sub	sp, #20
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000760:	2300      	movs	r3, #0
 8000762:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800076a:	2b01      	cmp	r3, #1
 800076c:	d101      	bne.n	8000772 <HAL_ADC_Start_IT+0x1a>
 800076e:	2302      	movs	r3, #2
 8000770:	e0bd      	b.n	80008ee <HAL_ADC_Start_IT+0x196>
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	2201      	movs	r2, #1
 8000776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	689b      	ldr	r3, [r3, #8]
 8000780:	f003 0301 	and.w	r3, r3, #1
 8000784:	2b01      	cmp	r3, #1
 8000786:	d018      	beq.n	80007ba <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	689a      	ldr	r2, [r3, #8]
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	f042 0201 	orr.w	r2, r2, #1
 8000796:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000798:	4b58      	ldr	r3, [pc, #352]	; (80008fc <HAL_ADC_Start_IT+0x1a4>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a58      	ldr	r2, [pc, #352]	; (8000900 <HAL_ADC_Start_IT+0x1a8>)
 800079e:	fba2 2303 	umull	r2, r3, r2, r3
 80007a2:	0c9a      	lsrs	r2, r3, #18
 80007a4:	4613      	mov	r3, r2
 80007a6:	005b      	lsls	r3, r3, #1
 80007a8:	4413      	add	r3, r2
 80007aa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80007ac:	e002      	b.n	80007b4 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80007ae:	68bb      	ldr	r3, [r7, #8]
 80007b0:	3b01      	subs	r3, #1
 80007b2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d1f9      	bne.n	80007ae <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	689b      	ldr	r3, [r3, #8]
 80007c0:	f003 0301 	and.w	r3, r3, #1
 80007c4:	2b01      	cmp	r3, #1
 80007c6:	f040 8085 	bne.w	80008d4 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ce:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80007d2:	f023 0301 	bic.w	r3, r3, #1
 80007d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	685b      	ldr	r3, [r3, #4]
 80007e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d007      	beq.n	80007fc <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80007f4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000800:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000804:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000808:	d106      	bne.n	8000818 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800080e:	f023 0206 	bic.w	r2, r3, #6
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	645a      	str	r2, [r3, #68]	; 0x44
 8000816:	e002      	b.n	800081e <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	2200      	movs	r2, #0
 800081c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2200      	movs	r2, #0
 8000822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000826:	4b37      	ldr	r3, [pc, #220]	; (8000904 <HAL_ADC_Start_IT+0x1ac>)
 8000828:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000832:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	685b      	ldr	r3, [r3, #4]
 800083a:	687a      	ldr	r2, [r7, #4]
 800083c:	6812      	ldr	r2, [r2, #0]
 800083e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000842:	f043 0320 	orr.w	r3, r3, #32
 8000846:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	685b      	ldr	r3, [r3, #4]
 800084c:	f003 031f 	and.w	r3, r3, #31
 8000850:	2b00      	cmp	r3, #0
 8000852:	d12a      	bne.n	80008aa <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a2b      	ldr	r2, [pc, #172]	; (8000908 <HAL_ADC_Start_IT+0x1b0>)
 800085a:	4293      	cmp	r3, r2
 800085c:	d015      	beq.n	800088a <HAL_ADC_Start_IT+0x132>
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	4a2a      	ldr	r2, [pc, #168]	; (800090c <HAL_ADC_Start_IT+0x1b4>)
 8000864:	4293      	cmp	r3, r2
 8000866:	d105      	bne.n	8000874 <HAL_ADC_Start_IT+0x11c>
 8000868:	4b26      	ldr	r3, [pc, #152]	; (8000904 <HAL_ADC_Start_IT+0x1ac>)
 800086a:	685b      	ldr	r3, [r3, #4]
 800086c:	f003 031f 	and.w	r3, r3, #31
 8000870:	2b00      	cmp	r3, #0
 8000872:	d00a      	beq.n	800088a <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a25      	ldr	r2, [pc, #148]	; (8000910 <HAL_ADC_Start_IT+0x1b8>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d136      	bne.n	80008ec <HAL_ADC_Start_IT+0x194>
 800087e:	4b21      	ldr	r3, [pc, #132]	; (8000904 <HAL_ADC_Start_IT+0x1ac>)
 8000880:	685b      	ldr	r3, [r3, #4]
 8000882:	f003 0310 	and.w	r3, r3, #16
 8000886:	2b00      	cmp	r3, #0
 8000888:	d130      	bne.n	80008ec <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	689b      	ldr	r3, [r3, #8]
 8000890:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000894:	2b00      	cmp	r3, #0
 8000896:	d129      	bne.n	80008ec <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	689a      	ldr	r2, [r3, #8]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80008a6:	609a      	str	r2, [r3, #8]
 80008a8:	e020      	b.n	80008ec <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	4a16      	ldr	r2, [pc, #88]	; (8000908 <HAL_ADC_Start_IT+0x1b0>)
 80008b0:	4293      	cmp	r3, r2
 80008b2:	d11b      	bne.n	80008ec <HAL_ADC_Start_IT+0x194>
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	689b      	ldr	r3, [r3, #8]
 80008ba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d114      	bne.n	80008ec <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	689a      	ldr	r2, [r3, #8]
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80008d0:	609a      	str	r2, [r3, #8]
 80008d2:	e00b      	b.n	80008ec <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d8:	f043 0210 	orr.w	r2, r3, #16
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e4:	f043 0201 	orr.w	r2, r3, #1
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80008ec:	2300      	movs	r3, #0
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	3714      	adds	r7, #20
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	20000000 	.word	0x20000000
 8000900:	431bde83 	.word	0x431bde83
 8000904:	40012300 	.word	0x40012300
 8000908:	40012000 	.word	0x40012000
 800090c:	40012100 	.word	0x40012100
 8000910:	40012200 	.word	0x40012200

08000914 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800091c:	2300      	movs	r3, #0
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	2300      	movs	r3, #0
 8000922:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	f003 0302 	and.w	r3, r3, #2
 800092e:	2b02      	cmp	r3, #2
 8000930:	bf0c      	ite	eq
 8000932:	2301      	moveq	r3, #1
 8000934:	2300      	movne	r3, #0
 8000936:	b2db      	uxtb	r3, r3
 8000938:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	f003 0320 	and.w	r3, r3, #32
 8000944:	2b20      	cmp	r3, #32
 8000946:	bf0c      	ite	eq
 8000948:	2301      	moveq	r3, #1
 800094a:	2300      	movne	r3, #0
 800094c:	b2db      	uxtb	r3, r3
 800094e:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d049      	beq.n	80009ea <HAL_ADC_IRQHandler+0xd6>
 8000956:	68bb      	ldr	r3, [r7, #8]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d046      	beq.n	80009ea <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000960:	f003 0310 	and.w	r3, r3, #16
 8000964:	2b00      	cmp	r3, #0
 8000966:	d105      	bne.n	8000974 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	689b      	ldr	r3, [r3, #8]
 800097a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800097e:	2b00      	cmp	r3, #0
 8000980:	d12b      	bne.n	80009da <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000986:	2b00      	cmp	r3, #0
 8000988:	d127      	bne.n	80009da <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000990:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000994:	2b00      	cmp	r3, #0
 8000996:	d006      	beq.n	80009a6 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	689b      	ldr	r3, [r3, #8]
 800099e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d119      	bne.n	80009da <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	685a      	ldr	r2, [r3, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	f022 0220 	bic.w	r2, r2, #32
 80009b4:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d105      	bne.n	80009da <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d2:	f043 0201 	orr.w	r2, r3, #1
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80009da:	6878      	ldr	r0, [r7, #4]
 80009dc:	f7ff fd06 	bl	80003ec <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	f06f 0212 	mvn.w	r2, #18
 80009e8:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	f003 0304 	and.w	r3, r3, #4
 80009f4:	2b04      	cmp	r3, #4
 80009f6:	bf0c      	ite	eq
 80009f8:	2301      	moveq	r3, #1
 80009fa:	2300      	movne	r3, #0
 80009fc:	b2db      	uxtb	r3, r3
 80009fe:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	685b      	ldr	r3, [r3, #4]
 8000a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a0a:	2b80      	cmp	r3, #128	; 0x80
 8000a0c:	bf0c      	ite	eq
 8000a0e:	2301      	moveq	r3, #1
 8000a10:	2300      	movne	r3, #0
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d057      	beq.n	8000acc <HAL_ADC_IRQHandler+0x1b8>
 8000a1c:	68bb      	ldr	r3, [r7, #8]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d054      	beq.n	8000acc <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a26:	f003 0310 	and.w	r3, r3, #16
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d105      	bne.n	8000a3a <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a32:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	689b      	ldr	r3, [r3, #8]
 8000a40:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d139      	bne.n	8000abc <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a4e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d006      	beq.n	8000a64 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	689b      	ldr	r3, [r3, #8]
 8000a5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d12b      	bne.n	8000abc <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d124      	bne.n	8000abc <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	689b      	ldr	r3, [r3, #8]
 8000a78:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d11d      	bne.n	8000abc <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d119      	bne.n	8000abc <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	685a      	ldr	r2, [r3, #4]
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000a96:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d105      	bne.n	8000abc <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab4:	f043 0201 	orr.w	r2, r3, #1
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000abc:	6878      	ldr	r0, [r7, #4]
 8000abe:	f000 faa9 	bl	8001014 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f06f 020c 	mvn.w	r2, #12
 8000aca:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f003 0301 	and.w	r3, r3, #1
 8000ad6:	2b01      	cmp	r3, #1
 8000ad8:	bf0c      	ite	eq
 8000ada:	2301      	moveq	r3, #1
 8000adc:	2300      	movne	r3, #0
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000aec:	2b40      	cmp	r3, #64	; 0x40
 8000aee:	bf0c      	ite	eq
 8000af0:	2301      	moveq	r3, #1
 8000af2:	2300      	movne	r3, #0
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d017      	beq.n	8000b2e <HAL_ADC_IRQHandler+0x21a>
 8000afe:	68bb      	ldr	r3, [r7, #8]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d014      	beq.n	8000b2e <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	f003 0301 	and.w	r3, r3, #1
 8000b0e:	2b01      	cmp	r3, #1
 8000b10:	d10d      	bne.n	8000b2e <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b16:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000b1e:	6878      	ldr	r0, [r7, #4]
 8000b20:	f000 f846 	bl	8000bb0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f06f 0201 	mvn.w	r2, #1
 8000b2c:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f003 0320 	and.w	r3, r3, #32
 8000b38:	2b20      	cmp	r3, #32
 8000b3a:	bf0c      	ite	eq
 8000b3c:	2301      	moveq	r3, #1
 8000b3e:	2300      	movne	r3, #0
 8000b40:	b2db      	uxtb	r3, r3
 8000b42:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b4e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000b52:	bf0c      	ite	eq
 8000b54:	2301      	moveq	r3, #1
 8000b56:	2300      	movne	r3, #0
 8000b58:	b2db      	uxtb	r3, r3
 8000b5a:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d015      	beq.n	8000b8e <HAL_ADC_IRQHandler+0x27a>
 8000b62:	68bb      	ldr	r3, [r7, #8]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d012      	beq.n	8000b8e <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6c:	f043 0202 	orr.w	r2, r3, #2
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f06f 0220 	mvn.w	r2, #32
 8000b7c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8000b7e:	6878      	ldr	r0, [r7, #4]
 8000b80:	f000 f820 	bl	8000bc4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f06f 0220 	mvn.w	r2, #32
 8000b8c:	601a      	str	r2, [r3, #0]
  }
}
 8000b8e:	bf00      	nop
 8000b90:	3710      	adds	r7, #16
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8000b96:	b480      	push	{r7}
 8000b98:	b083      	sub	sp, #12
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	370c      	adds	r7, #12
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8000bb8:	bf00      	nop
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8000bcc:	bf00      	nop
 8000bce:	370c      	adds	r7, #12
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr

08000bd8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b085      	sub	sp, #20
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000be2:	2300      	movs	r3, #0
 8000be4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d101      	bne.n	8000bf4 <HAL_ADC_ConfigChannel+0x1c>
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	e105      	b.n	8000e00 <HAL_ADC_ConfigChannel+0x228>
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	2b09      	cmp	r3, #9
 8000c02:	d925      	bls.n	8000c50 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	68d9      	ldr	r1, [r3, #12]
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	b29b      	uxth	r3, r3
 8000c10:	461a      	mov	r2, r3
 8000c12:	4613      	mov	r3, r2
 8000c14:	005b      	lsls	r3, r3, #1
 8000c16:	4413      	add	r3, r2
 8000c18:	3b1e      	subs	r3, #30
 8000c1a:	2207      	movs	r2, #7
 8000c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c20:	43da      	mvns	r2, r3
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	400a      	ands	r2, r1
 8000c28:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	68d9      	ldr	r1, [r3, #12]
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	689a      	ldr	r2, [r3, #8]
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	b29b      	uxth	r3, r3
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	005b      	lsls	r3, r3, #1
 8000c40:	4403      	add	r3, r0
 8000c42:	3b1e      	subs	r3, #30
 8000c44:	409a      	lsls	r2, r3
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	430a      	orrs	r2, r1
 8000c4c:	60da      	str	r2, [r3, #12]
 8000c4e:	e022      	b.n	8000c96 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	6919      	ldr	r1, [r3, #16]
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	b29b      	uxth	r3, r3
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	4613      	mov	r3, r2
 8000c60:	005b      	lsls	r3, r3, #1
 8000c62:	4413      	add	r3, r2
 8000c64:	2207      	movs	r2, #7
 8000c66:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6a:	43da      	mvns	r2, r3
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	400a      	ands	r2, r1
 8000c72:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	6919      	ldr	r1, [r3, #16]
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	689a      	ldr	r2, [r3, #8]
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	b29b      	uxth	r3, r3
 8000c84:	4618      	mov	r0, r3
 8000c86:	4603      	mov	r3, r0
 8000c88:	005b      	lsls	r3, r3, #1
 8000c8a:	4403      	add	r3, r0
 8000c8c:	409a      	lsls	r2, r3
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	430a      	orrs	r2, r1
 8000c94:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	2b06      	cmp	r3, #6
 8000c9c:	d824      	bhi.n	8000ce8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	685a      	ldr	r2, [r3, #4]
 8000ca8:	4613      	mov	r3, r2
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	4413      	add	r3, r2
 8000cae:	3b05      	subs	r3, #5
 8000cb0:	221f      	movs	r2, #31
 8000cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb6:	43da      	mvns	r2, r3
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	400a      	ands	r2, r1
 8000cbe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	b29b      	uxth	r3, r3
 8000ccc:	4618      	mov	r0, r3
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	685a      	ldr	r2, [r3, #4]
 8000cd2:	4613      	mov	r3, r2
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	4413      	add	r3, r2
 8000cd8:	3b05      	subs	r3, #5
 8000cda:	fa00 f203 	lsl.w	r2, r0, r3
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	430a      	orrs	r2, r1
 8000ce4:	635a      	str	r2, [r3, #52]	; 0x34
 8000ce6:	e04c      	b.n	8000d82 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	2b0c      	cmp	r3, #12
 8000cee:	d824      	bhi.n	8000d3a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	685a      	ldr	r2, [r3, #4]
 8000cfa:	4613      	mov	r3, r2
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	4413      	add	r3, r2
 8000d00:	3b23      	subs	r3, #35	; 0x23
 8000d02:	221f      	movs	r2, #31
 8000d04:	fa02 f303 	lsl.w	r3, r2, r3
 8000d08:	43da      	mvns	r2, r3
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	400a      	ands	r2, r1
 8000d10:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	b29b      	uxth	r3, r3
 8000d1e:	4618      	mov	r0, r3
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	685a      	ldr	r2, [r3, #4]
 8000d24:	4613      	mov	r3, r2
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	4413      	add	r3, r2
 8000d2a:	3b23      	subs	r3, #35	; 0x23
 8000d2c:	fa00 f203 	lsl.w	r2, r0, r3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	430a      	orrs	r2, r1
 8000d36:	631a      	str	r2, [r3, #48]	; 0x30
 8000d38:	e023      	b.n	8000d82 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685a      	ldr	r2, [r3, #4]
 8000d44:	4613      	mov	r3, r2
 8000d46:	009b      	lsls	r3, r3, #2
 8000d48:	4413      	add	r3, r2
 8000d4a:	3b41      	subs	r3, #65	; 0x41
 8000d4c:	221f      	movs	r2, #31
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	43da      	mvns	r2, r3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	400a      	ands	r2, r1
 8000d5a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	b29b      	uxth	r3, r3
 8000d68:	4618      	mov	r0, r3
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685a      	ldr	r2, [r3, #4]
 8000d6e:	4613      	mov	r3, r2
 8000d70:	009b      	lsls	r3, r3, #2
 8000d72:	4413      	add	r3, r2
 8000d74:	3b41      	subs	r3, #65	; 0x41
 8000d76:	fa00 f203 	lsl.w	r2, r0, r3
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	430a      	orrs	r2, r1
 8000d80:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000d82:	4b22      	ldr	r3, [pc, #136]	; (8000e0c <HAL_ADC_ConfigChannel+0x234>)
 8000d84:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a21      	ldr	r2, [pc, #132]	; (8000e10 <HAL_ADC_ConfigChannel+0x238>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d109      	bne.n	8000da4 <HAL_ADC_ConfigChannel+0x1cc>
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	2b12      	cmp	r3, #18
 8000d96:	d105      	bne.n	8000da4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a19      	ldr	r2, [pc, #100]	; (8000e10 <HAL_ADC_ConfigChannel+0x238>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d123      	bne.n	8000df6 <HAL_ADC_ConfigChannel+0x21e>
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	2b10      	cmp	r3, #16
 8000db4:	d003      	beq.n	8000dbe <HAL_ADC_ConfigChannel+0x1e6>
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	2b11      	cmp	r3, #17
 8000dbc:	d11b      	bne.n	8000df6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	2b10      	cmp	r3, #16
 8000dd0:	d111      	bne.n	8000df6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000dd2:	4b10      	ldr	r3, [pc, #64]	; (8000e14 <HAL_ADC_ConfigChannel+0x23c>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a10      	ldr	r2, [pc, #64]	; (8000e18 <HAL_ADC_ConfigChannel+0x240>)
 8000dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8000ddc:	0c9a      	lsrs	r2, r3, #18
 8000dde:	4613      	mov	r3, r2
 8000de0:	009b      	lsls	r3, r3, #2
 8000de2:	4413      	add	r3, r2
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000de8:	e002      	b.n	8000df0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8000dea:	68bb      	ldr	r3, [r7, #8]
 8000dec:	3b01      	subs	r3, #1
 8000dee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d1f9      	bne.n	8000dea <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2200      	movs	r2, #0
 8000dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000dfe:	2300      	movs	r3, #0
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3714      	adds	r7, #20
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	40012300 	.word	0x40012300
 8000e10:	40012000 	.word	0x40012000
 8000e14:	20000000 	.word	0x20000000
 8000e18:	431bde83 	.word	0x431bde83

08000e1c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b085      	sub	sp, #20
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000e24:	4b79      	ldr	r3, [pc, #484]	; (800100c <ADC_Init+0x1f0>)
 8000e26:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	685a      	ldr	r2, [r3, #4]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	431a      	orrs	r2, r3
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	685a      	ldr	r2, [r3, #4]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000e50:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	6859      	ldr	r1, [r3, #4]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	691b      	ldr	r3, [r3, #16]
 8000e5c:	021a      	lsls	r2, r3, #8
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	430a      	orrs	r2, r1
 8000e64:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	685a      	ldr	r2, [r3, #4]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000e74:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	6859      	ldr	r1, [r3, #4]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	689a      	ldr	r2, [r3, #8]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	430a      	orrs	r2, r1
 8000e86:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	689a      	ldr	r2, [r3, #8]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000e96:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	6899      	ldr	r1, [r3, #8]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	68da      	ldr	r2, [r3, #12]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	430a      	orrs	r2, r1
 8000ea8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eae:	4a58      	ldr	r2, [pc, #352]	; (8001010 <ADC_Init+0x1f4>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d022      	beq.n	8000efa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	689a      	ldr	r2, [r3, #8]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000ec2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	6899      	ldr	r1, [r3, #8]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	430a      	orrs	r2, r1
 8000ed4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	689a      	ldr	r2, [r3, #8]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000ee4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	6899      	ldr	r1, [r3, #8]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	430a      	orrs	r2, r1
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	e00f      	b.n	8000f1a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	689a      	ldr	r2, [r3, #8]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000f08:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	689a      	ldr	r2, [r3, #8]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000f18:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	689a      	ldr	r2, [r3, #8]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f022 0202 	bic.w	r2, r2, #2
 8000f28:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	6899      	ldr	r1, [r3, #8]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	7e1b      	ldrb	r3, [r3, #24]
 8000f34:	005a      	lsls	r2, r3, #1
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	430a      	orrs	r2, r1
 8000f3c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d01b      	beq.n	8000f80 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	685a      	ldr	r2, [r3, #4]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000f56:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	685a      	ldr	r2, [r3, #4]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000f66:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	6859      	ldr	r1, [r3, #4]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f72:	3b01      	subs	r3, #1
 8000f74:	035a      	lsls	r2, r3, #13
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	430a      	orrs	r2, r1
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	e007      	b.n	8000f90 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	685a      	ldr	r2, [r3, #4]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f8e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000f9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	69db      	ldr	r3, [r3, #28]
 8000faa:	3b01      	subs	r3, #1
 8000fac:	051a      	lsls	r2, r3, #20
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	430a      	orrs	r2, r1
 8000fb4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	689a      	ldr	r2, [r3, #8]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000fc4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	6899      	ldr	r1, [r3, #8]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000fd2:	025a      	lsls	r2, r3, #9
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	430a      	orrs	r2, r1
 8000fda:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	689a      	ldr	r2, [r3, #8]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000fea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	6899      	ldr	r1, [r3, #8]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	695b      	ldr	r3, [r3, #20]
 8000ff6:	029a      	lsls	r2, r3, #10
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	430a      	orrs	r2, r1
 8000ffe:	609a      	str	r2, [r3, #8]
}
 8001000:	bf00      	nop
 8001002:	3714      	adds	r7, #20
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	40012300 	.word	0x40012300
 8001010:	0f000001 	.word	0x0f000001

08001014 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800101c:	bf00      	nop
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f003 0307 	and.w	r3, r3, #7
 8001036:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001038:	4b0c      	ldr	r3, [pc, #48]	; (800106c <__NVIC_SetPriorityGrouping+0x44>)
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800103e:	68ba      	ldr	r2, [r7, #8]
 8001040:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001044:	4013      	ands	r3, r2
 8001046:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001050:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001054:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001058:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800105a:	4a04      	ldr	r2, [pc, #16]	; (800106c <__NVIC_SetPriorityGrouping+0x44>)
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	60d3      	str	r3, [r2, #12]
}
 8001060:	bf00      	nop
 8001062:	3714      	adds	r7, #20
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001074:	4b04      	ldr	r3, [pc, #16]	; (8001088 <__NVIC_GetPriorityGrouping+0x18>)
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	0a1b      	lsrs	r3, r3, #8
 800107a:	f003 0307 	and.w	r3, r3, #7
}
 800107e:	4618      	mov	r0, r3
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	e000ed00 	.word	0xe000ed00

0800108c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109a:	2b00      	cmp	r3, #0
 800109c:	db0b      	blt.n	80010b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	f003 021f 	and.w	r2, r3, #31
 80010a4:	4907      	ldr	r1, [pc, #28]	; (80010c4 <__NVIC_EnableIRQ+0x38>)
 80010a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010aa:	095b      	lsrs	r3, r3, #5
 80010ac:	2001      	movs	r0, #1
 80010ae:	fa00 f202 	lsl.w	r2, r0, r2
 80010b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010b6:	bf00      	nop
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	e000e100 	.word	0xe000e100

080010c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	6039      	str	r1, [r7, #0]
 80010d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	db0a      	blt.n	80010f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	b2da      	uxtb	r2, r3
 80010e0:	490c      	ldr	r1, [pc, #48]	; (8001114 <__NVIC_SetPriority+0x4c>)
 80010e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e6:	0112      	lsls	r2, r2, #4
 80010e8:	b2d2      	uxtb	r2, r2
 80010ea:	440b      	add	r3, r1
 80010ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010f0:	e00a      	b.n	8001108 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	b2da      	uxtb	r2, r3
 80010f6:	4908      	ldr	r1, [pc, #32]	; (8001118 <__NVIC_SetPriority+0x50>)
 80010f8:	79fb      	ldrb	r3, [r7, #7]
 80010fa:	f003 030f 	and.w	r3, r3, #15
 80010fe:	3b04      	subs	r3, #4
 8001100:	0112      	lsls	r2, r2, #4
 8001102:	b2d2      	uxtb	r2, r2
 8001104:	440b      	add	r3, r1
 8001106:	761a      	strb	r2, [r3, #24]
}
 8001108:	bf00      	nop
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	e000e100 	.word	0xe000e100
 8001118:	e000ed00 	.word	0xe000ed00

0800111c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800111c:	b480      	push	{r7}
 800111e:	b089      	sub	sp, #36	; 0x24
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	f003 0307 	and.w	r3, r3, #7
 800112e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	f1c3 0307 	rsb	r3, r3, #7
 8001136:	2b04      	cmp	r3, #4
 8001138:	bf28      	it	cs
 800113a:	2304      	movcs	r3, #4
 800113c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	3304      	adds	r3, #4
 8001142:	2b06      	cmp	r3, #6
 8001144:	d902      	bls.n	800114c <NVIC_EncodePriority+0x30>
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	3b03      	subs	r3, #3
 800114a:	e000      	b.n	800114e <NVIC_EncodePriority+0x32>
 800114c:	2300      	movs	r3, #0
 800114e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001150:	f04f 32ff 	mov.w	r2, #4294967295
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	43da      	mvns	r2, r3
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	401a      	ands	r2, r3
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001164:	f04f 31ff 	mov.w	r1, #4294967295
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	fa01 f303 	lsl.w	r3, r1, r3
 800116e:	43d9      	mvns	r1, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001174:	4313      	orrs	r3, r2
         );
}
 8001176:	4618      	mov	r0, r3
 8001178:	3724      	adds	r7, #36	; 0x24
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
	...

08001184 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	3b01      	subs	r3, #1
 8001190:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001194:	d301      	bcc.n	800119a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001196:	2301      	movs	r3, #1
 8001198:	e00f      	b.n	80011ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800119a:	4a0a      	ldr	r2, [pc, #40]	; (80011c4 <SysTick_Config+0x40>)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	3b01      	subs	r3, #1
 80011a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011a2:	210f      	movs	r1, #15
 80011a4:	f04f 30ff 	mov.w	r0, #4294967295
 80011a8:	f7ff ff8e 	bl	80010c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011ac:	4b05      	ldr	r3, [pc, #20]	; (80011c4 <SysTick_Config+0x40>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011b2:	4b04      	ldr	r3, [pc, #16]	; (80011c4 <SysTick_Config+0x40>)
 80011b4:	2207      	movs	r2, #7
 80011b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011b8:	2300      	movs	r3, #0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	e000e010 	.word	0xe000e010

080011c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f7ff ff29 	bl	8001028 <__NVIC_SetPriorityGrouping>
}
 80011d6:	bf00      	nop
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011de:	b580      	push	{r7, lr}
 80011e0:	b086      	sub	sp, #24
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	4603      	mov	r3, r0
 80011e6:	60b9      	str	r1, [r7, #8]
 80011e8:	607a      	str	r2, [r7, #4]
 80011ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011ec:	2300      	movs	r3, #0
 80011ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011f0:	f7ff ff3e 	bl	8001070 <__NVIC_GetPriorityGrouping>
 80011f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	68b9      	ldr	r1, [r7, #8]
 80011fa:	6978      	ldr	r0, [r7, #20]
 80011fc:	f7ff ff8e 	bl	800111c <NVIC_EncodePriority>
 8001200:	4602      	mov	r2, r0
 8001202:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001206:	4611      	mov	r1, r2
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff ff5d 	bl	80010c8 <__NVIC_SetPriority>
}
 800120e:	bf00      	nop
 8001210:	3718      	adds	r7, #24
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b082      	sub	sp, #8
 800121a:	af00      	add	r7, sp, #0
 800121c:	4603      	mov	r3, r0
 800121e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001220:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff ff31 	bl	800108c <__NVIC_EnableIRQ>
}
 800122a:	bf00      	nop
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b082      	sub	sp, #8
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f7ff ffa2 	bl	8001184 <SysTick_Config>
 8001240:	4603      	mov	r3, r0
}
 8001242:	4618      	mov	r0, r3
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
	...

0800124c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2b04      	cmp	r3, #4
 8001258:	d106      	bne.n	8001268 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800125a:	4b09      	ldr	r3, [pc, #36]	; (8001280 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a08      	ldr	r2, [pc, #32]	; (8001280 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001260:	f043 0304 	orr.w	r3, r3, #4
 8001264:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8001266:	e005      	b.n	8001274 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001268:	4b05      	ldr	r3, [pc, #20]	; (8001280 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a04      	ldr	r2, [pc, #16]	; (8001280 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800126e:	f023 0304 	bic.w	r3, r3, #4
 8001272:	6013      	str	r3, [r2, #0]
}
 8001274:	bf00      	nop
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	e000e010 	.word	0xe000e010

08001284 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001284:	b480      	push	{r7}
 8001286:	b089      	sub	sp, #36	; 0x24
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800128e:	2300      	movs	r3, #0
 8001290:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001292:	2300      	movs	r3, #0
 8001294:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001296:	2300      	movs	r3, #0
 8001298:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800129a:	2300      	movs	r3, #0
 800129c:	61fb      	str	r3, [r7, #28]
 800129e:	e16b      	b.n	8001578 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012a0:	2201      	movs	r2, #1
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	697a      	ldr	r2, [r7, #20]
 80012b0:	4013      	ands	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	f040 815a 	bne.w	8001572 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f003 0303 	and.w	r3, r3, #3
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d005      	beq.n	80012d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d130      	bne.n	8001338 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	2203      	movs	r2, #3
 80012e2:	fa02 f303 	lsl.w	r3, r2, r3
 80012e6:	43db      	mvns	r3, r3
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	4013      	ands	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	68da      	ldr	r2, [r3, #12]
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800130c:	2201      	movs	r2, #1
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	43db      	mvns	r3, r3
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	4013      	ands	r3, r2
 800131a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	091b      	lsrs	r3, r3, #4
 8001322:	f003 0201 	and.w	r2, r3, #1
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	fa02 f303 	lsl.w	r3, r2, r3
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	4313      	orrs	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f003 0303 	and.w	r3, r3, #3
 8001340:	2b03      	cmp	r3, #3
 8001342:	d017      	beq.n	8001374 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	2203      	movs	r2, #3
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	43db      	mvns	r3, r3
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	4013      	ands	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	689a      	ldr	r2, [r3, #8]
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	005b      	lsls	r3, r3, #1
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	4313      	orrs	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f003 0303 	and.w	r3, r3, #3
 800137c:	2b02      	cmp	r3, #2
 800137e:	d123      	bne.n	80013c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	08da      	lsrs	r2, r3, #3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	3208      	adds	r2, #8
 8001388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800138c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	f003 0307 	and.w	r3, r3, #7
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	220f      	movs	r2, #15
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	43db      	mvns	r3, r3
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	4013      	ands	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	691a      	ldr	r2, [r3, #16]
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	f003 0307 	and.w	r3, r3, #7
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	08da      	lsrs	r2, r3, #3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	3208      	adds	r2, #8
 80013c2:	69b9      	ldr	r1, [r7, #24]
 80013c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	2203      	movs	r2, #3
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	43db      	mvns	r3, r3
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	4013      	ands	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f003 0203 	and.w	r2, r3, #3
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001404:	2b00      	cmp	r3, #0
 8001406:	f000 80b4 	beq.w	8001572 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	60fb      	str	r3, [r7, #12]
 800140e:	4b60      	ldr	r3, [pc, #384]	; (8001590 <HAL_GPIO_Init+0x30c>)
 8001410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001412:	4a5f      	ldr	r2, [pc, #380]	; (8001590 <HAL_GPIO_Init+0x30c>)
 8001414:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001418:	6453      	str	r3, [r2, #68]	; 0x44
 800141a:	4b5d      	ldr	r3, [pc, #372]	; (8001590 <HAL_GPIO_Init+0x30c>)
 800141c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001426:	4a5b      	ldr	r2, [pc, #364]	; (8001594 <HAL_GPIO_Init+0x310>)
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	089b      	lsrs	r3, r3, #2
 800142c:	3302      	adds	r3, #2
 800142e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001432:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	f003 0303 	and.w	r3, r3, #3
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	220f      	movs	r2, #15
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	43db      	mvns	r3, r3
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	4013      	ands	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a52      	ldr	r2, [pc, #328]	; (8001598 <HAL_GPIO_Init+0x314>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d02b      	beq.n	80014aa <HAL_GPIO_Init+0x226>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a51      	ldr	r2, [pc, #324]	; (800159c <HAL_GPIO_Init+0x318>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d025      	beq.n	80014a6 <HAL_GPIO_Init+0x222>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a50      	ldr	r2, [pc, #320]	; (80015a0 <HAL_GPIO_Init+0x31c>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d01f      	beq.n	80014a2 <HAL_GPIO_Init+0x21e>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a4f      	ldr	r2, [pc, #316]	; (80015a4 <HAL_GPIO_Init+0x320>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d019      	beq.n	800149e <HAL_GPIO_Init+0x21a>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a4e      	ldr	r2, [pc, #312]	; (80015a8 <HAL_GPIO_Init+0x324>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d013      	beq.n	800149a <HAL_GPIO_Init+0x216>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a4d      	ldr	r2, [pc, #308]	; (80015ac <HAL_GPIO_Init+0x328>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d00d      	beq.n	8001496 <HAL_GPIO_Init+0x212>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a4c      	ldr	r2, [pc, #304]	; (80015b0 <HAL_GPIO_Init+0x32c>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d007      	beq.n	8001492 <HAL_GPIO_Init+0x20e>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a4b      	ldr	r2, [pc, #300]	; (80015b4 <HAL_GPIO_Init+0x330>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d101      	bne.n	800148e <HAL_GPIO_Init+0x20a>
 800148a:	2307      	movs	r3, #7
 800148c:	e00e      	b.n	80014ac <HAL_GPIO_Init+0x228>
 800148e:	2308      	movs	r3, #8
 8001490:	e00c      	b.n	80014ac <HAL_GPIO_Init+0x228>
 8001492:	2306      	movs	r3, #6
 8001494:	e00a      	b.n	80014ac <HAL_GPIO_Init+0x228>
 8001496:	2305      	movs	r3, #5
 8001498:	e008      	b.n	80014ac <HAL_GPIO_Init+0x228>
 800149a:	2304      	movs	r3, #4
 800149c:	e006      	b.n	80014ac <HAL_GPIO_Init+0x228>
 800149e:	2303      	movs	r3, #3
 80014a0:	e004      	b.n	80014ac <HAL_GPIO_Init+0x228>
 80014a2:	2302      	movs	r3, #2
 80014a4:	e002      	b.n	80014ac <HAL_GPIO_Init+0x228>
 80014a6:	2301      	movs	r3, #1
 80014a8:	e000      	b.n	80014ac <HAL_GPIO_Init+0x228>
 80014aa:	2300      	movs	r3, #0
 80014ac:	69fa      	ldr	r2, [r7, #28]
 80014ae:	f002 0203 	and.w	r2, r2, #3
 80014b2:	0092      	lsls	r2, r2, #2
 80014b4:	4093      	lsls	r3, r2
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014bc:	4935      	ldr	r1, [pc, #212]	; (8001594 <HAL_GPIO_Init+0x310>)
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	089b      	lsrs	r3, r3, #2
 80014c2:	3302      	adds	r3, #2
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014ca:	4b3b      	ldr	r3, [pc, #236]	; (80015b8 <HAL_GPIO_Init+0x334>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	43db      	mvns	r3, r3
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	4013      	ands	r3, r2
 80014d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d003      	beq.n	80014ee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014ee:	4a32      	ldr	r2, [pc, #200]	; (80015b8 <HAL_GPIO_Init+0x334>)
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80014f4:	4b30      	ldr	r3, [pc, #192]	; (80015b8 <HAL_GPIO_Init+0x334>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	43db      	mvns	r3, r3
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	4013      	ands	r3, r2
 8001502:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d003      	beq.n	8001518 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	4313      	orrs	r3, r2
 8001516:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001518:	4a27      	ldr	r2, [pc, #156]	; (80015b8 <HAL_GPIO_Init+0x334>)
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800151e:	4b26      	ldr	r3, [pc, #152]	; (80015b8 <HAL_GPIO_Init+0x334>)
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	43db      	mvns	r3, r3
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	4013      	ands	r3, r2
 800152c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d003      	beq.n	8001542 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800153a:	69ba      	ldr	r2, [r7, #24]
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	4313      	orrs	r3, r2
 8001540:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001542:	4a1d      	ldr	r2, [pc, #116]	; (80015b8 <HAL_GPIO_Init+0x334>)
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001548:	4b1b      	ldr	r3, [pc, #108]	; (80015b8 <HAL_GPIO_Init+0x334>)
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	43db      	mvns	r3, r3
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	4013      	ands	r3, r2
 8001556:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001560:	2b00      	cmp	r3, #0
 8001562:	d003      	beq.n	800156c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	4313      	orrs	r3, r2
 800156a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800156c:	4a12      	ldr	r2, [pc, #72]	; (80015b8 <HAL_GPIO_Init+0x334>)
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	3301      	adds	r3, #1
 8001576:	61fb      	str	r3, [r7, #28]
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	2b0f      	cmp	r3, #15
 800157c:	f67f ae90 	bls.w	80012a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001580:	bf00      	nop
 8001582:	bf00      	nop
 8001584:	3724      	adds	r7, #36	; 0x24
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	40023800 	.word	0x40023800
 8001594:	40013800 	.word	0x40013800
 8001598:	40020000 	.word	0x40020000
 800159c:	40020400 	.word	0x40020400
 80015a0:	40020800 	.word	0x40020800
 80015a4:	40020c00 	.word	0x40020c00
 80015a8:	40021000 	.word	0x40021000
 80015ac:	40021400 	.word	0x40021400
 80015b0:	40021800 	.word	0x40021800
 80015b4:	40021c00 	.word	0x40021c00
 80015b8:	40013c00 	.word	0x40013c00

080015bc <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015bc:	b480      	push	{r7}
 80015be:	b085      	sub	sp, #20
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	460b      	mov	r3, r1
 80015c6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	695b      	ldr	r3, [r3, #20]
 80015cc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015ce:	887a      	ldrh	r2, [r7, #2]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	4013      	ands	r3, r2
 80015d4:	041a      	lsls	r2, r3, #16
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	43d9      	mvns	r1, r3
 80015da:	887b      	ldrh	r3, [r7, #2]
 80015dc:	400b      	ands	r3, r1
 80015de:	431a      	orrs	r2, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	619a      	str	r2, [r3, #24]
}
 80015e4:	bf00      	nop
 80015e6:	3714      	adds	r7, #20
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015f4:	4b03      	ldr	r3, [pc, #12]	; (8001604 <HAL_RCC_GetHCLKFreq+0x14>)
 80015f6:	681b      	ldr	r3, [r3, #0]
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	20000000 	.word	0x20000000

08001608 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d101      	bne.n	800161a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e041      	b.n	800169e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001620:	b2db      	uxtb	r3, r3
 8001622:	2b00      	cmp	r3, #0
 8001624:	d106      	bne.n	8001634 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2200      	movs	r2, #0
 800162a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f7fe ff62 	bl	80004f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2202      	movs	r2, #2
 8001638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	3304      	adds	r3, #4
 8001644:	4619      	mov	r1, r3
 8001646:	4610      	mov	r0, r2
 8001648:	f000 f95e 	bl	8001908 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2201      	movs	r2, #1
 8001650:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2201      	movs	r2, #1
 8001658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2201      	movs	r2, #1
 8001660:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2201      	movs	r2, #1
 8001668:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2201      	movs	r2, #1
 8001670:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2201      	movs	r2, #1
 8001678:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2201      	movs	r2, #1
 8001680:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2201      	movs	r2, #1
 8001688:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2201      	movs	r2, #1
 8001690:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2201      	movs	r2, #1
 8001698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
	...

080016a8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b085      	sub	sp, #20
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d001      	beq.n	80016c0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e046      	b.n	800174e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2202      	movs	r2, #2
 80016c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a23      	ldr	r2, [pc, #140]	; (800175c <HAL_TIM_Base_Start+0xb4>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d022      	beq.n	8001718 <HAL_TIM_Base_Start+0x70>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016da:	d01d      	beq.n	8001718 <HAL_TIM_Base_Start+0x70>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a1f      	ldr	r2, [pc, #124]	; (8001760 <HAL_TIM_Base_Start+0xb8>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d018      	beq.n	8001718 <HAL_TIM_Base_Start+0x70>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a1e      	ldr	r2, [pc, #120]	; (8001764 <HAL_TIM_Base_Start+0xbc>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d013      	beq.n	8001718 <HAL_TIM_Base_Start+0x70>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a1c      	ldr	r2, [pc, #112]	; (8001768 <HAL_TIM_Base_Start+0xc0>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d00e      	beq.n	8001718 <HAL_TIM_Base_Start+0x70>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a1b      	ldr	r2, [pc, #108]	; (800176c <HAL_TIM_Base_Start+0xc4>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d009      	beq.n	8001718 <HAL_TIM_Base_Start+0x70>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a19      	ldr	r2, [pc, #100]	; (8001770 <HAL_TIM_Base_Start+0xc8>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d004      	beq.n	8001718 <HAL_TIM_Base_Start+0x70>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a18      	ldr	r2, [pc, #96]	; (8001774 <HAL_TIM_Base_Start+0xcc>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d111      	bne.n	800173c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	f003 0307 	and.w	r3, r3, #7
 8001722:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	2b06      	cmp	r3, #6
 8001728:	d010      	beq.n	800174c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f042 0201 	orr.w	r2, r2, #1
 8001738:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800173a:	e007      	b.n	800174c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f042 0201 	orr.w	r2, r2, #1
 800174a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800174c:	2300      	movs	r3, #0
}
 800174e:	4618      	mov	r0, r3
 8001750:	3714      	adds	r7, #20
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	40010000 	.word	0x40010000
 8001760:	40000400 	.word	0x40000400
 8001764:	40000800 	.word	0x40000800
 8001768:	40000c00 	.word	0x40000c00
 800176c:	40010400 	.word	0x40010400
 8001770:	40014000 	.word	0x40014000
 8001774:	40001800 	.word	0x40001800

08001778 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001782:	2300      	movs	r3, #0
 8001784:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800178c:	2b01      	cmp	r3, #1
 800178e:	d101      	bne.n	8001794 <HAL_TIM_ConfigClockSource+0x1c>
 8001790:	2302      	movs	r3, #2
 8001792:	e0b4      	b.n	80018fe <HAL_TIM_ConfigClockSource+0x186>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2201      	movs	r2, #1
 8001798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2202      	movs	r2, #2
 80017a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80017b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80017ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	68ba      	ldr	r2, [r7, #8]
 80017c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017cc:	d03e      	beq.n	800184c <HAL_TIM_ConfigClockSource+0xd4>
 80017ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017d2:	f200 8087 	bhi.w	80018e4 <HAL_TIM_ConfigClockSource+0x16c>
 80017d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017da:	f000 8086 	beq.w	80018ea <HAL_TIM_ConfigClockSource+0x172>
 80017de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017e2:	d87f      	bhi.n	80018e4 <HAL_TIM_ConfigClockSource+0x16c>
 80017e4:	2b70      	cmp	r3, #112	; 0x70
 80017e6:	d01a      	beq.n	800181e <HAL_TIM_ConfigClockSource+0xa6>
 80017e8:	2b70      	cmp	r3, #112	; 0x70
 80017ea:	d87b      	bhi.n	80018e4 <HAL_TIM_ConfigClockSource+0x16c>
 80017ec:	2b60      	cmp	r3, #96	; 0x60
 80017ee:	d050      	beq.n	8001892 <HAL_TIM_ConfigClockSource+0x11a>
 80017f0:	2b60      	cmp	r3, #96	; 0x60
 80017f2:	d877      	bhi.n	80018e4 <HAL_TIM_ConfigClockSource+0x16c>
 80017f4:	2b50      	cmp	r3, #80	; 0x50
 80017f6:	d03c      	beq.n	8001872 <HAL_TIM_ConfigClockSource+0xfa>
 80017f8:	2b50      	cmp	r3, #80	; 0x50
 80017fa:	d873      	bhi.n	80018e4 <HAL_TIM_ConfigClockSource+0x16c>
 80017fc:	2b40      	cmp	r3, #64	; 0x40
 80017fe:	d058      	beq.n	80018b2 <HAL_TIM_ConfigClockSource+0x13a>
 8001800:	2b40      	cmp	r3, #64	; 0x40
 8001802:	d86f      	bhi.n	80018e4 <HAL_TIM_ConfigClockSource+0x16c>
 8001804:	2b30      	cmp	r3, #48	; 0x30
 8001806:	d064      	beq.n	80018d2 <HAL_TIM_ConfigClockSource+0x15a>
 8001808:	2b30      	cmp	r3, #48	; 0x30
 800180a:	d86b      	bhi.n	80018e4 <HAL_TIM_ConfigClockSource+0x16c>
 800180c:	2b20      	cmp	r3, #32
 800180e:	d060      	beq.n	80018d2 <HAL_TIM_ConfigClockSource+0x15a>
 8001810:	2b20      	cmp	r3, #32
 8001812:	d867      	bhi.n	80018e4 <HAL_TIM_ConfigClockSource+0x16c>
 8001814:	2b00      	cmp	r3, #0
 8001816:	d05c      	beq.n	80018d2 <HAL_TIM_ConfigClockSource+0x15a>
 8001818:	2b10      	cmp	r3, #16
 800181a:	d05a      	beq.n	80018d2 <HAL_TIM_ConfigClockSource+0x15a>
 800181c:	e062      	b.n	80018e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6818      	ldr	r0, [r3, #0]
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	6899      	ldr	r1, [r3, #8]
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685a      	ldr	r2, [r3, #4]
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	68db      	ldr	r3, [r3, #12]
 800182e:	f000 f985 	bl	8001b3c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001840:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	68ba      	ldr	r2, [r7, #8]
 8001848:	609a      	str	r2, [r3, #8]
      break;
 800184a:	e04f      	b.n	80018ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6818      	ldr	r0, [r3, #0]
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	6899      	ldr	r1, [r3, #8]
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685a      	ldr	r2, [r3, #4]
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	f000 f96e 	bl	8001b3c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	689a      	ldr	r2, [r3, #8]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800186e:	609a      	str	r2, [r3, #8]
      break;
 8001870:	e03c      	b.n	80018ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6818      	ldr	r0, [r3, #0]
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	6859      	ldr	r1, [r3, #4]
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	68db      	ldr	r3, [r3, #12]
 800187e:	461a      	mov	r2, r3
 8001880:	f000 f8e2 	bl	8001a48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2150      	movs	r1, #80	; 0x50
 800188a:	4618      	mov	r0, r3
 800188c:	f000 f93b 	bl	8001b06 <TIM_ITRx_SetConfig>
      break;
 8001890:	e02c      	b.n	80018ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6818      	ldr	r0, [r3, #0]
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	6859      	ldr	r1, [r3, #4]
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	68db      	ldr	r3, [r3, #12]
 800189e:	461a      	mov	r2, r3
 80018a0:	f000 f901 	bl	8001aa6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2160      	movs	r1, #96	; 0x60
 80018aa:	4618      	mov	r0, r3
 80018ac:	f000 f92b 	bl	8001b06 <TIM_ITRx_SetConfig>
      break;
 80018b0:	e01c      	b.n	80018ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6818      	ldr	r0, [r3, #0]
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	6859      	ldr	r1, [r3, #4]
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	461a      	mov	r2, r3
 80018c0:	f000 f8c2 	bl	8001a48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2140      	movs	r1, #64	; 0x40
 80018ca:	4618      	mov	r0, r3
 80018cc:	f000 f91b 	bl	8001b06 <TIM_ITRx_SetConfig>
      break;
 80018d0:	e00c      	b.n	80018ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4619      	mov	r1, r3
 80018dc:	4610      	mov	r0, r2
 80018de:	f000 f912 	bl	8001b06 <TIM_ITRx_SetConfig>
      break;
 80018e2:	e003      	b.n	80018ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	73fb      	strb	r3, [r7, #15]
      break;
 80018e8:	e000      	b.n	80018ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 80018ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2201      	movs	r2, #1
 80018f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2200      	movs	r2, #0
 80018f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80018fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
	...

08001908 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001908:	b480      	push	{r7}
 800190a:	b085      	sub	sp, #20
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	4a40      	ldr	r2, [pc, #256]	; (8001a1c <TIM_Base_SetConfig+0x114>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d013      	beq.n	8001948 <TIM_Base_SetConfig+0x40>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001926:	d00f      	beq.n	8001948 <TIM_Base_SetConfig+0x40>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	4a3d      	ldr	r2, [pc, #244]	; (8001a20 <TIM_Base_SetConfig+0x118>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d00b      	beq.n	8001948 <TIM_Base_SetConfig+0x40>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	4a3c      	ldr	r2, [pc, #240]	; (8001a24 <TIM_Base_SetConfig+0x11c>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d007      	beq.n	8001948 <TIM_Base_SetConfig+0x40>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	4a3b      	ldr	r2, [pc, #236]	; (8001a28 <TIM_Base_SetConfig+0x120>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d003      	beq.n	8001948 <TIM_Base_SetConfig+0x40>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	4a3a      	ldr	r2, [pc, #232]	; (8001a2c <TIM_Base_SetConfig+0x124>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d108      	bne.n	800195a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800194e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	68fa      	ldr	r2, [r7, #12]
 8001956:	4313      	orrs	r3, r2
 8001958:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a2f      	ldr	r2, [pc, #188]	; (8001a1c <TIM_Base_SetConfig+0x114>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d02b      	beq.n	80019ba <TIM_Base_SetConfig+0xb2>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001968:	d027      	beq.n	80019ba <TIM_Base_SetConfig+0xb2>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a2c      	ldr	r2, [pc, #176]	; (8001a20 <TIM_Base_SetConfig+0x118>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d023      	beq.n	80019ba <TIM_Base_SetConfig+0xb2>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4a2b      	ldr	r2, [pc, #172]	; (8001a24 <TIM_Base_SetConfig+0x11c>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d01f      	beq.n	80019ba <TIM_Base_SetConfig+0xb2>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a2a      	ldr	r2, [pc, #168]	; (8001a28 <TIM_Base_SetConfig+0x120>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d01b      	beq.n	80019ba <TIM_Base_SetConfig+0xb2>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4a29      	ldr	r2, [pc, #164]	; (8001a2c <TIM_Base_SetConfig+0x124>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d017      	beq.n	80019ba <TIM_Base_SetConfig+0xb2>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4a28      	ldr	r2, [pc, #160]	; (8001a30 <TIM_Base_SetConfig+0x128>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d013      	beq.n	80019ba <TIM_Base_SetConfig+0xb2>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a27      	ldr	r2, [pc, #156]	; (8001a34 <TIM_Base_SetConfig+0x12c>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d00f      	beq.n	80019ba <TIM_Base_SetConfig+0xb2>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a26      	ldr	r2, [pc, #152]	; (8001a38 <TIM_Base_SetConfig+0x130>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d00b      	beq.n	80019ba <TIM_Base_SetConfig+0xb2>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a25      	ldr	r2, [pc, #148]	; (8001a3c <TIM_Base_SetConfig+0x134>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d007      	beq.n	80019ba <TIM_Base_SetConfig+0xb2>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a24      	ldr	r2, [pc, #144]	; (8001a40 <TIM_Base_SetConfig+0x138>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d003      	beq.n	80019ba <TIM_Base_SetConfig+0xb2>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4a23      	ldr	r2, [pc, #140]	; (8001a44 <TIM_Base_SetConfig+0x13c>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d108      	bne.n	80019cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	68fa      	ldr	r2, [r7, #12]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	695b      	ldr	r3, [r3, #20]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	68fa      	ldr	r2, [r7, #12]
 80019de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	689a      	ldr	r2, [r3, #8]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	4a0a      	ldr	r2, [pc, #40]	; (8001a1c <TIM_Base_SetConfig+0x114>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d003      	beq.n	8001a00 <TIM_Base_SetConfig+0xf8>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	4a0c      	ldr	r2, [pc, #48]	; (8001a2c <TIM_Base_SetConfig+0x124>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d103      	bne.n	8001a08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	691a      	ldr	r2, [r3, #16]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	615a      	str	r2, [r3, #20]
}
 8001a0e:	bf00      	nop
 8001a10:	3714      	adds	r7, #20
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	40010000 	.word	0x40010000
 8001a20:	40000400 	.word	0x40000400
 8001a24:	40000800 	.word	0x40000800
 8001a28:	40000c00 	.word	0x40000c00
 8001a2c:	40010400 	.word	0x40010400
 8001a30:	40014000 	.word	0x40014000
 8001a34:	40014400 	.word	0x40014400
 8001a38:	40014800 	.word	0x40014800
 8001a3c:	40001800 	.word	0x40001800
 8001a40:	40001c00 	.word	0x40001c00
 8001a44:	40002000 	.word	0x40002000

08001a48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b087      	sub	sp, #28
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	60b9      	str	r1, [r7, #8]
 8001a52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	6a1b      	ldr	r3, [r3, #32]
 8001a58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	6a1b      	ldr	r3, [r3, #32]
 8001a5e:	f023 0201 	bic.w	r2, r3, #1
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	699b      	ldr	r3, [r3, #24]
 8001a6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	011b      	lsls	r3, r3, #4
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	f023 030a 	bic.w	r3, r3, #10
 8001a84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001a86:	697a      	ldr	r2, [r7, #20]
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	693a      	ldr	r2, [r7, #16]
 8001a92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	697a      	ldr	r2, [r7, #20]
 8001a98:	621a      	str	r2, [r3, #32]
}
 8001a9a:	bf00      	nop
 8001a9c:	371c      	adds	r7, #28
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr

08001aa6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	b087      	sub	sp, #28
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	60f8      	str	r0, [r7, #12]
 8001aae:	60b9      	str	r1, [r7, #8]
 8001ab0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	6a1b      	ldr	r3, [r3, #32]
 8001ab6:	f023 0210 	bic.w	r2, r3, #16
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	699b      	ldr	r3, [r3, #24]
 8001ac2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	6a1b      	ldr	r3, [r3, #32]
 8001ac8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001ad0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	031b      	lsls	r3, r3, #12
 8001ad6:	697a      	ldr	r2, [r7, #20]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001ae2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	011b      	lsls	r3, r3, #4
 8001ae8:	693a      	ldr	r2, [r7, #16]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	697a      	ldr	r2, [r7, #20]
 8001af2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	621a      	str	r2, [r3, #32]
}
 8001afa:	bf00      	nop
 8001afc:	371c      	adds	r7, #28
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr

08001b06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001b06:	b480      	push	{r7}
 8001b08:	b085      	sub	sp, #20
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
 8001b0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001b1e:	683a      	ldr	r2, [r7, #0]
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	f043 0307 	orr.w	r3, r3, #7
 8001b28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	68fa      	ldr	r2, [r7, #12]
 8001b2e:	609a      	str	r2, [r3, #8]
}
 8001b30:	bf00      	nop
 8001b32:	3714      	adds	r7, #20
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b087      	sub	sp, #28
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	607a      	str	r2, [r7, #4]
 8001b48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001b56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	021a      	lsls	r2, r3, #8
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	431a      	orrs	r2, r3
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	4313      	orrs	r3, r2
 8001b64:	697a      	ldr	r2, [r7, #20]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	697a      	ldr	r2, [r7, #20]
 8001b6e:	609a      	str	r2, [r3, #8]
}
 8001b70:	bf00      	nop
 8001b72:	371c      	adds	r7, #28
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d101      	bne.n	8001b94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001b90:	2302      	movs	r3, #2
 8001b92:	e05a      	b.n	8001c4a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2201      	movs	r2, #1
 8001b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2202      	movs	r2, #2
 8001ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	68fa      	ldr	r2, [r7, #12]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	68fa      	ldr	r2, [r7, #12]
 8001bcc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a21      	ldr	r2, [pc, #132]	; (8001c58 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d022      	beq.n	8001c1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001be0:	d01d      	beq.n	8001c1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a1d      	ldr	r2, [pc, #116]	; (8001c5c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d018      	beq.n	8001c1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a1b      	ldr	r2, [pc, #108]	; (8001c60 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d013      	beq.n	8001c1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a1a      	ldr	r2, [pc, #104]	; (8001c64 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d00e      	beq.n	8001c1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a18      	ldr	r2, [pc, #96]	; (8001c68 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d009      	beq.n	8001c1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a17      	ldr	r2, [pc, #92]	; (8001c6c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d004      	beq.n	8001c1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a15      	ldr	r2, [pc, #84]	; (8001c70 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d10c      	bne.n	8001c38 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	68ba      	ldr	r2, [r7, #8]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	68ba      	ldr	r2, [r7, #8]
 8001c36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3714      	adds	r7, #20
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	40010000 	.word	0x40010000
 8001c5c:	40000400 	.word	0x40000400
 8001c60:	40000800 	.word	0x40000800
 8001c64:	40000c00 	.word	0x40000c00
 8001c68:	40010400 	.word	0x40010400
 8001c6c:	40014000 	.word	0x40014000
 8001c70:	40001800 	.word	0x40001800

08001c74 <__libc_init_array>:
 8001c74:	b570      	push	{r4, r5, r6, lr}
 8001c76:	4d0d      	ldr	r5, [pc, #52]	; (8001cac <__libc_init_array+0x38>)
 8001c78:	4c0d      	ldr	r4, [pc, #52]	; (8001cb0 <__libc_init_array+0x3c>)
 8001c7a:	1b64      	subs	r4, r4, r5
 8001c7c:	10a4      	asrs	r4, r4, #2
 8001c7e:	2600      	movs	r6, #0
 8001c80:	42a6      	cmp	r6, r4
 8001c82:	d109      	bne.n	8001c98 <__libc_init_array+0x24>
 8001c84:	4d0b      	ldr	r5, [pc, #44]	; (8001cb4 <__libc_init_array+0x40>)
 8001c86:	4c0c      	ldr	r4, [pc, #48]	; (8001cb8 <__libc_init_array+0x44>)
 8001c88:	f000 f818 	bl	8001cbc <_init>
 8001c8c:	1b64      	subs	r4, r4, r5
 8001c8e:	10a4      	asrs	r4, r4, #2
 8001c90:	2600      	movs	r6, #0
 8001c92:	42a6      	cmp	r6, r4
 8001c94:	d105      	bne.n	8001ca2 <__libc_init_array+0x2e>
 8001c96:	bd70      	pop	{r4, r5, r6, pc}
 8001c98:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c9c:	4798      	blx	r3
 8001c9e:	3601      	adds	r6, #1
 8001ca0:	e7ee      	b.n	8001c80 <__libc_init_array+0xc>
 8001ca2:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ca6:	4798      	blx	r3
 8001ca8:	3601      	adds	r6, #1
 8001caa:	e7f2      	b.n	8001c92 <__libc_init_array+0x1e>
 8001cac:	08001cd4 	.word	0x08001cd4
 8001cb0:	08001cd4 	.word	0x08001cd4
 8001cb4:	08001cd4 	.word	0x08001cd4
 8001cb8:	08001cd8 	.word	0x08001cd8

08001cbc <_init>:
 8001cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cbe:	bf00      	nop
 8001cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cc2:	bc08      	pop	{r3}
 8001cc4:	469e      	mov	lr, r3
 8001cc6:	4770      	bx	lr

08001cc8 <_fini>:
 8001cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cca:	bf00      	nop
 8001ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cce:	bc08      	pop	{r3}
 8001cd0:	469e      	mov	lr, r3
 8001cd2:	4770      	bx	lr
