
ADC_Scan.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b8c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08008d14  08008d14  00018d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d38  08008d38  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08008d38  08008d38  00018d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d40  08008d40  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d40  08008d40  00018d40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d44  08008d44  00018d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08008d48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          000008bc  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000094c  2000094c  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c207  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f0f  00000000  00000000  0003c2c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012a8  00000000  00000000  000401d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001128  00000000  00000000  00041480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025393  00000000  00000000  000425a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019a01  00000000  00000000  0006793b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d82da  00000000  00000000  0008133c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00159616  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004f70  00000000  00000000  0015966c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008cfc 	.word	0x08008cfc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08008cfc 	.word	0x08008cfc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f000 fd00 	bl	8000ec8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f81a 	bl	8000500 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 f9aa 	bl	8000824 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d0:	f000 f8f4 	bl	80006bc <MX_I2C1_Init>
  MX_I2S3_Init();
 80004d4:	f000 f920 	bl	8000718 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004d8:	f000 f94e 	bl	8000778 <MX_SPI1_Init>
  MX_DMA_Init();
 80004dc:	f000 f982 	bl	80007e4 <MX_DMA_Init>
  MX_ADC1_Init();
 80004e0:	f000 f87c 	bl	80005dc <MX_ADC1_Init>
  MX_USB_HOST_Init();
 80004e4:	f007 fff8 	bl	80084d8 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */

  //start ADC as DMA, just need call the func once as its continous mode (or else call it every time to get a series of channels converted)
  HAL_ADC_Start_DMA(&hadc1,(uint32_t *)adcValArray,3 ); //hadc1 defined already at top + where to store data (they expect 32bit ptr) , 3 bytes
 80004e8:	2203      	movs	r2, #3
 80004ea:	4903      	ldr	r1, [pc, #12]	; (80004f8 <main+0x38>)
 80004ec:	4803      	ldr	r0, [pc, #12]	; (80004fc <main+0x3c>)
 80004ee:	f000 fdc5 	bl	800107c <HAL_ADC_Start_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80004f2:	f008 f817 	bl	8008524 <MX_USB_HOST_Process>
 80004f6:	e7fc      	b.n	80004f2 <main+0x32>
 80004f8:	20000110 	.word	0x20000110
 80004fc:	20000114 	.word	0x20000114

08000500 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b094      	sub	sp, #80	; 0x50
 8000504:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000506:	f107 0320 	add.w	r3, r7, #32
 800050a:	2230      	movs	r2, #48	; 0x30
 800050c:	2100      	movs	r1, #0
 800050e:	4618      	mov	r0, r3
 8000510:	f008 fb24 	bl	8008b5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000514:	f107 030c 	add.w	r3, r7, #12
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
 800051c:	605a      	str	r2, [r3, #4]
 800051e:	609a      	str	r2, [r3, #8]
 8000520:	60da      	str	r2, [r3, #12]
 8000522:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000524:	2300      	movs	r3, #0
 8000526:	60bb      	str	r3, [r7, #8]
 8000528:	4b2a      	ldr	r3, [pc, #168]	; (80005d4 <SystemClock_Config+0xd4>)
 800052a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800052c:	4a29      	ldr	r2, [pc, #164]	; (80005d4 <SystemClock_Config+0xd4>)
 800052e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000532:	6413      	str	r3, [r2, #64]	; 0x40
 8000534:	4b27      	ldr	r3, [pc, #156]	; (80005d4 <SystemClock_Config+0xd4>)
 8000536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800053c:	60bb      	str	r3, [r7, #8]
 800053e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000540:	2300      	movs	r3, #0
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	4b24      	ldr	r3, [pc, #144]	; (80005d8 <SystemClock_Config+0xd8>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a23      	ldr	r2, [pc, #140]	; (80005d8 <SystemClock_Config+0xd8>)
 800054a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800054e:	6013      	str	r3, [r2, #0]
 8000550:	4b21      	ldr	r3, [pc, #132]	; (80005d8 <SystemClock_Config+0xd8>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000558:	607b      	str	r3, [r7, #4]
 800055a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800055c:	2303      	movs	r3, #3
 800055e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000560:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000564:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000566:	2301      	movs	r3, #1
 8000568:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800056a:	2310      	movs	r3, #16
 800056c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056e:	2302      	movs	r3, #2
 8000570:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000572:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000576:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000578:	2308      	movs	r3, #8
 800057a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800057c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000580:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000582:	2302      	movs	r3, #2
 8000584:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000586:	2307      	movs	r3, #7
 8000588:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058a:	f107 0320 	add.w	r3, r7, #32
 800058e:	4618      	mov	r0, r3
 8000590:	f004 face 	bl	8004b30 <HAL_RCC_OscConfig>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800059a:	f000 fa31 	bl	8000a00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059e:	230f      	movs	r3, #15
 80005a0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005a2:	2300      	movs	r3, #0
 80005a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a6:	2300      	movs	r3, #0
 80005a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005aa:	2300      	movs	r3, #0
 80005ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005b4:	f107 030c 	add.w	r3, r7, #12
 80005b8:	2100      	movs	r1, #0
 80005ba:	4618      	mov	r0, r3
 80005bc:	f004 fd30 	bl	8005020 <HAL_RCC_ClockConfig>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0xca>
  {
    Error_Handler();
 80005c6:	f000 fa1b 	bl	8000a00 <Error_Handler>
  }
}
 80005ca:	bf00      	nop
 80005cc:	3750      	adds	r7, #80	; 0x50
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	40023800 	.word	0x40023800
 80005d8:	40007000 	.word	0x40007000

080005dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005e2:	463b      	mov	r3, r7
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005ee:	4b30      	ldr	r3, [pc, #192]	; (80006b0 <MX_ADC1_Init+0xd4>)
 80005f0:	4a30      	ldr	r2, [pc, #192]	; (80006b4 <MX_ADC1_Init+0xd8>)
 80005f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80005f4:	4b2e      	ldr	r3, [pc, #184]	; (80006b0 <MX_ADC1_Init+0xd4>)
 80005f6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80005fa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 80005fc:	4b2c      	ldr	r3, [pc, #176]	; (80006b0 <MX_ADC1_Init+0xd4>)
 80005fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000602:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000604:	4b2a      	ldr	r3, [pc, #168]	; (80006b0 <MX_ADC1_Init+0xd4>)
 8000606:	2201      	movs	r2, #1
 8000608:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800060a:	4b29      	ldr	r3, [pc, #164]	; (80006b0 <MX_ADC1_Init+0xd4>)
 800060c:	2201      	movs	r2, #1
 800060e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000610:	4b27      	ldr	r3, [pc, #156]	; (80006b0 <MX_ADC1_Init+0xd4>)
 8000612:	2200      	movs	r2, #0
 8000614:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000618:	4b25      	ldr	r3, [pc, #148]	; (80006b0 <MX_ADC1_Init+0xd4>)
 800061a:	2200      	movs	r2, #0
 800061c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800061e:	4b24      	ldr	r3, [pc, #144]	; (80006b0 <MX_ADC1_Init+0xd4>)
 8000620:	4a25      	ldr	r2, [pc, #148]	; (80006b8 <MX_ADC1_Init+0xdc>)
 8000622:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000624:	4b22      	ldr	r3, [pc, #136]	; (80006b0 <MX_ADC1_Init+0xd4>)
 8000626:	2200      	movs	r2, #0
 8000628:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 800062a:	4b21      	ldr	r3, [pc, #132]	; (80006b0 <MX_ADC1_Init+0xd4>)
 800062c:	2203      	movs	r2, #3
 800062e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000630:	4b1f      	ldr	r3, [pc, #124]	; (80006b0 <MX_ADC1_Init+0xd4>)
 8000632:	2201      	movs	r2, #1
 8000634:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000638:	4b1d      	ldr	r3, [pc, #116]	; (80006b0 <MX_ADC1_Init+0xd4>)
 800063a:	2201      	movs	r2, #1
 800063c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800063e:	481c      	ldr	r0, [pc, #112]	; (80006b0 <MX_ADC1_Init+0xd4>)
 8000640:	f000 fcd8 	bl	8000ff4 <HAL_ADC_Init>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 800064a:	f000 f9d9 	bl	8000a00 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800064e:	2300      	movs	r3, #0
 8000650:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000652:	2301      	movs	r3, #1
 8000654:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000656:	2307      	movs	r3, #7
 8000658:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800065a:	463b      	mov	r3, r7
 800065c:	4619      	mov	r1, r3
 800065e:	4814      	ldr	r0, [pc, #80]	; (80006b0 <MX_ADC1_Init+0xd4>)
 8000660:	f000 fe3a 	bl	80012d8 <HAL_ADC_ConfigChannel>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800066a:	f000 f9c9 	bl	8000a00 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800066e:	2301      	movs	r3, #1
 8000670:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000672:	2302      	movs	r3, #2
 8000674:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000676:	463b      	mov	r3, r7
 8000678:	4619      	mov	r1, r3
 800067a:	480d      	ldr	r0, [pc, #52]	; (80006b0 <MX_ADC1_Init+0xd4>)
 800067c:	f000 fe2c 	bl	80012d8 <HAL_ADC_ConfigChannel>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000686:	f000 f9bb 	bl	8000a00 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800068a:	2302      	movs	r3, #2
 800068c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800068e:	2303      	movs	r3, #3
 8000690:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000692:	463b      	mov	r3, r7
 8000694:	4619      	mov	r1, r3
 8000696:	4806      	ldr	r0, [pc, #24]	; (80006b0 <MX_ADC1_Init+0xd4>)
 8000698:	f000 fe1e 	bl	80012d8 <HAL_ADC_ConfigChannel>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 80006a2:	f000 f9ad 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006a6:	bf00      	nop
 80006a8:	3710      	adds	r7, #16
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	20000114 	.word	0x20000114
 80006b4:	40012000 	.word	0x40012000
 80006b8:	0f000001 	.word	0x0f000001

080006bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006c0:	4b12      	ldr	r3, [pc, #72]	; (800070c <MX_I2C1_Init+0x50>)
 80006c2:	4a13      	ldr	r2, [pc, #76]	; (8000710 <MX_I2C1_Init+0x54>)
 80006c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006c6:	4b11      	ldr	r3, [pc, #68]	; (800070c <MX_I2C1_Init+0x50>)
 80006c8:	4a12      	ldr	r2, [pc, #72]	; (8000714 <MX_I2C1_Init+0x58>)
 80006ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006cc:	4b0f      	ldr	r3, [pc, #60]	; (800070c <MX_I2C1_Init+0x50>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006d2:	4b0e      	ldr	r3, [pc, #56]	; (800070c <MX_I2C1_Init+0x50>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006d8:	4b0c      	ldr	r3, [pc, #48]	; (800070c <MX_I2C1_Init+0x50>)
 80006da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006e0:	4b0a      	ldr	r3, [pc, #40]	; (800070c <MX_I2C1_Init+0x50>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006e6:	4b09      	ldr	r3, [pc, #36]	; (800070c <MX_I2C1_Init+0x50>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006ec:	4b07      	ldr	r3, [pc, #28]	; (800070c <MX_I2C1_Init+0x50>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006f2:	4b06      	ldr	r3, [pc, #24]	; (800070c <MX_I2C1_Init+0x50>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006f8:	4804      	ldr	r0, [pc, #16]	; (800070c <MX_I2C1_Init+0x50>)
 80006fa:	f003 fc35 	bl	8003f68 <HAL_I2C_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000704:	f000 f97c 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}
 800070c:	200000bc 	.word	0x200000bc
 8000710:	40005400 	.word	0x40005400
 8000714:	000186a0 	.word	0x000186a0

08000718 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800071c:	4b13      	ldr	r3, [pc, #76]	; (800076c <MX_I2S3_Init+0x54>)
 800071e:	4a14      	ldr	r2, [pc, #80]	; (8000770 <MX_I2S3_Init+0x58>)
 8000720:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000722:	4b12      	ldr	r3, [pc, #72]	; (800076c <MX_I2S3_Init+0x54>)
 8000724:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000728:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800072a:	4b10      	ldr	r3, [pc, #64]	; (800076c <MX_I2S3_Init+0x54>)
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000730:	4b0e      	ldr	r3, [pc, #56]	; (800076c <MX_I2S3_Init+0x54>)
 8000732:	2200      	movs	r2, #0
 8000734:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000736:	4b0d      	ldr	r3, [pc, #52]	; (800076c <MX_I2S3_Init+0x54>)
 8000738:	f44f 7200 	mov.w	r2, #512	; 0x200
 800073c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800073e:	4b0b      	ldr	r3, [pc, #44]	; (800076c <MX_I2S3_Init+0x54>)
 8000740:	4a0c      	ldr	r2, [pc, #48]	; (8000774 <MX_I2S3_Init+0x5c>)
 8000742:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000744:	4b09      	ldr	r3, [pc, #36]	; (800076c <MX_I2S3_Init+0x54>)
 8000746:	2200      	movs	r2, #0
 8000748:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800074a:	4b08      	ldr	r3, [pc, #32]	; (800076c <MX_I2S3_Init+0x54>)
 800074c:	2200      	movs	r2, #0
 800074e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000750:	4b06      	ldr	r3, [pc, #24]	; (800076c <MX_I2S3_Init+0x54>)
 8000752:	2200      	movs	r2, #0
 8000754:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000756:	4805      	ldr	r0, [pc, #20]	; (800076c <MX_I2S3_Init+0x54>)
 8000758:	f003 fd4a 	bl	80041f0 <HAL_I2S_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000762:	f000 f94d 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20000214 	.word	0x20000214
 8000770:	40003c00 	.word	0x40003c00
 8000774:	00017700 	.word	0x00017700

08000778 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800077c:	4b17      	ldr	r3, [pc, #92]	; (80007dc <MX_SPI1_Init+0x64>)
 800077e:	4a18      	ldr	r2, [pc, #96]	; (80007e0 <MX_SPI1_Init+0x68>)
 8000780:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000782:	4b16      	ldr	r3, [pc, #88]	; (80007dc <MX_SPI1_Init+0x64>)
 8000784:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000788:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800078a:	4b14      	ldr	r3, [pc, #80]	; (80007dc <MX_SPI1_Init+0x64>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000790:	4b12      	ldr	r3, [pc, #72]	; (80007dc <MX_SPI1_Init+0x64>)
 8000792:	2200      	movs	r2, #0
 8000794:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000796:	4b11      	ldr	r3, [pc, #68]	; (80007dc <MX_SPI1_Init+0x64>)
 8000798:	2200      	movs	r2, #0
 800079a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800079c:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <MX_SPI1_Init+0x64>)
 800079e:	2200      	movs	r2, #0
 80007a0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007a2:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <MX_SPI1_Init+0x64>)
 80007a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007a8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007aa:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <MX_SPI1_Init+0x64>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007b0:	4b0a      	ldr	r3, [pc, #40]	; (80007dc <MX_SPI1_Init+0x64>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007b6:	4b09      	ldr	r3, [pc, #36]	; (80007dc <MX_SPI1_Init+0x64>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007bc:	4b07      	ldr	r3, [pc, #28]	; (80007dc <MX_SPI1_Init+0x64>)
 80007be:	2200      	movs	r2, #0
 80007c0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007c2:	4b06      	ldr	r3, [pc, #24]	; (80007dc <MX_SPI1_Init+0x64>)
 80007c4:	220a      	movs	r2, #10
 80007c6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007c8:	4804      	ldr	r0, [pc, #16]	; (80007dc <MX_SPI1_Init+0x64>)
 80007ca:	f004 ff51 	bl	8005670 <HAL_SPI_Init>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007d4:	f000 f914 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007d8:	bf00      	nop
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	200001bc 	.word	0x200001bc
 80007e0:	40013000 	.word	0x40013000

080007e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	607b      	str	r3, [r7, #4]
 80007ee:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <MX_DMA_Init+0x3c>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a0b      	ldr	r2, [pc, #44]	; (8000820 <MX_DMA_Init+0x3c>)
 80007f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b09      	ldr	r3, [pc, #36]	; (8000820 <MX_DMA_Init+0x3c>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000806:	2200      	movs	r2, #0
 8000808:	2100      	movs	r1, #0
 800080a:	2038      	movs	r0, #56	; 0x38
 800080c:	f001 f8df 	bl	80019ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000810:	2038      	movs	r0, #56	; 0x38
 8000812:	f001 f8f8 	bl	8001a06 <HAL_NVIC_EnableIRQ>

}
 8000816:	bf00      	nop
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40023800 	.word	0x40023800

08000824 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b08c      	sub	sp, #48	; 0x30
 8000828:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082a:	f107 031c 	add.w	r3, r7, #28
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	605a      	str	r2, [r3, #4]
 8000834:	609a      	str	r2, [r3, #8]
 8000836:	60da      	str	r2, [r3, #12]
 8000838:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	61bb      	str	r3, [r7, #24]
 800083e:	4b6b      	ldr	r3, [pc, #428]	; (80009ec <MX_GPIO_Init+0x1c8>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a6a      	ldr	r2, [pc, #424]	; (80009ec <MX_GPIO_Init+0x1c8>)
 8000844:	f043 0310 	orr.w	r3, r3, #16
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b68      	ldr	r3, [pc, #416]	; (80009ec <MX_GPIO_Init+0x1c8>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0310 	and.w	r3, r3, #16
 8000852:	61bb      	str	r3, [r7, #24]
 8000854:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	617b      	str	r3, [r7, #20]
 800085a:	4b64      	ldr	r3, [pc, #400]	; (80009ec <MX_GPIO_Init+0x1c8>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a63      	ldr	r2, [pc, #396]	; (80009ec <MX_GPIO_Init+0x1c8>)
 8000860:	f043 0304 	orr.w	r3, r3, #4
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4b61      	ldr	r3, [pc, #388]	; (80009ec <MX_GPIO_Init+0x1c8>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f003 0304 	and.w	r3, r3, #4
 800086e:	617b      	str	r3, [r7, #20]
 8000870:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	613b      	str	r3, [r7, #16]
 8000876:	4b5d      	ldr	r3, [pc, #372]	; (80009ec <MX_GPIO_Init+0x1c8>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	4a5c      	ldr	r2, [pc, #368]	; (80009ec <MX_GPIO_Init+0x1c8>)
 800087c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000880:	6313      	str	r3, [r2, #48]	; 0x30
 8000882:	4b5a      	ldr	r3, [pc, #360]	; (80009ec <MX_GPIO_Init+0x1c8>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800088a:	613b      	str	r3, [r7, #16]
 800088c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	60fb      	str	r3, [r7, #12]
 8000892:	4b56      	ldr	r3, [pc, #344]	; (80009ec <MX_GPIO_Init+0x1c8>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a55      	ldr	r2, [pc, #340]	; (80009ec <MX_GPIO_Init+0x1c8>)
 8000898:	f043 0301 	orr.w	r3, r3, #1
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b53      	ldr	r3, [pc, #332]	; (80009ec <MX_GPIO_Init+0x1c8>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	60bb      	str	r3, [r7, #8]
 80008ae:	4b4f      	ldr	r3, [pc, #316]	; (80009ec <MX_GPIO_Init+0x1c8>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	4a4e      	ldr	r2, [pc, #312]	; (80009ec <MX_GPIO_Init+0x1c8>)
 80008b4:	f043 0302 	orr.w	r3, r3, #2
 80008b8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ba:	4b4c      	ldr	r3, [pc, #304]	; (80009ec <MX_GPIO_Init+0x1c8>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	f003 0302 	and.w	r3, r3, #2
 80008c2:	60bb      	str	r3, [r7, #8]
 80008c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	607b      	str	r3, [r7, #4]
 80008ca:	4b48      	ldr	r3, [pc, #288]	; (80009ec <MX_GPIO_Init+0x1c8>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	4a47      	ldr	r2, [pc, #284]	; (80009ec <MX_GPIO_Init+0x1c8>)
 80008d0:	f043 0308 	orr.w	r3, r3, #8
 80008d4:	6313      	str	r3, [r2, #48]	; 0x30
 80008d6:	4b45      	ldr	r3, [pc, #276]	; (80009ec <MX_GPIO_Init+0x1c8>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	f003 0308 	and.w	r3, r3, #8
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008e2:	2200      	movs	r2, #0
 80008e4:	2108      	movs	r1, #8
 80008e6:	4842      	ldr	r0, [pc, #264]	; (80009f0 <MX_GPIO_Init+0x1cc>)
 80008e8:	f001 fdb4 	bl	8002454 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008ec:	2201      	movs	r2, #1
 80008ee:	2101      	movs	r1, #1
 80008f0:	4840      	ldr	r0, [pc, #256]	; (80009f4 <MX_GPIO_Init+0x1d0>)
 80008f2:	f001 fdaf 	bl	8002454 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008f6:	2200      	movs	r2, #0
 80008f8:	f24f 0110 	movw	r1, #61456	; 0xf010
 80008fc:	483e      	ldr	r0, [pc, #248]	; (80009f8 <MX_GPIO_Init+0x1d4>)
 80008fe:	f001 fda9 	bl	8002454 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000902:	2308      	movs	r3, #8
 8000904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000906:	2301      	movs	r3, #1
 8000908:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	2300      	movs	r3, #0
 8000910:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	4619      	mov	r1, r3
 8000918:	4835      	ldr	r0, [pc, #212]	; (80009f0 <MX_GPIO_Init+0x1cc>)
 800091a:	f001 fbff 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800091e:	2301      	movs	r3, #1
 8000920:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000922:	2301      	movs	r3, #1
 8000924:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092a:	2300      	movs	r3, #0
 800092c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800092e:	f107 031c 	add.w	r3, r7, #28
 8000932:	4619      	mov	r1, r3
 8000934:	482f      	ldr	r0, [pc, #188]	; (80009f4 <MX_GPIO_Init+0x1d0>)
 8000936:	f001 fbf1 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800093a:	2308      	movs	r3, #8
 800093c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093e:	2302      	movs	r3, #2
 8000940:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000946:	2300      	movs	r3, #0
 8000948:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800094a:	2305      	movs	r3, #5
 800094c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800094e:	f107 031c 	add.w	r3, r7, #28
 8000952:	4619      	mov	r1, r3
 8000954:	4827      	ldr	r0, [pc, #156]	; (80009f4 <MX_GPIO_Init+0x1d0>)
 8000956:	f001 fbe1 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800095a:	2304      	movs	r3, #4
 800095c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800095e:	2300      	movs	r3, #0
 8000960:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000966:	f107 031c 	add.w	r3, r7, #28
 800096a:	4619      	mov	r1, r3
 800096c:	4823      	ldr	r0, [pc, #140]	; (80009fc <MX_GPIO_Init+0x1d8>)
 800096e:	f001 fbd5 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000972:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000976:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000978:	2302      	movs	r3, #2
 800097a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000980:	2300      	movs	r3, #0
 8000982:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000984:	2305      	movs	r3, #5
 8000986:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000988:	f107 031c 	add.w	r3, r7, #28
 800098c:	4619      	mov	r1, r3
 800098e:	481b      	ldr	r0, [pc, #108]	; (80009fc <MX_GPIO_Init+0x1d8>)
 8000990:	f001 fbc4 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000994:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000998:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099a:	2301      	movs	r3, #1
 800099c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a2:	2300      	movs	r3, #0
 80009a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	4619      	mov	r1, r3
 80009ac:	4812      	ldr	r0, [pc, #72]	; (80009f8 <MX_GPIO_Init+0x1d4>)
 80009ae:	f001 fbb5 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009b2:	2320      	movs	r3, #32
 80009b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b6:	2300      	movs	r3, #0
 80009b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009be:	f107 031c 	add.w	r3, r7, #28
 80009c2:	4619      	mov	r1, r3
 80009c4:	480c      	ldr	r0, [pc, #48]	; (80009f8 <MX_GPIO_Init+0x1d4>)
 80009c6:	f001 fba9 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009ca:	2302      	movs	r3, #2
 80009cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009ce:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009d8:	f107 031c 	add.w	r3, r7, #28
 80009dc:	4619      	mov	r1, r3
 80009de:	4804      	ldr	r0, [pc, #16]	; (80009f0 <MX_GPIO_Init+0x1cc>)
 80009e0:	f001 fb9c 	bl	800211c <HAL_GPIO_Init>

}
 80009e4:	bf00      	nop
 80009e6:	3730      	adds	r7, #48	; 0x30
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	40023800 	.word	0x40023800
 80009f0:	40021000 	.word	0x40021000
 80009f4:	40020800 	.word	0x40020800
 80009f8:	40020c00 	.word	0x40020c00
 80009fc:	40020400 	.word	0x40020400

08000a00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a04:	b672      	cpsid	i
}
 8000a06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a08:	e7fe      	b.n	8000a08 <Error_Handler+0x8>
	...

08000a0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	607b      	str	r3, [r7, #4]
 8000a16:	4b10      	ldr	r3, [pc, #64]	; (8000a58 <HAL_MspInit+0x4c>)
 8000a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a1a:	4a0f      	ldr	r2, [pc, #60]	; (8000a58 <HAL_MspInit+0x4c>)
 8000a1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a20:	6453      	str	r3, [r2, #68]	; 0x44
 8000a22:	4b0d      	ldr	r3, [pc, #52]	; (8000a58 <HAL_MspInit+0x4c>)
 8000a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a2a:	607b      	str	r3, [r7, #4]
 8000a2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	603b      	str	r3, [r7, #0]
 8000a32:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <HAL_MspInit+0x4c>)
 8000a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a36:	4a08      	ldr	r2, [pc, #32]	; (8000a58 <HAL_MspInit+0x4c>)
 8000a38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a3e:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <HAL_MspInit+0x4c>)
 8000a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a46:	603b      	str	r3, [r7, #0]
 8000a48:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a4a:	2007      	movs	r0, #7
 8000a4c:	f000 ffb4 	bl	80019b8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a50:	bf00      	nop
 8000a52:	3708      	adds	r7, #8
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	40023800 	.word	0x40023800

08000a5c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08a      	sub	sp, #40	; 0x28
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a2e      	ldr	r2, [pc, #184]	; (8000b34 <HAL_ADC_MspInit+0xd8>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d155      	bne.n	8000b2a <HAL_ADC_MspInit+0xce>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	613b      	str	r3, [r7, #16]
 8000a82:	4b2d      	ldr	r3, [pc, #180]	; (8000b38 <HAL_ADC_MspInit+0xdc>)
 8000a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a86:	4a2c      	ldr	r2, [pc, #176]	; (8000b38 <HAL_ADC_MspInit+0xdc>)
 8000a88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a8e:	4b2a      	ldr	r3, [pc, #168]	; (8000b38 <HAL_ADC_MspInit+0xdc>)
 8000a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a96:	613b      	str	r3, [r7, #16]
 8000a98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60fb      	str	r3, [r7, #12]
 8000a9e:	4b26      	ldr	r3, [pc, #152]	; (8000b38 <HAL_ADC_MspInit+0xdc>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	4a25      	ldr	r2, [pc, #148]	; (8000b38 <HAL_ADC_MspInit+0xdc>)
 8000aa4:	f043 0301 	orr.w	r3, r3, #1
 8000aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aaa:	4b23      	ldr	r3, [pc, #140]	; (8000b38 <HAL_ADC_MspInit+0xdc>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	f003 0301 	and.w	r3, r3, #1
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000ab6:	2307      	movs	r3, #7
 8000ab8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000aba:	2303      	movs	r3, #3
 8000abc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac2:	f107 0314 	add.w	r3, r7, #20
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	481c      	ldr	r0, [pc, #112]	; (8000b3c <HAL_ADC_MspInit+0xe0>)
 8000aca:	f001 fb27 	bl	800211c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000ace:	4b1c      	ldr	r3, [pc, #112]	; (8000b40 <HAL_ADC_MspInit+0xe4>)
 8000ad0:	4a1c      	ldr	r2, [pc, #112]	; (8000b44 <HAL_ADC_MspInit+0xe8>)
 8000ad2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000ad4:	4b1a      	ldr	r3, [pc, #104]	; (8000b40 <HAL_ADC_MspInit+0xe4>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ada:	4b19      	ldr	r3, [pc, #100]	; (8000b40 <HAL_ADC_MspInit+0xe4>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ae0:	4b17      	ldr	r3, [pc, #92]	; (8000b40 <HAL_ADC_MspInit+0xe4>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ae6:	4b16      	ldr	r3, [pc, #88]	; (8000b40 <HAL_ADC_MspInit+0xe4>)
 8000ae8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000aec:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000aee:	4b14      	ldr	r3, [pc, #80]	; (8000b40 <HAL_ADC_MspInit+0xe4>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000af4:	4b12      	ldr	r3, [pc, #72]	; (8000b40 <HAL_ADC_MspInit+0xe4>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000afa:	4b11      	ldr	r3, [pc, #68]	; (8000b40 <HAL_ADC_MspInit+0xe4>)
 8000afc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b00:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b02:	4b0f      	ldr	r3, [pc, #60]	; (8000b40 <HAL_ADC_MspInit+0xe4>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b08:	4b0d      	ldr	r3, [pc, #52]	; (8000b40 <HAL_ADC_MspInit+0xe4>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b0e:	480c      	ldr	r0, [pc, #48]	; (8000b40 <HAL_ADC_MspInit+0xe4>)
 8000b10:	f000 ff94 	bl	8001a3c <HAL_DMA_Init>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 8000b1a:	f7ff ff71 	bl	8000a00 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	4a07      	ldr	r2, [pc, #28]	; (8000b40 <HAL_ADC_MspInit+0xe4>)
 8000b22:	639a      	str	r2, [r3, #56]	; 0x38
 8000b24:	4a06      	ldr	r2, [pc, #24]	; (8000b40 <HAL_ADC_MspInit+0xe4>)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b2a:	bf00      	nop
 8000b2c:	3728      	adds	r7, #40	; 0x28
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40012000 	.word	0x40012000
 8000b38:	40023800 	.word	0x40023800
 8000b3c:	40020000 	.word	0x40020000
 8000b40:	2000015c 	.word	0x2000015c
 8000b44:	40026410 	.word	0x40026410

08000b48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08a      	sub	sp, #40	; 0x28
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	60da      	str	r2, [r3, #12]
 8000b5e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a19      	ldr	r2, [pc, #100]	; (8000bcc <HAL_I2C_MspInit+0x84>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d12c      	bne.n	8000bc4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	613b      	str	r3, [r7, #16]
 8000b6e:	4b18      	ldr	r3, [pc, #96]	; (8000bd0 <HAL_I2C_MspInit+0x88>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	4a17      	ldr	r2, [pc, #92]	; (8000bd0 <HAL_I2C_MspInit+0x88>)
 8000b74:	f043 0302 	orr.w	r3, r3, #2
 8000b78:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7a:	4b15      	ldr	r3, [pc, #84]	; (8000bd0 <HAL_I2C_MspInit+0x88>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	f003 0302 	and.w	r3, r3, #2
 8000b82:	613b      	str	r3, [r7, #16]
 8000b84:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b86:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b8c:	2312      	movs	r3, #18
 8000b8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b90:	2301      	movs	r3, #1
 8000b92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b94:	2300      	movs	r3, #0
 8000b96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b98:	2304      	movs	r3, #4
 8000b9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b9c:	f107 0314 	add.w	r3, r7, #20
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	480c      	ldr	r0, [pc, #48]	; (8000bd4 <HAL_I2C_MspInit+0x8c>)
 8000ba4:	f001 faba 	bl	800211c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ba8:	2300      	movs	r3, #0
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <HAL_I2C_MspInit+0x88>)
 8000bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb0:	4a07      	ldr	r2, [pc, #28]	; (8000bd0 <HAL_I2C_MspInit+0x88>)
 8000bb2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bb6:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb8:	4b05      	ldr	r3, [pc, #20]	; (8000bd0 <HAL_I2C_MspInit+0x88>)
 8000bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bc0:	60fb      	str	r3, [r7, #12]
 8000bc2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000bc4:	bf00      	nop
 8000bc6:	3728      	adds	r7, #40	; 0x28
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	40005400 	.word	0x40005400
 8000bd0:	40023800 	.word	0x40023800
 8000bd4:	40020400 	.word	0x40020400

08000bd8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08e      	sub	sp, #56	; 0x38
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
 8000bee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bf0:	f107 0314 	add.w	r3, r7, #20
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4a31      	ldr	r2, [pc, #196]	; (8000cc8 <HAL_I2S_MspInit+0xf0>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d15a      	bne.n	8000cbe <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000c0c:	23c0      	movs	r3, #192	; 0xc0
 8000c0e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000c10:	2302      	movs	r3, #2
 8000c12:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f004 fbe9 	bl	80053f0 <HAL_RCCEx_PeriphCLKConfig>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000c24:	f7ff feec 	bl	8000a00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c28:	2300      	movs	r3, #0
 8000c2a:	613b      	str	r3, [r7, #16]
 8000c2c:	4b27      	ldr	r3, [pc, #156]	; (8000ccc <HAL_I2S_MspInit+0xf4>)
 8000c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c30:	4a26      	ldr	r2, [pc, #152]	; (8000ccc <HAL_I2S_MspInit+0xf4>)
 8000c32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c36:	6413      	str	r3, [r2, #64]	; 0x40
 8000c38:	4b24      	ldr	r3, [pc, #144]	; (8000ccc <HAL_I2S_MspInit+0xf4>)
 8000c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c40:	613b      	str	r3, [r7, #16]
 8000c42:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c44:	2300      	movs	r3, #0
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	4b20      	ldr	r3, [pc, #128]	; (8000ccc <HAL_I2S_MspInit+0xf4>)
 8000c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4c:	4a1f      	ldr	r2, [pc, #124]	; (8000ccc <HAL_I2S_MspInit+0xf4>)
 8000c4e:	f043 0301 	orr.w	r3, r3, #1
 8000c52:	6313      	str	r3, [r2, #48]	; 0x30
 8000c54:	4b1d      	ldr	r3, [pc, #116]	; (8000ccc <HAL_I2S_MspInit+0xf4>)
 8000c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c58:	f003 0301 	and.w	r3, r3, #1
 8000c5c:	60fb      	str	r3, [r7, #12]
 8000c5e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c60:	2300      	movs	r3, #0
 8000c62:	60bb      	str	r3, [r7, #8]
 8000c64:	4b19      	ldr	r3, [pc, #100]	; (8000ccc <HAL_I2S_MspInit+0xf4>)
 8000c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c68:	4a18      	ldr	r2, [pc, #96]	; (8000ccc <HAL_I2S_MspInit+0xf4>)
 8000c6a:	f043 0304 	orr.w	r3, r3, #4
 8000c6e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c70:	4b16      	ldr	r3, [pc, #88]	; (8000ccc <HAL_I2S_MspInit+0xf4>)
 8000c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c74:	f003 0304 	and.w	r3, r3, #4
 8000c78:	60bb      	str	r3, [r7, #8]
 8000c7a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000c7c:	2310      	movs	r3, #16
 8000c7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c80:	2302      	movs	r3, #2
 8000c82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c8c:	2306      	movs	r3, #6
 8000c8e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000c90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c94:	4619      	mov	r1, r3
 8000c96:	480e      	ldr	r0, [pc, #56]	; (8000cd0 <HAL_I2S_MspInit+0xf8>)
 8000c98:	f001 fa40 	bl	800211c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000c9c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000ca0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000caa:	2300      	movs	r3, #0
 8000cac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cae:	2306      	movs	r3, #6
 8000cb0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4806      	ldr	r0, [pc, #24]	; (8000cd4 <HAL_I2S_MspInit+0xfc>)
 8000cba:	f001 fa2f 	bl	800211c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000cbe:	bf00      	nop
 8000cc0:	3738      	adds	r7, #56	; 0x38
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40003c00 	.word	0x40003c00
 8000ccc:	40023800 	.word	0x40023800
 8000cd0:	40020000 	.word	0x40020000
 8000cd4:	40020800 	.word	0x40020800

08000cd8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b08a      	sub	sp, #40	; 0x28
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce0:	f107 0314 	add.w	r3, r7, #20
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]
 8000cee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a19      	ldr	r2, [pc, #100]	; (8000d5c <HAL_SPI_MspInit+0x84>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d12b      	bne.n	8000d52 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	613b      	str	r3, [r7, #16]
 8000cfe:	4b18      	ldr	r3, [pc, #96]	; (8000d60 <HAL_SPI_MspInit+0x88>)
 8000d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d02:	4a17      	ldr	r2, [pc, #92]	; (8000d60 <HAL_SPI_MspInit+0x88>)
 8000d04:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d08:	6453      	str	r3, [r2, #68]	; 0x44
 8000d0a:	4b15      	ldr	r3, [pc, #84]	; (8000d60 <HAL_SPI_MspInit+0x88>)
 8000d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d12:	613b      	str	r3, [r7, #16]
 8000d14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	60fb      	str	r3, [r7, #12]
 8000d1a:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <HAL_SPI_MspInit+0x88>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	4a10      	ldr	r2, [pc, #64]	; (8000d60 <HAL_SPI_MspInit+0x88>)
 8000d20:	f043 0301 	orr.w	r3, r3, #1
 8000d24:	6313      	str	r3, [r2, #48]	; 0x30
 8000d26:	4b0e      	ldr	r3, [pc, #56]	; (8000d60 <HAL_SPI_MspInit+0x88>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	f003 0301 	and.w	r3, r3, #1
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d32:	23e0      	movs	r3, #224	; 0xe0
 8000d34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d36:	2302      	movs	r3, #2
 8000d38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d42:	2305      	movs	r3, #5
 8000d44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d46:	f107 0314 	add.w	r3, r7, #20
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4805      	ldr	r0, [pc, #20]	; (8000d64 <HAL_SPI_MspInit+0x8c>)
 8000d4e:	f001 f9e5 	bl	800211c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d52:	bf00      	nop
 8000d54:	3728      	adds	r7, #40	; 0x28
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	40013000 	.word	0x40013000
 8000d60:	40023800 	.word	0x40023800
 8000d64:	40020000 	.word	0x40020000

08000d68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d6c:	e7fe      	b.n	8000d6c <NMI_Handler+0x4>

08000d6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d72:	e7fe      	b.n	8000d72 <HardFault_Handler+0x4>

08000d74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d78:	e7fe      	b.n	8000d78 <MemManage_Handler+0x4>

08000d7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d7e:	e7fe      	b.n	8000d7e <BusFault_Handler+0x4>

08000d80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d84:	e7fe      	b.n	8000d84 <UsageFault_Handler+0x4>

08000d86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d86:	b480      	push	{r7}
 8000d88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr

08000d94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr

08000da2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr

08000db0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000db4:	f000 f8da 	bl	8000f6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000db8:	bf00      	nop
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000dc0:	4802      	ldr	r0, [pc, #8]	; (8000dcc <DMA2_Stream0_IRQHandler+0x10>)
 8000dc2:	f000 ff41 	bl	8001c48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	2000015c 	.word	0x2000015c

08000dd0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000dd4:	4802      	ldr	r0, [pc, #8]	; (8000de0 <OTG_FS_IRQHandler+0x10>)
 8000dd6:	f001 fdc1 	bl	800295c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	20000638 	.word	0x20000638

08000de4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b086      	sub	sp, #24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dec:	4a14      	ldr	r2, [pc, #80]	; (8000e40 <_sbrk+0x5c>)
 8000dee:	4b15      	ldr	r3, [pc, #84]	; (8000e44 <_sbrk+0x60>)
 8000df0:	1ad3      	subs	r3, r2, r3
 8000df2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000df8:	4b13      	ldr	r3, [pc, #76]	; (8000e48 <_sbrk+0x64>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d102      	bne.n	8000e06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e00:	4b11      	ldr	r3, [pc, #68]	; (8000e48 <_sbrk+0x64>)
 8000e02:	4a12      	ldr	r2, [pc, #72]	; (8000e4c <_sbrk+0x68>)
 8000e04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e06:	4b10      	ldr	r3, [pc, #64]	; (8000e48 <_sbrk+0x64>)
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4413      	add	r3, r2
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	d207      	bcs.n	8000e24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e14:	f007 fe68 	bl	8008ae8 <__errno>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	220c      	movs	r2, #12
 8000e1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e22:	e009      	b.n	8000e38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e24:	4b08      	ldr	r3, [pc, #32]	; (8000e48 <_sbrk+0x64>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e2a:	4b07      	ldr	r3, [pc, #28]	; (8000e48 <_sbrk+0x64>)
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4413      	add	r3, r2
 8000e32:	4a05      	ldr	r2, [pc, #20]	; (8000e48 <_sbrk+0x64>)
 8000e34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e36:	68fb      	ldr	r3, [r7, #12]
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3718      	adds	r7, #24
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	20020000 	.word	0x20020000
 8000e44:	00000400 	.word	0x00000400
 8000e48:	200000ac 	.word	0x200000ac
 8000e4c:	20000950 	.word	0x20000950

08000e50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e54:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <SystemInit+0x20>)
 8000e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e5a:	4a05      	ldr	r2, [pc, #20]	; (8000e70 <SystemInit+0x20>)
 8000e5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	e000ed00 	.word	0xe000ed00

08000e74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000eac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e78:	480d      	ldr	r0, [pc, #52]	; (8000eb0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e7a:	490e      	ldr	r1, [pc, #56]	; (8000eb4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e7c:	4a0e      	ldr	r2, [pc, #56]	; (8000eb8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e80:	e002      	b.n	8000e88 <LoopCopyDataInit>

08000e82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e86:	3304      	adds	r3, #4

08000e88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e8c:	d3f9      	bcc.n	8000e82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e8e:	4a0b      	ldr	r2, [pc, #44]	; (8000ebc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e90:	4c0b      	ldr	r4, [pc, #44]	; (8000ec0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e94:	e001      	b.n	8000e9a <LoopFillZerobss>

08000e96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e98:	3204      	adds	r2, #4

08000e9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e9c:	d3fb      	bcc.n	8000e96 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e9e:	f7ff ffd7 	bl	8000e50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ea2:	f007 fe27 	bl	8008af4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ea6:	f7ff fb0b 	bl	80004c0 <main>
  bx  lr    
 8000eaa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000eac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000eb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eb4:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000eb8:	08008d48 	.word	0x08008d48
  ldr r2, =_sbss
 8000ebc:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000ec0:	2000094c 	.word	0x2000094c

08000ec4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ec4:	e7fe      	b.n	8000ec4 <ADC_IRQHandler>
	...

08000ec8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ecc:	4b0e      	ldr	r3, [pc, #56]	; (8000f08 <HAL_Init+0x40>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a0d      	ldr	r2, [pc, #52]	; (8000f08 <HAL_Init+0x40>)
 8000ed2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ed6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ed8:	4b0b      	ldr	r3, [pc, #44]	; (8000f08 <HAL_Init+0x40>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a0a      	ldr	r2, [pc, #40]	; (8000f08 <HAL_Init+0x40>)
 8000ede:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ee2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ee4:	4b08      	ldr	r3, [pc, #32]	; (8000f08 <HAL_Init+0x40>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a07      	ldr	r2, [pc, #28]	; (8000f08 <HAL_Init+0x40>)
 8000eea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef0:	2003      	movs	r0, #3
 8000ef2:	f000 fd61 	bl	80019b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	f000 f808 	bl	8000f0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000efc:	f7ff fd86 	bl	8000a0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40023c00 	.word	0x40023c00

08000f0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f14:	4b12      	ldr	r3, [pc, #72]	; (8000f60 <HAL_InitTick+0x54>)
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <HAL_InitTick+0x58>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f000 fd79 	bl	8001a22 <HAL_SYSTICK_Config>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	e00e      	b.n	8000f58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2b0f      	cmp	r3, #15
 8000f3e:	d80a      	bhi.n	8000f56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f40:	2200      	movs	r2, #0
 8000f42:	6879      	ldr	r1, [r7, #4]
 8000f44:	f04f 30ff 	mov.w	r0, #4294967295
 8000f48:	f000 fd41 	bl	80019ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f4c:	4a06      	ldr	r2, [pc, #24]	; (8000f68 <HAL_InitTick+0x5c>)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f52:	2300      	movs	r3, #0
 8000f54:	e000      	b.n	8000f58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20000000 	.word	0x20000000
 8000f64:	20000008 	.word	0x20000008
 8000f68:	20000004 	.word	0x20000004

08000f6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f70:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <HAL_IncTick+0x20>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	461a      	mov	r2, r3
 8000f76:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <HAL_IncTick+0x24>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	4a04      	ldr	r2, [pc, #16]	; (8000f90 <HAL_IncTick+0x24>)
 8000f7e:	6013      	str	r3, [r2, #0]
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	20000008 	.word	0x20000008
 8000f90:	2000025c 	.word	0x2000025c

08000f94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  return uwTick;
 8000f98:	4b03      	ldr	r3, [pc, #12]	; (8000fa8 <HAL_GetTick+0x14>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	2000025c 	.word	0x2000025c

08000fac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fb4:	f7ff ffee 	bl	8000f94 <HAL_GetTick>
 8000fb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fc4:	d005      	beq.n	8000fd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fc6:	4b0a      	ldr	r3, [pc, #40]	; (8000ff0 <HAL_Delay+0x44>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	461a      	mov	r2, r3
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	4413      	add	r3, r2
 8000fd0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fd2:	bf00      	nop
 8000fd4:	f7ff ffde 	bl	8000f94 <HAL_GetTick>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	68fa      	ldr	r2, [r7, #12]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d8f7      	bhi.n	8000fd4 <HAL_Delay+0x28>
  {
  }
}
 8000fe4:	bf00      	nop
 8000fe6:	bf00      	nop
 8000fe8:	3710      	adds	r7, #16
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	20000008 	.word	0x20000008

08000ff4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d101      	bne.n	800100a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	e033      	b.n	8001072 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100e:	2b00      	cmp	r3, #0
 8001010:	d109      	bne.n	8001026 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f7ff fd22 	bl	8000a5c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2200      	movs	r2, #0
 800101c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2200      	movs	r2, #0
 8001022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102a:	f003 0310 	and.w	r3, r3, #16
 800102e:	2b00      	cmp	r3, #0
 8001030:	d118      	bne.n	8001064 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001036:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800103a:	f023 0302 	bic.w	r3, r3, #2
 800103e:	f043 0202 	orr.w	r2, r3, #2
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f000 fa68 	bl	800151c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2200      	movs	r2, #0
 8001050:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001056:	f023 0303 	bic.w	r3, r3, #3
 800105a:	f043 0201 	orr.w	r2, r3, #1
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	641a      	str	r2, [r3, #64]	; 0x40
 8001062:	e001      	b.n	8001068 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001064:	2301      	movs	r3, #1
 8001066:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2200      	movs	r2, #0
 800106c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001070:	7bfb      	ldrb	r3, [r7, #15]
}
 8001072:	4618      	mov	r0, r3
 8001074:	3710      	adds	r7, #16
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
	...

0800107c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001088:	2300      	movs	r3, #0
 800108a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001092:	2b01      	cmp	r3, #1
 8001094:	d101      	bne.n	800109a <HAL_ADC_Start_DMA+0x1e>
 8001096:	2302      	movs	r3, #2
 8001098:	e0e9      	b.n	800126e <HAL_ADC_Start_DMA+0x1f2>
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	2201      	movs	r2, #1
 800109e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	f003 0301 	and.w	r3, r3, #1
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d018      	beq.n	80010e2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	689a      	ldr	r2, [r3, #8]
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f042 0201 	orr.w	r2, r2, #1
 80010be:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80010c0:	4b6d      	ldr	r3, [pc, #436]	; (8001278 <HAL_ADC_Start_DMA+0x1fc>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a6d      	ldr	r2, [pc, #436]	; (800127c <HAL_ADC_Start_DMA+0x200>)
 80010c6:	fba2 2303 	umull	r2, r3, r2, r3
 80010ca:	0c9a      	lsrs	r2, r3, #18
 80010cc:	4613      	mov	r3, r2
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	4413      	add	r3, r2
 80010d2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80010d4:	e002      	b.n	80010dc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	3b01      	subs	r3, #1
 80010da:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d1f9      	bne.n	80010d6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80010f0:	d107      	bne.n	8001102 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	689a      	ldr	r2, [r3, #8]
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001100:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	f003 0301 	and.w	r3, r3, #1
 800110c:	2b01      	cmp	r3, #1
 800110e:	f040 80a1 	bne.w	8001254 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001116:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800111a:	f023 0301 	bic.w	r3, r3, #1
 800111e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001130:	2b00      	cmp	r3, #0
 8001132:	d007      	beq.n	8001144 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001138:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800113c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001148:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800114c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001150:	d106      	bne.n	8001160 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001156:	f023 0206 	bic.w	r2, r3, #6
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	645a      	str	r2, [r3, #68]	; 0x44
 800115e:	e002      	b.n	8001166 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	2200      	movs	r2, #0
 8001164:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	2200      	movs	r2, #0
 800116a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800116e:	4b44      	ldr	r3, [pc, #272]	; (8001280 <HAL_ADC_Start_DMA+0x204>)
 8001170:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001176:	4a43      	ldr	r2, [pc, #268]	; (8001284 <HAL_ADC_Start_DMA+0x208>)
 8001178:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800117e:	4a42      	ldr	r2, [pc, #264]	; (8001288 <HAL_ADC_Start_DMA+0x20c>)
 8001180:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001186:	4a41      	ldr	r2, [pc, #260]	; (800128c <HAL_ADC_Start_DMA+0x210>)
 8001188:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001192:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	685a      	ldr	r2, [r3, #4]
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80011a2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	689a      	ldr	r2, [r3, #8]
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80011b2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	334c      	adds	r3, #76	; 0x4c
 80011be:	4619      	mov	r1, r3
 80011c0:	68ba      	ldr	r2, [r7, #8]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	f000 fce8 	bl	8001b98 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f003 031f 	and.w	r3, r3, #31
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d12a      	bne.n	800122a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a2d      	ldr	r2, [pc, #180]	; (8001290 <HAL_ADC_Start_DMA+0x214>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d015      	beq.n	800120a <HAL_ADC_Start_DMA+0x18e>
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a2c      	ldr	r2, [pc, #176]	; (8001294 <HAL_ADC_Start_DMA+0x218>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d105      	bne.n	80011f4 <HAL_ADC_Start_DMA+0x178>
 80011e8:	4b25      	ldr	r3, [pc, #148]	; (8001280 <HAL_ADC_Start_DMA+0x204>)
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f003 031f 	and.w	r3, r3, #31
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d00a      	beq.n	800120a <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a27      	ldr	r2, [pc, #156]	; (8001298 <HAL_ADC_Start_DMA+0x21c>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d136      	bne.n	800126c <HAL_ADC_Start_DMA+0x1f0>
 80011fe:	4b20      	ldr	r3, [pc, #128]	; (8001280 <HAL_ADC_Start_DMA+0x204>)
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f003 0310 	and.w	r3, r3, #16
 8001206:	2b00      	cmp	r3, #0
 8001208:	d130      	bne.n	800126c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001214:	2b00      	cmp	r3, #0
 8001216:	d129      	bne.n	800126c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	689a      	ldr	r2, [r3, #8]
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	e020      	b.n	800126c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a18      	ldr	r2, [pc, #96]	; (8001290 <HAL_ADC_Start_DMA+0x214>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d11b      	bne.n	800126c <HAL_ADC_Start_DMA+0x1f0>
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800123e:	2b00      	cmp	r3, #0
 8001240:	d114      	bne.n	800126c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	689a      	ldr	r2, [r3, #8]
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001250:	609a      	str	r2, [r3, #8]
 8001252:	e00b      	b.n	800126c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001258:	f043 0210 	orr.w	r2, r3, #16
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001264:	f043 0201 	orr.w	r2, r3, #1
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800126c:	2300      	movs	r3, #0
}
 800126e:	4618      	mov	r0, r3
 8001270:	3718      	adds	r7, #24
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	20000000 	.word	0x20000000
 800127c:	431bde83 	.word	0x431bde83
 8001280:	40012300 	.word	0x40012300
 8001284:	08001715 	.word	0x08001715
 8001288:	080017cf 	.word	0x080017cf
 800128c:	080017eb 	.word	0x080017eb
 8001290:	40012000 	.word	0x40012000
 8001294:	40012100 	.word	0x40012100
 8001298:	40012200 	.word	0x40012200

0800129c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80012a4:	bf00      	nop
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80012b8:	bf00      	nop
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80012cc:	bf00      	nop
 80012ce:	370c      	adds	r7, #12
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80012d8:	b480      	push	{r7}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80012e2:	2300      	movs	r3, #0
 80012e4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d101      	bne.n	80012f4 <HAL_ADC_ConfigChannel+0x1c>
 80012f0:	2302      	movs	r3, #2
 80012f2:	e105      	b.n	8001500 <HAL_ADC_ConfigChannel+0x228>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2201      	movs	r2, #1
 80012f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2b09      	cmp	r3, #9
 8001302:	d925      	bls.n	8001350 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	68d9      	ldr	r1, [r3, #12]
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	b29b      	uxth	r3, r3
 8001310:	461a      	mov	r2, r3
 8001312:	4613      	mov	r3, r2
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	4413      	add	r3, r2
 8001318:	3b1e      	subs	r3, #30
 800131a:	2207      	movs	r2, #7
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	43da      	mvns	r2, r3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	400a      	ands	r2, r1
 8001328:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	68d9      	ldr	r1, [r3, #12]
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	689a      	ldr	r2, [r3, #8]
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	b29b      	uxth	r3, r3
 800133a:	4618      	mov	r0, r3
 800133c:	4603      	mov	r3, r0
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	4403      	add	r3, r0
 8001342:	3b1e      	subs	r3, #30
 8001344:	409a      	lsls	r2, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	430a      	orrs	r2, r1
 800134c:	60da      	str	r2, [r3, #12]
 800134e:	e022      	b.n	8001396 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	6919      	ldr	r1, [r3, #16]
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	b29b      	uxth	r3, r3
 800135c:	461a      	mov	r2, r3
 800135e:	4613      	mov	r3, r2
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	4413      	add	r3, r2
 8001364:	2207      	movs	r2, #7
 8001366:	fa02 f303 	lsl.w	r3, r2, r3
 800136a:	43da      	mvns	r2, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	400a      	ands	r2, r1
 8001372:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	6919      	ldr	r1, [r3, #16]
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	689a      	ldr	r2, [r3, #8]
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	b29b      	uxth	r3, r3
 8001384:	4618      	mov	r0, r3
 8001386:	4603      	mov	r3, r0
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	4403      	add	r3, r0
 800138c:	409a      	lsls	r2, r3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	430a      	orrs	r2, r1
 8001394:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	2b06      	cmp	r3, #6
 800139c:	d824      	bhi.n	80013e8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685a      	ldr	r2, [r3, #4]
 80013a8:	4613      	mov	r3, r2
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	4413      	add	r3, r2
 80013ae:	3b05      	subs	r3, #5
 80013b0:	221f      	movs	r2, #31
 80013b2:	fa02 f303 	lsl.w	r3, r2, r3
 80013b6:	43da      	mvns	r2, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	400a      	ands	r2, r1
 80013be:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	4618      	mov	r0, r3
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685a      	ldr	r2, [r3, #4]
 80013d2:	4613      	mov	r3, r2
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	4413      	add	r3, r2
 80013d8:	3b05      	subs	r3, #5
 80013da:	fa00 f203 	lsl.w	r2, r0, r3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	430a      	orrs	r2, r1
 80013e4:	635a      	str	r2, [r3, #52]	; 0x34
 80013e6:	e04c      	b.n	8001482 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	2b0c      	cmp	r3, #12
 80013ee:	d824      	bhi.n	800143a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685a      	ldr	r2, [r3, #4]
 80013fa:	4613      	mov	r3, r2
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	4413      	add	r3, r2
 8001400:	3b23      	subs	r3, #35	; 0x23
 8001402:	221f      	movs	r2, #31
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	43da      	mvns	r2, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	400a      	ands	r2, r1
 8001410:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	b29b      	uxth	r3, r3
 800141e:	4618      	mov	r0, r3
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685a      	ldr	r2, [r3, #4]
 8001424:	4613      	mov	r3, r2
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	4413      	add	r3, r2
 800142a:	3b23      	subs	r3, #35	; 0x23
 800142c:	fa00 f203 	lsl.w	r2, r0, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	430a      	orrs	r2, r1
 8001436:	631a      	str	r2, [r3, #48]	; 0x30
 8001438:	e023      	b.n	8001482 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685a      	ldr	r2, [r3, #4]
 8001444:	4613      	mov	r3, r2
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	4413      	add	r3, r2
 800144a:	3b41      	subs	r3, #65	; 0x41
 800144c:	221f      	movs	r2, #31
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	43da      	mvns	r2, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	400a      	ands	r2, r1
 800145a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	b29b      	uxth	r3, r3
 8001468:	4618      	mov	r0, r3
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685a      	ldr	r2, [r3, #4]
 800146e:	4613      	mov	r3, r2
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	4413      	add	r3, r2
 8001474:	3b41      	subs	r3, #65	; 0x41
 8001476:	fa00 f203 	lsl.w	r2, r0, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	430a      	orrs	r2, r1
 8001480:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001482:	4b22      	ldr	r3, [pc, #136]	; (800150c <HAL_ADC_ConfigChannel+0x234>)
 8001484:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a21      	ldr	r2, [pc, #132]	; (8001510 <HAL_ADC_ConfigChannel+0x238>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d109      	bne.n	80014a4 <HAL_ADC_ConfigChannel+0x1cc>
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2b12      	cmp	r3, #18
 8001496:	d105      	bne.n	80014a4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a19      	ldr	r2, [pc, #100]	; (8001510 <HAL_ADC_ConfigChannel+0x238>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d123      	bne.n	80014f6 <HAL_ADC_ConfigChannel+0x21e>
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2b10      	cmp	r3, #16
 80014b4:	d003      	beq.n	80014be <HAL_ADC_ConfigChannel+0x1e6>
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	2b11      	cmp	r3, #17
 80014bc:	d11b      	bne.n	80014f6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2b10      	cmp	r3, #16
 80014d0:	d111      	bne.n	80014f6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80014d2:	4b10      	ldr	r3, [pc, #64]	; (8001514 <HAL_ADC_ConfigChannel+0x23c>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a10      	ldr	r2, [pc, #64]	; (8001518 <HAL_ADC_ConfigChannel+0x240>)
 80014d8:	fba2 2303 	umull	r2, r3, r2, r3
 80014dc:	0c9a      	lsrs	r2, r3, #18
 80014de:	4613      	mov	r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	4413      	add	r3, r2
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80014e8:	e002      	b.n	80014f0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	3b01      	subs	r3, #1
 80014ee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d1f9      	bne.n	80014ea <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2200      	movs	r2, #0
 80014fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80014fe:	2300      	movs	r3, #0
}
 8001500:	4618      	mov	r0, r3
 8001502:	3714      	adds	r7, #20
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	40012300 	.word	0x40012300
 8001510:	40012000 	.word	0x40012000
 8001514:	20000000 	.word	0x20000000
 8001518:	431bde83 	.word	0x431bde83

0800151c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800151c:	b480      	push	{r7}
 800151e:	b085      	sub	sp, #20
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001524:	4b79      	ldr	r3, [pc, #484]	; (800170c <ADC_Init+0x1f0>)
 8001526:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	685a      	ldr	r2, [r3, #4]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	431a      	orrs	r2, r3
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	685a      	ldr	r2, [r3, #4]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001550:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	6859      	ldr	r1, [r3, #4]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	691b      	ldr	r3, [r3, #16]
 800155c:	021a      	lsls	r2, r3, #8
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	430a      	orrs	r2, r1
 8001564:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	685a      	ldr	r2, [r3, #4]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001574:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	6859      	ldr	r1, [r3, #4]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	689a      	ldr	r2, [r3, #8]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	430a      	orrs	r2, r1
 8001586:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	689a      	ldr	r2, [r3, #8]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001596:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	6899      	ldr	r1, [r3, #8]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	68da      	ldr	r2, [r3, #12]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	430a      	orrs	r2, r1
 80015a8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ae:	4a58      	ldr	r2, [pc, #352]	; (8001710 <ADC_Init+0x1f4>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d022      	beq.n	80015fa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	689a      	ldr	r2, [r3, #8]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80015c2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	6899      	ldr	r1, [r3, #8]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	430a      	orrs	r2, r1
 80015d4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	689a      	ldr	r2, [r3, #8]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80015e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	6899      	ldr	r1, [r3, #8]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	430a      	orrs	r2, r1
 80015f6:	609a      	str	r2, [r3, #8]
 80015f8:	e00f      	b.n	800161a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	689a      	ldr	r2, [r3, #8]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001608:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	689a      	ldr	r2, [r3, #8]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001618:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	689a      	ldr	r2, [r3, #8]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f022 0202 	bic.w	r2, r2, #2
 8001628:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	6899      	ldr	r1, [r3, #8]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	7e1b      	ldrb	r3, [r3, #24]
 8001634:	005a      	lsls	r2, r3, #1
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	430a      	orrs	r2, r1
 800163c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d01b      	beq.n	8001680 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	685a      	ldr	r2, [r3, #4]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001656:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	685a      	ldr	r2, [r3, #4]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001666:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	6859      	ldr	r1, [r3, #4]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001672:	3b01      	subs	r3, #1
 8001674:	035a      	lsls	r2, r3, #13
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	430a      	orrs	r2, r1
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	e007      	b.n	8001690 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	685a      	ldr	r2, [r3, #4]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800168e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800169e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	69db      	ldr	r3, [r3, #28]
 80016aa:	3b01      	subs	r3, #1
 80016ac:	051a      	lsls	r2, r3, #20
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	430a      	orrs	r2, r1
 80016b4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	689a      	ldr	r2, [r3, #8]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80016c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	6899      	ldr	r1, [r3, #8]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80016d2:	025a      	lsls	r2, r3, #9
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	430a      	orrs	r2, r1
 80016da:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	689a      	ldr	r2, [r3, #8]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	6899      	ldr	r1, [r3, #8]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	695b      	ldr	r3, [r3, #20]
 80016f6:	029a      	lsls	r2, r3, #10
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	430a      	orrs	r2, r1
 80016fe:	609a      	str	r2, [r3, #8]
}
 8001700:	bf00      	nop
 8001702:	3714      	adds	r7, #20
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	40012300 	.word	0x40012300
 8001710:	0f000001 	.word	0x0f000001

08001714 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001720:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001726:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800172a:	2b00      	cmp	r3, #0
 800172c:	d13c      	bne.n	80017a8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001732:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001744:	2b00      	cmp	r3, #0
 8001746:	d12b      	bne.n	80017a0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800174c:	2b00      	cmp	r3, #0
 800174e:	d127      	bne.n	80017a0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001756:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800175a:	2b00      	cmp	r3, #0
 800175c:	d006      	beq.n	800176c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001768:	2b00      	cmp	r3, #0
 800176a:	d119      	bne.n	80017a0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	685a      	ldr	r2, [r3, #4]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f022 0220 	bic.w	r2, r2, #32
 800177a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001780:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d105      	bne.n	80017a0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001798:	f043 0201 	orr.w	r2, r3, #1
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80017a0:	68f8      	ldr	r0, [r7, #12]
 80017a2:	f7ff fd7b 	bl	800129c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80017a6:	e00e      	b.n	80017c6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ac:	f003 0310 	and.w	r3, r3, #16
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d003      	beq.n	80017bc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80017b4:	68f8      	ldr	r0, [r7, #12]
 80017b6:	f7ff fd85 	bl	80012c4 <HAL_ADC_ErrorCallback>
}
 80017ba:	e004      	b.n	80017c6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	4798      	blx	r3
}
 80017c6:	bf00      	nop
 80017c8:	3710      	adds	r7, #16
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b084      	sub	sp, #16
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017da:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80017dc:	68f8      	ldr	r0, [r7, #12]
 80017de:	f7ff fd67 	bl	80012b0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80017e2:	bf00      	nop
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b084      	sub	sp, #16
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017f6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	2240      	movs	r2, #64	; 0x40
 80017fc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001802:	f043 0204 	orr.w	r2, r3, #4
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800180a:	68f8      	ldr	r0, [r7, #12]
 800180c:	f7ff fd5a 	bl	80012c4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001810:	bf00      	nop
 8001812:	3710      	adds	r7, #16
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}

08001818 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001818:	b480      	push	{r7}
 800181a:	b085      	sub	sp, #20
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f003 0307 	and.w	r3, r3, #7
 8001826:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001828:	4b0c      	ldr	r3, [pc, #48]	; (800185c <__NVIC_SetPriorityGrouping+0x44>)
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800182e:	68ba      	ldr	r2, [r7, #8]
 8001830:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001834:	4013      	ands	r3, r2
 8001836:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001840:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001844:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001848:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800184a:	4a04      	ldr	r2, [pc, #16]	; (800185c <__NVIC_SetPriorityGrouping+0x44>)
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	60d3      	str	r3, [r2, #12]
}
 8001850:	bf00      	nop
 8001852:	3714      	adds	r7, #20
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	e000ed00 	.word	0xe000ed00

08001860 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001864:	4b04      	ldr	r3, [pc, #16]	; (8001878 <__NVIC_GetPriorityGrouping+0x18>)
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	0a1b      	lsrs	r3, r3, #8
 800186a:	f003 0307 	and.w	r3, r3, #7
}
 800186e:	4618      	mov	r0, r3
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	e000ed00 	.word	0xe000ed00

0800187c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188a:	2b00      	cmp	r3, #0
 800188c:	db0b      	blt.n	80018a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800188e:	79fb      	ldrb	r3, [r7, #7]
 8001890:	f003 021f 	and.w	r2, r3, #31
 8001894:	4907      	ldr	r1, [pc, #28]	; (80018b4 <__NVIC_EnableIRQ+0x38>)
 8001896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189a:	095b      	lsrs	r3, r3, #5
 800189c:	2001      	movs	r0, #1
 800189e:	fa00 f202 	lsl.w	r2, r0, r2
 80018a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018a6:	bf00      	nop
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	e000e100 	.word	0xe000e100

080018b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	6039      	str	r1, [r7, #0]
 80018c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	db0a      	blt.n	80018e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	b2da      	uxtb	r2, r3
 80018d0:	490c      	ldr	r1, [pc, #48]	; (8001904 <__NVIC_SetPriority+0x4c>)
 80018d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d6:	0112      	lsls	r2, r2, #4
 80018d8:	b2d2      	uxtb	r2, r2
 80018da:	440b      	add	r3, r1
 80018dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018e0:	e00a      	b.n	80018f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	b2da      	uxtb	r2, r3
 80018e6:	4908      	ldr	r1, [pc, #32]	; (8001908 <__NVIC_SetPriority+0x50>)
 80018e8:	79fb      	ldrb	r3, [r7, #7]
 80018ea:	f003 030f 	and.w	r3, r3, #15
 80018ee:	3b04      	subs	r3, #4
 80018f0:	0112      	lsls	r2, r2, #4
 80018f2:	b2d2      	uxtb	r2, r2
 80018f4:	440b      	add	r3, r1
 80018f6:	761a      	strb	r2, [r3, #24]
}
 80018f8:	bf00      	nop
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr
 8001904:	e000e100 	.word	0xe000e100
 8001908:	e000ed00 	.word	0xe000ed00

0800190c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800190c:	b480      	push	{r7}
 800190e:	b089      	sub	sp, #36	; 0x24
 8001910:	af00      	add	r7, sp, #0
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	60b9      	str	r1, [r7, #8]
 8001916:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	f003 0307 	and.w	r3, r3, #7
 800191e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	f1c3 0307 	rsb	r3, r3, #7
 8001926:	2b04      	cmp	r3, #4
 8001928:	bf28      	it	cs
 800192a:	2304      	movcs	r3, #4
 800192c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	3304      	adds	r3, #4
 8001932:	2b06      	cmp	r3, #6
 8001934:	d902      	bls.n	800193c <NVIC_EncodePriority+0x30>
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	3b03      	subs	r3, #3
 800193a:	e000      	b.n	800193e <NVIC_EncodePriority+0x32>
 800193c:	2300      	movs	r3, #0
 800193e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001940:	f04f 32ff 	mov.w	r2, #4294967295
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	43da      	mvns	r2, r3
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	401a      	ands	r2, r3
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001954:	f04f 31ff 	mov.w	r1, #4294967295
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	fa01 f303 	lsl.w	r3, r1, r3
 800195e:	43d9      	mvns	r1, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001964:	4313      	orrs	r3, r2
         );
}
 8001966:	4618      	mov	r0, r3
 8001968:	3724      	adds	r7, #36	; 0x24
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
	...

08001974 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	3b01      	subs	r3, #1
 8001980:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001984:	d301      	bcc.n	800198a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001986:	2301      	movs	r3, #1
 8001988:	e00f      	b.n	80019aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800198a:	4a0a      	ldr	r2, [pc, #40]	; (80019b4 <SysTick_Config+0x40>)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	3b01      	subs	r3, #1
 8001990:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001992:	210f      	movs	r1, #15
 8001994:	f04f 30ff 	mov.w	r0, #4294967295
 8001998:	f7ff ff8e 	bl	80018b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800199c:	4b05      	ldr	r3, [pc, #20]	; (80019b4 <SysTick_Config+0x40>)
 800199e:	2200      	movs	r2, #0
 80019a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019a2:	4b04      	ldr	r3, [pc, #16]	; (80019b4 <SysTick_Config+0x40>)
 80019a4:	2207      	movs	r2, #7
 80019a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	e000e010 	.word	0xe000e010

080019b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f7ff ff29 	bl	8001818 <__NVIC_SetPriorityGrouping>
}
 80019c6:	bf00      	nop
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b086      	sub	sp, #24
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	4603      	mov	r3, r0
 80019d6:	60b9      	str	r1, [r7, #8]
 80019d8:	607a      	str	r2, [r7, #4]
 80019da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019dc:	2300      	movs	r3, #0
 80019de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019e0:	f7ff ff3e 	bl	8001860 <__NVIC_GetPriorityGrouping>
 80019e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	68b9      	ldr	r1, [r7, #8]
 80019ea:	6978      	ldr	r0, [r7, #20]
 80019ec:	f7ff ff8e 	bl	800190c <NVIC_EncodePriority>
 80019f0:	4602      	mov	r2, r0
 80019f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019f6:	4611      	mov	r1, r2
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff ff5d 	bl	80018b8 <__NVIC_SetPriority>
}
 80019fe:	bf00      	nop
 8001a00:	3718      	adds	r7, #24
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b082      	sub	sp, #8
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff ff31 	bl	800187c <__NVIC_EnableIRQ>
}
 8001a1a:	bf00      	nop
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b082      	sub	sp, #8
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f7ff ffa2 	bl	8001974 <SysTick_Config>
 8001a30:	4603      	mov	r3, r0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
	...

08001a3c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b086      	sub	sp, #24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a44:	2300      	movs	r3, #0
 8001a46:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001a48:	f7ff faa4 	bl	8000f94 <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d101      	bne.n	8001a58 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e099      	b.n	8001b8c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2202      	movs	r2, #2
 8001a5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f022 0201 	bic.w	r2, r2, #1
 8001a76:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a78:	e00f      	b.n	8001a9a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a7a:	f7ff fa8b 	bl	8000f94 <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	2b05      	cmp	r3, #5
 8001a86:	d908      	bls.n	8001a9a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2220      	movs	r2, #32
 8001a8c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2203      	movs	r2, #3
 8001a92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e078      	b.n	8001b8c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0301 	and.w	r3, r3, #1
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d1e8      	bne.n	8001a7a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ab0:	697a      	ldr	r2, [r7, #20]
 8001ab2:	4b38      	ldr	r3, [pc, #224]	; (8001b94 <HAL_DMA_Init+0x158>)
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685a      	ldr	r2, [r3, #4]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ac6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	691b      	ldr	r3, [r3, #16]
 8001acc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ad2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ade:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6a1b      	ldr	r3, [r3, #32]
 8001ae4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ae6:	697a      	ldr	r2, [r7, #20]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af0:	2b04      	cmp	r3, #4
 8001af2:	d107      	bne.n	8001b04 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afc:	4313      	orrs	r3, r2
 8001afe:	697a      	ldr	r2, [r7, #20]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	697a      	ldr	r2, [r7, #20]
 8001b0a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	695b      	ldr	r3, [r3, #20]
 8001b12:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	f023 0307 	bic.w	r3, r3, #7
 8001b1a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b20:	697a      	ldr	r2, [r7, #20]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2a:	2b04      	cmp	r3, #4
 8001b2c:	d117      	bne.n	8001b5e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b32:	697a      	ldr	r2, [r7, #20]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d00e      	beq.n	8001b5e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f000 fa6f 	bl	8002024 <DMA_CheckFifoParam>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d008      	beq.n	8001b5e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2240      	movs	r2, #64	; 0x40
 8001b50:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2201      	movs	r2, #1
 8001b56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e016      	b.n	8001b8c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	697a      	ldr	r2, [r7, #20]
 8001b64:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f000 fa26 	bl	8001fb8 <DMA_CalcBaseAndBitshift>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b74:	223f      	movs	r2, #63	; 0x3f
 8001b76:	409a      	lsls	r2, r3
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2201      	movs	r2, #1
 8001b86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001b8a:	2300      	movs	r3, #0
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3718      	adds	r7, #24
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	f010803f 	.word	0xf010803f

08001b98 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b086      	sub	sp, #24
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]
 8001ba4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d101      	bne.n	8001bbe <HAL_DMA_Start_IT+0x26>
 8001bba:	2302      	movs	r3, #2
 8001bbc:	e040      	b.n	8001c40 <HAL_DMA_Start_IT+0xa8>
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d12f      	bne.n	8001c32 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2202      	movs	r2, #2
 8001bd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	68b9      	ldr	r1, [r7, #8]
 8001be6:	68f8      	ldr	r0, [r7, #12]
 8001be8:	f000 f9b8 	bl	8001f5c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bf0:	223f      	movs	r2, #63	; 0x3f
 8001bf2:	409a      	lsls	r2, r3
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f042 0216 	orr.w	r2, r2, #22
 8001c06:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d007      	beq.n	8001c20 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f042 0208 	orr.w	r2, r2, #8
 8001c1e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f042 0201 	orr.w	r2, r2, #1
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	e005      	b.n	8001c3e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2200      	movs	r2, #0
 8001c36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001c3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3718      	adds	r7, #24
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b086      	sub	sp, #24
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001c50:	2300      	movs	r3, #0
 8001c52:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001c54:	4b92      	ldr	r3, [pc, #584]	; (8001ea0 <HAL_DMA_IRQHandler+0x258>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a92      	ldr	r2, [pc, #584]	; (8001ea4 <HAL_DMA_IRQHandler+0x25c>)
 8001c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c5e:	0a9b      	lsrs	r3, r3, #10
 8001c60:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c66:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c72:	2208      	movs	r2, #8
 8001c74:	409a      	lsls	r2, r3
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d01a      	beq.n	8001cb4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0304 	and.w	r3, r3, #4
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d013      	beq.n	8001cb4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f022 0204 	bic.w	r2, r2, #4
 8001c9a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ca0:	2208      	movs	r2, #8
 8001ca2:	409a      	lsls	r2, r3
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cac:	f043 0201 	orr.w	r2, r3, #1
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cb8:	2201      	movs	r2, #1
 8001cba:	409a      	lsls	r2, r3
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d012      	beq.n	8001cea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	695b      	ldr	r3, [r3, #20]
 8001cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d00b      	beq.n	8001cea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	409a      	lsls	r2, r3
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ce2:	f043 0202 	orr.w	r2, r3, #2
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cee:	2204      	movs	r2, #4
 8001cf0:	409a      	lsls	r2, r3
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d012      	beq.n	8001d20 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0302 	and.w	r3, r3, #2
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d00b      	beq.n	8001d20 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d0c:	2204      	movs	r2, #4
 8001d0e:	409a      	lsls	r2, r3
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d18:	f043 0204 	orr.w	r2, r3, #4
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d24:	2210      	movs	r2, #16
 8001d26:	409a      	lsls	r2, r3
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d043      	beq.n	8001db8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0308 	and.w	r3, r3, #8
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d03c      	beq.n	8001db8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d42:	2210      	movs	r2, #16
 8001d44:	409a      	lsls	r2, r3
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d018      	beq.n	8001d8a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d108      	bne.n	8001d78 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d024      	beq.n	8001db8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	4798      	blx	r3
 8001d76:	e01f      	b.n	8001db8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d01b      	beq.n	8001db8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	4798      	blx	r3
 8001d88:	e016      	b.n	8001db8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d107      	bne.n	8001da8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f022 0208 	bic.w	r2, r2, #8
 8001da6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d003      	beq.n	8001db8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dbc:	2220      	movs	r2, #32
 8001dbe:	409a      	lsls	r2, r3
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	f000 808e 	beq.w	8001ee6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0310 	and.w	r3, r3, #16
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	f000 8086 	beq.w	8001ee6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dde:	2220      	movs	r2, #32
 8001de0:	409a      	lsls	r2, r3
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b05      	cmp	r3, #5
 8001df0:	d136      	bne.n	8001e60 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f022 0216 	bic.w	r2, r2, #22
 8001e00:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	695a      	ldr	r2, [r3, #20]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e10:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d103      	bne.n	8001e22 <HAL_DMA_IRQHandler+0x1da>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d007      	beq.n	8001e32 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f022 0208 	bic.w	r2, r2, #8
 8001e30:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e36:	223f      	movs	r2, #63	; 0x3f
 8001e38:	409a      	lsls	r2, r3
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2201      	movs	r2, #1
 8001e42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d07d      	beq.n	8001f52 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	4798      	blx	r3
        }
        return;
 8001e5e:	e078      	b.n	8001f52 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d01c      	beq.n	8001ea8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d108      	bne.n	8001e8e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d030      	beq.n	8001ee6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	4798      	blx	r3
 8001e8c:	e02b      	b.n	8001ee6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d027      	beq.n	8001ee6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	4798      	blx	r3
 8001e9e:	e022      	b.n	8001ee6 <HAL_DMA_IRQHandler+0x29e>
 8001ea0:	20000000 	.word	0x20000000
 8001ea4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d10f      	bne.n	8001ed6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f022 0210 	bic.w	r2, r2, #16
 8001ec4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2201      	movs	r2, #1
 8001eca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d003      	beq.n	8001ee6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d032      	beq.n	8001f54 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d022      	beq.n	8001f40 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2205      	movs	r2, #5
 8001efe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f022 0201 	bic.w	r2, r2, #1
 8001f10:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	3301      	adds	r3, #1
 8001f16:	60bb      	str	r3, [r7, #8]
 8001f18:	697a      	ldr	r2, [r7, #20]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d307      	bcc.n	8001f2e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0301 	and.w	r3, r3, #1
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d1f2      	bne.n	8001f12 <HAL_DMA_IRQHandler+0x2ca>
 8001f2c:	e000      	b.n	8001f30 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001f2e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d005      	beq.n	8001f54 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	4798      	blx	r3
 8001f50:	e000      	b.n	8001f54 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001f52:	bf00      	nop
    }
  }
}
 8001f54:	3718      	adds	r7, #24
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop

08001f5c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b085      	sub	sp, #20
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	60b9      	str	r1, [r7, #8]
 8001f66:	607a      	str	r2, [r7, #4]
 8001f68:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f78:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	683a      	ldr	r2, [r7, #0]
 8001f80:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	2b40      	cmp	r3, #64	; 0x40
 8001f88:	d108      	bne.n	8001f9c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	68ba      	ldr	r2, [r7, #8]
 8001f98:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001f9a:	e007      	b.n	8001fac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	68ba      	ldr	r2, [r7, #8]
 8001fa2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	60da      	str	r2, [r3, #12]
}
 8001fac:	bf00      	nop
 8001fae:	3714      	adds	r7, #20
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	3b10      	subs	r3, #16
 8001fc8:	4a14      	ldr	r2, [pc, #80]	; (800201c <DMA_CalcBaseAndBitshift+0x64>)
 8001fca:	fba2 2303 	umull	r2, r3, r2, r3
 8001fce:	091b      	lsrs	r3, r3, #4
 8001fd0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001fd2:	4a13      	ldr	r2, [pc, #76]	; (8002020 <DMA_CalcBaseAndBitshift+0x68>)
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	461a      	mov	r2, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2b03      	cmp	r3, #3
 8001fe4:	d909      	bls.n	8001ffa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001fee:	f023 0303 	bic.w	r3, r3, #3
 8001ff2:	1d1a      	adds	r2, r3, #4
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	659a      	str	r2, [r3, #88]	; 0x58
 8001ff8:	e007      	b.n	800200a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002002:	f023 0303 	bic.w	r3, r3, #3
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800200e:	4618      	mov	r0, r3
 8002010:	3714      	adds	r7, #20
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	aaaaaaab 	.word	0xaaaaaaab
 8002020:	08008d30 	.word	0x08008d30

08002024 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002024:	b480      	push	{r7}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800202c:	2300      	movs	r3, #0
 800202e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002034:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	699b      	ldr	r3, [r3, #24]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d11f      	bne.n	800207e <DMA_CheckFifoParam+0x5a>
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	2b03      	cmp	r3, #3
 8002042:	d856      	bhi.n	80020f2 <DMA_CheckFifoParam+0xce>
 8002044:	a201      	add	r2, pc, #4	; (adr r2, 800204c <DMA_CheckFifoParam+0x28>)
 8002046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800204a:	bf00      	nop
 800204c:	0800205d 	.word	0x0800205d
 8002050:	0800206f 	.word	0x0800206f
 8002054:	0800205d 	.word	0x0800205d
 8002058:	080020f3 	.word	0x080020f3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002060:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d046      	beq.n	80020f6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800206c:	e043      	b.n	80020f6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002072:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002076:	d140      	bne.n	80020fa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800207c:	e03d      	b.n	80020fa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	699b      	ldr	r3, [r3, #24]
 8002082:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002086:	d121      	bne.n	80020cc <DMA_CheckFifoParam+0xa8>
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	2b03      	cmp	r3, #3
 800208c:	d837      	bhi.n	80020fe <DMA_CheckFifoParam+0xda>
 800208e:	a201      	add	r2, pc, #4	; (adr r2, 8002094 <DMA_CheckFifoParam+0x70>)
 8002090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002094:	080020a5 	.word	0x080020a5
 8002098:	080020ab 	.word	0x080020ab
 800209c:	080020a5 	.word	0x080020a5
 80020a0:	080020bd 	.word	0x080020bd
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	73fb      	strb	r3, [r7, #15]
      break;
 80020a8:	e030      	b.n	800210c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d025      	beq.n	8002102 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020ba:	e022      	b.n	8002102 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80020c4:	d11f      	bne.n	8002106 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80020ca:	e01c      	b.n	8002106 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d903      	bls.n	80020da <DMA_CheckFifoParam+0xb6>
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	2b03      	cmp	r3, #3
 80020d6:	d003      	beq.n	80020e0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80020d8:	e018      	b.n	800210c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	73fb      	strb	r3, [r7, #15]
      break;
 80020de:	e015      	b.n	800210c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d00e      	beq.n	800210a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	73fb      	strb	r3, [r7, #15]
      break;
 80020f0:	e00b      	b.n	800210a <DMA_CheckFifoParam+0xe6>
      break;
 80020f2:	bf00      	nop
 80020f4:	e00a      	b.n	800210c <DMA_CheckFifoParam+0xe8>
      break;
 80020f6:	bf00      	nop
 80020f8:	e008      	b.n	800210c <DMA_CheckFifoParam+0xe8>
      break;
 80020fa:	bf00      	nop
 80020fc:	e006      	b.n	800210c <DMA_CheckFifoParam+0xe8>
      break;
 80020fe:	bf00      	nop
 8002100:	e004      	b.n	800210c <DMA_CheckFifoParam+0xe8>
      break;
 8002102:	bf00      	nop
 8002104:	e002      	b.n	800210c <DMA_CheckFifoParam+0xe8>
      break;   
 8002106:	bf00      	nop
 8002108:	e000      	b.n	800210c <DMA_CheckFifoParam+0xe8>
      break;
 800210a:	bf00      	nop
    }
  } 
  
  return status; 
 800210c:	7bfb      	ldrb	r3, [r7, #15]
}
 800210e:	4618      	mov	r0, r3
 8002110:	3714      	adds	r7, #20
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop

0800211c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800211c:	b480      	push	{r7}
 800211e:	b089      	sub	sp, #36	; 0x24
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002126:	2300      	movs	r3, #0
 8002128:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800212a:	2300      	movs	r3, #0
 800212c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800212e:	2300      	movs	r3, #0
 8002130:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002132:	2300      	movs	r3, #0
 8002134:	61fb      	str	r3, [r7, #28]
 8002136:	e16b      	b.n	8002410 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002138:	2201      	movs	r2, #1
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	697a      	ldr	r2, [r7, #20]
 8002148:	4013      	ands	r3, r2
 800214a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800214c:	693a      	ldr	r2, [r7, #16]
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	429a      	cmp	r2, r3
 8002152:	f040 815a 	bne.w	800240a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f003 0303 	and.w	r3, r3, #3
 800215e:	2b01      	cmp	r3, #1
 8002160:	d005      	beq.n	800216e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800216a:	2b02      	cmp	r3, #2
 800216c:	d130      	bne.n	80021d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	2203      	movs	r2, #3
 800217a:	fa02 f303 	lsl.w	r3, r2, r3
 800217e:	43db      	mvns	r3, r3
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	4013      	ands	r3, r2
 8002184:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	68da      	ldr	r2, [r3, #12]
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	fa02 f303 	lsl.w	r3, r2, r3
 8002192:	69ba      	ldr	r2, [r7, #24]
 8002194:	4313      	orrs	r3, r2
 8002196:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021a4:	2201      	movs	r2, #1
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	43db      	mvns	r3, r3
 80021ae:	69ba      	ldr	r2, [r7, #24]
 80021b0:	4013      	ands	r3, r2
 80021b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	091b      	lsrs	r3, r3, #4
 80021ba:	f003 0201 	and.w	r2, r3, #1
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f003 0303 	and.w	r3, r3, #3
 80021d8:	2b03      	cmp	r3, #3
 80021da:	d017      	beq.n	800220c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	005b      	lsls	r3, r3, #1
 80021e6:	2203      	movs	r2, #3
 80021e8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ec:	43db      	mvns	r3, r3
 80021ee:	69ba      	ldr	r2, [r7, #24]
 80021f0:	4013      	ands	r3, r2
 80021f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	689a      	ldr	r2, [r3, #8]
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	4313      	orrs	r3, r2
 8002204:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f003 0303 	and.w	r3, r3, #3
 8002214:	2b02      	cmp	r3, #2
 8002216:	d123      	bne.n	8002260 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	08da      	lsrs	r2, r3, #3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	3208      	adds	r2, #8
 8002220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002224:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	f003 0307 	and.w	r3, r3, #7
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	220f      	movs	r2, #15
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	43db      	mvns	r3, r3
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	4013      	ands	r3, r2
 800223a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	691a      	ldr	r2, [r3, #16]
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	f003 0307 	and.w	r3, r3, #7
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	fa02 f303 	lsl.w	r3, r2, r3
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	4313      	orrs	r3, r2
 8002250:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	08da      	lsrs	r2, r3, #3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	3208      	adds	r2, #8
 800225a:	69b9      	ldr	r1, [r7, #24]
 800225c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	2203      	movs	r2, #3
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	43db      	mvns	r3, r3
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	4013      	ands	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f003 0203 	and.w	r2, r3, #3
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	fa02 f303 	lsl.w	r3, r2, r3
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	4313      	orrs	r3, r2
 800228c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800229c:	2b00      	cmp	r3, #0
 800229e:	f000 80b4 	beq.w	800240a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022a2:	2300      	movs	r3, #0
 80022a4:	60fb      	str	r3, [r7, #12]
 80022a6:	4b60      	ldr	r3, [pc, #384]	; (8002428 <HAL_GPIO_Init+0x30c>)
 80022a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022aa:	4a5f      	ldr	r2, [pc, #380]	; (8002428 <HAL_GPIO_Init+0x30c>)
 80022ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022b0:	6453      	str	r3, [r2, #68]	; 0x44
 80022b2:	4b5d      	ldr	r3, [pc, #372]	; (8002428 <HAL_GPIO_Init+0x30c>)
 80022b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022ba:	60fb      	str	r3, [r7, #12]
 80022bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022be:	4a5b      	ldr	r2, [pc, #364]	; (800242c <HAL_GPIO_Init+0x310>)
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	089b      	lsrs	r3, r3, #2
 80022c4:	3302      	adds	r3, #2
 80022c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	f003 0303 	and.w	r3, r3, #3
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	220f      	movs	r2, #15
 80022d6:	fa02 f303 	lsl.w	r3, r2, r3
 80022da:	43db      	mvns	r3, r3
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	4013      	ands	r3, r2
 80022e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a52      	ldr	r2, [pc, #328]	; (8002430 <HAL_GPIO_Init+0x314>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d02b      	beq.n	8002342 <HAL_GPIO_Init+0x226>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a51      	ldr	r2, [pc, #324]	; (8002434 <HAL_GPIO_Init+0x318>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d025      	beq.n	800233e <HAL_GPIO_Init+0x222>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a50      	ldr	r2, [pc, #320]	; (8002438 <HAL_GPIO_Init+0x31c>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d01f      	beq.n	800233a <HAL_GPIO_Init+0x21e>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a4f      	ldr	r2, [pc, #316]	; (800243c <HAL_GPIO_Init+0x320>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d019      	beq.n	8002336 <HAL_GPIO_Init+0x21a>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a4e      	ldr	r2, [pc, #312]	; (8002440 <HAL_GPIO_Init+0x324>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d013      	beq.n	8002332 <HAL_GPIO_Init+0x216>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a4d      	ldr	r2, [pc, #308]	; (8002444 <HAL_GPIO_Init+0x328>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d00d      	beq.n	800232e <HAL_GPIO_Init+0x212>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a4c      	ldr	r2, [pc, #304]	; (8002448 <HAL_GPIO_Init+0x32c>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d007      	beq.n	800232a <HAL_GPIO_Init+0x20e>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a4b      	ldr	r2, [pc, #300]	; (800244c <HAL_GPIO_Init+0x330>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d101      	bne.n	8002326 <HAL_GPIO_Init+0x20a>
 8002322:	2307      	movs	r3, #7
 8002324:	e00e      	b.n	8002344 <HAL_GPIO_Init+0x228>
 8002326:	2308      	movs	r3, #8
 8002328:	e00c      	b.n	8002344 <HAL_GPIO_Init+0x228>
 800232a:	2306      	movs	r3, #6
 800232c:	e00a      	b.n	8002344 <HAL_GPIO_Init+0x228>
 800232e:	2305      	movs	r3, #5
 8002330:	e008      	b.n	8002344 <HAL_GPIO_Init+0x228>
 8002332:	2304      	movs	r3, #4
 8002334:	e006      	b.n	8002344 <HAL_GPIO_Init+0x228>
 8002336:	2303      	movs	r3, #3
 8002338:	e004      	b.n	8002344 <HAL_GPIO_Init+0x228>
 800233a:	2302      	movs	r3, #2
 800233c:	e002      	b.n	8002344 <HAL_GPIO_Init+0x228>
 800233e:	2301      	movs	r3, #1
 8002340:	e000      	b.n	8002344 <HAL_GPIO_Init+0x228>
 8002342:	2300      	movs	r3, #0
 8002344:	69fa      	ldr	r2, [r7, #28]
 8002346:	f002 0203 	and.w	r2, r2, #3
 800234a:	0092      	lsls	r2, r2, #2
 800234c:	4093      	lsls	r3, r2
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	4313      	orrs	r3, r2
 8002352:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002354:	4935      	ldr	r1, [pc, #212]	; (800242c <HAL_GPIO_Init+0x310>)
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	089b      	lsrs	r3, r3, #2
 800235a:	3302      	adds	r3, #2
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002362:	4b3b      	ldr	r3, [pc, #236]	; (8002450 <HAL_GPIO_Init+0x334>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	43db      	mvns	r3, r3
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	4013      	ands	r3, r2
 8002370:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d003      	beq.n	8002386 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	4313      	orrs	r3, r2
 8002384:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002386:	4a32      	ldr	r2, [pc, #200]	; (8002450 <HAL_GPIO_Init+0x334>)
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800238c:	4b30      	ldr	r3, [pc, #192]	; (8002450 <HAL_GPIO_Init+0x334>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	43db      	mvns	r3, r3
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	4013      	ands	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d003      	beq.n	80023b0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023b0:	4a27      	ldr	r2, [pc, #156]	; (8002450 <HAL_GPIO_Init+0x334>)
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023b6:	4b26      	ldr	r3, [pc, #152]	; (8002450 <HAL_GPIO_Init+0x334>)
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	43db      	mvns	r3, r3
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	4013      	ands	r3, r2
 80023c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d003      	beq.n	80023da <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023da:	4a1d      	ldr	r2, [pc, #116]	; (8002450 <HAL_GPIO_Init+0x334>)
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023e0:	4b1b      	ldr	r3, [pc, #108]	; (8002450 <HAL_GPIO_Init+0x334>)
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	43db      	mvns	r3, r3
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	4013      	ands	r3, r2
 80023ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d003      	beq.n	8002404 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	4313      	orrs	r3, r2
 8002402:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002404:	4a12      	ldr	r2, [pc, #72]	; (8002450 <HAL_GPIO_Init+0x334>)
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	3301      	adds	r3, #1
 800240e:	61fb      	str	r3, [r7, #28]
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	2b0f      	cmp	r3, #15
 8002414:	f67f ae90 	bls.w	8002138 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002418:	bf00      	nop
 800241a:	bf00      	nop
 800241c:	3724      	adds	r7, #36	; 0x24
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	40023800 	.word	0x40023800
 800242c:	40013800 	.word	0x40013800
 8002430:	40020000 	.word	0x40020000
 8002434:	40020400 	.word	0x40020400
 8002438:	40020800 	.word	0x40020800
 800243c:	40020c00 	.word	0x40020c00
 8002440:	40021000 	.word	0x40021000
 8002444:	40021400 	.word	0x40021400
 8002448:	40021800 	.word	0x40021800
 800244c:	40021c00 	.word	0x40021c00
 8002450:	40013c00 	.word	0x40013c00

08002454 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	460b      	mov	r3, r1
 800245e:	807b      	strh	r3, [r7, #2]
 8002460:	4613      	mov	r3, r2
 8002462:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002464:	787b      	ldrb	r3, [r7, #1]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d003      	beq.n	8002472 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800246a:	887a      	ldrh	r2, [r7, #2]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002470:	e003      	b.n	800247a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002472:	887b      	ldrh	r3, [r7, #2]
 8002474:	041a      	lsls	r2, r3, #16
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	619a      	str	r2, [r3, #24]
}
 800247a:	bf00      	nop
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr

08002486 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002486:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002488:	b08f      	sub	sp, #60	; 0x3c
 800248a:	af0a      	add	r7, sp, #40	; 0x28
 800248c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d101      	bne.n	8002498 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e054      	b.n	8002542 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d106      	bne.n	80024b8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f006 f86e 	bl	8008594 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2203      	movs	r2, #3
 80024bc:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d102      	bne.n	80024d2 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f003 f9c5 	bl	8005866 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	603b      	str	r3, [r7, #0]
 80024e2:	687e      	ldr	r6, [r7, #4]
 80024e4:	466d      	mov	r5, sp
 80024e6:	f106 0410 	add.w	r4, r6, #16
 80024ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024f2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80024f6:	e885 0003 	stmia.w	r5, {r0, r1}
 80024fa:	1d33      	adds	r3, r6, #4
 80024fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024fe:	6838      	ldr	r0, [r7, #0]
 8002500:	f003 f93f 	bl	8005782 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2101      	movs	r1, #1
 800250a:	4618      	mov	r0, r3
 800250c:	f003 f9bc 	bl	8005888 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	603b      	str	r3, [r7, #0]
 8002516:	687e      	ldr	r6, [r7, #4]
 8002518:	466d      	mov	r5, sp
 800251a:	f106 0410 	add.w	r4, r6, #16
 800251e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002520:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002522:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002524:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002526:	e894 0003 	ldmia.w	r4, {r0, r1}
 800252a:	e885 0003 	stmia.w	r5, {r0, r1}
 800252e:	1d33      	adds	r3, r6, #4
 8002530:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002532:	6838      	ldr	r0, [r7, #0]
 8002534:	f003 fb22 	bl	8005b7c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3714      	adds	r7, #20
 8002546:	46bd      	mov	sp, r7
 8002548:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800254a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800254a:	b590      	push	{r4, r7, lr}
 800254c:	b089      	sub	sp, #36	; 0x24
 800254e:	af04      	add	r7, sp, #16
 8002550:	6078      	str	r0, [r7, #4]
 8002552:	4608      	mov	r0, r1
 8002554:	4611      	mov	r1, r2
 8002556:	461a      	mov	r2, r3
 8002558:	4603      	mov	r3, r0
 800255a:	70fb      	strb	r3, [r7, #3]
 800255c:	460b      	mov	r3, r1
 800255e:	70bb      	strb	r3, [r7, #2]
 8002560:	4613      	mov	r3, r2
 8002562:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800256a:	2b01      	cmp	r3, #1
 800256c:	d101      	bne.n	8002572 <HAL_HCD_HC_Init+0x28>
 800256e:	2302      	movs	r3, #2
 8002570:	e076      	b.n	8002660 <HAL_HCD_HC_Init+0x116>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2201      	movs	r2, #1
 8002576:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800257a:	78fb      	ldrb	r3, [r7, #3]
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	212c      	movs	r1, #44	; 0x2c
 8002580:	fb01 f303 	mul.w	r3, r1, r3
 8002584:	4413      	add	r3, r2
 8002586:	333d      	adds	r3, #61	; 0x3d
 8002588:	2200      	movs	r2, #0
 800258a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800258c:	78fb      	ldrb	r3, [r7, #3]
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	212c      	movs	r1, #44	; 0x2c
 8002592:	fb01 f303 	mul.w	r3, r1, r3
 8002596:	4413      	add	r3, r2
 8002598:	3338      	adds	r3, #56	; 0x38
 800259a:	787a      	ldrb	r2, [r7, #1]
 800259c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800259e:	78fb      	ldrb	r3, [r7, #3]
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	212c      	movs	r1, #44	; 0x2c
 80025a4:	fb01 f303 	mul.w	r3, r1, r3
 80025a8:	4413      	add	r3, r2
 80025aa:	3340      	adds	r3, #64	; 0x40
 80025ac:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80025ae:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80025b0:	78fb      	ldrb	r3, [r7, #3]
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	212c      	movs	r1, #44	; 0x2c
 80025b6:	fb01 f303 	mul.w	r3, r1, r3
 80025ba:	4413      	add	r3, r2
 80025bc:	3339      	adds	r3, #57	; 0x39
 80025be:	78fa      	ldrb	r2, [r7, #3]
 80025c0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80025c2:	78fb      	ldrb	r3, [r7, #3]
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	212c      	movs	r1, #44	; 0x2c
 80025c8:	fb01 f303 	mul.w	r3, r1, r3
 80025cc:	4413      	add	r3, r2
 80025ce:	333f      	adds	r3, #63	; 0x3f
 80025d0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80025d4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80025d6:	78fb      	ldrb	r3, [r7, #3]
 80025d8:	78ba      	ldrb	r2, [r7, #2]
 80025da:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80025de:	b2d0      	uxtb	r0, r2
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	212c      	movs	r1, #44	; 0x2c
 80025e4:	fb01 f303 	mul.w	r3, r1, r3
 80025e8:	4413      	add	r3, r2
 80025ea:	333a      	adds	r3, #58	; 0x3a
 80025ec:	4602      	mov	r2, r0
 80025ee:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80025f0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	da09      	bge.n	800260c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80025f8:	78fb      	ldrb	r3, [r7, #3]
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	212c      	movs	r1, #44	; 0x2c
 80025fe:	fb01 f303 	mul.w	r3, r1, r3
 8002602:	4413      	add	r3, r2
 8002604:	333b      	adds	r3, #59	; 0x3b
 8002606:	2201      	movs	r2, #1
 8002608:	701a      	strb	r2, [r3, #0]
 800260a:	e008      	b.n	800261e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800260c:	78fb      	ldrb	r3, [r7, #3]
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	212c      	movs	r1, #44	; 0x2c
 8002612:	fb01 f303 	mul.w	r3, r1, r3
 8002616:	4413      	add	r3, r2
 8002618:	333b      	adds	r3, #59	; 0x3b
 800261a:	2200      	movs	r2, #0
 800261c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800261e:	78fb      	ldrb	r3, [r7, #3]
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	212c      	movs	r1, #44	; 0x2c
 8002624:	fb01 f303 	mul.w	r3, r1, r3
 8002628:	4413      	add	r3, r2
 800262a:	333c      	adds	r3, #60	; 0x3c
 800262c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002630:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6818      	ldr	r0, [r3, #0]
 8002636:	787c      	ldrb	r4, [r7, #1]
 8002638:	78ba      	ldrb	r2, [r7, #2]
 800263a:	78f9      	ldrb	r1, [r7, #3]
 800263c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800263e:	9302      	str	r3, [sp, #8]
 8002640:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002644:	9301      	str	r3, [sp, #4]
 8002646:	f897 3020 	ldrb.w	r3, [r7, #32]
 800264a:	9300      	str	r3, [sp, #0]
 800264c:	4623      	mov	r3, r4
 800264e:	f003 fc0f 	bl	8005e70 <USB_HC_Init>
 8002652:	4603      	mov	r3, r0
 8002654:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800265e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002660:	4618      	mov	r0, r3
 8002662:	3714      	adds	r7, #20
 8002664:	46bd      	mov	sp, r7
 8002666:	bd90      	pop	{r4, r7, pc}

08002668 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	460b      	mov	r3, r1
 8002672:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002674:	2300      	movs	r3, #0
 8002676:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800267e:	2b01      	cmp	r3, #1
 8002680:	d101      	bne.n	8002686 <HAL_HCD_HC_Halt+0x1e>
 8002682:	2302      	movs	r3, #2
 8002684:	e00f      	b.n	80026a6 <HAL_HCD_HC_Halt+0x3e>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2201      	movs	r2, #1
 800268a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	78fa      	ldrb	r2, [r7, #3]
 8002694:	4611      	mov	r1, r2
 8002696:	4618      	mov	r0, r3
 8002698:	f003 fe4b 	bl	8006332 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80026a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3710      	adds	r7, #16
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
	...

080026b0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	4608      	mov	r0, r1
 80026ba:	4611      	mov	r1, r2
 80026bc:	461a      	mov	r2, r3
 80026be:	4603      	mov	r3, r0
 80026c0:	70fb      	strb	r3, [r7, #3]
 80026c2:	460b      	mov	r3, r1
 80026c4:	70bb      	strb	r3, [r7, #2]
 80026c6:	4613      	mov	r3, r2
 80026c8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80026ca:	78fb      	ldrb	r3, [r7, #3]
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	212c      	movs	r1, #44	; 0x2c
 80026d0:	fb01 f303 	mul.w	r3, r1, r3
 80026d4:	4413      	add	r3, r2
 80026d6:	333b      	adds	r3, #59	; 0x3b
 80026d8:	78ba      	ldrb	r2, [r7, #2]
 80026da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80026dc:	78fb      	ldrb	r3, [r7, #3]
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	212c      	movs	r1, #44	; 0x2c
 80026e2:	fb01 f303 	mul.w	r3, r1, r3
 80026e6:	4413      	add	r3, r2
 80026e8:	333f      	adds	r3, #63	; 0x3f
 80026ea:	787a      	ldrb	r2, [r7, #1]
 80026ec:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80026ee:	7c3b      	ldrb	r3, [r7, #16]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d112      	bne.n	800271a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80026f4:	78fb      	ldrb	r3, [r7, #3]
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	212c      	movs	r1, #44	; 0x2c
 80026fa:	fb01 f303 	mul.w	r3, r1, r3
 80026fe:	4413      	add	r3, r2
 8002700:	3342      	adds	r3, #66	; 0x42
 8002702:	2203      	movs	r2, #3
 8002704:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002706:	78fb      	ldrb	r3, [r7, #3]
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	212c      	movs	r1, #44	; 0x2c
 800270c:	fb01 f303 	mul.w	r3, r1, r3
 8002710:	4413      	add	r3, r2
 8002712:	333d      	adds	r3, #61	; 0x3d
 8002714:	7f3a      	ldrb	r2, [r7, #28]
 8002716:	701a      	strb	r2, [r3, #0]
 8002718:	e008      	b.n	800272c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800271a:	78fb      	ldrb	r3, [r7, #3]
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	212c      	movs	r1, #44	; 0x2c
 8002720:	fb01 f303 	mul.w	r3, r1, r3
 8002724:	4413      	add	r3, r2
 8002726:	3342      	adds	r3, #66	; 0x42
 8002728:	2202      	movs	r2, #2
 800272a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800272c:	787b      	ldrb	r3, [r7, #1]
 800272e:	2b03      	cmp	r3, #3
 8002730:	f200 80c6 	bhi.w	80028c0 <HAL_HCD_HC_SubmitRequest+0x210>
 8002734:	a201      	add	r2, pc, #4	; (adr r2, 800273c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800273a:	bf00      	nop
 800273c:	0800274d 	.word	0x0800274d
 8002740:	080028ad 	.word	0x080028ad
 8002744:	080027b1 	.word	0x080027b1
 8002748:	0800282f 	.word	0x0800282f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800274c:	7c3b      	ldrb	r3, [r7, #16]
 800274e:	2b01      	cmp	r3, #1
 8002750:	f040 80b8 	bne.w	80028c4 <HAL_HCD_HC_SubmitRequest+0x214>
 8002754:	78bb      	ldrb	r3, [r7, #2]
 8002756:	2b00      	cmp	r3, #0
 8002758:	f040 80b4 	bne.w	80028c4 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 800275c:	8b3b      	ldrh	r3, [r7, #24]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d108      	bne.n	8002774 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002762:	78fb      	ldrb	r3, [r7, #3]
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	212c      	movs	r1, #44	; 0x2c
 8002768:	fb01 f303 	mul.w	r3, r1, r3
 800276c:	4413      	add	r3, r2
 800276e:	3355      	adds	r3, #85	; 0x55
 8002770:	2201      	movs	r2, #1
 8002772:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002774:	78fb      	ldrb	r3, [r7, #3]
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	212c      	movs	r1, #44	; 0x2c
 800277a:	fb01 f303 	mul.w	r3, r1, r3
 800277e:	4413      	add	r3, r2
 8002780:	3355      	adds	r3, #85	; 0x55
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d109      	bne.n	800279c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002788:	78fb      	ldrb	r3, [r7, #3]
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	212c      	movs	r1, #44	; 0x2c
 800278e:	fb01 f303 	mul.w	r3, r1, r3
 8002792:	4413      	add	r3, r2
 8002794:	3342      	adds	r3, #66	; 0x42
 8002796:	2200      	movs	r2, #0
 8002798:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800279a:	e093      	b.n	80028c4 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800279c:	78fb      	ldrb	r3, [r7, #3]
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	212c      	movs	r1, #44	; 0x2c
 80027a2:	fb01 f303 	mul.w	r3, r1, r3
 80027a6:	4413      	add	r3, r2
 80027a8:	3342      	adds	r3, #66	; 0x42
 80027aa:	2202      	movs	r2, #2
 80027ac:	701a      	strb	r2, [r3, #0]
      break;
 80027ae:	e089      	b.n	80028c4 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80027b0:	78bb      	ldrb	r3, [r7, #2]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d11d      	bne.n	80027f2 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80027b6:	78fb      	ldrb	r3, [r7, #3]
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	212c      	movs	r1, #44	; 0x2c
 80027bc:	fb01 f303 	mul.w	r3, r1, r3
 80027c0:	4413      	add	r3, r2
 80027c2:	3355      	adds	r3, #85	; 0x55
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d109      	bne.n	80027de <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80027ca:	78fb      	ldrb	r3, [r7, #3]
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	212c      	movs	r1, #44	; 0x2c
 80027d0:	fb01 f303 	mul.w	r3, r1, r3
 80027d4:	4413      	add	r3, r2
 80027d6:	3342      	adds	r3, #66	; 0x42
 80027d8:	2200      	movs	r2, #0
 80027da:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80027dc:	e073      	b.n	80028c6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80027de:	78fb      	ldrb	r3, [r7, #3]
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	212c      	movs	r1, #44	; 0x2c
 80027e4:	fb01 f303 	mul.w	r3, r1, r3
 80027e8:	4413      	add	r3, r2
 80027ea:	3342      	adds	r3, #66	; 0x42
 80027ec:	2202      	movs	r2, #2
 80027ee:	701a      	strb	r2, [r3, #0]
      break;
 80027f0:	e069      	b.n	80028c6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80027f2:	78fb      	ldrb	r3, [r7, #3]
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	212c      	movs	r1, #44	; 0x2c
 80027f8:	fb01 f303 	mul.w	r3, r1, r3
 80027fc:	4413      	add	r3, r2
 80027fe:	3354      	adds	r3, #84	; 0x54
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d109      	bne.n	800281a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002806:	78fb      	ldrb	r3, [r7, #3]
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	212c      	movs	r1, #44	; 0x2c
 800280c:	fb01 f303 	mul.w	r3, r1, r3
 8002810:	4413      	add	r3, r2
 8002812:	3342      	adds	r3, #66	; 0x42
 8002814:	2200      	movs	r2, #0
 8002816:	701a      	strb	r2, [r3, #0]
      break;
 8002818:	e055      	b.n	80028c6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800281a:	78fb      	ldrb	r3, [r7, #3]
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	212c      	movs	r1, #44	; 0x2c
 8002820:	fb01 f303 	mul.w	r3, r1, r3
 8002824:	4413      	add	r3, r2
 8002826:	3342      	adds	r3, #66	; 0x42
 8002828:	2202      	movs	r2, #2
 800282a:	701a      	strb	r2, [r3, #0]
      break;
 800282c:	e04b      	b.n	80028c6 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800282e:	78bb      	ldrb	r3, [r7, #2]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d11d      	bne.n	8002870 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002834:	78fb      	ldrb	r3, [r7, #3]
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	212c      	movs	r1, #44	; 0x2c
 800283a:	fb01 f303 	mul.w	r3, r1, r3
 800283e:	4413      	add	r3, r2
 8002840:	3355      	adds	r3, #85	; 0x55
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d109      	bne.n	800285c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002848:	78fb      	ldrb	r3, [r7, #3]
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	212c      	movs	r1, #44	; 0x2c
 800284e:	fb01 f303 	mul.w	r3, r1, r3
 8002852:	4413      	add	r3, r2
 8002854:	3342      	adds	r3, #66	; 0x42
 8002856:	2200      	movs	r2, #0
 8002858:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800285a:	e034      	b.n	80028c6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800285c:	78fb      	ldrb	r3, [r7, #3]
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	212c      	movs	r1, #44	; 0x2c
 8002862:	fb01 f303 	mul.w	r3, r1, r3
 8002866:	4413      	add	r3, r2
 8002868:	3342      	adds	r3, #66	; 0x42
 800286a:	2202      	movs	r2, #2
 800286c:	701a      	strb	r2, [r3, #0]
      break;
 800286e:	e02a      	b.n	80028c6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002870:	78fb      	ldrb	r3, [r7, #3]
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	212c      	movs	r1, #44	; 0x2c
 8002876:	fb01 f303 	mul.w	r3, r1, r3
 800287a:	4413      	add	r3, r2
 800287c:	3354      	adds	r3, #84	; 0x54
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d109      	bne.n	8002898 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002884:	78fb      	ldrb	r3, [r7, #3]
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	212c      	movs	r1, #44	; 0x2c
 800288a:	fb01 f303 	mul.w	r3, r1, r3
 800288e:	4413      	add	r3, r2
 8002890:	3342      	adds	r3, #66	; 0x42
 8002892:	2200      	movs	r2, #0
 8002894:	701a      	strb	r2, [r3, #0]
      break;
 8002896:	e016      	b.n	80028c6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002898:	78fb      	ldrb	r3, [r7, #3]
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	212c      	movs	r1, #44	; 0x2c
 800289e:	fb01 f303 	mul.w	r3, r1, r3
 80028a2:	4413      	add	r3, r2
 80028a4:	3342      	adds	r3, #66	; 0x42
 80028a6:	2202      	movs	r2, #2
 80028a8:	701a      	strb	r2, [r3, #0]
      break;
 80028aa:	e00c      	b.n	80028c6 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80028ac:	78fb      	ldrb	r3, [r7, #3]
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	212c      	movs	r1, #44	; 0x2c
 80028b2:	fb01 f303 	mul.w	r3, r1, r3
 80028b6:	4413      	add	r3, r2
 80028b8:	3342      	adds	r3, #66	; 0x42
 80028ba:	2200      	movs	r2, #0
 80028bc:	701a      	strb	r2, [r3, #0]
      break;
 80028be:	e002      	b.n	80028c6 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80028c0:	bf00      	nop
 80028c2:	e000      	b.n	80028c6 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80028c4:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80028c6:	78fb      	ldrb	r3, [r7, #3]
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	212c      	movs	r1, #44	; 0x2c
 80028cc:	fb01 f303 	mul.w	r3, r1, r3
 80028d0:	4413      	add	r3, r2
 80028d2:	3344      	adds	r3, #68	; 0x44
 80028d4:	697a      	ldr	r2, [r7, #20]
 80028d6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80028d8:	78fb      	ldrb	r3, [r7, #3]
 80028da:	8b3a      	ldrh	r2, [r7, #24]
 80028dc:	6879      	ldr	r1, [r7, #4]
 80028de:	202c      	movs	r0, #44	; 0x2c
 80028e0:	fb00 f303 	mul.w	r3, r0, r3
 80028e4:	440b      	add	r3, r1
 80028e6:	334c      	adds	r3, #76	; 0x4c
 80028e8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80028ea:	78fb      	ldrb	r3, [r7, #3]
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	212c      	movs	r1, #44	; 0x2c
 80028f0:	fb01 f303 	mul.w	r3, r1, r3
 80028f4:	4413      	add	r3, r2
 80028f6:	3360      	adds	r3, #96	; 0x60
 80028f8:	2200      	movs	r2, #0
 80028fa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80028fc:	78fb      	ldrb	r3, [r7, #3]
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	212c      	movs	r1, #44	; 0x2c
 8002902:	fb01 f303 	mul.w	r3, r1, r3
 8002906:	4413      	add	r3, r2
 8002908:	3350      	adds	r3, #80	; 0x50
 800290a:	2200      	movs	r2, #0
 800290c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800290e:	78fb      	ldrb	r3, [r7, #3]
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	212c      	movs	r1, #44	; 0x2c
 8002914:	fb01 f303 	mul.w	r3, r1, r3
 8002918:	4413      	add	r3, r2
 800291a:	3339      	adds	r3, #57	; 0x39
 800291c:	78fa      	ldrb	r2, [r7, #3]
 800291e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002920:	78fb      	ldrb	r3, [r7, #3]
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	212c      	movs	r1, #44	; 0x2c
 8002926:	fb01 f303 	mul.w	r3, r1, r3
 800292a:	4413      	add	r3, r2
 800292c:	3361      	adds	r3, #97	; 0x61
 800292e:	2200      	movs	r2, #0
 8002930:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6818      	ldr	r0, [r3, #0]
 8002936:	78fb      	ldrb	r3, [r7, #3]
 8002938:	222c      	movs	r2, #44	; 0x2c
 800293a:	fb02 f303 	mul.w	r3, r2, r3
 800293e:	3338      	adds	r3, #56	; 0x38
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	18d1      	adds	r1, r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	691b      	ldr	r3, [r3, #16]
 8002948:	b2db      	uxtb	r3, r3
 800294a:	461a      	mov	r2, r3
 800294c:	f003 fb9e 	bl	800608c <USB_HC_StartXfer>
 8002950:	4603      	mov	r3, r0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop

0800295c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b086      	sub	sp, #24
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4618      	mov	r0, r3
 8002974:	f003 f8c1 	bl	8005afa <USB_GetMode>
 8002978:	4603      	mov	r3, r0
 800297a:	2b01      	cmp	r3, #1
 800297c:	f040 80f6 	bne.w	8002b6c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4618      	mov	r0, r3
 8002986:	f003 f8a5 	bl	8005ad4 <USB_ReadInterrupts>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	f000 80ec 	beq.w	8002b6a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4618      	mov	r0, r3
 8002998:	f003 f89c 	bl	8005ad4 <USB_ReadInterrupts>
 800299c:	4603      	mov	r3, r0
 800299e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80029a6:	d104      	bne.n	80029b2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80029b0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f003 f88c 	bl	8005ad4 <USB_ReadInterrupts>
 80029bc:	4603      	mov	r3, r0
 80029be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029c6:	d104      	bne.n	80029d2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80029d0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4618      	mov	r0, r3
 80029d8:	f003 f87c 	bl	8005ad4 <USB_ReadInterrupts>
 80029dc:	4603      	mov	r3, r0
 80029de:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80029e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029e6:	d104      	bne.n	80029f2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80029f0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f003 f86c 	bl	8005ad4 <USB_ReadInterrupts>
 80029fc:	4603      	mov	r3, r0
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d103      	bne.n	8002a0e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f003 f85e 	bl	8005ad4 <USB_ReadInterrupts>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a22:	d11c      	bne.n	8002a5e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002a2c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d10f      	bne.n	8002a5e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002a3e:	2110      	movs	r1, #16
 8002a40:	6938      	ldr	r0, [r7, #16]
 8002a42:	f002 ff6d 	bl	8005920 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002a46:	6938      	ldr	r0, [r7, #16]
 8002a48:	f002 ff8e 	bl	8005968 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	2101      	movs	r1, #1
 8002a52:	4618      	mov	r0, r3
 8002a54:	f003 f946 	bl	8005ce4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f005 fe19 	bl	8008690 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f003 f836 	bl	8005ad4 <USB_ReadInterrupts>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a6e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a72:	d102      	bne.n	8002a7a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f001 fa03 	bl	8003e80 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f003 f828 	bl	8005ad4 <USB_ReadInterrupts>
 8002a84:	4603      	mov	r3, r0
 8002a86:	f003 0308 	and.w	r3, r3, #8
 8002a8a:	2b08      	cmp	r3, #8
 8002a8c:	d106      	bne.n	8002a9c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f005 fde2 	bl	8008658 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2208      	movs	r2, #8
 8002a9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f003 f817 	bl	8005ad4 <USB_ReadInterrupts>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	f003 0310 	and.w	r3, r3, #16
 8002aac:	2b10      	cmp	r3, #16
 8002aae:	d101      	bne.n	8002ab4 <HAL_HCD_IRQHandler+0x158>
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e000      	b.n	8002ab6 <HAL_HCD_IRQHandler+0x15a>
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d012      	beq.n	8002ae0 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	699a      	ldr	r2, [r3, #24]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f022 0210 	bic.w	r2, r2, #16
 8002ac8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f001 f906 	bl	8003cdc <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	699a      	ldr	r2, [r3, #24]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f042 0210 	orr.w	r2, r2, #16
 8002ade:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f002 fff5 	bl	8005ad4 <USB_ReadInterrupts>
 8002aea:	4603      	mov	r3, r0
 8002aec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002af0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002af4:	d13a      	bne.n	8002b6c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f003 fc08 	bl	8006310 <USB_HC_ReadInterrupt>
 8002b00:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002b02:	2300      	movs	r3, #0
 8002b04:	617b      	str	r3, [r7, #20]
 8002b06:	e025      	b.n	8002b54 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	f003 030f 	and.w	r3, r3, #15
 8002b0e:	68ba      	ldr	r2, [r7, #8]
 8002b10:	fa22 f303 	lsr.w	r3, r2, r3
 8002b14:	f003 0301 	and.w	r3, r3, #1
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d018      	beq.n	8002b4e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	015a      	lsls	r2, r3, #5
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	4413      	add	r3, r2
 8002b24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b32:	d106      	bne.n	8002b42 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	4619      	mov	r1, r3
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f000 f8ab 	bl	8002c96 <HCD_HC_IN_IRQHandler>
 8002b40:	e005      	b.n	8002b4e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	4619      	mov	r1, r3
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f000 fcc6 	bl	80034da <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	3301      	adds	r3, #1
 8002b52:	617b      	str	r3, [r7, #20]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	697a      	ldr	r2, [r7, #20]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d3d4      	bcc.n	8002b08 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b66:	615a      	str	r2, [r3, #20]
 8002b68:	e000      	b.n	8002b6c <HAL_HCD_IRQHandler+0x210>
      return;
 8002b6a:	bf00      	nop
    }
  }
}
 8002b6c:	3718      	adds	r7, #24
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002b72:	b580      	push	{r7, lr}
 8002b74:	b082      	sub	sp, #8
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d101      	bne.n	8002b88 <HAL_HCD_Start+0x16>
 8002b84:	2302      	movs	r3, #2
 8002b86:	e013      	b.n	8002bb0 <HAL_HCD_Start+0x3e>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2101      	movs	r1, #1
 8002b96:	4618      	mov	r0, r3
 8002b98:	f003 f908 	bl	8005dac <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f002 fe4f 	bl	8005844 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002bae:	2300      	movs	r3, #0
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3708      	adds	r7, #8
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d101      	bne.n	8002bce <HAL_HCD_Stop+0x16>
 8002bca:	2302      	movs	r3, #2
 8002bcc:	e00d      	b.n	8002bea <HAL_HCD_Stop+0x32>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f003 fd02 	bl	80065e4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3708      	adds	r7, #8
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}

08002bf2 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	b082      	sub	sp, #8
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f003 f8aa 	bl	8005d58 <USB_ResetPort>
 8002c04:	4603      	mov	r3, r0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3708      	adds	r7, #8
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	b083      	sub	sp, #12
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
 8002c16:	460b      	mov	r3, r1
 8002c18:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002c1a:	78fb      	ldrb	r3, [r7, #3]
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	212c      	movs	r1, #44	; 0x2c
 8002c20:	fb01 f303 	mul.w	r3, r1, r3
 8002c24:	4413      	add	r3, r2
 8002c26:	3360      	adds	r3, #96	; 0x60
 8002c28:	781b      	ldrb	r3, [r3, #0]
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	370c      	adds	r7, #12
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr

08002c36 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002c36:	b480      	push	{r7}
 8002c38:	b083      	sub	sp, #12
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
 8002c3e:	460b      	mov	r3, r1
 8002c40:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002c42:	78fb      	ldrb	r3, [r7, #3]
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	212c      	movs	r1, #44	; 0x2c
 8002c48:	fb01 f303 	mul.w	r3, r1, r3
 8002c4c:	4413      	add	r3, r2
 8002c4e:	3350      	adds	r3, #80	; 0x50
 8002c50:	681b      	ldr	r3, [r3, #0]
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	370c      	adds	r7, #12
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr

08002c5e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	b082      	sub	sp, #8
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f003 f8ee 	bl	8005e4c <USB_GetCurrentFrame>
 8002c70:	4603      	mov	r3, r0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3708      	adds	r7, #8
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}

08002c7a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002c7a:	b580      	push	{r7, lr}
 8002c7c:	b082      	sub	sp, #8
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f003 f8c9 	bl	8005e1e <USB_GetHostSpeed>
 8002c8c:	4603      	mov	r3, r0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3708      	adds	r7, #8
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}

08002c96 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002c96:	b580      	push	{r7, lr}
 8002c98:	b086      	sub	sp, #24
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002cac:	78fb      	ldrb	r3, [r7, #3]
 8002cae:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	015a      	lsls	r2, r3, #5
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f003 0304 	and.w	r3, r3, #4
 8002cc2:	2b04      	cmp	r3, #4
 8002cc4:	d119      	bne.n	8002cfa <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	015a      	lsls	r2, r3, #5
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	4413      	add	r3, r2
 8002cce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	2304      	movs	r3, #4
 8002cd6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	015a      	lsls	r2, r3, #5
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	4413      	add	r3, r2
 8002ce0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	0151      	lsls	r1, r2, #5
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	440a      	add	r2, r1
 8002cee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002cf2:	f043 0302 	orr.w	r3, r3, #2
 8002cf6:	60d3      	str	r3, [r2, #12]
 8002cf8:	e101      	b.n	8002efe <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	015a      	lsls	r2, r3, #5
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	4413      	add	r3, r2
 8002d02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d10:	d12b      	bne.n	8002d6a <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	015a      	lsls	r2, r3, #5
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	4413      	add	r3, r2
 8002d1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d1e:	461a      	mov	r2, r3
 8002d20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d24:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	212c      	movs	r1, #44	; 0x2c
 8002d2c:	fb01 f303 	mul.w	r3, r1, r3
 8002d30:	4413      	add	r3, r2
 8002d32:	3361      	adds	r3, #97	; 0x61
 8002d34:	2207      	movs	r2, #7
 8002d36:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	015a      	lsls	r2, r3, #5
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	4413      	add	r3, r2
 8002d40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	68fa      	ldr	r2, [r7, #12]
 8002d48:	0151      	lsls	r1, r2, #5
 8002d4a:	693a      	ldr	r2, [r7, #16]
 8002d4c:	440a      	add	r2, r1
 8002d4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d52:	f043 0302 	orr.w	r3, r3, #2
 8002d56:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	68fa      	ldr	r2, [r7, #12]
 8002d5e:	b2d2      	uxtb	r2, r2
 8002d60:	4611      	mov	r1, r2
 8002d62:	4618      	mov	r0, r3
 8002d64:	f003 fae5 	bl	8006332 <USB_HC_Halt>
 8002d68:	e0c9      	b.n	8002efe <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	015a      	lsls	r2, r3, #5
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	4413      	add	r3, r2
 8002d72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f003 0320 	and.w	r3, r3, #32
 8002d7c:	2b20      	cmp	r3, #32
 8002d7e:	d109      	bne.n	8002d94 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	015a      	lsls	r2, r3, #5
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	4413      	add	r3, r2
 8002d88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	2320      	movs	r3, #32
 8002d90:	6093      	str	r3, [r2, #8]
 8002d92:	e0b4      	b.n	8002efe <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	015a      	lsls	r2, r3, #5
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	4413      	add	r3, r2
 8002d9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	f003 0308 	and.w	r3, r3, #8
 8002da6:	2b08      	cmp	r3, #8
 8002da8:	d133      	bne.n	8002e12 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	015a      	lsls	r2, r3, #5
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	4413      	add	r3, r2
 8002db2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	68fa      	ldr	r2, [r7, #12]
 8002dba:	0151      	lsls	r1, r2, #5
 8002dbc:	693a      	ldr	r2, [r7, #16]
 8002dbe:	440a      	add	r2, r1
 8002dc0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002dc4:	f043 0302 	orr.w	r3, r3, #2
 8002dc8:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	212c      	movs	r1, #44	; 0x2c
 8002dd0:	fb01 f303 	mul.w	r3, r1, r3
 8002dd4:	4413      	add	r3, r2
 8002dd6:	3361      	adds	r3, #97	; 0x61
 8002dd8:	2205      	movs	r2, #5
 8002dda:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	015a      	lsls	r2, r3, #5
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	4413      	add	r3, r2
 8002de4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002de8:	461a      	mov	r2, r3
 8002dea:	2310      	movs	r3, #16
 8002dec:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	015a      	lsls	r2, r3, #5
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	4413      	add	r3, r2
 8002df6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	2308      	movs	r3, #8
 8002dfe:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	68fa      	ldr	r2, [r7, #12]
 8002e06:	b2d2      	uxtb	r2, r2
 8002e08:	4611      	mov	r1, r2
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f003 fa91 	bl	8006332 <USB_HC_Halt>
 8002e10:	e075      	b.n	8002efe <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	015a      	lsls	r2, r3, #5
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	4413      	add	r3, r2
 8002e1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e28:	d134      	bne.n	8002e94 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	015a      	lsls	r2, r3, #5
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	4413      	add	r3, r2
 8002e32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	68fa      	ldr	r2, [r7, #12]
 8002e3a:	0151      	lsls	r1, r2, #5
 8002e3c:	693a      	ldr	r2, [r7, #16]
 8002e3e:	440a      	add	r2, r1
 8002e40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e44:	f043 0302 	orr.w	r3, r3, #2
 8002e48:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	212c      	movs	r1, #44	; 0x2c
 8002e50:	fb01 f303 	mul.w	r3, r1, r3
 8002e54:	4413      	add	r3, r2
 8002e56:	3361      	adds	r3, #97	; 0x61
 8002e58:	2208      	movs	r2, #8
 8002e5a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	015a      	lsls	r2, r3, #5
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	4413      	add	r3, r2
 8002e64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e68:	461a      	mov	r2, r3
 8002e6a:	2310      	movs	r3, #16
 8002e6c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	015a      	lsls	r2, r3, #5
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	4413      	add	r3, r2
 8002e76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e80:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68fa      	ldr	r2, [r7, #12]
 8002e88:	b2d2      	uxtb	r2, r2
 8002e8a:	4611      	mov	r1, r2
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f003 fa50 	bl	8006332 <USB_HC_Halt>
 8002e92:	e034      	b.n	8002efe <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	015a      	lsls	r2, r3, #5
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ea6:	2b80      	cmp	r3, #128	; 0x80
 8002ea8:	d129      	bne.n	8002efe <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	015a      	lsls	r2, r3, #5
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	4413      	add	r3, r2
 8002eb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	68fa      	ldr	r2, [r7, #12]
 8002eba:	0151      	lsls	r1, r2, #5
 8002ebc:	693a      	ldr	r2, [r7, #16]
 8002ebe:	440a      	add	r2, r1
 8002ec0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ec4:	f043 0302 	orr.w	r3, r3, #2
 8002ec8:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	212c      	movs	r1, #44	; 0x2c
 8002ed0:	fb01 f303 	mul.w	r3, r1, r3
 8002ed4:	4413      	add	r3, r2
 8002ed6:	3361      	adds	r3, #97	; 0x61
 8002ed8:	2206      	movs	r2, #6
 8002eda:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	68fa      	ldr	r2, [r7, #12]
 8002ee2:	b2d2      	uxtb	r2, r2
 8002ee4:	4611      	mov	r1, r2
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f003 fa23 	bl	8006332 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	015a      	lsls	r2, r3, #5
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ef8:	461a      	mov	r2, r3
 8002efa:	2380      	movs	r3, #128	; 0x80
 8002efc:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	015a      	lsls	r2, r3, #5
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	4413      	add	r3, r2
 8002f06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f14:	d122      	bne.n	8002f5c <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	015a      	lsls	r2, r3, #5
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	68fa      	ldr	r2, [r7, #12]
 8002f26:	0151      	lsls	r1, r2, #5
 8002f28:	693a      	ldr	r2, [r7, #16]
 8002f2a:	440a      	add	r2, r1
 8002f2c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f30:	f043 0302 	orr.w	r3, r3, #2
 8002f34:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	68fa      	ldr	r2, [r7, #12]
 8002f3c:	b2d2      	uxtb	r2, r2
 8002f3e:	4611      	mov	r1, r2
 8002f40:	4618      	mov	r0, r3
 8002f42:	f003 f9f6 	bl	8006332 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	015a      	lsls	r2, r3, #5
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f52:	461a      	mov	r2, r3
 8002f54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f58:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002f5a:	e2ba      	b.n	80034d2 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	015a      	lsls	r2, r3, #5
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	4413      	add	r3, r2
 8002f64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	f040 811b 	bne.w	80031aa <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d019      	beq.n	8002fb0 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	212c      	movs	r1, #44	; 0x2c
 8002f82:	fb01 f303 	mul.w	r3, r1, r3
 8002f86:	4413      	add	r3, r2
 8002f88:	3348      	adds	r3, #72	; 0x48
 8002f8a:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	0159      	lsls	r1, r3, #5
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	440b      	add	r3, r1
 8002f94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002f9e:	1ad2      	subs	r2, r2, r3
 8002fa0:	6879      	ldr	r1, [r7, #4]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	202c      	movs	r0, #44	; 0x2c
 8002fa6:	fb00 f303 	mul.w	r3, r0, r3
 8002faa:	440b      	add	r3, r1
 8002fac:	3350      	adds	r3, #80	; 0x50
 8002fae:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	212c      	movs	r1, #44	; 0x2c
 8002fb6:	fb01 f303 	mul.w	r3, r1, r3
 8002fba:	4413      	add	r3, r2
 8002fbc:	3361      	adds	r3, #97	; 0x61
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	212c      	movs	r1, #44	; 0x2c
 8002fc8:	fb01 f303 	mul.w	r3, r1, r3
 8002fcc:	4413      	add	r3, r2
 8002fce:	335c      	adds	r3, #92	; 0x5c
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	015a      	lsls	r2, r3, #5
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	4413      	add	r3, r2
 8002fdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	212c      	movs	r1, #44	; 0x2c
 8002fec:	fb01 f303 	mul.w	r3, r1, r3
 8002ff0:	4413      	add	r3, r2
 8002ff2:	333f      	adds	r3, #63	; 0x3f
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d009      	beq.n	800300e <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	212c      	movs	r1, #44	; 0x2c
 8003000:	fb01 f303 	mul.w	r3, r1, r3
 8003004:	4413      	add	r3, r2
 8003006:	333f      	adds	r3, #63	; 0x3f
 8003008:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800300a:	2b02      	cmp	r3, #2
 800300c:	d121      	bne.n	8003052 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	015a      	lsls	r2, r3, #5
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	4413      	add	r3, r2
 8003016:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	68fa      	ldr	r2, [r7, #12]
 800301e:	0151      	lsls	r1, r2, #5
 8003020:	693a      	ldr	r2, [r7, #16]
 8003022:	440a      	add	r2, r1
 8003024:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003028:	f043 0302 	orr.w	r3, r3, #2
 800302c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68fa      	ldr	r2, [r7, #12]
 8003034:	b2d2      	uxtb	r2, r2
 8003036:	4611      	mov	r1, r2
 8003038:	4618      	mov	r0, r3
 800303a:	f003 f97a 	bl	8006332 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	015a      	lsls	r2, r3, #5
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	4413      	add	r3, r2
 8003046:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800304a:	461a      	mov	r2, r3
 800304c:	2310      	movs	r3, #16
 800304e:	6093      	str	r3, [r2, #8]
 8003050:	e066      	b.n	8003120 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	212c      	movs	r1, #44	; 0x2c
 8003058:	fb01 f303 	mul.w	r3, r1, r3
 800305c:	4413      	add	r3, r2
 800305e:	333f      	adds	r3, #63	; 0x3f
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	2b03      	cmp	r3, #3
 8003064:	d127      	bne.n	80030b6 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	015a      	lsls	r2, r3, #5
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	4413      	add	r3, r2
 800306e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68fa      	ldr	r2, [r7, #12]
 8003076:	0151      	lsls	r1, r2, #5
 8003078:	693a      	ldr	r2, [r7, #16]
 800307a:	440a      	add	r2, r1
 800307c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003080:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003084:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	212c      	movs	r1, #44	; 0x2c
 800308c:	fb01 f303 	mul.w	r3, r1, r3
 8003090:	4413      	add	r3, r2
 8003092:	3360      	adds	r3, #96	; 0x60
 8003094:	2201      	movs	r2, #1
 8003096:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	b2d9      	uxtb	r1, r3
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	202c      	movs	r0, #44	; 0x2c
 80030a2:	fb00 f303 	mul.w	r3, r0, r3
 80030a6:	4413      	add	r3, r2
 80030a8:	3360      	adds	r3, #96	; 0x60
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	461a      	mov	r2, r3
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f005 fafc 	bl	80086ac <HAL_HCD_HC_NotifyURBChange_Callback>
 80030b4:	e034      	b.n	8003120 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	212c      	movs	r1, #44	; 0x2c
 80030bc:	fb01 f303 	mul.w	r3, r1, r3
 80030c0:	4413      	add	r3, r2
 80030c2:	333f      	adds	r3, #63	; 0x3f
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d12a      	bne.n	8003120 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	212c      	movs	r1, #44	; 0x2c
 80030d0:	fb01 f303 	mul.w	r3, r1, r3
 80030d4:	4413      	add	r3, r2
 80030d6:	3360      	adds	r3, #96	; 0x60
 80030d8:	2201      	movs	r2, #1
 80030da:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	212c      	movs	r1, #44	; 0x2c
 80030e2:	fb01 f303 	mul.w	r3, r1, r3
 80030e6:	4413      	add	r3, r2
 80030e8:	3354      	adds	r3, #84	; 0x54
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	f083 0301 	eor.w	r3, r3, #1
 80030f0:	b2d8      	uxtb	r0, r3
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	212c      	movs	r1, #44	; 0x2c
 80030f8:	fb01 f303 	mul.w	r3, r1, r3
 80030fc:	4413      	add	r3, r2
 80030fe:	3354      	adds	r3, #84	; 0x54
 8003100:	4602      	mov	r2, r0
 8003102:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	b2d9      	uxtb	r1, r3
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	202c      	movs	r0, #44	; 0x2c
 800310e:	fb00 f303 	mul.w	r3, r0, r3
 8003112:	4413      	add	r3, r2
 8003114:	3360      	adds	r3, #96	; 0x60
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	461a      	mov	r2, r3
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f005 fac6 	bl	80086ac <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	691b      	ldr	r3, [r3, #16]
 8003124:	2b01      	cmp	r3, #1
 8003126:	d12b      	bne.n	8003180 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	212c      	movs	r1, #44	; 0x2c
 800312e:	fb01 f303 	mul.w	r3, r1, r3
 8003132:	4413      	add	r3, r2
 8003134:	3348      	adds	r3, #72	; 0x48
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	6879      	ldr	r1, [r7, #4]
 800313a:	68fa      	ldr	r2, [r7, #12]
 800313c:	202c      	movs	r0, #44	; 0x2c
 800313e:	fb00 f202 	mul.w	r2, r0, r2
 8003142:	440a      	add	r2, r1
 8003144:	3240      	adds	r2, #64	; 0x40
 8003146:	8812      	ldrh	r2, [r2, #0]
 8003148:	fbb3 f3f2 	udiv	r3, r3, r2
 800314c:	f003 0301 	and.w	r3, r3, #1
 8003150:	2b00      	cmp	r3, #0
 8003152:	f000 81be 	beq.w	80034d2 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	212c      	movs	r1, #44	; 0x2c
 800315c:	fb01 f303 	mul.w	r3, r1, r3
 8003160:	4413      	add	r3, r2
 8003162:	3354      	adds	r3, #84	; 0x54
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	f083 0301 	eor.w	r3, r3, #1
 800316a:	b2d8      	uxtb	r0, r3
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	212c      	movs	r1, #44	; 0x2c
 8003172:	fb01 f303 	mul.w	r3, r1, r3
 8003176:	4413      	add	r3, r2
 8003178:	3354      	adds	r3, #84	; 0x54
 800317a:	4602      	mov	r2, r0
 800317c:	701a      	strb	r2, [r3, #0]
}
 800317e:	e1a8      	b.n	80034d2 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	212c      	movs	r1, #44	; 0x2c
 8003186:	fb01 f303 	mul.w	r3, r1, r3
 800318a:	4413      	add	r3, r2
 800318c:	3354      	adds	r3, #84	; 0x54
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	f083 0301 	eor.w	r3, r3, #1
 8003194:	b2d8      	uxtb	r0, r3
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	212c      	movs	r1, #44	; 0x2c
 800319c:	fb01 f303 	mul.w	r3, r1, r3
 80031a0:	4413      	add	r3, r2
 80031a2:	3354      	adds	r3, #84	; 0x54
 80031a4:	4602      	mov	r2, r0
 80031a6:	701a      	strb	r2, [r3, #0]
}
 80031a8:	e193      	b.n	80034d2 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	015a      	lsls	r2, r3, #5
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	4413      	add	r3, r2
 80031b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	f003 0302 	and.w	r3, r3, #2
 80031bc:	2b02      	cmp	r3, #2
 80031be:	f040 8106 	bne.w	80033ce <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	015a      	lsls	r2, r3, #5
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	4413      	add	r3, r2
 80031ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	68fa      	ldr	r2, [r7, #12]
 80031d2:	0151      	lsls	r1, r2, #5
 80031d4:	693a      	ldr	r2, [r7, #16]
 80031d6:	440a      	add	r2, r1
 80031d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031dc:	f023 0302 	bic.w	r3, r3, #2
 80031e0:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	212c      	movs	r1, #44	; 0x2c
 80031e8:	fb01 f303 	mul.w	r3, r1, r3
 80031ec:	4413      	add	r3, r2
 80031ee:	3361      	adds	r3, #97	; 0x61
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d109      	bne.n	800320a <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	212c      	movs	r1, #44	; 0x2c
 80031fc:	fb01 f303 	mul.w	r3, r1, r3
 8003200:	4413      	add	r3, r2
 8003202:	3360      	adds	r3, #96	; 0x60
 8003204:	2201      	movs	r2, #1
 8003206:	701a      	strb	r2, [r3, #0]
 8003208:	e0c9      	b.n	800339e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	212c      	movs	r1, #44	; 0x2c
 8003210:	fb01 f303 	mul.w	r3, r1, r3
 8003214:	4413      	add	r3, r2
 8003216:	3361      	adds	r3, #97	; 0x61
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	2b05      	cmp	r3, #5
 800321c:	d109      	bne.n	8003232 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	212c      	movs	r1, #44	; 0x2c
 8003224:	fb01 f303 	mul.w	r3, r1, r3
 8003228:	4413      	add	r3, r2
 800322a:	3360      	adds	r3, #96	; 0x60
 800322c:	2205      	movs	r2, #5
 800322e:	701a      	strb	r2, [r3, #0]
 8003230:	e0b5      	b.n	800339e <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	212c      	movs	r1, #44	; 0x2c
 8003238:	fb01 f303 	mul.w	r3, r1, r3
 800323c:	4413      	add	r3, r2
 800323e:	3361      	adds	r3, #97	; 0x61
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	2b06      	cmp	r3, #6
 8003244:	d009      	beq.n	800325a <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	212c      	movs	r1, #44	; 0x2c
 800324c:	fb01 f303 	mul.w	r3, r1, r3
 8003250:	4413      	add	r3, r2
 8003252:	3361      	adds	r3, #97	; 0x61
 8003254:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003256:	2b08      	cmp	r3, #8
 8003258:	d150      	bne.n	80032fc <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	212c      	movs	r1, #44	; 0x2c
 8003260:	fb01 f303 	mul.w	r3, r1, r3
 8003264:	4413      	add	r3, r2
 8003266:	335c      	adds	r3, #92	; 0x5c
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	1c5a      	adds	r2, r3, #1
 800326c:	6879      	ldr	r1, [r7, #4]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	202c      	movs	r0, #44	; 0x2c
 8003272:	fb00 f303 	mul.w	r3, r0, r3
 8003276:	440b      	add	r3, r1
 8003278:	335c      	adds	r3, #92	; 0x5c
 800327a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	212c      	movs	r1, #44	; 0x2c
 8003282:	fb01 f303 	mul.w	r3, r1, r3
 8003286:	4413      	add	r3, r2
 8003288:	335c      	adds	r3, #92	; 0x5c
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2b02      	cmp	r3, #2
 800328e:	d912      	bls.n	80032b6 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	212c      	movs	r1, #44	; 0x2c
 8003296:	fb01 f303 	mul.w	r3, r1, r3
 800329a:	4413      	add	r3, r2
 800329c:	335c      	adds	r3, #92	; 0x5c
 800329e:	2200      	movs	r2, #0
 80032a0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	212c      	movs	r1, #44	; 0x2c
 80032a8:	fb01 f303 	mul.w	r3, r1, r3
 80032ac:	4413      	add	r3, r2
 80032ae:	3360      	adds	r3, #96	; 0x60
 80032b0:	2204      	movs	r2, #4
 80032b2:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80032b4:	e073      	b.n	800339e <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	212c      	movs	r1, #44	; 0x2c
 80032bc:	fb01 f303 	mul.w	r3, r1, r3
 80032c0:	4413      	add	r3, r2
 80032c2:	3360      	adds	r3, #96	; 0x60
 80032c4:	2202      	movs	r2, #2
 80032c6:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	015a      	lsls	r2, r3, #5
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	4413      	add	r3, r2
 80032d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80032de:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80032e6:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	015a      	lsls	r2, r3, #5
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	4413      	add	r3, r2
 80032f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032f4:	461a      	mov	r2, r3
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80032fa:	e050      	b.n	800339e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	212c      	movs	r1, #44	; 0x2c
 8003302:	fb01 f303 	mul.w	r3, r1, r3
 8003306:	4413      	add	r3, r2
 8003308:	3361      	adds	r3, #97	; 0x61
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	2b03      	cmp	r3, #3
 800330e:	d122      	bne.n	8003356 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	212c      	movs	r1, #44	; 0x2c
 8003316:	fb01 f303 	mul.w	r3, r1, r3
 800331a:	4413      	add	r3, r2
 800331c:	3360      	adds	r3, #96	; 0x60
 800331e:	2202      	movs	r2, #2
 8003320:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	015a      	lsls	r2, r3, #5
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	4413      	add	r3, r2
 800332a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003338:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003340:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	015a      	lsls	r2, r3, #5
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	4413      	add	r3, r2
 800334a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800334e:	461a      	mov	r2, r3
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	6013      	str	r3, [r2, #0]
 8003354:	e023      	b.n	800339e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	212c      	movs	r1, #44	; 0x2c
 800335c:	fb01 f303 	mul.w	r3, r1, r3
 8003360:	4413      	add	r3, r2
 8003362:	3361      	adds	r3, #97	; 0x61
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	2b07      	cmp	r3, #7
 8003368:	d119      	bne.n	800339e <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	212c      	movs	r1, #44	; 0x2c
 8003370:	fb01 f303 	mul.w	r3, r1, r3
 8003374:	4413      	add	r3, r2
 8003376:	335c      	adds	r3, #92	; 0x5c
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	1c5a      	adds	r2, r3, #1
 800337c:	6879      	ldr	r1, [r7, #4]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	202c      	movs	r0, #44	; 0x2c
 8003382:	fb00 f303 	mul.w	r3, r0, r3
 8003386:	440b      	add	r3, r1
 8003388:	335c      	adds	r3, #92	; 0x5c
 800338a:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	212c      	movs	r1, #44	; 0x2c
 8003392:	fb01 f303 	mul.w	r3, r1, r3
 8003396:	4413      	add	r3, r2
 8003398:	3360      	adds	r3, #96	; 0x60
 800339a:	2204      	movs	r2, #4
 800339c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	015a      	lsls	r2, r3, #5
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	4413      	add	r3, r2
 80033a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033aa:	461a      	mov	r2, r3
 80033ac:	2302      	movs	r3, #2
 80033ae:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	b2d9      	uxtb	r1, r3
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	202c      	movs	r0, #44	; 0x2c
 80033ba:	fb00 f303 	mul.w	r3, r0, r3
 80033be:	4413      	add	r3, r2
 80033c0:	3360      	adds	r3, #96	; 0x60
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	461a      	mov	r2, r3
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f005 f970 	bl	80086ac <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80033cc:	e081      	b.n	80034d2 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	015a      	lsls	r2, r3, #5
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	4413      	add	r3, r2
 80033d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f003 0310 	and.w	r3, r3, #16
 80033e0:	2b10      	cmp	r3, #16
 80033e2:	d176      	bne.n	80034d2 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	212c      	movs	r1, #44	; 0x2c
 80033ea:	fb01 f303 	mul.w	r3, r1, r3
 80033ee:	4413      	add	r3, r2
 80033f0:	333f      	adds	r3, #63	; 0x3f
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	2b03      	cmp	r3, #3
 80033f6:	d121      	bne.n	800343c <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	212c      	movs	r1, #44	; 0x2c
 80033fe:	fb01 f303 	mul.w	r3, r1, r3
 8003402:	4413      	add	r3, r2
 8003404:	335c      	adds	r3, #92	; 0x5c
 8003406:	2200      	movs	r2, #0
 8003408:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	015a      	lsls	r2, r3, #5
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	4413      	add	r3, r2
 8003412:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	68fa      	ldr	r2, [r7, #12]
 800341a:	0151      	lsls	r1, r2, #5
 800341c:	693a      	ldr	r2, [r7, #16]
 800341e:	440a      	add	r2, r1
 8003420:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003424:	f043 0302 	orr.w	r3, r3, #2
 8003428:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	b2d2      	uxtb	r2, r2
 8003432:	4611      	mov	r1, r2
 8003434:	4618      	mov	r0, r3
 8003436:	f002 ff7c 	bl	8006332 <USB_HC_Halt>
 800343a:	e041      	b.n	80034c0 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	212c      	movs	r1, #44	; 0x2c
 8003442:	fb01 f303 	mul.w	r3, r1, r3
 8003446:	4413      	add	r3, r2
 8003448:	333f      	adds	r3, #63	; 0x3f
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d009      	beq.n	8003464 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	212c      	movs	r1, #44	; 0x2c
 8003456:	fb01 f303 	mul.w	r3, r1, r3
 800345a:	4413      	add	r3, r2
 800345c:	333f      	adds	r3, #63	; 0x3f
 800345e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003460:	2b02      	cmp	r3, #2
 8003462:	d12d      	bne.n	80034c0 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	212c      	movs	r1, #44	; 0x2c
 800346a:	fb01 f303 	mul.w	r3, r1, r3
 800346e:	4413      	add	r3, r2
 8003470:	335c      	adds	r3, #92	; 0x5c
 8003472:	2200      	movs	r2, #0
 8003474:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d120      	bne.n	80034c0 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	212c      	movs	r1, #44	; 0x2c
 8003484:	fb01 f303 	mul.w	r3, r1, r3
 8003488:	4413      	add	r3, r2
 800348a:	3361      	adds	r3, #97	; 0x61
 800348c:	2203      	movs	r2, #3
 800348e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	015a      	lsls	r2, r3, #5
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	4413      	add	r3, r2
 8003498:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	68fa      	ldr	r2, [r7, #12]
 80034a0:	0151      	lsls	r1, r2, #5
 80034a2:	693a      	ldr	r2, [r7, #16]
 80034a4:	440a      	add	r2, r1
 80034a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034aa:	f043 0302 	orr.w	r3, r3, #2
 80034ae:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	68fa      	ldr	r2, [r7, #12]
 80034b6:	b2d2      	uxtb	r2, r2
 80034b8:	4611      	mov	r1, r2
 80034ba:	4618      	mov	r0, r3
 80034bc:	f002 ff39 	bl	8006332 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	015a      	lsls	r2, r3, #5
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	4413      	add	r3, r2
 80034c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034cc:	461a      	mov	r2, r3
 80034ce:	2310      	movs	r3, #16
 80034d0:	6093      	str	r3, [r2, #8]
}
 80034d2:	bf00      	nop
 80034d4:	3718      	adds	r7, #24
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80034da:	b580      	push	{r7, lr}
 80034dc:	b088      	sub	sp, #32
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
 80034e2:	460b      	mov	r3, r1
 80034e4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80034f0:	78fb      	ldrb	r3, [r7, #3]
 80034f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	015a      	lsls	r2, r3, #5
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	4413      	add	r3, r2
 80034fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f003 0304 	and.w	r3, r3, #4
 8003506:	2b04      	cmp	r3, #4
 8003508:	d119      	bne.n	800353e <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	015a      	lsls	r2, r3, #5
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	4413      	add	r3, r2
 8003512:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003516:	461a      	mov	r2, r3
 8003518:	2304      	movs	r3, #4
 800351a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	015a      	lsls	r2, r3, #5
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	4413      	add	r3, r2
 8003524:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	697a      	ldr	r2, [r7, #20]
 800352c:	0151      	lsls	r1, r2, #5
 800352e:	69ba      	ldr	r2, [r7, #24]
 8003530:	440a      	add	r2, r1
 8003532:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003536:	f043 0302 	orr.w	r3, r3, #2
 800353a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800353c:	e3ca      	b.n	8003cd4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	015a      	lsls	r2, r3, #5
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	4413      	add	r3, r2
 8003546:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	f003 0320 	and.w	r3, r3, #32
 8003550:	2b20      	cmp	r3, #32
 8003552:	d13e      	bne.n	80035d2 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	015a      	lsls	r2, r3, #5
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	4413      	add	r3, r2
 800355c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003560:	461a      	mov	r2, r3
 8003562:	2320      	movs	r3, #32
 8003564:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	212c      	movs	r1, #44	; 0x2c
 800356c:	fb01 f303 	mul.w	r3, r1, r3
 8003570:	4413      	add	r3, r2
 8003572:	333d      	adds	r3, #61	; 0x3d
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	2b01      	cmp	r3, #1
 8003578:	f040 83ac 	bne.w	8003cd4 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	212c      	movs	r1, #44	; 0x2c
 8003582:	fb01 f303 	mul.w	r3, r1, r3
 8003586:	4413      	add	r3, r2
 8003588:	333d      	adds	r3, #61	; 0x3d
 800358a:	2200      	movs	r2, #0
 800358c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	212c      	movs	r1, #44	; 0x2c
 8003594:	fb01 f303 	mul.w	r3, r1, r3
 8003598:	4413      	add	r3, r2
 800359a:	3360      	adds	r3, #96	; 0x60
 800359c:	2202      	movs	r2, #2
 800359e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	015a      	lsls	r2, r3, #5
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	4413      	add	r3, r2
 80035a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	697a      	ldr	r2, [r7, #20]
 80035b0:	0151      	lsls	r1, r2, #5
 80035b2:	69ba      	ldr	r2, [r7, #24]
 80035b4:	440a      	add	r2, r1
 80035b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035ba:	f043 0302 	orr.w	r3, r3, #2
 80035be:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	697a      	ldr	r2, [r7, #20]
 80035c6:	b2d2      	uxtb	r2, r2
 80035c8:	4611      	mov	r1, r2
 80035ca:	4618      	mov	r0, r3
 80035cc:	f002 feb1 	bl	8006332 <USB_HC_Halt>
}
 80035d0:	e380      	b.n	8003cd4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	015a      	lsls	r2, r3, #5
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	4413      	add	r3, r2
 80035da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035e8:	d122      	bne.n	8003630 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	015a      	lsls	r2, r3, #5
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	4413      	add	r3, r2
 80035f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	697a      	ldr	r2, [r7, #20]
 80035fa:	0151      	lsls	r1, r2, #5
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	440a      	add	r2, r1
 8003600:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003604:	f043 0302 	orr.w	r3, r3, #2
 8003608:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	697a      	ldr	r2, [r7, #20]
 8003610:	b2d2      	uxtb	r2, r2
 8003612:	4611      	mov	r1, r2
 8003614:	4618      	mov	r0, r3
 8003616:	f002 fe8c 	bl	8006332 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	015a      	lsls	r2, r3, #5
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	4413      	add	r3, r2
 8003622:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003626:	461a      	mov	r2, r3
 8003628:	f44f 7300 	mov.w	r3, #512	; 0x200
 800362c:	6093      	str	r3, [r2, #8]
}
 800362e:	e351      	b.n	8003cd4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	015a      	lsls	r2, r3, #5
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	4413      	add	r3, r2
 8003638:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f003 0301 	and.w	r3, r3, #1
 8003642:	2b01      	cmp	r3, #1
 8003644:	d150      	bne.n	80036e8 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	212c      	movs	r1, #44	; 0x2c
 800364c:	fb01 f303 	mul.w	r3, r1, r3
 8003650:	4413      	add	r3, r2
 8003652:	335c      	adds	r3, #92	; 0x5c
 8003654:	2200      	movs	r2, #0
 8003656:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	015a      	lsls	r2, r3, #5
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	4413      	add	r3, r2
 8003660:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800366a:	2b40      	cmp	r3, #64	; 0x40
 800366c:	d111      	bne.n	8003692 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	212c      	movs	r1, #44	; 0x2c
 8003674:	fb01 f303 	mul.w	r3, r1, r3
 8003678:	4413      	add	r3, r2
 800367a:	333d      	adds	r3, #61	; 0x3d
 800367c:	2201      	movs	r2, #1
 800367e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	015a      	lsls	r2, r3, #5
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	4413      	add	r3, r2
 8003688:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800368c:	461a      	mov	r2, r3
 800368e:	2340      	movs	r3, #64	; 0x40
 8003690:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	015a      	lsls	r2, r3, #5
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	4413      	add	r3, r2
 800369a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	697a      	ldr	r2, [r7, #20]
 80036a2:	0151      	lsls	r1, r2, #5
 80036a4:	69ba      	ldr	r2, [r7, #24]
 80036a6:	440a      	add	r2, r1
 80036a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80036ac:	f043 0302 	orr.w	r3, r3, #2
 80036b0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	697a      	ldr	r2, [r7, #20]
 80036b8:	b2d2      	uxtb	r2, r2
 80036ba:	4611      	mov	r1, r2
 80036bc:	4618      	mov	r0, r3
 80036be:	f002 fe38 	bl	8006332 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	015a      	lsls	r2, r3, #5
 80036c6:	69bb      	ldr	r3, [r7, #24]
 80036c8:	4413      	add	r3, r2
 80036ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036ce:	461a      	mov	r2, r3
 80036d0:	2301      	movs	r3, #1
 80036d2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	212c      	movs	r1, #44	; 0x2c
 80036da:	fb01 f303 	mul.w	r3, r1, r3
 80036de:	4413      	add	r3, r2
 80036e0:	3361      	adds	r3, #97	; 0x61
 80036e2:	2201      	movs	r2, #1
 80036e4:	701a      	strb	r2, [r3, #0]
}
 80036e6:	e2f5      	b.n	8003cd4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	015a      	lsls	r2, r3, #5
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	4413      	add	r3, r2
 80036f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036fa:	2b40      	cmp	r3, #64	; 0x40
 80036fc:	d13c      	bne.n	8003778 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	212c      	movs	r1, #44	; 0x2c
 8003704:	fb01 f303 	mul.w	r3, r1, r3
 8003708:	4413      	add	r3, r2
 800370a:	3361      	adds	r3, #97	; 0x61
 800370c:	2204      	movs	r2, #4
 800370e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	212c      	movs	r1, #44	; 0x2c
 8003716:	fb01 f303 	mul.w	r3, r1, r3
 800371a:	4413      	add	r3, r2
 800371c:	333d      	adds	r3, #61	; 0x3d
 800371e:	2201      	movs	r2, #1
 8003720:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	212c      	movs	r1, #44	; 0x2c
 8003728:	fb01 f303 	mul.w	r3, r1, r3
 800372c:	4413      	add	r3, r2
 800372e:	335c      	adds	r3, #92	; 0x5c
 8003730:	2200      	movs	r2, #0
 8003732:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	015a      	lsls	r2, r3, #5
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	4413      	add	r3, r2
 800373c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	697a      	ldr	r2, [r7, #20]
 8003744:	0151      	lsls	r1, r2, #5
 8003746:	69ba      	ldr	r2, [r7, #24]
 8003748:	440a      	add	r2, r1
 800374a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800374e:	f043 0302 	orr.w	r3, r3, #2
 8003752:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	697a      	ldr	r2, [r7, #20]
 800375a:	b2d2      	uxtb	r2, r2
 800375c:	4611      	mov	r1, r2
 800375e:	4618      	mov	r0, r3
 8003760:	f002 fde7 	bl	8006332 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	015a      	lsls	r2, r3, #5
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	4413      	add	r3, r2
 800376c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003770:	461a      	mov	r2, r3
 8003772:	2340      	movs	r3, #64	; 0x40
 8003774:	6093      	str	r3, [r2, #8]
}
 8003776:	e2ad      	b.n	8003cd4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	015a      	lsls	r2, r3, #5
 800377c:	69bb      	ldr	r3, [r7, #24]
 800377e:	4413      	add	r3, r2
 8003780:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f003 0308 	and.w	r3, r3, #8
 800378a:	2b08      	cmp	r3, #8
 800378c:	d12a      	bne.n	80037e4 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	015a      	lsls	r2, r3, #5
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	4413      	add	r3, r2
 8003796:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800379a:	461a      	mov	r2, r3
 800379c:	2308      	movs	r3, #8
 800379e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	015a      	lsls	r2, r3, #5
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	4413      	add	r3, r2
 80037a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	697a      	ldr	r2, [r7, #20]
 80037b0:	0151      	lsls	r1, r2, #5
 80037b2:	69ba      	ldr	r2, [r7, #24]
 80037b4:	440a      	add	r2, r1
 80037b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80037ba:	f043 0302 	orr.w	r3, r3, #2
 80037be:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	697a      	ldr	r2, [r7, #20]
 80037c6:	b2d2      	uxtb	r2, r2
 80037c8:	4611      	mov	r1, r2
 80037ca:	4618      	mov	r0, r3
 80037cc:	f002 fdb1 	bl	8006332 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	212c      	movs	r1, #44	; 0x2c
 80037d6:	fb01 f303 	mul.w	r3, r1, r3
 80037da:	4413      	add	r3, r2
 80037dc:	3361      	adds	r3, #97	; 0x61
 80037de:	2205      	movs	r2, #5
 80037e0:	701a      	strb	r2, [r3, #0]
}
 80037e2:	e277      	b.n	8003cd4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	015a      	lsls	r2, r3, #5
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	4413      	add	r3, r2
 80037ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	f003 0310 	and.w	r3, r3, #16
 80037f6:	2b10      	cmp	r3, #16
 80037f8:	d150      	bne.n	800389c <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	212c      	movs	r1, #44	; 0x2c
 8003800:	fb01 f303 	mul.w	r3, r1, r3
 8003804:	4413      	add	r3, r2
 8003806:	335c      	adds	r3, #92	; 0x5c
 8003808:	2200      	movs	r2, #0
 800380a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	212c      	movs	r1, #44	; 0x2c
 8003812:	fb01 f303 	mul.w	r3, r1, r3
 8003816:	4413      	add	r3, r2
 8003818:	3361      	adds	r3, #97	; 0x61
 800381a:	2203      	movs	r2, #3
 800381c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	212c      	movs	r1, #44	; 0x2c
 8003824:	fb01 f303 	mul.w	r3, r1, r3
 8003828:	4413      	add	r3, r2
 800382a:	333d      	adds	r3, #61	; 0x3d
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d112      	bne.n	8003858 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	212c      	movs	r1, #44	; 0x2c
 8003838:	fb01 f303 	mul.w	r3, r1, r3
 800383c:	4413      	add	r3, r2
 800383e:	333c      	adds	r3, #60	; 0x3c
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d108      	bne.n	8003858 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	212c      	movs	r1, #44	; 0x2c
 800384c:	fb01 f303 	mul.w	r3, r1, r3
 8003850:	4413      	add	r3, r2
 8003852:	333d      	adds	r3, #61	; 0x3d
 8003854:	2201      	movs	r2, #1
 8003856:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	015a      	lsls	r2, r3, #5
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	4413      	add	r3, r2
 8003860:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	697a      	ldr	r2, [r7, #20]
 8003868:	0151      	lsls	r1, r2, #5
 800386a:	69ba      	ldr	r2, [r7, #24]
 800386c:	440a      	add	r2, r1
 800386e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003872:	f043 0302 	orr.w	r3, r3, #2
 8003876:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	697a      	ldr	r2, [r7, #20]
 800387e:	b2d2      	uxtb	r2, r2
 8003880:	4611      	mov	r1, r2
 8003882:	4618      	mov	r0, r3
 8003884:	f002 fd55 	bl	8006332 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	015a      	lsls	r2, r3, #5
 800388c:	69bb      	ldr	r3, [r7, #24]
 800388e:	4413      	add	r3, r2
 8003890:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003894:	461a      	mov	r2, r3
 8003896:	2310      	movs	r3, #16
 8003898:	6093      	str	r3, [r2, #8]
}
 800389a:	e21b      	b.n	8003cd4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	015a      	lsls	r2, r3, #5
 80038a0:	69bb      	ldr	r3, [r7, #24]
 80038a2:	4413      	add	r3, r2
 80038a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ae:	2b80      	cmp	r3, #128	; 0x80
 80038b0:	d174      	bne.n	800399c <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d121      	bne.n	80038fe <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	212c      	movs	r1, #44	; 0x2c
 80038c0:	fb01 f303 	mul.w	r3, r1, r3
 80038c4:	4413      	add	r3, r2
 80038c6:	3361      	adds	r3, #97	; 0x61
 80038c8:	2206      	movs	r2, #6
 80038ca:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	015a      	lsls	r2, r3, #5
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	4413      	add	r3, r2
 80038d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	697a      	ldr	r2, [r7, #20]
 80038dc:	0151      	lsls	r1, r2, #5
 80038de:	69ba      	ldr	r2, [r7, #24]
 80038e0:	440a      	add	r2, r1
 80038e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80038e6:	f043 0302 	orr.w	r3, r3, #2
 80038ea:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	697a      	ldr	r2, [r7, #20]
 80038f2:	b2d2      	uxtb	r2, r2
 80038f4:	4611      	mov	r1, r2
 80038f6:	4618      	mov	r0, r3
 80038f8:	f002 fd1b 	bl	8006332 <USB_HC_Halt>
 80038fc:	e044      	b.n	8003988 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	212c      	movs	r1, #44	; 0x2c
 8003904:	fb01 f303 	mul.w	r3, r1, r3
 8003908:	4413      	add	r3, r2
 800390a:	335c      	adds	r3, #92	; 0x5c
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	1c5a      	adds	r2, r3, #1
 8003910:	6879      	ldr	r1, [r7, #4]
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	202c      	movs	r0, #44	; 0x2c
 8003916:	fb00 f303 	mul.w	r3, r0, r3
 800391a:	440b      	add	r3, r1
 800391c:	335c      	adds	r3, #92	; 0x5c
 800391e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	212c      	movs	r1, #44	; 0x2c
 8003926:	fb01 f303 	mul.w	r3, r1, r3
 800392a:	4413      	add	r3, r2
 800392c:	335c      	adds	r3, #92	; 0x5c
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2b02      	cmp	r3, #2
 8003932:	d920      	bls.n	8003976 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	212c      	movs	r1, #44	; 0x2c
 800393a:	fb01 f303 	mul.w	r3, r1, r3
 800393e:	4413      	add	r3, r2
 8003940:	335c      	adds	r3, #92	; 0x5c
 8003942:	2200      	movs	r2, #0
 8003944:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	212c      	movs	r1, #44	; 0x2c
 800394c:	fb01 f303 	mul.w	r3, r1, r3
 8003950:	4413      	add	r3, r2
 8003952:	3360      	adds	r3, #96	; 0x60
 8003954:	2204      	movs	r2, #4
 8003956:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	b2d9      	uxtb	r1, r3
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	202c      	movs	r0, #44	; 0x2c
 8003962:	fb00 f303 	mul.w	r3, r0, r3
 8003966:	4413      	add	r3, r2
 8003968:	3360      	adds	r3, #96	; 0x60
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	461a      	mov	r2, r3
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f004 fe9c 	bl	80086ac <HAL_HCD_HC_NotifyURBChange_Callback>
 8003974:	e008      	b.n	8003988 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	212c      	movs	r1, #44	; 0x2c
 800397c:	fb01 f303 	mul.w	r3, r1, r3
 8003980:	4413      	add	r3, r2
 8003982:	3360      	adds	r3, #96	; 0x60
 8003984:	2202      	movs	r2, #2
 8003986:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	015a      	lsls	r2, r3, #5
 800398c:	69bb      	ldr	r3, [r7, #24]
 800398e:	4413      	add	r3, r2
 8003990:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003994:	461a      	mov	r2, r3
 8003996:	2380      	movs	r3, #128	; 0x80
 8003998:	6093      	str	r3, [r2, #8]
}
 800399a:	e19b      	b.n	8003cd4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	015a      	lsls	r2, r3, #5
 80039a0:	69bb      	ldr	r3, [r7, #24]
 80039a2:	4413      	add	r3, r2
 80039a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039b2:	d134      	bne.n	8003a1e <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	015a      	lsls	r2, r3, #5
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	4413      	add	r3, r2
 80039bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	697a      	ldr	r2, [r7, #20]
 80039c4:	0151      	lsls	r1, r2, #5
 80039c6:	69ba      	ldr	r2, [r7, #24]
 80039c8:	440a      	add	r2, r1
 80039ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80039ce:	f043 0302 	orr.w	r3, r3, #2
 80039d2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	697a      	ldr	r2, [r7, #20]
 80039da:	b2d2      	uxtb	r2, r2
 80039dc:	4611      	mov	r1, r2
 80039de:	4618      	mov	r0, r3
 80039e0:	f002 fca7 	bl	8006332 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	015a      	lsls	r2, r3, #5
 80039e8:	69bb      	ldr	r3, [r7, #24]
 80039ea:	4413      	add	r3, r2
 80039ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039f0:	461a      	mov	r2, r3
 80039f2:	2310      	movs	r3, #16
 80039f4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	015a      	lsls	r2, r3, #5
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	4413      	add	r3, r2
 80039fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a02:	461a      	mov	r2, r3
 8003a04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a08:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	212c      	movs	r1, #44	; 0x2c
 8003a10:	fb01 f303 	mul.w	r3, r1, r3
 8003a14:	4413      	add	r3, r2
 8003a16:	3361      	adds	r3, #97	; 0x61
 8003a18:	2208      	movs	r2, #8
 8003a1a:	701a      	strb	r2, [r3, #0]
}
 8003a1c:	e15a      	b.n	8003cd4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	015a      	lsls	r2, r3, #5
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	4413      	add	r3, r2
 8003a26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	f003 0302 	and.w	r3, r3, #2
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	f040 814f 	bne.w	8003cd4 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	015a      	lsls	r2, r3, #5
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	4413      	add	r3, r2
 8003a3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	697a      	ldr	r2, [r7, #20]
 8003a46:	0151      	lsls	r1, r2, #5
 8003a48:	69ba      	ldr	r2, [r7, #24]
 8003a4a:	440a      	add	r2, r1
 8003a4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a50:	f023 0302 	bic.w	r3, r3, #2
 8003a54:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	212c      	movs	r1, #44	; 0x2c
 8003a5c:	fb01 f303 	mul.w	r3, r1, r3
 8003a60:	4413      	add	r3, r2
 8003a62:	3361      	adds	r3, #97	; 0x61
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d17d      	bne.n	8003b66 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	212c      	movs	r1, #44	; 0x2c
 8003a70:	fb01 f303 	mul.w	r3, r1, r3
 8003a74:	4413      	add	r3, r2
 8003a76:	3360      	adds	r3, #96	; 0x60
 8003a78:	2201      	movs	r2, #1
 8003a7a:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	212c      	movs	r1, #44	; 0x2c
 8003a82:	fb01 f303 	mul.w	r3, r1, r3
 8003a86:	4413      	add	r3, r2
 8003a88:	333f      	adds	r3, #63	; 0x3f
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d00a      	beq.n	8003aa6 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	212c      	movs	r1, #44	; 0x2c
 8003a96:	fb01 f303 	mul.w	r3, r1, r3
 8003a9a:	4413      	add	r3, r2
 8003a9c:	333f      	adds	r3, #63	; 0x3f
 8003a9e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003aa0:	2b03      	cmp	r3, #3
 8003aa2:	f040 8100 	bne.w	8003ca6 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	691b      	ldr	r3, [r3, #16]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d113      	bne.n	8003ad6 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	212c      	movs	r1, #44	; 0x2c
 8003ab4:	fb01 f303 	mul.w	r3, r1, r3
 8003ab8:	4413      	add	r3, r2
 8003aba:	3355      	adds	r3, #85	; 0x55
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	f083 0301 	eor.w	r3, r3, #1
 8003ac2:	b2d8      	uxtb	r0, r3
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	212c      	movs	r1, #44	; 0x2c
 8003aca:	fb01 f303 	mul.w	r3, r1, r3
 8003ace:	4413      	add	r3, r2
 8003ad0:	3355      	adds	r3, #85	; 0x55
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	f040 80e3 	bne.w	8003ca6 <HCD_HC_OUT_IRQHandler+0x7cc>
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	212c      	movs	r1, #44	; 0x2c
 8003ae6:	fb01 f303 	mul.w	r3, r1, r3
 8003aea:	4413      	add	r3, r2
 8003aec:	334c      	adds	r3, #76	; 0x4c
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	f000 80d8 	beq.w	8003ca6 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	212c      	movs	r1, #44	; 0x2c
 8003afc:	fb01 f303 	mul.w	r3, r1, r3
 8003b00:	4413      	add	r3, r2
 8003b02:	334c      	adds	r3, #76	; 0x4c
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	6879      	ldr	r1, [r7, #4]
 8003b08:	697a      	ldr	r2, [r7, #20]
 8003b0a:	202c      	movs	r0, #44	; 0x2c
 8003b0c:	fb00 f202 	mul.w	r2, r0, r2
 8003b10:	440a      	add	r2, r1
 8003b12:	3240      	adds	r2, #64	; 0x40
 8003b14:	8812      	ldrh	r2, [r2, #0]
 8003b16:	4413      	add	r3, r2
 8003b18:	3b01      	subs	r3, #1
 8003b1a:	6879      	ldr	r1, [r7, #4]
 8003b1c:	697a      	ldr	r2, [r7, #20]
 8003b1e:	202c      	movs	r0, #44	; 0x2c
 8003b20:	fb00 f202 	mul.w	r2, r0, r2
 8003b24:	440a      	add	r2, r1
 8003b26:	3240      	adds	r2, #64	; 0x40
 8003b28:	8812      	ldrh	r2, [r2, #0]
 8003b2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b2e:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f003 0301 	and.w	r3, r3, #1
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	f000 80b5 	beq.w	8003ca6 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	212c      	movs	r1, #44	; 0x2c
 8003b42:	fb01 f303 	mul.w	r3, r1, r3
 8003b46:	4413      	add	r3, r2
 8003b48:	3355      	adds	r3, #85	; 0x55
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	f083 0301 	eor.w	r3, r3, #1
 8003b50:	b2d8      	uxtb	r0, r3
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	212c      	movs	r1, #44	; 0x2c
 8003b58:	fb01 f303 	mul.w	r3, r1, r3
 8003b5c:	4413      	add	r3, r2
 8003b5e:	3355      	adds	r3, #85	; 0x55
 8003b60:	4602      	mov	r2, r0
 8003b62:	701a      	strb	r2, [r3, #0]
 8003b64:	e09f      	b.n	8003ca6 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	212c      	movs	r1, #44	; 0x2c
 8003b6c:	fb01 f303 	mul.w	r3, r1, r3
 8003b70:	4413      	add	r3, r2
 8003b72:	3361      	adds	r3, #97	; 0x61
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	2b03      	cmp	r3, #3
 8003b78:	d109      	bne.n	8003b8e <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	212c      	movs	r1, #44	; 0x2c
 8003b80:	fb01 f303 	mul.w	r3, r1, r3
 8003b84:	4413      	add	r3, r2
 8003b86:	3360      	adds	r3, #96	; 0x60
 8003b88:	2202      	movs	r2, #2
 8003b8a:	701a      	strb	r2, [r3, #0]
 8003b8c:	e08b      	b.n	8003ca6 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	212c      	movs	r1, #44	; 0x2c
 8003b94:	fb01 f303 	mul.w	r3, r1, r3
 8003b98:	4413      	add	r3, r2
 8003b9a:	3361      	adds	r3, #97	; 0x61
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	2b04      	cmp	r3, #4
 8003ba0:	d109      	bne.n	8003bb6 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	212c      	movs	r1, #44	; 0x2c
 8003ba8:	fb01 f303 	mul.w	r3, r1, r3
 8003bac:	4413      	add	r3, r2
 8003bae:	3360      	adds	r3, #96	; 0x60
 8003bb0:	2202      	movs	r2, #2
 8003bb2:	701a      	strb	r2, [r3, #0]
 8003bb4:	e077      	b.n	8003ca6 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	212c      	movs	r1, #44	; 0x2c
 8003bbc:	fb01 f303 	mul.w	r3, r1, r3
 8003bc0:	4413      	add	r3, r2
 8003bc2:	3361      	adds	r3, #97	; 0x61
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	2b05      	cmp	r3, #5
 8003bc8:	d109      	bne.n	8003bde <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	212c      	movs	r1, #44	; 0x2c
 8003bd0:	fb01 f303 	mul.w	r3, r1, r3
 8003bd4:	4413      	add	r3, r2
 8003bd6:	3360      	adds	r3, #96	; 0x60
 8003bd8:	2205      	movs	r2, #5
 8003bda:	701a      	strb	r2, [r3, #0]
 8003bdc:	e063      	b.n	8003ca6 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	212c      	movs	r1, #44	; 0x2c
 8003be4:	fb01 f303 	mul.w	r3, r1, r3
 8003be8:	4413      	add	r3, r2
 8003bea:	3361      	adds	r3, #97	; 0x61
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	2b06      	cmp	r3, #6
 8003bf0:	d009      	beq.n	8003c06 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	212c      	movs	r1, #44	; 0x2c
 8003bf8:	fb01 f303 	mul.w	r3, r1, r3
 8003bfc:	4413      	add	r3, r2
 8003bfe:	3361      	adds	r3, #97	; 0x61
 8003c00:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003c02:	2b08      	cmp	r3, #8
 8003c04:	d14f      	bne.n	8003ca6 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	212c      	movs	r1, #44	; 0x2c
 8003c0c:	fb01 f303 	mul.w	r3, r1, r3
 8003c10:	4413      	add	r3, r2
 8003c12:	335c      	adds	r3, #92	; 0x5c
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	1c5a      	adds	r2, r3, #1
 8003c18:	6879      	ldr	r1, [r7, #4]
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	202c      	movs	r0, #44	; 0x2c
 8003c1e:	fb00 f303 	mul.w	r3, r0, r3
 8003c22:	440b      	add	r3, r1
 8003c24:	335c      	adds	r3, #92	; 0x5c
 8003c26:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	212c      	movs	r1, #44	; 0x2c
 8003c2e:	fb01 f303 	mul.w	r3, r1, r3
 8003c32:	4413      	add	r3, r2
 8003c34:	335c      	adds	r3, #92	; 0x5c
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d912      	bls.n	8003c62 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	212c      	movs	r1, #44	; 0x2c
 8003c42:	fb01 f303 	mul.w	r3, r1, r3
 8003c46:	4413      	add	r3, r2
 8003c48:	335c      	adds	r3, #92	; 0x5c
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	212c      	movs	r1, #44	; 0x2c
 8003c54:	fb01 f303 	mul.w	r3, r1, r3
 8003c58:	4413      	add	r3, r2
 8003c5a:	3360      	adds	r3, #96	; 0x60
 8003c5c:	2204      	movs	r2, #4
 8003c5e:	701a      	strb	r2, [r3, #0]
 8003c60:	e021      	b.n	8003ca6 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	212c      	movs	r1, #44	; 0x2c
 8003c68:	fb01 f303 	mul.w	r3, r1, r3
 8003c6c:	4413      	add	r3, r2
 8003c6e:	3360      	adds	r3, #96	; 0x60
 8003c70:	2202      	movs	r2, #2
 8003c72:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	015a      	lsls	r2, r3, #5
 8003c78:	69bb      	ldr	r3, [r7, #24]
 8003c7a:	4413      	add	r3, r2
 8003c7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003c8a:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003c92:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	015a      	lsls	r2, r3, #5
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	4413      	add	r3, r2
 8003c9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	015a      	lsls	r2, r3, #5
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	4413      	add	r3, r2
 8003cae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	2302      	movs	r3, #2
 8003cb6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	b2d9      	uxtb	r1, r3
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	202c      	movs	r0, #44	; 0x2c
 8003cc2:	fb00 f303 	mul.w	r3, r0, r3
 8003cc6:	4413      	add	r3, r2
 8003cc8:	3360      	adds	r3, #96	; 0x60
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	461a      	mov	r2, r3
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f004 fcec 	bl	80086ac <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003cd4:	bf00      	nop
 8003cd6:	3720      	adds	r7, #32
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b08a      	sub	sp, #40	; 0x28
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cec:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	6a1b      	ldr	r3, [r3, #32]
 8003cf4:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	f003 030f 	and.w	r3, r3, #15
 8003cfc:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	0c5b      	lsrs	r3, r3, #17
 8003d02:	f003 030f 	and.w	r3, r3, #15
 8003d06:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	091b      	lsrs	r3, r3, #4
 8003d0c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d10:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d004      	beq.n	8003d22 <HCD_RXQLVL_IRQHandler+0x46>
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	2b05      	cmp	r3, #5
 8003d1c:	f000 80a9 	beq.w	8003e72 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003d20:	e0aa      	b.n	8003e78 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	f000 80a6 	beq.w	8003e76 <HCD_RXQLVL_IRQHandler+0x19a>
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	212c      	movs	r1, #44	; 0x2c
 8003d30:	fb01 f303 	mul.w	r3, r1, r3
 8003d34:	4413      	add	r3, r2
 8003d36:	3344      	adds	r3, #68	; 0x44
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	f000 809b 	beq.w	8003e76 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	212c      	movs	r1, #44	; 0x2c
 8003d46:	fb01 f303 	mul.w	r3, r1, r3
 8003d4a:	4413      	add	r3, r2
 8003d4c:	3350      	adds	r3, #80	; 0x50
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	441a      	add	r2, r3
 8003d54:	6879      	ldr	r1, [r7, #4]
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	202c      	movs	r0, #44	; 0x2c
 8003d5a:	fb00 f303 	mul.w	r3, r0, r3
 8003d5e:	440b      	add	r3, r1
 8003d60:	334c      	adds	r3, #76	; 0x4c
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d87a      	bhi.n	8003e5e <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6818      	ldr	r0, [r3, #0]
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	212c      	movs	r1, #44	; 0x2c
 8003d72:	fb01 f303 	mul.w	r3, r1, r3
 8003d76:	4413      	add	r3, r2
 8003d78:	3344      	adds	r3, #68	; 0x44
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	693a      	ldr	r2, [r7, #16]
 8003d7e:	b292      	uxth	r2, r2
 8003d80:	4619      	mov	r1, r3
 8003d82:	f001 fe4f 	bl	8005a24 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	69bb      	ldr	r3, [r7, #24]
 8003d8a:	212c      	movs	r1, #44	; 0x2c
 8003d8c:	fb01 f303 	mul.w	r3, r1, r3
 8003d90:	4413      	add	r3, r2
 8003d92:	3344      	adds	r3, #68	; 0x44
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	441a      	add	r2, r3
 8003d9a:	6879      	ldr	r1, [r7, #4]
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	202c      	movs	r0, #44	; 0x2c
 8003da0:	fb00 f303 	mul.w	r3, r0, r3
 8003da4:	440b      	add	r3, r1
 8003da6:	3344      	adds	r3, #68	; 0x44
 8003da8:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	212c      	movs	r1, #44	; 0x2c
 8003db0:	fb01 f303 	mul.w	r3, r1, r3
 8003db4:	4413      	add	r3, r2
 8003db6:	3350      	adds	r3, #80	; 0x50
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	441a      	add	r2, r3
 8003dbe:	6879      	ldr	r1, [r7, #4]
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	202c      	movs	r0, #44	; 0x2c
 8003dc4:	fb00 f303 	mul.w	r3, r0, r3
 8003dc8:	440b      	add	r3, r1
 8003dca:	3350      	adds	r3, #80	; 0x50
 8003dcc:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	015a      	lsls	r2, r3, #5
 8003dd2:	6a3b      	ldr	r3, [r7, #32]
 8003dd4:	4413      	add	r3, r2
 8003dd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dda:	691b      	ldr	r3, [r3, #16]
 8003ddc:	0cdb      	lsrs	r3, r3, #19
 8003dde:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003de2:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	69bb      	ldr	r3, [r7, #24]
 8003de8:	212c      	movs	r1, #44	; 0x2c
 8003dea:	fb01 f303 	mul.w	r3, r1, r3
 8003dee:	4413      	add	r3, r2
 8003df0:	3340      	adds	r3, #64	; 0x40
 8003df2:	881b      	ldrh	r3, [r3, #0]
 8003df4:	461a      	mov	r2, r3
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d13c      	bne.n	8003e76 <HCD_RXQLVL_IRQHandler+0x19a>
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d039      	beq.n	8003e76 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	015a      	lsls	r2, r3, #5
 8003e06:	6a3b      	ldr	r3, [r7, #32]
 8003e08:	4413      	add	r3, r2
 8003e0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003e18:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003e20:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	015a      	lsls	r2, r3, #5
 8003e26:	6a3b      	ldr	r3, [r7, #32]
 8003e28:	4413      	add	r3, r2
 8003e2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e2e:	461a      	mov	r2, r3
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	212c      	movs	r1, #44	; 0x2c
 8003e3a:	fb01 f303 	mul.w	r3, r1, r3
 8003e3e:	4413      	add	r3, r2
 8003e40:	3354      	adds	r3, #84	; 0x54
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	f083 0301 	eor.w	r3, r3, #1
 8003e48:	b2d8      	uxtb	r0, r3
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	212c      	movs	r1, #44	; 0x2c
 8003e50:	fb01 f303 	mul.w	r3, r1, r3
 8003e54:	4413      	add	r3, r2
 8003e56:	3354      	adds	r3, #84	; 0x54
 8003e58:	4602      	mov	r2, r0
 8003e5a:	701a      	strb	r2, [r3, #0]
      break;
 8003e5c:	e00b      	b.n	8003e76 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	212c      	movs	r1, #44	; 0x2c
 8003e64:	fb01 f303 	mul.w	r3, r1, r3
 8003e68:	4413      	add	r3, r2
 8003e6a:	3360      	adds	r3, #96	; 0x60
 8003e6c:	2204      	movs	r2, #4
 8003e6e:	701a      	strb	r2, [r3, #0]
      break;
 8003e70:	e001      	b.n	8003e76 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003e72:	bf00      	nop
 8003e74:	e000      	b.n	8003e78 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003e76:	bf00      	nop
  }
}
 8003e78:	bf00      	nop
 8003e7a:	3728      	adds	r7, #40	; 0x28
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b086      	sub	sp, #24
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003eac:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	f003 0302 	and.w	r3, r3, #2
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d10b      	bne.n	8003ed0 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f003 0301 	and.w	r3, r3, #1
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d102      	bne.n	8003ec8 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f004 fbd6 	bl	8008674 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	f043 0302 	orr.w	r3, r3, #2
 8003ece:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f003 0308 	and.w	r3, r3, #8
 8003ed6:	2b08      	cmp	r3, #8
 8003ed8:	d132      	bne.n	8003f40 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	f043 0308 	orr.w	r3, r3, #8
 8003ee0:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	f003 0304 	and.w	r3, r3, #4
 8003ee8:	2b04      	cmp	r3, #4
 8003eea:	d126      	bne.n	8003f3a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	699b      	ldr	r3, [r3, #24]
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d113      	bne.n	8003f1c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003efa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003efe:	d106      	bne.n	8003f0e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2102      	movs	r1, #2
 8003f06:	4618      	mov	r0, r3
 8003f08:	f001 feec 	bl	8005ce4 <USB_InitFSLSPClkSel>
 8003f0c:	e011      	b.n	8003f32 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	2101      	movs	r1, #1
 8003f14:	4618      	mov	r0, r3
 8003f16:	f001 fee5 	bl	8005ce4 <USB_InitFSLSPClkSel>
 8003f1a:	e00a      	b.n	8003f32 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d106      	bne.n	8003f32 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003f30:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f004 fbc8 	bl	80086c8 <HAL_HCD_PortEnabled_Callback>
 8003f38:	e002      	b.n	8003f40 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f004 fbd2 	bl	80086e4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f003 0320 	and.w	r3, r3, #32
 8003f46:	2b20      	cmp	r3, #32
 8003f48:	d103      	bne.n	8003f52 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	f043 0320 	orr.w	r3, r3, #32
 8003f50:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003f58:	461a      	mov	r2, r3
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	6013      	str	r3, [r2, #0]
}
 8003f5e:	bf00      	nop
 8003f60:	3718      	adds	r7, #24
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
	...

08003f68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b084      	sub	sp, #16
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d101      	bne.n	8003f7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e12b      	b.n	80041d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d106      	bne.n	8003f94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f7fc fdda 	bl	8000b48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2224      	movs	r2, #36	; 0x24
 8003f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f022 0201 	bic.w	r2, r2, #1
 8003faa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003fba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003fca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003fcc:	f001 f9fc 	bl	80053c8 <HAL_RCC_GetPCLK1Freq>
 8003fd0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	4a81      	ldr	r2, [pc, #516]	; (80041dc <HAL_I2C_Init+0x274>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d807      	bhi.n	8003fec <HAL_I2C_Init+0x84>
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	4a80      	ldr	r2, [pc, #512]	; (80041e0 <HAL_I2C_Init+0x278>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	bf94      	ite	ls
 8003fe4:	2301      	movls	r3, #1
 8003fe6:	2300      	movhi	r3, #0
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	e006      	b.n	8003ffa <HAL_I2C_Init+0x92>
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	4a7d      	ldr	r2, [pc, #500]	; (80041e4 <HAL_I2C_Init+0x27c>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	bf94      	ite	ls
 8003ff4:	2301      	movls	r3, #1
 8003ff6:	2300      	movhi	r3, #0
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d001      	beq.n	8004002 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e0e7      	b.n	80041d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	4a78      	ldr	r2, [pc, #480]	; (80041e8 <HAL_I2C_Init+0x280>)
 8004006:	fba2 2303 	umull	r2, r3, r2, r3
 800400a:	0c9b      	lsrs	r3, r3, #18
 800400c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	68ba      	ldr	r2, [r7, #8]
 800401e:	430a      	orrs	r2, r1
 8004020:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	6a1b      	ldr	r3, [r3, #32]
 8004028:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	4a6a      	ldr	r2, [pc, #424]	; (80041dc <HAL_I2C_Init+0x274>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d802      	bhi.n	800403c <HAL_I2C_Init+0xd4>
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	3301      	adds	r3, #1
 800403a:	e009      	b.n	8004050 <HAL_I2C_Init+0xe8>
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004042:	fb02 f303 	mul.w	r3, r2, r3
 8004046:	4a69      	ldr	r2, [pc, #420]	; (80041ec <HAL_I2C_Init+0x284>)
 8004048:	fba2 2303 	umull	r2, r3, r2, r3
 800404c:	099b      	lsrs	r3, r3, #6
 800404e:	3301      	adds	r3, #1
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	6812      	ldr	r2, [r2, #0]
 8004054:	430b      	orrs	r3, r1
 8004056:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	69db      	ldr	r3, [r3, #28]
 800405e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004062:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	495c      	ldr	r1, [pc, #368]	; (80041dc <HAL_I2C_Init+0x274>)
 800406c:	428b      	cmp	r3, r1
 800406e:	d819      	bhi.n	80040a4 <HAL_I2C_Init+0x13c>
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	1e59      	subs	r1, r3, #1
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	005b      	lsls	r3, r3, #1
 800407a:	fbb1 f3f3 	udiv	r3, r1, r3
 800407e:	1c59      	adds	r1, r3, #1
 8004080:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004084:	400b      	ands	r3, r1
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00a      	beq.n	80040a0 <HAL_I2C_Init+0x138>
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	1e59      	subs	r1, r3, #1
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	005b      	lsls	r3, r3, #1
 8004094:	fbb1 f3f3 	udiv	r3, r1, r3
 8004098:	3301      	adds	r3, #1
 800409a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800409e:	e051      	b.n	8004144 <HAL_I2C_Init+0x1dc>
 80040a0:	2304      	movs	r3, #4
 80040a2:	e04f      	b.n	8004144 <HAL_I2C_Init+0x1dc>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d111      	bne.n	80040d0 <HAL_I2C_Init+0x168>
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	1e58      	subs	r0, r3, #1
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6859      	ldr	r1, [r3, #4]
 80040b4:	460b      	mov	r3, r1
 80040b6:	005b      	lsls	r3, r3, #1
 80040b8:	440b      	add	r3, r1
 80040ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80040be:	3301      	adds	r3, #1
 80040c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	bf0c      	ite	eq
 80040c8:	2301      	moveq	r3, #1
 80040ca:	2300      	movne	r3, #0
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	e012      	b.n	80040f6 <HAL_I2C_Init+0x18e>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	1e58      	subs	r0, r3, #1
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6859      	ldr	r1, [r3, #4]
 80040d8:	460b      	mov	r3, r1
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	440b      	add	r3, r1
 80040de:	0099      	lsls	r1, r3, #2
 80040e0:	440b      	add	r3, r1
 80040e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80040e6:	3301      	adds	r3, #1
 80040e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	bf0c      	ite	eq
 80040f0:	2301      	moveq	r3, #1
 80040f2:	2300      	movne	r3, #0
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d001      	beq.n	80040fe <HAL_I2C_Init+0x196>
 80040fa:	2301      	movs	r3, #1
 80040fc:	e022      	b.n	8004144 <HAL_I2C_Init+0x1dc>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d10e      	bne.n	8004124 <HAL_I2C_Init+0x1bc>
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	1e58      	subs	r0, r3, #1
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6859      	ldr	r1, [r3, #4]
 800410e:	460b      	mov	r3, r1
 8004110:	005b      	lsls	r3, r3, #1
 8004112:	440b      	add	r3, r1
 8004114:	fbb0 f3f3 	udiv	r3, r0, r3
 8004118:	3301      	adds	r3, #1
 800411a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800411e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004122:	e00f      	b.n	8004144 <HAL_I2C_Init+0x1dc>
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	1e58      	subs	r0, r3, #1
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6859      	ldr	r1, [r3, #4]
 800412c:	460b      	mov	r3, r1
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	440b      	add	r3, r1
 8004132:	0099      	lsls	r1, r3, #2
 8004134:	440b      	add	r3, r1
 8004136:	fbb0 f3f3 	udiv	r3, r0, r3
 800413a:	3301      	adds	r3, #1
 800413c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004140:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004144:	6879      	ldr	r1, [r7, #4]
 8004146:	6809      	ldr	r1, [r1, #0]
 8004148:	4313      	orrs	r3, r2
 800414a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	69da      	ldr	r2, [r3, #28]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a1b      	ldr	r3, [r3, #32]
 800415e:	431a      	orrs	r2, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	430a      	orrs	r2, r1
 8004166:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004172:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	6911      	ldr	r1, [r2, #16]
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	68d2      	ldr	r2, [r2, #12]
 800417e:	4311      	orrs	r1, r2
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	6812      	ldr	r2, [r2, #0]
 8004184:	430b      	orrs	r3, r1
 8004186:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	695a      	ldr	r2, [r3, #20]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	699b      	ldr	r3, [r3, #24]
 800419a:	431a      	orrs	r2, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	430a      	orrs	r2, r1
 80041a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f042 0201 	orr.w	r2, r2, #1
 80041b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2220      	movs	r2, #32
 80041be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3710      	adds	r7, #16
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	000186a0 	.word	0x000186a0
 80041e0:	001e847f 	.word	0x001e847f
 80041e4:	003d08ff 	.word	0x003d08ff
 80041e8:	431bde83 	.word	0x431bde83
 80041ec:	10624dd3 	.word	0x10624dd3

080041f0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b088      	sub	sp, #32
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d101      	bne.n	8004202 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e128      	b.n	8004454 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004208:	b2db      	uxtb	r3, r3
 800420a:	2b00      	cmp	r3, #0
 800420c:	d109      	bne.n	8004222 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a90      	ldr	r2, [pc, #576]	; (800445c <HAL_I2S_Init+0x26c>)
 800421a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f7fc fcdb 	bl	8000bd8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2202      	movs	r2, #2
 8004226:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	69db      	ldr	r3, [r3, #28]
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	6812      	ldr	r2, [r2, #0]
 8004234:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004238:	f023 030f 	bic.w	r3, r3, #15
 800423c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	2202      	movs	r2, #2
 8004244:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	695b      	ldr	r3, [r3, #20]
 800424a:	2b02      	cmp	r3, #2
 800424c:	d060      	beq.n	8004310 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d102      	bne.n	800425c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004256:	2310      	movs	r3, #16
 8004258:	617b      	str	r3, [r7, #20]
 800425a:	e001      	b.n	8004260 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800425c:	2320      	movs	r3, #32
 800425e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	2b20      	cmp	r3, #32
 8004266:	d802      	bhi.n	800426e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	005b      	lsls	r3, r3, #1
 800426c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800426e:	2001      	movs	r0, #1
 8004270:	f001 f9a0 	bl	80055b4 <HAL_RCCEx_GetPeriphCLKFreq>
 8004274:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800427e:	d125      	bne.n	80042cc <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d010      	beq.n	80042aa <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	68fa      	ldr	r2, [r7, #12]
 800428e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004292:	4613      	mov	r3, r2
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	4413      	add	r3, r2
 8004298:	005b      	lsls	r3, r3, #1
 800429a:	461a      	mov	r2, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	695b      	ldr	r3, [r3, #20]
 80042a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042a4:	3305      	adds	r3, #5
 80042a6:	613b      	str	r3, [r7, #16]
 80042a8:	e01f      	b.n	80042ea <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	00db      	lsls	r3, r3, #3
 80042ae:	68fa      	ldr	r2, [r7, #12]
 80042b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80042b4:	4613      	mov	r3, r2
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	4413      	add	r3, r2
 80042ba:	005b      	lsls	r3, r3, #1
 80042bc:	461a      	mov	r2, r3
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	695b      	ldr	r3, [r3, #20]
 80042c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80042c6:	3305      	adds	r3, #5
 80042c8:	613b      	str	r3, [r7, #16]
 80042ca:	e00e      	b.n	80042ea <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80042cc:	68fa      	ldr	r2, [r7, #12]
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80042d4:	4613      	mov	r3, r2
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	4413      	add	r3, r2
 80042da:	005b      	lsls	r3, r3, #1
 80042dc:	461a      	mov	r2, r3
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	695b      	ldr	r3, [r3, #20]
 80042e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80042e6:	3305      	adds	r3, #5
 80042e8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	4a5c      	ldr	r2, [pc, #368]	; (8004460 <HAL_I2S_Init+0x270>)
 80042ee:	fba2 2303 	umull	r2, r3, r2, r3
 80042f2:	08db      	lsrs	r3, r3, #3
 80042f4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	f003 0301 	and.w	r3, r3, #1
 80042fc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80042fe:	693a      	ldr	r2, [r7, #16]
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	085b      	lsrs	r3, r3, #1
 8004306:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	021b      	lsls	r3, r3, #8
 800430c:	61bb      	str	r3, [r7, #24]
 800430e:	e003      	b.n	8004318 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004310:	2302      	movs	r3, #2
 8004312:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004314:	2300      	movs	r3, #0
 8004316:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	2b01      	cmp	r3, #1
 800431c:	d902      	bls.n	8004324 <HAL_I2S_Init+0x134>
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	2bff      	cmp	r3, #255	; 0xff
 8004322:	d907      	bls.n	8004334 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004328:	f043 0210 	orr.w	r2, r3, #16
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e08f      	b.n	8004454 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	691a      	ldr	r2, [r3, #16]
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	ea42 0103 	orr.w	r1, r2, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	69fa      	ldr	r2, [r7, #28]
 8004344:	430a      	orrs	r2, r1
 8004346:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	69db      	ldr	r3, [r3, #28]
 800434e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004352:	f023 030f 	bic.w	r3, r3, #15
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	6851      	ldr	r1, [r2, #4]
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	6892      	ldr	r2, [r2, #8]
 800435e:	4311      	orrs	r1, r2
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	68d2      	ldr	r2, [r2, #12]
 8004364:	4311      	orrs	r1, r2
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	6992      	ldr	r2, [r2, #24]
 800436a:	430a      	orrs	r2, r1
 800436c:	431a      	orrs	r2, r3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004376:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6a1b      	ldr	r3, [r3, #32]
 800437c:	2b01      	cmp	r3, #1
 800437e:	d161      	bne.n	8004444 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	4a38      	ldr	r2, [pc, #224]	; (8004464 <HAL_I2S_Init+0x274>)
 8004384:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a37      	ldr	r2, [pc, #220]	; (8004468 <HAL_I2S_Init+0x278>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d101      	bne.n	8004394 <HAL_I2S_Init+0x1a4>
 8004390:	4b36      	ldr	r3, [pc, #216]	; (800446c <HAL_I2S_Init+0x27c>)
 8004392:	e001      	b.n	8004398 <HAL_I2S_Init+0x1a8>
 8004394:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004398:	69db      	ldr	r3, [r3, #28]
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	6812      	ldr	r2, [r2, #0]
 800439e:	4932      	ldr	r1, [pc, #200]	; (8004468 <HAL_I2S_Init+0x278>)
 80043a0:	428a      	cmp	r2, r1
 80043a2:	d101      	bne.n	80043a8 <HAL_I2S_Init+0x1b8>
 80043a4:	4a31      	ldr	r2, [pc, #196]	; (800446c <HAL_I2S_Init+0x27c>)
 80043a6:	e001      	b.n	80043ac <HAL_I2S_Init+0x1bc>
 80043a8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80043ac:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80043b0:	f023 030f 	bic.w	r3, r3, #15
 80043b4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a2b      	ldr	r2, [pc, #172]	; (8004468 <HAL_I2S_Init+0x278>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d101      	bne.n	80043c4 <HAL_I2S_Init+0x1d4>
 80043c0:	4b2a      	ldr	r3, [pc, #168]	; (800446c <HAL_I2S_Init+0x27c>)
 80043c2:	e001      	b.n	80043c8 <HAL_I2S_Init+0x1d8>
 80043c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043c8:	2202      	movs	r2, #2
 80043ca:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a25      	ldr	r2, [pc, #148]	; (8004468 <HAL_I2S_Init+0x278>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d101      	bne.n	80043da <HAL_I2S_Init+0x1ea>
 80043d6:	4b25      	ldr	r3, [pc, #148]	; (800446c <HAL_I2S_Init+0x27c>)
 80043d8:	e001      	b.n	80043de <HAL_I2S_Init+0x1ee>
 80043da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043de:	69db      	ldr	r3, [r3, #28]
 80043e0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043ea:	d003      	beq.n	80043f4 <HAL_I2S_Init+0x204>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d103      	bne.n	80043fc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80043f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80043f8:	613b      	str	r3, [r7, #16]
 80043fa:	e001      	b.n	8004400 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80043fc:	2300      	movs	r3, #0
 80043fe:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800440a:	4313      	orrs	r3, r2
 800440c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004414:	4313      	orrs	r3, r2
 8004416:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	699b      	ldr	r3, [r3, #24]
 800441c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800441e:	4313      	orrs	r3, r2
 8004420:	b29a      	uxth	r2, r3
 8004422:	897b      	ldrh	r3, [r7, #10]
 8004424:	4313      	orrs	r3, r2
 8004426:	b29b      	uxth	r3, r3
 8004428:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800442c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a0d      	ldr	r2, [pc, #52]	; (8004468 <HAL_I2S_Init+0x278>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d101      	bne.n	800443c <HAL_I2S_Init+0x24c>
 8004438:	4b0c      	ldr	r3, [pc, #48]	; (800446c <HAL_I2S_Init+0x27c>)
 800443a:	e001      	b.n	8004440 <HAL_I2S_Init+0x250>
 800443c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004440:	897a      	ldrh	r2, [r7, #10]
 8004442:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2201      	movs	r2, #1
 800444e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004452:	2300      	movs	r3, #0
}
 8004454:	4618      	mov	r0, r3
 8004456:	3720      	adds	r7, #32
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}
 800445c:	08004567 	.word	0x08004567
 8004460:	cccccccd 	.word	0xcccccccd
 8004464:	0800467d 	.word	0x0800467d
 8004468:	40003800 	.word	0x40003800
 800446c:	40003400 	.word	0x40003400

08004470 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004478:	bf00      	nop
 800447a:	370c      	adds	r7, #12
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr

08004484 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800448c:	bf00      	nop
 800448e:	370c      	adds	r7, #12
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr

08004498 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80044a0:	bf00      	nop
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b082      	sub	sp, #8
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b8:	881a      	ldrh	r2, [r3, #0]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c4:	1c9a      	adds	r2, r3, #2
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	3b01      	subs	r3, #1
 80044d2:	b29a      	uxth	r2, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044dc:	b29b      	uxth	r3, r3
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d10e      	bne.n	8004500 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	685a      	ldr	r2, [r3, #4]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80044f0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2201      	movs	r2, #1
 80044f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f7ff ffb8 	bl	8004470 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004500:	bf00      	nop
 8004502:	3708      	adds	r7, #8
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}

08004508 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b082      	sub	sp, #8
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	68da      	ldr	r2, [r3, #12]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800451a:	b292      	uxth	r2, r2
 800451c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004522:	1c9a      	adds	r2, r3, #2
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800452c:	b29b      	uxth	r3, r3
 800452e:	3b01      	subs	r3, #1
 8004530:	b29a      	uxth	r2, r3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800453a:	b29b      	uxth	r3, r3
 800453c:	2b00      	cmp	r3, #0
 800453e:	d10e      	bne.n	800455e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	685a      	ldr	r2, [r3, #4]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800454e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f7ff ff93 	bl	8004484 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800455e:	bf00      	nop
 8004560:	3708      	adds	r7, #8
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}

08004566 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004566:	b580      	push	{r7, lr}
 8004568:	b086      	sub	sp, #24
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800457c:	b2db      	uxtb	r3, r3
 800457e:	2b04      	cmp	r3, #4
 8004580:	d13a      	bne.n	80045f8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	f003 0301 	and.w	r3, r3, #1
 8004588:	2b01      	cmp	r3, #1
 800458a:	d109      	bne.n	80045a0 <I2S_IRQHandler+0x3a>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004596:	2b40      	cmp	r3, #64	; 0x40
 8004598:	d102      	bne.n	80045a0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f7ff ffb4 	bl	8004508 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045a6:	2b40      	cmp	r3, #64	; 0x40
 80045a8:	d126      	bne.n	80045f8 <I2S_IRQHandler+0x92>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f003 0320 	and.w	r3, r3, #32
 80045b4:	2b20      	cmp	r3, #32
 80045b6:	d11f      	bne.n	80045f8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	685a      	ldr	r2, [r3, #4]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80045c6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80045c8:	2300      	movs	r3, #0
 80045ca:	613b      	str	r3, [r7, #16]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	613b      	str	r3, [r7, #16]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	613b      	str	r3, [r7, #16]
 80045dc:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2201      	movs	r2, #1
 80045e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ea:	f043 0202 	orr.w	r2, r3, #2
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f7ff ff50 	bl	8004498 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	2b03      	cmp	r3, #3
 8004602:	d136      	bne.n	8004672 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	f003 0302 	and.w	r3, r3, #2
 800460a:	2b02      	cmp	r3, #2
 800460c:	d109      	bne.n	8004622 <I2S_IRQHandler+0xbc>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004618:	2b80      	cmp	r3, #128	; 0x80
 800461a:	d102      	bne.n	8004622 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f7ff ff45 	bl	80044ac <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	f003 0308 	and.w	r3, r3, #8
 8004628:	2b08      	cmp	r3, #8
 800462a:	d122      	bne.n	8004672 <I2S_IRQHandler+0x10c>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	f003 0320 	and.w	r3, r3, #32
 8004636:	2b20      	cmp	r3, #32
 8004638:	d11b      	bne.n	8004672 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	685a      	ldr	r2, [r3, #4]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004648:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800464a:	2300      	movs	r3, #0
 800464c:	60fb      	str	r3, [r7, #12]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	60fb      	str	r3, [r7, #12]
 8004656:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004664:	f043 0204 	orr.w	r2, r3, #4
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f7ff ff13 	bl	8004498 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004672:	bf00      	nop
 8004674:	3718      	adds	r7, #24
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
	...

0800467c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b088      	sub	sp, #32
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4aa2      	ldr	r2, [pc, #648]	; (800491c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d101      	bne.n	800469a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004696:	4ba2      	ldr	r3, [pc, #648]	; (8004920 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004698:	e001      	b.n	800469e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800469a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a9b      	ldr	r2, [pc, #620]	; (800491c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d101      	bne.n	80046b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80046b4:	4b9a      	ldr	r3, [pc, #616]	; (8004920 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80046b6:	e001      	b.n	80046bc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80046b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046c8:	d004      	beq.n	80046d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	f040 8099 	bne.w	8004806 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	f003 0302 	and.w	r3, r3, #2
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d107      	bne.n	80046ee <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d002      	beq.n	80046ee <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f000 f925 	bl	8004938 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	f003 0301 	and.w	r3, r3, #1
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d107      	bne.n	8004708 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d002      	beq.n	8004708 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f000 f9c8 	bl	8004a98 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004708:	69bb      	ldr	r3, [r7, #24]
 800470a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800470e:	2b40      	cmp	r3, #64	; 0x40
 8004710:	d13a      	bne.n	8004788 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	f003 0320 	and.w	r3, r3, #32
 8004718:	2b00      	cmp	r3, #0
 800471a:	d035      	beq.n	8004788 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a7e      	ldr	r2, [pc, #504]	; (800491c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d101      	bne.n	800472a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004726:	4b7e      	ldr	r3, [pc, #504]	; (8004920 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004728:	e001      	b.n	800472e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800472a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800472e:	685a      	ldr	r2, [r3, #4]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4979      	ldr	r1, [pc, #484]	; (800491c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004736:	428b      	cmp	r3, r1
 8004738:	d101      	bne.n	800473e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800473a:	4b79      	ldr	r3, [pc, #484]	; (8004920 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800473c:	e001      	b.n	8004742 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800473e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004742:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004746:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	685a      	ldr	r2, [r3, #4]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004756:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004758:	2300      	movs	r3, #0
 800475a:	60fb      	str	r3, [r7, #12]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	60fb      	str	r3, [r7, #12]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	60fb      	str	r3, [r7, #12]
 800476c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2201      	movs	r2, #1
 8004772:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800477a:	f043 0202 	orr.w	r2, r3, #2
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f7ff fe88 	bl	8004498 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	f003 0308 	and.w	r3, r3, #8
 800478e:	2b08      	cmp	r3, #8
 8004790:	f040 80be 	bne.w	8004910 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	f003 0320 	and.w	r3, r3, #32
 800479a:	2b00      	cmp	r3, #0
 800479c:	f000 80b8 	beq.w	8004910 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	685a      	ldr	r2, [r3, #4]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80047ae:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a59      	ldr	r2, [pc, #356]	; (800491c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d101      	bne.n	80047be <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80047ba:	4b59      	ldr	r3, [pc, #356]	; (8004920 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80047bc:	e001      	b.n	80047c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80047be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047c2:	685a      	ldr	r2, [r3, #4]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4954      	ldr	r1, [pc, #336]	; (800491c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80047ca:	428b      	cmp	r3, r1
 80047cc:	d101      	bne.n	80047d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80047ce:	4b54      	ldr	r3, [pc, #336]	; (8004920 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80047d0:	e001      	b.n	80047d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80047d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047d6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80047da:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80047dc:	2300      	movs	r3, #0
 80047de:	60bb      	str	r3, [r7, #8]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	60bb      	str	r3, [r7, #8]
 80047e8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2201      	movs	r2, #1
 80047ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047f6:	f043 0204 	orr.w	r2, r3, #4
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f7ff fe4a 	bl	8004498 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004804:	e084      	b.n	8004910 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	f003 0302 	and.w	r3, r3, #2
 800480c:	2b02      	cmp	r3, #2
 800480e:	d107      	bne.n	8004820 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004816:	2b00      	cmp	r3, #0
 8004818:	d002      	beq.n	8004820 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f000 f8be 	bl	800499c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004820:	69fb      	ldr	r3, [r7, #28]
 8004822:	f003 0301 	and.w	r3, r3, #1
 8004826:	2b01      	cmp	r3, #1
 8004828:	d107      	bne.n	800483a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004830:	2b00      	cmp	r3, #0
 8004832:	d002      	beq.n	800483a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f000 f8fd 	bl	8004a34 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004840:	2b40      	cmp	r3, #64	; 0x40
 8004842:	d12f      	bne.n	80048a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	f003 0320 	and.w	r3, r3, #32
 800484a:	2b00      	cmp	r3, #0
 800484c:	d02a      	beq.n	80048a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	685a      	ldr	r2, [r3, #4]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800485c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a2e      	ldr	r2, [pc, #184]	; (800491c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d101      	bne.n	800486c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004868:	4b2d      	ldr	r3, [pc, #180]	; (8004920 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800486a:	e001      	b.n	8004870 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800486c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004870:	685a      	ldr	r2, [r3, #4]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4929      	ldr	r1, [pc, #164]	; (800491c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004878:	428b      	cmp	r3, r1
 800487a:	d101      	bne.n	8004880 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800487c:	4b28      	ldr	r3, [pc, #160]	; (8004920 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800487e:	e001      	b.n	8004884 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004880:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004884:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004888:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2201      	movs	r2, #1
 800488e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004896:	f043 0202 	orr.w	r2, r3, #2
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f7ff fdfa 	bl	8004498 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80048a4:	69bb      	ldr	r3, [r7, #24]
 80048a6:	f003 0308 	and.w	r3, r3, #8
 80048aa:	2b08      	cmp	r3, #8
 80048ac:	d131      	bne.n	8004912 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	f003 0320 	and.w	r3, r3, #32
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d02c      	beq.n	8004912 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a17      	ldr	r2, [pc, #92]	; (800491c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d101      	bne.n	80048c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80048c2:	4b17      	ldr	r3, [pc, #92]	; (8004920 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80048c4:	e001      	b.n	80048ca <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80048c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80048ca:	685a      	ldr	r2, [r3, #4]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4912      	ldr	r1, [pc, #72]	; (800491c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80048d2:	428b      	cmp	r3, r1
 80048d4:	d101      	bne.n	80048da <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80048d6:	4b12      	ldr	r3, [pc, #72]	; (8004920 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80048d8:	e001      	b.n	80048de <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80048da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80048de:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80048e2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	685a      	ldr	r2, [r3, #4]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80048f2:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004900:	f043 0204 	orr.w	r2, r3, #4
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f7ff fdc5 	bl	8004498 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800490e:	e000      	b.n	8004912 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004910:	bf00      	nop
}
 8004912:	bf00      	nop
 8004914:	3720      	adds	r7, #32
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	40003800 	.word	0x40003800
 8004920:	40003400 	.word	0x40003400

08004924 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800492c:	bf00      	nop
 800492e:	370c      	adds	r7, #12
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b082      	sub	sp, #8
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004944:	1c99      	adds	r1, r3, #2
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	6251      	str	r1, [r2, #36]	; 0x24
 800494a:	881a      	ldrh	r2, [r3, #0]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004956:	b29b      	uxth	r3, r3
 8004958:	3b01      	subs	r3, #1
 800495a:	b29a      	uxth	r2, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004964:	b29b      	uxth	r3, r3
 8004966:	2b00      	cmp	r3, #0
 8004968:	d113      	bne.n	8004992 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	685a      	ldr	r2, [r3, #4]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004978:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800497e:	b29b      	uxth	r3, r3
 8004980:	2b00      	cmp	r3, #0
 8004982:	d106      	bne.n	8004992 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f7ff ffc9 	bl	8004924 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004992:	bf00      	nop
 8004994:	3708      	adds	r7, #8
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
	...

0800499c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b082      	sub	sp, #8
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a8:	1c99      	adds	r1, r3, #2
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	6251      	str	r1, [r2, #36]	; 0x24
 80049ae:	8819      	ldrh	r1, [r3, #0]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a1d      	ldr	r2, [pc, #116]	; (8004a2c <I2SEx_TxISR_I2SExt+0x90>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d101      	bne.n	80049be <I2SEx_TxISR_I2SExt+0x22>
 80049ba:	4b1d      	ldr	r3, [pc, #116]	; (8004a30 <I2SEx_TxISR_I2SExt+0x94>)
 80049bc:	e001      	b.n	80049c2 <I2SEx_TxISR_I2SExt+0x26>
 80049be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80049c2:	460a      	mov	r2, r1
 80049c4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	3b01      	subs	r3, #1
 80049ce:	b29a      	uxth	r2, r3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049d8:	b29b      	uxth	r3, r3
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d121      	bne.n	8004a22 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a12      	ldr	r2, [pc, #72]	; (8004a2c <I2SEx_TxISR_I2SExt+0x90>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d101      	bne.n	80049ec <I2SEx_TxISR_I2SExt+0x50>
 80049e8:	4b11      	ldr	r3, [pc, #68]	; (8004a30 <I2SEx_TxISR_I2SExt+0x94>)
 80049ea:	e001      	b.n	80049f0 <I2SEx_TxISR_I2SExt+0x54>
 80049ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80049f0:	685a      	ldr	r2, [r3, #4]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	490d      	ldr	r1, [pc, #52]	; (8004a2c <I2SEx_TxISR_I2SExt+0x90>)
 80049f8:	428b      	cmp	r3, r1
 80049fa:	d101      	bne.n	8004a00 <I2SEx_TxISR_I2SExt+0x64>
 80049fc:	4b0c      	ldr	r3, [pc, #48]	; (8004a30 <I2SEx_TxISR_I2SExt+0x94>)
 80049fe:	e001      	b.n	8004a04 <I2SEx_TxISR_I2SExt+0x68>
 8004a00:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a04:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004a08:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d106      	bne.n	8004a22 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f7ff ff81 	bl	8004924 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004a22:	bf00      	nop
 8004a24:	3708      	adds	r7, #8
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	40003800 	.word	0x40003800
 8004a30:	40003400 	.word	0x40003400

08004a34 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b082      	sub	sp, #8
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	68d8      	ldr	r0, [r3, #12]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a46:	1c99      	adds	r1, r3, #2
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004a4c:	b282      	uxth	r2, r0
 8004a4e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	3b01      	subs	r3, #1
 8004a58:	b29a      	uxth	r2, r3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d113      	bne.n	8004a90 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	685a      	ldr	r2, [r3, #4]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004a76:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d106      	bne.n	8004a90 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2201      	movs	r2, #1
 8004a86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f7ff ff4a 	bl	8004924 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004a90:	bf00      	nop
 8004a92:	3708      	adds	r7, #8
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b082      	sub	sp, #8
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a20      	ldr	r2, [pc, #128]	; (8004b28 <I2SEx_RxISR_I2SExt+0x90>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d101      	bne.n	8004aae <I2SEx_RxISR_I2SExt+0x16>
 8004aaa:	4b20      	ldr	r3, [pc, #128]	; (8004b2c <I2SEx_RxISR_I2SExt+0x94>)
 8004aac:	e001      	b.n	8004ab2 <I2SEx_RxISR_I2SExt+0x1a>
 8004aae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ab2:	68d8      	ldr	r0, [r3, #12]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab8:	1c99      	adds	r1, r3, #2
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004abe:	b282      	uxth	r2, r0
 8004ac0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	b29a      	uxth	r2, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d121      	bne.n	8004b1e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a12      	ldr	r2, [pc, #72]	; (8004b28 <I2SEx_RxISR_I2SExt+0x90>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d101      	bne.n	8004ae8 <I2SEx_RxISR_I2SExt+0x50>
 8004ae4:	4b11      	ldr	r3, [pc, #68]	; (8004b2c <I2SEx_RxISR_I2SExt+0x94>)
 8004ae6:	e001      	b.n	8004aec <I2SEx_RxISR_I2SExt+0x54>
 8004ae8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004aec:	685a      	ldr	r2, [r3, #4]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	490d      	ldr	r1, [pc, #52]	; (8004b28 <I2SEx_RxISR_I2SExt+0x90>)
 8004af4:	428b      	cmp	r3, r1
 8004af6:	d101      	bne.n	8004afc <I2SEx_RxISR_I2SExt+0x64>
 8004af8:	4b0c      	ldr	r3, [pc, #48]	; (8004b2c <I2SEx_RxISR_I2SExt+0x94>)
 8004afa:	e001      	b.n	8004b00 <I2SEx_RxISR_I2SExt+0x68>
 8004afc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b00:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004b04:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d106      	bne.n	8004b1e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f7ff ff03 	bl	8004924 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004b1e:	bf00      	nop
 8004b20:	3708      	adds	r7, #8
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop
 8004b28:	40003800 	.word	0x40003800
 8004b2c:	40003400 	.word	0x40003400

08004b30 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b086      	sub	sp, #24
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d101      	bne.n	8004b42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e264      	b.n	800500c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 0301 	and.w	r3, r3, #1
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d075      	beq.n	8004c3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b4e:	4ba3      	ldr	r3, [pc, #652]	; (8004ddc <HAL_RCC_OscConfig+0x2ac>)
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	f003 030c 	and.w	r3, r3, #12
 8004b56:	2b04      	cmp	r3, #4
 8004b58:	d00c      	beq.n	8004b74 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b5a:	4ba0      	ldr	r3, [pc, #640]	; (8004ddc <HAL_RCC_OscConfig+0x2ac>)
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b62:	2b08      	cmp	r3, #8
 8004b64:	d112      	bne.n	8004b8c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b66:	4b9d      	ldr	r3, [pc, #628]	; (8004ddc <HAL_RCC_OscConfig+0x2ac>)
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b72:	d10b      	bne.n	8004b8c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b74:	4b99      	ldr	r3, [pc, #612]	; (8004ddc <HAL_RCC_OscConfig+0x2ac>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d05b      	beq.n	8004c38 <HAL_RCC_OscConfig+0x108>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d157      	bne.n	8004c38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e23f      	b.n	800500c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b94:	d106      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x74>
 8004b96:	4b91      	ldr	r3, [pc, #580]	; (8004ddc <HAL_RCC_OscConfig+0x2ac>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a90      	ldr	r2, [pc, #576]	; (8004ddc <HAL_RCC_OscConfig+0x2ac>)
 8004b9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ba0:	6013      	str	r3, [r2, #0]
 8004ba2:	e01d      	b.n	8004be0 <HAL_RCC_OscConfig+0xb0>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004bac:	d10c      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x98>
 8004bae:	4b8b      	ldr	r3, [pc, #556]	; (8004ddc <HAL_RCC_OscConfig+0x2ac>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a8a      	ldr	r2, [pc, #552]	; (8004ddc <HAL_RCC_OscConfig+0x2ac>)
 8004bb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004bb8:	6013      	str	r3, [r2, #0]
 8004bba:	4b88      	ldr	r3, [pc, #544]	; (8004ddc <HAL_RCC_OscConfig+0x2ac>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a87      	ldr	r2, [pc, #540]	; (8004ddc <HAL_RCC_OscConfig+0x2ac>)
 8004bc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bc4:	6013      	str	r3, [r2, #0]
 8004bc6:	e00b      	b.n	8004be0 <HAL_RCC_OscConfig+0xb0>
 8004bc8:	4b84      	ldr	r3, [pc, #528]	; (8004ddc <HAL_RCC_OscConfig+0x2ac>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a83      	ldr	r2, [pc, #524]	; (8004ddc <HAL_RCC_OscConfig+0x2ac>)
 8004bce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bd2:	6013      	str	r3, [r2, #0]
 8004bd4:	4b81      	ldr	r3, [pc, #516]	; (8004ddc <HAL_RCC_OscConfig+0x2ac>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a80      	ldr	r2, [pc, #512]	; (8004ddc <HAL_RCC_OscConfig+0x2ac>)
 8004bda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d013      	beq.n	8004c10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004be8:	f7fc f9d4 	bl	8000f94 <HAL_GetTick>
 8004bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bee:	e008      	b.n	8004c02 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bf0:	f7fc f9d0 	bl	8000f94 <HAL_GetTick>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	2b64      	cmp	r3, #100	; 0x64
 8004bfc:	d901      	bls.n	8004c02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e204      	b.n	800500c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c02:	4b76      	ldr	r3, [pc, #472]	; (8004ddc <HAL_RCC_OscConfig+0x2ac>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d0f0      	beq.n	8004bf0 <HAL_RCC_OscConfig+0xc0>
 8004c0e:	e014      	b.n	8004c3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c10:	f7fc f9c0 	bl	8000f94 <HAL_GetTick>
 8004c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c16:	e008      	b.n	8004c2a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c18:	f7fc f9bc 	bl	8000f94 <HAL_GetTick>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	2b64      	cmp	r3, #100	; 0x64
 8004c24:	d901      	bls.n	8004c2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	e1f0      	b.n	800500c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c2a:	4b6c      	ldr	r3, [pc, #432]	; (8004ddc <HAL_RCC_OscConfig+0x2ac>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d1f0      	bne.n	8004c18 <HAL_RCC_OscConfig+0xe8>
 8004c36:	e000      	b.n	8004c3a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0302 	and.w	r3, r3, #2
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d063      	beq.n	8004d0e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c46:	4b65      	ldr	r3, [pc, #404]	; (8004ddc <HAL_RCC_OscConfig+0x2ac>)
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	f003 030c 	and.w	r3, r3, #12
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d00b      	beq.n	8004c6a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c52:	4b62      	ldr	r3, [pc, #392]	; (8004ddc <HAL_RCC_OscConfig+0x2ac>)
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c5a:	2b08      	cmp	r3, #8
 8004c5c:	d11c      	bne.n	8004c98 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c5e:	4b5f      	ldr	r3, [pc, #380]	; (8004ddc <HAL_RCC_OscConfig+0x2ac>)
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d116      	bne.n	8004c98 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c6a:	4b5c      	ldr	r3, [pc, #368]	; (8004ddc <HAL_RCC_OscConfig+0x2ac>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0302 	and.w	r3, r3, #2
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d005      	beq.n	8004c82 <HAL_RCC_OscConfig+0x152>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d001      	beq.n	8004c82 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e1c4      	b.n	800500c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c82:	4b56      	ldr	r3, [pc, #344]	; (8004ddc <HAL_RCC_OscConfig+0x2ac>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	00db      	lsls	r3, r3, #3
 8004c90:	4952      	ldr	r1, [pc, #328]	; (8004ddc <HAL_RCC_OscConfig+0x2ac>)
 8004c92:	4313      	orrs	r3, r2
 8004c94:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c96:	e03a      	b.n	8004d0e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d020      	beq.n	8004ce2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ca0:	4b4f      	ldr	r3, [pc, #316]	; (8004de0 <HAL_RCC_OscConfig+0x2b0>)
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ca6:	f7fc f975 	bl	8000f94 <HAL_GetTick>
 8004caa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cac:	e008      	b.n	8004cc0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cae:	f7fc f971 	bl	8000f94 <HAL_GetTick>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	2b02      	cmp	r3, #2
 8004cba:	d901      	bls.n	8004cc0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004cbc:	2303      	movs	r3, #3
 8004cbe:	e1a5      	b.n	800500c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cc0:	4b46      	ldr	r3, [pc, #280]	; (8004ddc <HAL_RCC_OscConfig+0x2ac>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0302 	and.w	r3, r3, #2
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d0f0      	beq.n	8004cae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ccc:	4b43      	ldr	r3, [pc, #268]	; (8004ddc <HAL_RCC_OscConfig+0x2ac>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	691b      	ldr	r3, [r3, #16]
 8004cd8:	00db      	lsls	r3, r3, #3
 8004cda:	4940      	ldr	r1, [pc, #256]	; (8004ddc <HAL_RCC_OscConfig+0x2ac>)
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	600b      	str	r3, [r1, #0]
 8004ce0:	e015      	b.n	8004d0e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ce2:	4b3f      	ldr	r3, [pc, #252]	; (8004de0 <HAL_RCC_OscConfig+0x2b0>)
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ce8:	f7fc f954 	bl	8000f94 <HAL_GetTick>
 8004cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cee:	e008      	b.n	8004d02 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cf0:	f7fc f950 	bl	8000f94 <HAL_GetTick>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	2b02      	cmp	r3, #2
 8004cfc:	d901      	bls.n	8004d02 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e184      	b.n	800500c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d02:	4b36      	ldr	r3, [pc, #216]	; (8004ddc <HAL_RCC_OscConfig+0x2ac>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 0302 	and.w	r3, r3, #2
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d1f0      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 0308 	and.w	r3, r3, #8
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d030      	beq.n	8004d7c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	695b      	ldr	r3, [r3, #20]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d016      	beq.n	8004d50 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d22:	4b30      	ldr	r3, [pc, #192]	; (8004de4 <HAL_RCC_OscConfig+0x2b4>)
 8004d24:	2201      	movs	r2, #1
 8004d26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d28:	f7fc f934 	bl	8000f94 <HAL_GetTick>
 8004d2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d2e:	e008      	b.n	8004d42 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d30:	f7fc f930 	bl	8000f94 <HAL_GetTick>
 8004d34:	4602      	mov	r2, r0
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	1ad3      	subs	r3, r2, r3
 8004d3a:	2b02      	cmp	r3, #2
 8004d3c:	d901      	bls.n	8004d42 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004d3e:	2303      	movs	r3, #3
 8004d40:	e164      	b.n	800500c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d42:	4b26      	ldr	r3, [pc, #152]	; (8004ddc <HAL_RCC_OscConfig+0x2ac>)
 8004d44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d46:	f003 0302 	and.w	r3, r3, #2
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d0f0      	beq.n	8004d30 <HAL_RCC_OscConfig+0x200>
 8004d4e:	e015      	b.n	8004d7c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d50:	4b24      	ldr	r3, [pc, #144]	; (8004de4 <HAL_RCC_OscConfig+0x2b4>)
 8004d52:	2200      	movs	r2, #0
 8004d54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d56:	f7fc f91d 	bl	8000f94 <HAL_GetTick>
 8004d5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d5c:	e008      	b.n	8004d70 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d5e:	f7fc f919 	bl	8000f94 <HAL_GetTick>
 8004d62:	4602      	mov	r2, r0
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	1ad3      	subs	r3, r2, r3
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d901      	bls.n	8004d70 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	e14d      	b.n	800500c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d70:	4b1a      	ldr	r3, [pc, #104]	; (8004ddc <HAL_RCC_OscConfig+0x2ac>)
 8004d72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d74:	f003 0302 	and.w	r3, r3, #2
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d1f0      	bne.n	8004d5e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 0304 	and.w	r3, r3, #4
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	f000 80a0 	beq.w	8004eca <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d8e:	4b13      	ldr	r3, [pc, #76]	; (8004ddc <HAL_RCC_OscConfig+0x2ac>)
 8004d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d10f      	bne.n	8004dba <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	60bb      	str	r3, [r7, #8]
 8004d9e:	4b0f      	ldr	r3, [pc, #60]	; (8004ddc <HAL_RCC_OscConfig+0x2ac>)
 8004da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da2:	4a0e      	ldr	r2, [pc, #56]	; (8004ddc <HAL_RCC_OscConfig+0x2ac>)
 8004da4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004da8:	6413      	str	r3, [r2, #64]	; 0x40
 8004daa:	4b0c      	ldr	r3, [pc, #48]	; (8004ddc <HAL_RCC_OscConfig+0x2ac>)
 8004dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004db2:	60bb      	str	r3, [r7, #8]
 8004db4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004db6:	2301      	movs	r3, #1
 8004db8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dba:	4b0b      	ldr	r3, [pc, #44]	; (8004de8 <HAL_RCC_OscConfig+0x2b8>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d121      	bne.n	8004e0a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004dc6:	4b08      	ldr	r3, [pc, #32]	; (8004de8 <HAL_RCC_OscConfig+0x2b8>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a07      	ldr	r2, [pc, #28]	; (8004de8 <HAL_RCC_OscConfig+0x2b8>)
 8004dcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dd2:	f7fc f8df 	bl	8000f94 <HAL_GetTick>
 8004dd6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dd8:	e011      	b.n	8004dfe <HAL_RCC_OscConfig+0x2ce>
 8004dda:	bf00      	nop
 8004ddc:	40023800 	.word	0x40023800
 8004de0:	42470000 	.word	0x42470000
 8004de4:	42470e80 	.word	0x42470e80
 8004de8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dec:	f7fc f8d2 	bl	8000f94 <HAL_GetTick>
 8004df0:	4602      	mov	r2, r0
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	d901      	bls.n	8004dfe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e106      	b.n	800500c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dfe:	4b85      	ldr	r3, [pc, #532]	; (8005014 <HAL_RCC_OscConfig+0x4e4>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d0f0      	beq.n	8004dec <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d106      	bne.n	8004e20 <HAL_RCC_OscConfig+0x2f0>
 8004e12:	4b81      	ldr	r3, [pc, #516]	; (8005018 <HAL_RCC_OscConfig+0x4e8>)
 8004e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e16:	4a80      	ldr	r2, [pc, #512]	; (8005018 <HAL_RCC_OscConfig+0x4e8>)
 8004e18:	f043 0301 	orr.w	r3, r3, #1
 8004e1c:	6713      	str	r3, [r2, #112]	; 0x70
 8004e1e:	e01c      	b.n	8004e5a <HAL_RCC_OscConfig+0x32a>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	2b05      	cmp	r3, #5
 8004e26:	d10c      	bne.n	8004e42 <HAL_RCC_OscConfig+0x312>
 8004e28:	4b7b      	ldr	r3, [pc, #492]	; (8005018 <HAL_RCC_OscConfig+0x4e8>)
 8004e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e2c:	4a7a      	ldr	r2, [pc, #488]	; (8005018 <HAL_RCC_OscConfig+0x4e8>)
 8004e2e:	f043 0304 	orr.w	r3, r3, #4
 8004e32:	6713      	str	r3, [r2, #112]	; 0x70
 8004e34:	4b78      	ldr	r3, [pc, #480]	; (8005018 <HAL_RCC_OscConfig+0x4e8>)
 8004e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e38:	4a77      	ldr	r2, [pc, #476]	; (8005018 <HAL_RCC_OscConfig+0x4e8>)
 8004e3a:	f043 0301 	orr.w	r3, r3, #1
 8004e3e:	6713      	str	r3, [r2, #112]	; 0x70
 8004e40:	e00b      	b.n	8004e5a <HAL_RCC_OscConfig+0x32a>
 8004e42:	4b75      	ldr	r3, [pc, #468]	; (8005018 <HAL_RCC_OscConfig+0x4e8>)
 8004e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e46:	4a74      	ldr	r2, [pc, #464]	; (8005018 <HAL_RCC_OscConfig+0x4e8>)
 8004e48:	f023 0301 	bic.w	r3, r3, #1
 8004e4c:	6713      	str	r3, [r2, #112]	; 0x70
 8004e4e:	4b72      	ldr	r3, [pc, #456]	; (8005018 <HAL_RCC_OscConfig+0x4e8>)
 8004e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e52:	4a71      	ldr	r2, [pc, #452]	; (8005018 <HAL_RCC_OscConfig+0x4e8>)
 8004e54:	f023 0304 	bic.w	r3, r3, #4
 8004e58:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d015      	beq.n	8004e8e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e62:	f7fc f897 	bl	8000f94 <HAL_GetTick>
 8004e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e68:	e00a      	b.n	8004e80 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e6a:	f7fc f893 	bl	8000f94 <HAL_GetTick>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d901      	bls.n	8004e80 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	e0c5      	b.n	800500c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e80:	4b65      	ldr	r3, [pc, #404]	; (8005018 <HAL_RCC_OscConfig+0x4e8>)
 8004e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e84:	f003 0302 	and.w	r3, r3, #2
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d0ee      	beq.n	8004e6a <HAL_RCC_OscConfig+0x33a>
 8004e8c:	e014      	b.n	8004eb8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e8e:	f7fc f881 	bl	8000f94 <HAL_GetTick>
 8004e92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e94:	e00a      	b.n	8004eac <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e96:	f7fc f87d 	bl	8000f94 <HAL_GetTick>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	1ad3      	subs	r3, r2, r3
 8004ea0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d901      	bls.n	8004eac <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	e0af      	b.n	800500c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004eac:	4b5a      	ldr	r3, [pc, #360]	; (8005018 <HAL_RCC_OscConfig+0x4e8>)
 8004eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eb0:	f003 0302 	and.w	r3, r3, #2
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d1ee      	bne.n	8004e96 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004eb8:	7dfb      	ldrb	r3, [r7, #23]
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d105      	bne.n	8004eca <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ebe:	4b56      	ldr	r3, [pc, #344]	; (8005018 <HAL_RCC_OscConfig+0x4e8>)
 8004ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec2:	4a55      	ldr	r2, [pc, #340]	; (8005018 <HAL_RCC_OscConfig+0x4e8>)
 8004ec4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ec8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	699b      	ldr	r3, [r3, #24]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	f000 809b 	beq.w	800500a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ed4:	4b50      	ldr	r3, [pc, #320]	; (8005018 <HAL_RCC_OscConfig+0x4e8>)
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	f003 030c 	and.w	r3, r3, #12
 8004edc:	2b08      	cmp	r3, #8
 8004ede:	d05c      	beq.n	8004f9a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	699b      	ldr	r3, [r3, #24]
 8004ee4:	2b02      	cmp	r3, #2
 8004ee6:	d141      	bne.n	8004f6c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ee8:	4b4c      	ldr	r3, [pc, #304]	; (800501c <HAL_RCC_OscConfig+0x4ec>)
 8004eea:	2200      	movs	r2, #0
 8004eec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eee:	f7fc f851 	bl	8000f94 <HAL_GetTick>
 8004ef2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ef4:	e008      	b.n	8004f08 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ef6:	f7fc f84d 	bl	8000f94 <HAL_GetTick>
 8004efa:	4602      	mov	r2, r0
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	1ad3      	subs	r3, r2, r3
 8004f00:	2b02      	cmp	r3, #2
 8004f02:	d901      	bls.n	8004f08 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004f04:	2303      	movs	r3, #3
 8004f06:	e081      	b.n	800500c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f08:	4b43      	ldr	r3, [pc, #268]	; (8005018 <HAL_RCC_OscConfig+0x4e8>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d1f0      	bne.n	8004ef6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	69da      	ldr	r2, [r3, #28]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6a1b      	ldr	r3, [r3, #32]
 8004f1c:	431a      	orrs	r2, r3
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f22:	019b      	lsls	r3, r3, #6
 8004f24:	431a      	orrs	r2, r3
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f2a:	085b      	lsrs	r3, r3, #1
 8004f2c:	3b01      	subs	r3, #1
 8004f2e:	041b      	lsls	r3, r3, #16
 8004f30:	431a      	orrs	r2, r3
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f36:	061b      	lsls	r3, r3, #24
 8004f38:	4937      	ldr	r1, [pc, #220]	; (8005018 <HAL_RCC_OscConfig+0x4e8>)
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f3e:	4b37      	ldr	r3, [pc, #220]	; (800501c <HAL_RCC_OscConfig+0x4ec>)
 8004f40:	2201      	movs	r2, #1
 8004f42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f44:	f7fc f826 	bl	8000f94 <HAL_GetTick>
 8004f48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f4a:	e008      	b.n	8004f5e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f4c:	f7fc f822 	bl	8000f94 <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d901      	bls.n	8004f5e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e056      	b.n	800500c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f5e:	4b2e      	ldr	r3, [pc, #184]	; (8005018 <HAL_RCC_OscConfig+0x4e8>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d0f0      	beq.n	8004f4c <HAL_RCC_OscConfig+0x41c>
 8004f6a:	e04e      	b.n	800500a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f6c:	4b2b      	ldr	r3, [pc, #172]	; (800501c <HAL_RCC_OscConfig+0x4ec>)
 8004f6e:	2200      	movs	r2, #0
 8004f70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f72:	f7fc f80f 	bl	8000f94 <HAL_GetTick>
 8004f76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f78:	e008      	b.n	8004f8c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f7a:	f7fc f80b 	bl	8000f94 <HAL_GetTick>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	2b02      	cmp	r3, #2
 8004f86:	d901      	bls.n	8004f8c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	e03f      	b.n	800500c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f8c:	4b22      	ldr	r3, [pc, #136]	; (8005018 <HAL_RCC_OscConfig+0x4e8>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d1f0      	bne.n	8004f7a <HAL_RCC_OscConfig+0x44a>
 8004f98:	e037      	b.n	800500a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	699b      	ldr	r3, [r3, #24]
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d101      	bne.n	8004fa6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e032      	b.n	800500c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004fa6:	4b1c      	ldr	r3, [pc, #112]	; (8005018 <HAL_RCC_OscConfig+0x4e8>)
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	699b      	ldr	r3, [r3, #24]
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d028      	beq.n	8005006 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d121      	bne.n	8005006 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d11a      	bne.n	8005006 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004fd0:	68fa      	ldr	r2, [r7, #12]
 8004fd2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004fdc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d111      	bne.n	8005006 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fec:	085b      	lsrs	r3, r3, #1
 8004fee:	3b01      	subs	r3, #1
 8004ff0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d107      	bne.n	8005006 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005000:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005002:	429a      	cmp	r2, r3
 8005004:	d001      	beq.n	800500a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e000      	b.n	800500c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800500a:	2300      	movs	r3, #0
}
 800500c:	4618      	mov	r0, r3
 800500e:	3718      	adds	r7, #24
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}
 8005014:	40007000 	.word	0x40007000
 8005018:	40023800 	.word	0x40023800
 800501c:	42470060 	.word	0x42470060

08005020 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d101      	bne.n	8005034 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	e0cc      	b.n	80051ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005034:	4b68      	ldr	r3, [pc, #416]	; (80051d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 0307 	and.w	r3, r3, #7
 800503c:	683a      	ldr	r2, [r7, #0]
 800503e:	429a      	cmp	r2, r3
 8005040:	d90c      	bls.n	800505c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005042:	4b65      	ldr	r3, [pc, #404]	; (80051d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005044:	683a      	ldr	r2, [r7, #0]
 8005046:	b2d2      	uxtb	r2, r2
 8005048:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800504a:	4b63      	ldr	r3, [pc, #396]	; (80051d8 <HAL_RCC_ClockConfig+0x1b8>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 0307 	and.w	r3, r3, #7
 8005052:	683a      	ldr	r2, [r7, #0]
 8005054:	429a      	cmp	r2, r3
 8005056:	d001      	beq.n	800505c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	e0b8      	b.n	80051ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0302 	and.w	r3, r3, #2
 8005064:	2b00      	cmp	r3, #0
 8005066:	d020      	beq.n	80050aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 0304 	and.w	r3, r3, #4
 8005070:	2b00      	cmp	r3, #0
 8005072:	d005      	beq.n	8005080 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005074:	4b59      	ldr	r3, [pc, #356]	; (80051dc <HAL_RCC_ClockConfig+0x1bc>)
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	4a58      	ldr	r2, [pc, #352]	; (80051dc <HAL_RCC_ClockConfig+0x1bc>)
 800507a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800507e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f003 0308 	and.w	r3, r3, #8
 8005088:	2b00      	cmp	r3, #0
 800508a:	d005      	beq.n	8005098 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800508c:	4b53      	ldr	r3, [pc, #332]	; (80051dc <HAL_RCC_ClockConfig+0x1bc>)
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	4a52      	ldr	r2, [pc, #328]	; (80051dc <HAL_RCC_ClockConfig+0x1bc>)
 8005092:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005096:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005098:	4b50      	ldr	r3, [pc, #320]	; (80051dc <HAL_RCC_ClockConfig+0x1bc>)
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	494d      	ldr	r1, [pc, #308]	; (80051dc <HAL_RCC_ClockConfig+0x1bc>)
 80050a6:	4313      	orrs	r3, r2
 80050a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 0301 	and.w	r3, r3, #1
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d044      	beq.n	8005140 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d107      	bne.n	80050ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050be:	4b47      	ldr	r3, [pc, #284]	; (80051dc <HAL_RCC_ClockConfig+0x1bc>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d119      	bne.n	80050fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e07f      	b.n	80051ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	2b02      	cmp	r3, #2
 80050d4:	d003      	beq.n	80050de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050da:	2b03      	cmp	r3, #3
 80050dc:	d107      	bne.n	80050ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050de:	4b3f      	ldr	r3, [pc, #252]	; (80051dc <HAL_RCC_ClockConfig+0x1bc>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d109      	bne.n	80050fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e06f      	b.n	80051ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050ee:	4b3b      	ldr	r3, [pc, #236]	; (80051dc <HAL_RCC_ClockConfig+0x1bc>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 0302 	and.w	r3, r3, #2
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d101      	bne.n	80050fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e067      	b.n	80051ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050fe:	4b37      	ldr	r3, [pc, #220]	; (80051dc <HAL_RCC_ClockConfig+0x1bc>)
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	f023 0203 	bic.w	r2, r3, #3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	4934      	ldr	r1, [pc, #208]	; (80051dc <HAL_RCC_ClockConfig+0x1bc>)
 800510c:	4313      	orrs	r3, r2
 800510e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005110:	f7fb ff40 	bl	8000f94 <HAL_GetTick>
 8005114:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005116:	e00a      	b.n	800512e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005118:	f7fb ff3c 	bl	8000f94 <HAL_GetTick>
 800511c:	4602      	mov	r2, r0
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	1ad3      	subs	r3, r2, r3
 8005122:	f241 3288 	movw	r2, #5000	; 0x1388
 8005126:	4293      	cmp	r3, r2
 8005128:	d901      	bls.n	800512e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800512a:	2303      	movs	r3, #3
 800512c:	e04f      	b.n	80051ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800512e:	4b2b      	ldr	r3, [pc, #172]	; (80051dc <HAL_RCC_ClockConfig+0x1bc>)
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	f003 020c 	and.w	r2, r3, #12
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	429a      	cmp	r2, r3
 800513e:	d1eb      	bne.n	8005118 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005140:	4b25      	ldr	r3, [pc, #148]	; (80051d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 0307 	and.w	r3, r3, #7
 8005148:	683a      	ldr	r2, [r7, #0]
 800514a:	429a      	cmp	r2, r3
 800514c:	d20c      	bcs.n	8005168 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800514e:	4b22      	ldr	r3, [pc, #136]	; (80051d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005150:	683a      	ldr	r2, [r7, #0]
 8005152:	b2d2      	uxtb	r2, r2
 8005154:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005156:	4b20      	ldr	r3, [pc, #128]	; (80051d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 0307 	and.w	r3, r3, #7
 800515e:	683a      	ldr	r2, [r7, #0]
 8005160:	429a      	cmp	r2, r3
 8005162:	d001      	beq.n	8005168 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	e032      	b.n	80051ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 0304 	and.w	r3, r3, #4
 8005170:	2b00      	cmp	r3, #0
 8005172:	d008      	beq.n	8005186 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005174:	4b19      	ldr	r3, [pc, #100]	; (80051dc <HAL_RCC_ClockConfig+0x1bc>)
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	4916      	ldr	r1, [pc, #88]	; (80051dc <HAL_RCC_ClockConfig+0x1bc>)
 8005182:	4313      	orrs	r3, r2
 8005184:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 0308 	and.w	r3, r3, #8
 800518e:	2b00      	cmp	r3, #0
 8005190:	d009      	beq.n	80051a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005192:	4b12      	ldr	r3, [pc, #72]	; (80051dc <HAL_RCC_ClockConfig+0x1bc>)
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	00db      	lsls	r3, r3, #3
 80051a0:	490e      	ldr	r1, [pc, #56]	; (80051dc <HAL_RCC_ClockConfig+0x1bc>)
 80051a2:	4313      	orrs	r3, r2
 80051a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80051a6:	f000 f821 	bl	80051ec <HAL_RCC_GetSysClockFreq>
 80051aa:	4602      	mov	r2, r0
 80051ac:	4b0b      	ldr	r3, [pc, #44]	; (80051dc <HAL_RCC_ClockConfig+0x1bc>)
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	091b      	lsrs	r3, r3, #4
 80051b2:	f003 030f 	and.w	r3, r3, #15
 80051b6:	490a      	ldr	r1, [pc, #40]	; (80051e0 <HAL_RCC_ClockConfig+0x1c0>)
 80051b8:	5ccb      	ldrb	r3, [r1, r3]
 80051ba:	fa22 f303 	lsr.w	r3, r2, r3
 80051be:	4a09      	ldr	r2, [pc, #36]	; (80051e4 <HAL_RCC_ClockConfig+0x1c4>)
 80051c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80051c2:	4b09      	ldr	r3, [pc, #36]	; (80051e8 <HAL_RCC_ClockConfig+0x1c8>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4618      	mov	r0, r3
 80051c8:	f7fb fea0 	bl	8000f0c <HAL_InitTick>

  return HAL_OK;
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3710      	adds	r7, #16
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop
 80051d8:	40023c00 	.word	0x40023c00
 80051dc:	40023800 	.word	0x40023800
 80051e0:	08008d18 	.word	0x08008d18
 80051e4:	20000000 	.word	0x20000000
 80051e8:	20000004 	.word	0x20000004

080051ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051ec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80051f0:	b084      	sub	sp, #16
 80051f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80051f4:	2300      	movs	r3, #0
 80051f6:	607b      	str	r3, [r7, #4]
 80051f8:	2300      	movs	r3, #0
 80051fa:	60fb      	str	r3, [r7, #12]
 80051fc:	2300      	movs	r3, #0
 80051fe:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005200:	2300      	movs	r3, #0
 8005202:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005204:	4b67      	ldr	r3, [pc, #412]	; (80053a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	f003 030c 	and.w	r3, r3, #12
 800520c:	2b08      	cmp	r3, #8
 800520e:	d00d      	beq.n	800522c <HAL_RCC_GetSysClockFreq+0x40>
 8005210:	2b08      	cmp	r3, #8
 8005212:	f200 80bd 	bhi.w	8005390 <HAL_RCC_GetSysClockFreq+0x1a4>
 8005216:	2b00      	cmp	r3, #0
 8005218:	d002      	beq.n	8005220 <HAL_RCC_GetSysClockFreq+0x34>
 800521a:	2b04      	cmp	r3, #4
 800521c:	d003      	beq.n	8005226 <HAL_RCC_GetSysClockFreq+0x3a>
 800521e:	e0b7      	b.n	8005390 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005220:	4b61      	ldr	r3, [pc, #388]	; (80053a8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005222:	60bb      	str	r3, [r7, #8]
       break;
 8005224:	e0b7      	b.n	8005396 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005226:	4b61      	ldr	r3, [pc, #388]	; (80053ac <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005228:	60bb      	str	r3, [r7, #8]
      break;
 800522a:	e0b4      	b.n	8005396 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800522c:	4b5d      	ldr	r3, [pc, #372]	; (80053a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005234:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005236:	4b5b      	ldr	r3, [pc, #364]	; (80053a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800523e:	2b00      	cmp	r3, #0
 8005240:	d04d      	beq.n	80052de <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005242:	4b58      	ldr	r3, [pc, #352]	; (80053a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	099b      	lsrs	r3, r3, #6
 8005248:	461a      	mov	r2, r3
 800524a:	f04f 0300 	mov.w	r3, #0
 800524e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005252:	f04f 0100 	mov.w	r1, #0
 8005256:	ea02 0800 	and.w	r8, r2, r0
 800525a:	ea03 0901 	and.w	r9, r3, r1
 800525e:	4640      	mov	r0, r8
 8005260:	4649      	mov	r1, r9
 8005262:	f04f 0200 	mov.w	r2, #0
 8005266:	f04f 0300 	mov.w	r3, #0
 800526a:	014b      	lsls	r3, r1, #5
 800526c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005270:	0142      	lsls	r2, r0, #5
 8005272:	4610      	mov	r0, r2
 8005274:	4619      	mov	r1, r3
 8005276:	ebb0 0008 	subs.w	r0, r0, r8
 800527a:	eb61 0109 	sbc.w	r1, r1, r9
 800527e:	f04f 0200 	mov.w	r2, #0
 8005282:	f04f 0300 	mov.w	r3, #0
 8005286:	018b      	lsls	r3, r1, #6
 8005288:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800528c:	0182      	lsls	r2, r0, #6
 800528e:	1a12      	subs	r2, r2, r0
 8005290:	eb63 0301 	sbc.w	r3, r3, r1
 8005294:	f04f 0000 	mov.w	r0, #0
 8005298:	f04f 0100 	mov.w	r1, #0
 800529c:	00d9      	lsls	r1, r3, #3
 800529e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80052a2:	00d0      	lsls	r0, r2, #3
 80052a4:	4602      	mov	r2, r0
 80052a6:	460b      	mov	r3, r1
 80052a8:	eb12 0208 	adds.w	r2, r2, r8
 80052ac:	eb43 0309 	adc.w	r3, r3, r9
 80052b0:	f04f 0000 	mov.w	r0, #0
 80052b4:	f04f 0100 	mov.w	r1, #0
 80052b8:	0259      	lsls	r1, r3, #9
 80052ba:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80052be:	0250      	lsls	r0, r2, #9
 80052c0:	4602      	mov	r2, r0
 80052c2:	460b      	mov	r3, r1
 80052c4:	4610      	mov	r0, r2
 80052c6:	4619      	mov	r1, r3
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	461a      	mov	r2, r3
 80052cc:	f04f 0300 	mov.w	r3, #0
 80052d0:	f7fa ff7a 	bl	80001c8 <__aeabi_uldivmod>
 80052d4:	4602      	mov	r2, r0
 80052d6:	460b      	mov	r3, r1
 80052d8:	4613      	mov	r3, r2
 80052da:	60fb      	str	r3, [r7, #12]
 80052dc:	e04a      	b.n	8005374 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052de:	4b31      	ldr	r3, [pc, #196]	; (80053a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	099b      	lsrs	r3, r3, #6
 80052e4:	461a      	mov	r2, r3
 80052e6:	f04f 0300 	mov.w	r3, #0
 80052ea:	f240 10ff 	movw	r0, #511	; 0x1ff
 80052ee:	f04f 0100 	mov.w	r1, #0
 80052f2:	ea02 0400 	and.w	r4, r2, r0
 80052f6:	ea03 0501 	and.w	r5, r3, r1
 80052fa:	4620      	mov	r0, r4
 80052fc:	4629      	mov	r1, r5
 80052fe:	f04f 0200 	mov.w	r2, #0
 8005302:	f04f 0300 	mov.w	r3, #0
 8005306:	014b      	lsls	r3, r1, #5
 8005308:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800530c:	0142      	lsls	r2, r0, #5
 800530e:	4610      	mov	r0, r2
 8005310:	4619      	mov	r1, r3
 8005312:	1b00      	subs	r0, r0, r4
 8005314:	eb61 0105 	sbc.w	r1, r1, r5
 8005318:	f04f 0200 	mov.w	r2, #0
 800531c:	f04f 0300 	mov.w	r3, #0
 8005320:	018b      	lsls	r3, r1, #6
 8005322:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005326:	0182      	lsls	r2, r0, #6
 8005328:	1a12      	subs	r2, r2, r0
 800532a:	eb63 0301 	sbc.w	r3, r3, r1
 800532e:	f04f 0000 	mov.w	r0, #0
 8005332:	f04f 0100 	mov.w	r1, #0
 8005336:	00d9      	lsls	r1, r3, #3
 8005338:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800533c:	00d0      	lsls	r0, r2, #3
 800533e:	4602      	mov	r2, r0
 8005340:	460b      	mov	r3, r1
 8005342:	1912      	adds	r2, r2, r4
 8005344:	eb45 0303 	adc.w	r3, r5, r3
 8005348:	f04f 0000 	mov.w	r0, #0
 800534c:	f04f 0100 	mov.w	r1, #0
 8005350:	0299      	lsls	r1, r3, #10
 8005352:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005356:	0290      	lsls	r0, r2, #10
 8005358:	4602      	mov	r2, r0
 800535a:	460b      	mov	r3, r1
 800535c:	4610      	mov	r0, r2
 800535e:	4619      	mov	r1, r3
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	461a      	mov	r2, r3
 8005364:	f04f 0300 	mov.w	r3, #0
 8005368:	f7fa ff2e 	bl	80001c8 <__aeabi_uldivmod>
 800536c:	4602      	mov	r2, r0
 800536e:	460b      	mov	r3, r1
 8005370:	4613      	mov	r3, r2
 8005372:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005374:	4b0b      	ldr	r3, [pc, #44]	; (80053a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	0c1b      	lsrs	r3, r3, #16
 800537a:	f003 0303 	and.w	r3, r3, #3
 800537e:	3301      	adds	r3, #1
 8005380:	005b      	lsls	r3, r3, #1
 8005382:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005384:	68fa      	ldr	r2, [r7, #12]
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	fbb2 f3f3 	udiv	r3, r2, r3
 800538c:	60bb      	str	r3, [r7, #8]
      break;
 800538e:	e002      	b.n	8005396 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005390:	4b05      	ldr	r3, [pc, #20]	; (80053a8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005392:	60bb      	str	r3, [r7, #8]
      break;
 8005394:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005396:	68bb      	ldr	r3, [r7, #8]
}
 8005398:	4618      	mov	r0, r3
 800539a:	3710      	adds	r7, #16
 800539c:	46bd      	mov	sp, r7
 800539e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80053a2:	bf00      	nop
 80053a4:	40023800 	.word	0x40023800
 80053a8:	00f42400 	.word	0x00f42400
 80053ac:	007a1200 	.word	0x007a1200

080053b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053b0:	b480      	push	{r7}
 80053b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053b4:	4b03      	ldr	r3, [pc, #12]	; (80053c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80053b6:	681b      	ldr	r3, [r3, #0]
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr
 80053c2:	bf00      	nop
 80053c4:	20000000 	.word	0x20000000

080053c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80053cc:	f7ff fff0 	bl	80053b0 <HAL_RCC_GetHCLKFreq>
 80053d0:	4602      	mov	r2, r0
 80053d2:	4b05      	ldr	r3, [pc, #20]	; (80053e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	0a9b      	lsrs	r3, r3, #10
 80053d8:	f003 0307 	and.w	r3, r3, #7
 80053dc:	4903      	ldr	r1, [pc, #12]	; (80053ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80053de:	5ccb      	ldrb	r3, [r1, r3]
 80053e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	bd80      	pop	{r7, pc}
 80053e8:	40023800 	.word	0x40023800
 80053ec:	08008d28 	.word	0x08008d28

080053f0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b086      	sub	sp, #24
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80053f8:	2300      	movs	r3, #0
 80053fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80053fc:	2300      	movs	r3, #0
 80053fe:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 0301 	and.w	r3, r3, #1
 8005408:	2b00      	cmp	r3, #0
 800540a:	d105      	bne.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005414:	2b00      	cmp	r3, #0
 8005416:	d035      	beq.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005418:	4b62      	ldr	r3, [pc, #392]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800541a:	2200      	movs	r2, #0
 800541c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800541e:	f7fb fdb9 	bl	8000f94 <HAL_GetTick>
 8005422:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005424:	e008      	b.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005426:	f7fb fdb5 	bl	8000f94 <HAL_GetTick>
 800542a:	4602      	mov	r2, r0
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	1ad3      	subs	r3, r2, r3
 8005430:	2b02      	cmp	r3, #2
 8005432:	d901      	bls.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005434:	2303      	movs	r3, #3
 8005436:	e0b0      	b.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005438:	4b5b      	ldr	r3, [pc, #364]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005440:	2b00      	cmp	r3, #0
 8005442:	d1f0      	bne.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	019a      	lsls	r2, r3, #6
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	071b      	lsls	r3, r3, #28
 8005450:	4955      	ldr	r1, [pc, #340]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005452:	4313      	orrs	r3, r2
 8005454:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005458:	4b52      	ldr	r3, [pc, #328]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800545a:	2201      	movs	r2, #1
 800545c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800545e:	f7fb fd99 	bl	8000f94 <HAL_GetTick>
 8005462:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005464:	e008      	b.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005466:	f7fb fd95 	bl	8000f94 <HAL_GetTick>
 800546a:	4602      	mov	r2, r0
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	1ad3      	subs	r3, r2, r3
 8005470:	2b02      	cmp	r3, #2
 8005472:	d901      	bls.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005474:	2303      	movs	r3, #3
 8005476:	e090      	b.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005478:	4b4b      	ldr	r3, [pc, #300]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005480:	2b00      	cmp	r3, #0
 8005482:	d0f0      	beq.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 0302 	and.w	r3, r3, #2
 800548c:	2b00      	cmp	r3, #0
 800548e:	f000 8083 	beq.w	8005598 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005492:	2300      	movs	r3, #0
 8005494:	60fb      	str	r3, [r7, #12]
 8005496:	4b44      	ldr	r3, [pc, #272]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549a:	4a43      	ldr	r2, [pc, #268]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800549c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054a0:	6413      	str	r3, [r2, #64]	; 0x40
 80054a2:	4b41      	ldr	r3, [pc, #260]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054aa:	60fb      	str	r3, [r7, #12]
 80054ac:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80054ae:	4b3f      	ldr	r3, [pc, #252]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a3e      	ldr	r2, [pc, #248]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80054b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054b8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80054ba:	f7fb fd6b 	bl	8000f94 <HAL_GetTick>
 80054be:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80054c0:	e008      	b.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80054c2:	f7fb fd67 	bl	8000f94 <HAL_GetTick>
 80054c6:	4602      	mov	r2, r0
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	1ad3      	subs	r3, r2, r3
 80054cc:	2b02      	cmp	r3, #2
 80054ce:	d901      	bls.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80054d0:	2303      	movs	r3, #3
 80054d2:	e062      	b.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80054d4:	4b35      	ldr	r3, [pc, #212]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d0f0      	beq.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80054e0:	4b31      	ldr	r3, [pc, #196]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054e8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d02f      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054f8:	693a      	ldr	r2, [r7, #16]
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d028      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80054fe:	4b2a      	ldr	r3, [pc, #168]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005502:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005506:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005508:	4b29      	ldr	r3, [pc, #164]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800550a:	2201      	movs	r2, #1
 800550c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800550e:	4b28      	ldr	r3, [pc, #160]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005510:	2200      	movs	r2, #0
 8005512:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005514:	4a24      	ldr	r2, [pc, #144]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800551a:	4b23      	ldr	r3, [pc, #140]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800551c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800551e:	f003 0301 	and.w	r3, r3, #1
 8005522:	2b01      	cmp	r3, #1
 8005524:	d114      	bne.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005526:	f7fb fd35 	bl	8000f94 <HAL_GetTick>
 800552a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800552c:	e00a      	b.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800552e:	f7fb fd31 	bl	8000f94 <HAL_GetTick>
 8005532:	4602      	mov	r2, r0
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	1ad3      	subs	r3, r2, r3
 8005538:	f241 3288 	movw	r2, #5000	; 0x1388
 800553c:	4293      	cmp	r3, r2
 800553e:	d901      	bls.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005540:	2303      	movs	r3, #3
 8005542:	e02a      	b.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005544:	4b18      	ldr	r3, [pc, #96]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005548:	f003 0302 	and.w	r3, r3, #2
 800554c:	2b00      	cmp	r3, #0
 800554e:	d0ee      	beq.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005558:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800555c:	d10d      	bne.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800555e:	4b12      	ldr	r3, [pc, #72]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	68db      	ldr	r3, [r3, #12]
 800556a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800556e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005572:	490d      	ldr	r1, [pc, #52]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005574:	4313      	orrs	r3, r2
 8005576:	608b      	str	r3, [r1, #8]
 8005578:	e005      	b.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800557a:	4b0b      	ldr	r3, [pc, #44]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	4a0a      	ldr	r2, [pc, #40]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005580:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005584:	6093      	str	r3, [r2, #8]
 8005586:	4b08      	ldr	r3, [pc, #32]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005588:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005592:	4905      	ldr	r1, [pc, #20]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005594:	4313      	orrs	r3, r2
 8005596:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005598:	2300      	movs	r3, #0
}
 800559a:	4618      	mov	r0, r3
 800559c:	3718      	adds	r7, #24
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	bf00      	nop
 80055a4:	42470068 	.word	0x42470068
 80055a8:	40023800 	.word	0x40023800
 80055ac:	40007000 	.word	0x40007000
 80055b0:	42470e40 	.word	0x42470e40

080055b4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b087      	sub	sp, #28
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80055bc:	2300      	movs	r3, #0
 80055be:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80055c0:	2300      	movs	r3, #0
 80055c2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80055c4:	2300      	movs	r3, #0
 80055c6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80055c8:	2300      	movs	r3, #0
 80055ca:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d13e      	bne.n	8005650 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80055d2:	4b23      	ldr	r3, [pc, #140]	; (8005660 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80055da:	60fb      	str	r3, [r7, #12]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d005      	beq.n	80055ee <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d12f      	bne.n	8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80055e8:	4b1e      	ldr	r3, [pc, #120]	; (8005664 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80055ea:	617b      	str	r3, [r7, #20]
          break;
 80055ec:	e02f      	b.n	800564e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80055ee:	4b1c      	ldr	r3, [pc, #112]	; (8005660 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055fa:	d108      	bne.n	800560e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80055fc:	4b18      	ldr	r3, [pc, #96]	; (8005660 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005604:	4a18      	ldr	r2, [pc, #96]	; (8005668 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005606:	fbb2 f3f3 	udiv	r3, r2, r3
 800560a:	613b      	str	r3, [r7, #16]
 800560c:	e007      	b.n	800561e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800560e:	4b14      	ldr	r3, [pc, #80]	; (8005660 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005616:	4a15      	ldr	r2, [pc, #84]	; (800566c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005618:	fbb2 f3f3 	udiv	r3, r2, r3
 800561c:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800561e:	4b10      	ldr	r3, [pc, #64]	; (8005660 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005620:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005624:	099b      	lsrs	r3, r3, #6
 8005626:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	fb02 f303 	mul.w	r3, r2, r3
 8005630:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005632:	4b0b      	ldr	r3, [pc, #44]	; (8005660 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005634:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005638:	0f1b      	lsrs	r3, r3, #28
 800563a:	f003 0307 	and.w	r3, r3, #7
 800563e:	68ba      	ldr	r2, [r7, #8]
 8005640:	fbb2 f3f3 	udiv	r3, r2, r3
 8005644:	617b      	str	r3, [r7, #20]
          break;
 8005646:	e002      	b.n	800564e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005648:	2300      	movs	r3, #0
 800564a:	617b      	str	r3, [r7, #20]
          break;
 800564c:	bf00      	nop
        }
      }
      break;
 800564e:	bf00      	nop
    }
  }
  return frequency;
 8005650:	697b      	ldr	r3, [r7, #20]
}
 8005652:	4618      	mov	r0, r3
 8005654:	371c      	adds	r7, #28
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr
 800565e:	bf00      	nop
 8005660:	40023800 	.word	0x40023800
 8005664:	00bb8000 	.word	0x00bb8000
 8005668:	007a1200 	.word	0x007a1200
 800566c:	00f42400 	.word	0x00f42400

08005670 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b082      	sub	sp, #8
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d101      	bne.n	8005682 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e07b      	b.n	800577a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005686:	2b00      	cmp	r3, #0
 8005688:	d108      	bne.n	800569c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005692:	d009      	beq.n	80056a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	61da      	str	r2, [r3, #28]
 800569a:	e005      	b.n	80056a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d106      	bne.n	80056c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f7fb fb08 	bl	8000cd8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2202      	movs	r2, #2
 80056cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056de:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80056f0:	431a      	orrs	r2, r3
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056fa:	431a      	orrs	r2, r3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	691b      	ldr	r3, [r3, #16]
 8005700:	f003 0302 	and.w	r3, r3, #2
 8005704:	431a      	orrs	r2, r3
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	695b      	ldr	r3, [r3, #20]
 800570a:	f003 0301 	and.w	r3, r3, #1
 800570e:	431a      	orrs	r2, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	699b      	ldr	r3, [r3, #24]
 8005714:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005718:	431a      	orrs	r2, r3
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	69db      	ldr	r3, [r3, #28]
 800571e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005722:	431a      	orrs	r2, r3
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6a1b      	ldr	r3, [r3, #32]
 8005728:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800572c:	ea42 0103 	orr.w	r1, r2, r3
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005734:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	430a      	orrs	r2, r1
 800573e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	699b      	ldr	r3, [r3, #24]
 8005744:	0c1b      	lsrs	r3, r3, #16
 8005746:	f003 0104 	and.w	r1, r3, #4
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574e:	f003 0210 	and.w	r2, r3, #16
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	430a      	orrs	r2, r1
 8005758:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	69da      	ldr	r2, [r3, #28]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005768:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005778:	2300      	movs	r3, #0
}
 800577a:	4618      	mov	r0, r3
 800577c:	3708      	adds	r7, #8
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}

08005782 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005782:	b084      	sub	sp, #16
 8005784:	b580      	push	{r7, lr}
 8005786:	b084      	sub	sp, #16
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	f107 001c 	add.w	r0, r7, #28
 8005790:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005796:	2b01      	cmp	r3, #1
 8005798:	d122      	bne.n	80057e0 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800579e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	68db      	ldr	r3, [r3, #12]
 80057aa:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80057ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80057c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d105      	bne.n	80057d4 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f000 f99f 	bl	8005b18 <USB_CoreReset>
 80057da:	4603      	mov	r3, r0
 80057dc:	73fb      	strb	r3, [r7, #15]
 80057de:	e01a      	b.n	8005816 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	68db      	ldr	r3, [r3, #12]
 80057e4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f000 f993 	bl	8005b18 <USB_CoreReset>
 80057f2:	4603      	mov	r3, r0
 80057f4:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80057f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d106      	bne.n	800580a <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005800:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	639a      	str	r2, [r3, #56]	; 0x38
 8005808:	e005      	b.n	8005816 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800580e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005818:	2b01      	cmp	r3, #1
 800581a:	d10b      	bne.n	8005834 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	f043 0206 	orr.w	r2, r3, #6
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	f043 0220 	orr.w	r2, r3, #32
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005834:	7bfb      	ldrb	r3, [r7, #15]
}
 8005836:	4618      	mov	r0, r3
 8005838:	3710      	adds	r7, #16
 800583a:	46bd      	mov	sp, r7
 800583c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005840:	b004      	add	sp, #16
 8005842:	4770      	bx	lr

08005844 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005844:	b480      	push	{r7}
 8005846:	b083      	sub	sp, #12
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	f043 0201 	orr.w	r2, r3, #1
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005858:	2300      	movs	r3, #0
}
 800585a:	4618      	mov	r0, r3
 800585c:	370c      	adds	r7, #12
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr

08005866 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005866:	b480      	push	{r7}
 8005868:	b083      	sub	sp, #12
 800586a:	af00      	add	r7, sp, #0
 800586c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	f023 0201 	bic.w	r2, r3, #1
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800587a:	2300      	movs	r3, #0
}
 800587c:	4618      	mov	r0, r3
 800587e:	370c      	adds	r7, #12
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr

08005888 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b084      	sub	sp, #16
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	460b      	mov	r3, r1
 8005892:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005894:	2300      	movs	r3, #0
 8005896:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80058a4:	78fb      	ldrb	r3, [r7, #3]
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d115      	bne.n	80058d6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80058b6:	2001      	movs	r0, #1
 80058b8:	f7fb fb78 	bl	8000fac <HAL_Delay>
      ms++;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	3301      	adds	r3, #1
 80058c0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 f919 	bl	8005afa <USB_GetMode>
 80058c8:	4603      	mov	r3, r0
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d01e      	beq.n	800590c <USB_SetCurrentMode+0x84>
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2b31      	cmp	r3, #49	; 0x31
 80058d2:	d9f0      	bls.n	80058b6 <USB_SetCurrentMode+0x2e>
 80058d4:	e01a      	b.n	800590c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80058d6:	78fb      	ldrb	r3, [r7, #3]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d115      	bne.n	8005908 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80058e8:	2001      	movs	r0, #1
 80058ea:	f7fb fb5f 	bl	8000fac <HAL_Delay>
      ms++;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	3301      	adds	r3, #1
 80058f2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f000 f900 	bl	8005afa <USB_GetMode>
 80058fa:	4603      	mov	r3, r0
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d005      	beq.n	800590c <USB_SetCurrentMode+0x84>
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2b31      	cmp	r3, #49	; 0x31
 8005904:	d9f0      	bls.n	80058e8 <USB_SetCurrentMode+0x60>
 8005906:	e001      	b.n	800590c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	e005      	b.n	8005918 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2b32      	cmp	r3, #50	; 0x32
 8005910:	d101      	bne.n	8005916 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	e000      	b.n	8005918 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005916:	2300      	movs	r3, #0
}
 8005918:	4618      	mov	r0, r3
 800591a:	3710      	adds	r7, #16
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005920:	b480      	push	{r7}
 8005922:	b085      	sub	sp, #20
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800592a:	2300      	movs	r3, #0
 800592c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	019b      	lsls	r3, r3, #6
 8005932:	f043 0220 	orr.w	r2, r3, #32
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	3301      	adds	r3, #1
 800593e:	60fb      	str	r3, [r7, #12]
 8005940:	4a08      	ldr	r2, [pc, #32]	; (8005964 <USB_FlushTxFifo+0x44>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d901      	bls.n	800594a <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8005946:	2303      	movs	r3, #3
 8005948:	e006      	b.n	8005958 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	691b      	ldr	r3, [r3, #16]
 800594e:	f003 0320 	and.w	r3, r3, #32
 8005952:	2b20      	cmp	r3, #32
 8005954:	d0f1      	beq.n	800593a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005956:	2300      	movs	r3, #0
}
 8005958:	4618      	mov	r0, r3
 800595a:	3714      	adds	r7, #20
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr
 8005964:	00030d40 	.word	0x00030d40

08005968 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005968:	b480      	push	{r7}
 800596a:	b085      	sub	sp, #20
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005970:	2300      	movs	r3, #0
 8005972:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2210      	movs	r2, #16
 8005978:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	3301      	adds	r3, #1
 800597e:	60fb      	str	r3, [r7, #12]
 8005980:	4a08      	ldr	r2, [pc, #32]	; (80059a4 <USB_FlushRxFifo+0x3c>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d901      	bls.n	800598a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8005986:	2303      	movs	r3, #3
 8005988:	e006      	b.n	8005998 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	691b      	ldr	r3, [r3, #16]
 800598e:	f003 0310 	and.w	r3, r3, #16
 8005992:	2b10      	cmp	r3, #16
 8005994:	d0f1      	beq.n	800597a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005996:	2300      	movs	r3, #0
}
 8005998:	4618      	mov	r0, r3
 800599a:	3714      	adds	r7, #20
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr
 80059a4:	00030d40 	.word	0x00030d40

080059a8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b089      	sub	sp, #36	; 0x24
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	60b9      	str	r1, [r7, #8]
 80059b2:	4611      	mov	r1, r2
 80059b4:	461a      	mov	r2, r3
 80059b6:	460b      	mov	r3, r1
 80059b8:	71fb      	strb	r3, [r7, #7]
 80059ba:	4613      	mov	r3, r2
 80059bc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80059c6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d123      	bne.n	8005a16 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80059ce:	88bb      	ldrh	r3, [r7, #4]
 80059d0:	3303      	adds	r3, #3
 80059d2:	089b      	lsrs	r3, r3, #2
 80059d4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80059d6:	2300      	movs	r3, #0
 80059d8:	61bb      	str	r3, [r7, #24]
 80059da:	e018      	b.n	8005a0e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80059dc:	79fb      	ldrb	r3, [r7, #7]
 80059de:	031a      	lsls	r2, r3, #12
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	4413      	add	r3, r2
 80059e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059e8:	461a      	mov	r2, r3
 80059ea:	69fb      	ldr	r3, [r7, #28]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	6013      	str	r3, [r2, #0]
      pSrc++;
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	3301      	adds	r3, #1
 80059f4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80059f6:	69fb      	ldr	r3, [r7, #28]
 80059f8:	3301      	adds	r3, #1
 80059fa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	3301      	adds	r3, #1
 8005a00:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a02:	69fb      	ldr	r3, [r7, #28]
 8005a04:	3301      	adds	r3, #1
 8005a06:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005a08:	69bb      	ldr	r3, [r7, #24]
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	61bb      	str	r3, [r7, #24]
 8005a0e:	69ba      	ldr	r2, [r7, #24]
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d3e2      	bcc.n	80059dc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005a16:	2300      	movs	r3, #0
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3724      	adds	r7, #36	; 0x24
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr

08005a24 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b08b      	sub	sp, #44	; 0x2c
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	60f8      	str	r0, [r7, #12]
 8005a2c:	60b9      	str	r1, [r7, #8]
 8005a2e:	4613      	mov	r3, r2
 8005a30:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005a3a:	88fb      	ldrh	r3, [r7, #6]
 8005a3c:	089b      	lsrs	r3, r3, #2
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005a42:	88fb      	ldrh	r3, [r7, #6]
 8005a44:	f003 0303 	and.w	r3, r3, #3
 8005a48:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	623b      	str	r3, [r7, #32]
 8005a4e:	e014      	b.n	8005a7a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a5a:	601a      	str	r2, [r3, #0]
    pDest++;
 8005a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a5e:	3301      	adds	r3, #1
 8005a60:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a64:	3301      	adds	r3, #1
 8005a66:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6a:	3301      	adds	r3, #1
 8005a6c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a70:	3301      	adds	r3, #1
 8005a72:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005a74:	6a3b      	ldr	r3, [r7, #32]
 8005a76:	3301      	adds	r3, #1
 8005a78:	623b      	str	r3, [r7, #32]
 8005a7a:	6a3a      	ldr	r2, [r7, #32]
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d3e6      	bcc.n	8005a50 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005a82:	8bfb      	ldrh	r3, [r7, #30]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d01e      	beq.n	8005ac6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005a8c:	69bb      	ldr	r3, [r7, #24]
 8005a8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a92:	461a      	mov	r2, r3
 8005a94:	f107 0310 	add.w	r3, r7, #16
 8005a98:	6812      	ldr	r2, [r2, #0]
 8005a9a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005a9c:	693a      	ldr	r2, [r7, #16]
 8005a9e:	6a3b      	ldr	r3, [r7, #32]
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	00db      	lsls	r3, r3, #3
 8005aa4:	fa22 f303 	lsr.w	r3, r2, r3
 8005aa8:	b2da      	uxtb	r2, r3
 8005aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aac:	701a      	strb	r2, [r3, #0]
      i++;
 8005aae:	6a3b      	ldr	r3, [r7, #32]
 8005ab0:	3301      	adds	r3, #1
 8005ab2:	623b      	str	r3, [r7, #32]
      pDest++;
 8005ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005aba:	8bfb      	ldrh	r3, [r7, #30]
 8005abc:	3b01      	subs	r3, #1
 8005abe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005ac0:	8bfb      	ldrh	r3, [r7, #30]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d1ea      	bne.n	8005a9c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	372c      	adds	r7, #44	; 0x2c
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr

08005ad4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b085      	sub	sp, #20
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	695b      	ldr	r3, [r3, #20]
 8005ae0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	699b      	ldr	r3, [r3, #24]
 8005ae6:	68fa      	ldr	r2, [r7, #12]
 8005ae8:	4013      	ands	r3, r2
 8005aea:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005aec:	68fb      	ldr	r3, [r7, #12]
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3714      	adds	r7, #20
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr

08005afa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005afa:	b480      	push	{r7}
 8005afc:	b083      	sub	sp, #12
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	695b      	ldr	r3, [r3, #20]
 8005b06:	f003 0301 	and.w	r3, r3, #1
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	370c      	adds	r7, #12
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr
	...

08005b18 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b085      	sub	sp, #20
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b20:	2300      	movs	r3, #0
 8005b22:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	3301      	adds	r3, #1
 8005b28:	60fb      	str	r3, [r7, #12]
 8005b2a:	4a13      	ldr	r2, [pc, #76]	; (8005b78 <USB_CoreReset+0x60>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d901      	bls.n	8005b34 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005b30:	2303      	movs	r3, #3
 8005b32:	e01a      	b.n	8005b6a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	691b      	ldr	r3, [r3, #16]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	daf3      	bge.n	8005b24 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	691b      	ldr	r3, [r3, #16]
 8005b44:	f043 0201 	orr.w	r2, r3, #1
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	3301      	adds	r3, #1
 8005b50:	60fb      	str	r3, [r7, #12]
 8005b52:	4a09      	ldr	r2, [pc, #36]	; (8005b78 <USB_CoreReset+0x60>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d901      	bls.n	8005b5c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005b58:	2303      	movs	r3, #3
 8005b5a:	e006      	b.n	8005b6a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	691b      	ldr	r3, [r3, #16]
 8005b60:	f003 0301 	and.w	r3, r3, #1
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d0f1      	beq.n	8005b4c <USB_CoreReset+0x34>

  return HAL_OK;
 8005b68:	2300      	movs	r3, #0
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3714      	adds	r7, #20
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr
 8005b76:	bf00      	nop
 8005b78:	00030d40 	.word	0x00030d40

08005b7c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b7c:	b084      	sub	sp, #16
 8005b7e:	b580      	push	{r7, lr}
 8005b80:	b084      	sub	sp, #16
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	6078      	str	r0, [r7, #4]
 8005b86:	f107 001c 	add.w	r0, r7, #28
 8005b8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005b98:	461a      	mov	r2, r3
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bae:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bba:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d018      	beq.n	8005c00 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d10a      	bne.n	8005bea <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	68ba      	ldr	r2, [r7, #8]
 8005bde:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005be2:	f043 0304 	orr.w	r3, r3, #4
 8005be6:	6013      	str	r3, [r2, #0]
 8005be8:	e014      	b.n	8005c14 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	68ba      	ldr	r2, [r7, #8]
 8005bf4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005bf8:	f023 0304 	bic.w	r3, r3, #4
 8005bfc:	6013      	str	r3, [r2, #0]
 8005bfe:	e009      	b.n	8005c14 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	68ba      	ldr	r2, [r7, #8]
 8005c0a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c0e:	f023 0304 	bic.w	r3, r3, #4
 8005c12:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8005c14:	2110      	movs	r1, #16
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f7ff fe82 	bl	8005920 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f7ff fea3 	bl	8005968 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005c22:	2300      	movs	r3, #0
 8005c24:	60fb      	str	r3, [r7, #12]
 8005c26:	e015      	b.n	8005c54 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	015a      	lsls	r2, r3, #5
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	4413      	add	r3, r2
 8005c30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c34:	461a      	mov	r2, r3
 8005c36:	f04f 33ff 	mov.w	r3, #4294967295
 8005c3a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	015a      	lsls	r2, r3, #5
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	4413      	add	r3, r2
 8005c44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c48:	461a      	mov	r2, r3
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	3301      	adds	r3, #1
 8005c52:	60fb      	str	r3, [r7, #12]
 8005c54:	6a3b      	ldr	r3, [r7, #32]
 8005c56:	68fa      	ldr	r2, [r7, #12]
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d3e5      	bcc.n	8005c28 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f04f 32ff 	mov.w	r2, #4294967295
 8005c68:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d00b      	beq.n	8005c8e <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c7c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	4a13      	ldr	r2, [pc, #76]	; (8005cd0 <USB_HostInit+0x154>)
 8005c82:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4a13      	ldr	r2, [pc, #76]	; (8005cd4 <USB_HostInit+0x158>)
 8005c88:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005c8c:	e009      	b.n	8005ca2 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2280      	movs	r2, #128	; 0x80
 8005c92:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	4a10      	ldr	r2, [pc, #64]	; (8005cd8 <USB_HostInit+0x15c>)
 8005c98:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4a0f      	ldr	r2, [pc, #60]	; (8005cdc <USB_HostInit+0x160>)
 8005c9e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d105      	bne.n	8005cb4 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	699b      	ldr	r3, [r3, #24]
 8005cac:	f043 0210 	orr.w	r2, r3, #16
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	699a      	ldr	r2, [r3, #24]
 8005cb8:	4b09      	ldr	r3, [pc, #36]	; (8005ce0 <USB_HostInit+0x164>)
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8005cc0:	2300      	movs	r3, #0
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3710      	adds	r7, #16
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005ccc:	b004      	add	sp, #16
 8005cce:	4770      	bx	lr
 8005cd0:	01000200 	.word	0x01000200
 8005cd4:	00e00300 	.word	0x00e00300
 8005cd8:	00600080 	.word	0x00600080
 8005cdc:	004000e0 	.word	0x004000e0
 8005ce0:	a3200008 	.word	0xa3200008

08005ce4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b085      	sub	sp, #20
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	460b      	mov	r3, r1
 8005cee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	68fa      	ldr	r2, [r7, #12]
 8005cfe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d02:	f023 0303 	bic.w	r3, r3, #3
 8005d06:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	78fb      	ldrb	r3, [r7, #3]
 8005d12:	f003 0303 	and.w	r3, r3, #3
 8005d16:	68f9      	ldr	r1, [r7, #12]
 8005d18:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005d20:	78fb      	ldrb	r3, [r7, #3]
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d107      	bne.n	8005d36 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005d32:	6053      	str	r3, [r2, #4]
 8005d34:	e009      	b.n	8005d4a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005d36:	78fb      	ldrb	r3, [r7, #3]
 8005d38:	2b02      	cmp	r3, #2
 8005d3a:	d106      	bne.n	8005d4a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d42:	461a      	mov	r2, r3
 8005d44:	f241 7370 	movw	r3, #6000	; 0x1770
 8005d48:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005d4a:	2300      	movs	r3, #0
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3714      	adds	r7, #20
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr

08005d58 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b084      	sub	sp, #16
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005d64:	2300      	movs	r3, #0
 8005d66:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005d78:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	68fa      	ldr	r2, [r7, #12]
 8005d7e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005d82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d86:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005d88:	2064      	movs	r0, #100	; 0x64
 8005d8a:	f7fb f90f 	bl	8000fac <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	68fa      	ldr	r2, [r7, #12]
 8005d92:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005d96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d9a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005d9c:	200a      	movs	r0, #10
 8005d9e:	f7fb f905 	bl	8000fac <HAL_Delay>

  return HAL_OK;
 8005da2:	2300      	movs	r3, #0
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3710      	adds	r7, #16
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}

08005dac <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b085      	sub	sp, #20
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	460b      	mov	r3, r1
 8005db6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005dd0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d109      	bne.n	8005df0 <USB_DriveVbus+0x44>
 8005ddc:	78fb      	ldrb	r3, [r7, #3]
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	d106      	bne.n	8005df0 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	68fa      	ldr	r2, [r7, #12]
 8005de6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005dea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005dee:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005df6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dfa:	d109      	bne.n	8005e10 <USB_DriveVbus+0x64>
 8005dfc:	78fb      	ldrb	r3, [r7, #3]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d106      	bne.n	8005e10 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	68fa      	ldr	r2, [r7, #12]
 8005e06:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005e0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e0e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3714      	adds	r7, #20
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr

08005e1e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005e1e:	b480      	push	{r7}
 8005e20:	b085      	sub	sp, #20
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	0c5b      	lsrs	r3, r3, #17
 8005e3c:	f003 0303 	and.w	r3, r3, #3
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3714      	adds	r7, #20
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr

08005e4c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b085      	sub	sp, #20
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	b29b      	uxth	r3, r3
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3714      	adds	r7, #20
 8005e66:	46bd      	mov	sp, r7
 8005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6c:	4770      	bx	lr
	...

08005e70 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b088      	sub	sp, #32
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	4608      	mov	r0, r1
 8005e7a:	4611      	mov	r1, r2
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	4603      	mov	r3, r0
 8005e80:	70fb      	strb	r3, [r7, #3]
 8005e82:	460b      	mov	r3, r1
 8005e84:	70bb      	strb	r3, [r7, #2]
 8005e86:	4613      	mov	r3, r2
 8005e88:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005e92:	78fb      	ldrb	r3, [r7, #3]
 8005e94:	015a      	lsls	r2, r3, #5
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	4413      	add	r3, r2
 8005e9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	f04f 33ff 	mov.w	r3, #4294967295
 8005ea4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005ea6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005eaa:	2b03      	cmp	r3, #3
 8005eac:	d87e      	bhi.n	8005fac <USB_HC_Init+0x13c>
 8005eae:	a201      	add	r2, pc, #4	; (adr r2, 8005eb4 <USB_HC_Init+0x44>)
 8005eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eb4:	08005ec5 	.word	0x08005ec5
 8005eb8:	08005f6f 	.word	0x08005f6f
 8005ebc:	08005ec5 	.word	0x08005ec5
 8005ec0:	08005f31 	.word	0x08005f31
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005ec4:	78fb      	ldrb	r3, [r7, #3]
 8005ec6:	015a      	lsls	r2, r3, #5
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	4413      	add	r3, r2
 8005ecc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	f240 439d 	movw	r3, #1181	; 0x49d
 8005ed6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005ed8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	da10      	bge.n	8005f02 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005ee0:	78fb      	ldrb	r3, [r7, #3]
 8005ee2:	015a      	lsls	r2, r3, #5
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	4413      	add	r3, r2
 8005ee8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eec:	68db      	ldr	r3, [r3, #12]
 8005eee:	78fa      	ldrb	r2, [r7, #3]
 8005ef0:	0151      	lsls	r1, r2, #5
 8005ef2:	693a      	ldr	r2, [r7, #16]
 8005ef4:	440a      	add	r2, r1
 8005ef6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005efa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005efe:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005f00:	e057      	b.n	8005fb2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d051      	beq.n	8005fb2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005f0e:	78fb      	ldrb	r3, [r7, #3]
 8005f10:	015a      	lsls	r2, r3, #5
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	4413      	add	r3, r2
 8005f16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	78fa      	ldrb	r2, [r7, #3]
 8005f1e:	0151      	lsls	r1, r2, #5
 8005f20:	693a      	ldr	r2, [r7, #16]
 8005f22:	440a      	add	r2, r1
 8005f24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f28:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005f2c:	60d3      	str	r3, [r2, #12]
      break;
 8005f2e:	e040      	b.n	8005fb2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005f30:	78fb      	ldrb	r3, [r7, #3]
 8005f32:	015a      	lsls	r2, r3, #5
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	4413      	add	r3, r2
 8005f38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	f240 639d 	movw	r3, #1693	; 0x69d
 8005f42:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005f44:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	da34      	bge.n	8005fb6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005f4c:	78fb      	ldrb	r3, [r7, #3]
 8005f4e:	015a      	lsls	r2, r3, #5
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	4413      	add	r3, r2
 8005f54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f58:	68db      	ldr	r3, [r3, #12]
 8005f5a:	78fa      	ldrb	r2, [r7, #3]
 8005f5c:	0151      	lsls	r1, r2, #5
 8005f5e:	693a      	ldr	r2, [r7, #16]
 8005f60:	440a      	add	r2, r1
 8005f62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f6a:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005f6c:	e023      	b.n	8005fb6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005f6e:	78fb      	ldrb	r3, [r7, #3]
 8005f70:	015a      	lsls	r2, r3, #5
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	4413      	add	r3, r2
 8005f76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	f240 2325 	movw	r3, #549	; 0x225
 8005f80:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005f82:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	da17      	bge.n	8005fba <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005f8a:	78fb      	ldrb	r3, [r7, #3]
 8005f8c:	015a      	lsls	r2, r3, #5
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	4413      	add	r3, r2
 8005f92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f96:	68db      	ldr	r3, [r3, #12]
 8005f98:	78fa      	ldrb	r2, [r7, #3]
 8005f9a:	0151      	lsls	r1, r2, #5
 8005f9c:	693a      	ldr	r2, [r7, #16]
 8005f9e:	440a      	add	r2, r1
 8005fa0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fa4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005fa8:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005faa:	e006      	b.n	8005fba <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	77fb      	strb	r3, [r7, #31]
      break;
 8005fb0:	e004      	b.n	8005fbc <USB_HC_Init+0x14c>
      break;
 8005fb2:	bf00      	nop
 8005fb4:	e002      	b.n	8005fbc <USB_HC_Init+0x14c>
      break;
 8005fb6:	bf00      	nop
 8005fb8:	e000      	b.n	8005fbc <USB_HC_Init+0x14c>
      break;
 8005fba:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fc2:	699a      	ldr	r2, [r3, #24]
 8005fc4:	78fb      	ldrb	r3, [r7, #3]
 8005fc6:	f003 030f 	and.w	r3, r3, #15
 8005fca:	2101      	movs	r1, #1
 8005fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8005fd0:	6939      	ldr	r1, [r7, #16]
 8005fd2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	699b      	ldr	r3, [r3, #24]
 8005fde:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005fe6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	da03      	bge.n	8005ff6 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005fee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ff2:	61bb      	str	r3, [r7, #24]
 8005ff4:	e001      	b.n	8005ffa <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f7ff ff0f 	bl	8005e1e <USB_GetHostSpeed>
 8006000:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006002:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006006:	2b02      	cmp	r3, #2
 8006008:	d106      	bne.n	8006018 <USB_HC_Init+0x1a8>
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2b02      	cmp	r3, #2
 800600e:	d003      	beq.n	8006018 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006010:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006014:	617b      	str	r3, [r7, #20]
 8006016:	e001      	b.n	800601c <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006018:	2300      	movs	r3, #0
 800601a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800601c:	787b      	ldrb	r3, [r7, #1]
 800601e:	059b      	lsls	r3, r3, #22
 8006020:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006024:	78bb      	ldrb	r3, [r7, #2]
 8006026:	02db      	lsls	r3, r3, #11
 8006028:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800602c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800602e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006032:	049b      	lsls	r3, r3, #18
 8006034:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006038:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800603a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800603c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006040:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006042:	69bb      	ldr	r3, [r7, #24]
 8006044:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006046:	78fb      	ldrb	r3, [r7, #3]
 8006048:	0159      	lsls	r1, r3, #5
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	440b      	add	r3, r1
 800604e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006052:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006058:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800605a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800605e:	2b03      	cmp	r3, #3
 8006060:	d10f      	bne.n	8006082 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8006062:	78fb      	ldrb	r3, [r7, #3]
 8006064:	015a      	lsls	r2, r3, #5
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	4413      	add	r3, r2
 800606a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	78fa      	ldrb	r2, [r7, #3]
 8006072:	0151      	lsls	r1, r2, #5
 8006074:	693a      	ldr	r2, [r7, #16]
 8006076:	440a      	add	r2, r1
 8006078:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800607c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006080:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006082:	7ffb      	ldrb	r3, [r7, #31]
}
 8006084:	4618      	mov	r0, r3
 8006086:	3720      	adds	r7, #32
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}

0800608c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b08c      	sub	sp, #48	; 0x30
 8006090:	af02      	add	r7, sp, #8
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	60b9      	str	r1, [r7, #8]
 8006096:	4613      	mov	r3, r2
 8006098:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	785b      	ldrb	r3, [r3, #1]
 80060a2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80060a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80060a8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d02d      	beq.n	8006112 <USB_HC_StartXfer+0x86>
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	791b      	ldrb	r3, [r3, #4]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d129      	bne.n	8006112 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80060be:	79fb      	ldrb	r3, [r7, #7]
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d117      	bne.n	80060f4 <USB_HC_StartXfer+0x68>
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	79db      	ldrb	r3, [r3, #7]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d003      	beq.n	80060d4 <USB_HC_StartXfer+0x48>
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	79db      	ldrb	r3, [r3, #7]
 80060d0:	2b02      	cmp	r3, #2
 80060d2:	d10f      	bne.n	80060f4 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80060d4:	69fb      	ldr	r3, [r7, #28]
 80060d6:	015a      	lsls	r2, r3, #5
 80060d8:	6a3b      	ldr	r3, [r7, #32]
 80060da:	4413      	add	r3, r2
 80060dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	69fa      	ldr	r2, [r7, #28]
 80060e4:	0151      	lsls	r1, r2, #5
 80060e6:	6a3a      	ldr	r2, [r7, #32]
 80060e8:	440a      	add	r2, r1
 80060ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060f2:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80060f4:	79fb      	ldrb	r3, [r7, #7]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d10b      	bne.n	8006112 <USB_HC_StartXfer+0x86>
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	795b      	ldrb	r3, [r3, #5]
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d107      	bne.n	8006112 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	785b      	ldrb	r3, [r3, #1]
 8006106:	4619      	mov	r1, r3
 8006108:	68f8      	ldr	r0, [r7, #12]
 800610a:	f000 fa2f 	bl	800656c <USB_DoPing>
      return HAL_OK;
 800610e:	2300      	movs	r3, #0
 8006110:	e0f8      	b.n	8006304 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	695b      	ldr	r3, [r3, #20]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d018      	beq.n	800614c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	695b      	ldr	r3, [r3, #20]
 800611e:	68ba      	ldr	r2, [r7, #8]
 8006120:	8912      	ldrh	r2, [r2, #8]
 8006122:	4413      	add	r3, r2
 8006124:	3b01      	subs	r3, #1
 8006126:	68ba      	ldr	r2, [r7, #8]
 8006128:	8912      	ldrh	r2, [r2, #8]
 800612a:	fbb3 f3f2 	udiv	r3, r3, r2
 800612e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006130:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006132:	8b7b      	ldrh	r3, [r7, #26]
 8006134:	429a      	cmp	r2, r3
 8006136:	d90b      	bls.n	8006150 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8006138:	8b7b      	ldrh	r3, [r7, #26]
 800613a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800613c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800613e:	68ba      	ldr	r2, [r7, #8]
 8006140:	8912      	ldrh	r2, [r2, #8]
 8006142:	fb02 f203 	mul.w	r2, r2, r3
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	611a      	str	r2, [r3, #16]
 800614a:	e001      	b.n	8006150 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800614c:	2301      	movs	r3, #1
 800614e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	78db      	ldrb	r3, [r3, #3]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d007      	beq.n	8006168 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006158:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800615a:	68ba      	ldr	r2, [r7, #8]
 800615c:	8912      	ldrh	r2, [r2, #8]
 800615e:	fb02 f203 	mul.w	r2, r2, r3
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	611a      	str	r2, [r3, #16]
 8006166:	e003      	b.n	8006170 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	695a      	ldr	r2, [r3, #20]
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	691b      	ldr	r3, [r3, #16]
 8006174:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006178:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800617a:	04d9      	lsls	r1, r3, #19
 800617c:	4b63      	ldr	r3, [pc, #396]	; (800630c <USB_HC_StartXfer+0x280>)
 800617e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006180:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	7a9b      	ldrb	r3, [r3, #10]
 8006186:	075b      	lsls	r3, r3, #29
 8006188:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800618c:	69f9      	ldr	r1, [r7, #28]
 800618e:	0148      	lsls	r0, r1, #5
 8006190:	6a39      	ldr	r1, [r7, #32]
 8006192:	4401      	add	r1, r0
 8006194:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006198:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800619a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800619c:	79fb      	ldrb	r3, [r7, #7]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d009      	beq.n	80061b6 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	68d9      	ldr	r1, [r3, #12]
 80061a6:	69fb      	ldr	r3, [r7, #28]
 80061a8:	015a      	lsls	r2, r3, #5
 80061aa:	6a3b      	ldr	r3, [r7, #32]
 80061ac:	4413      	add	r3, r2
 80061ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061b2:	460a      	mov	r2, r1
 80061b4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80061b6:	6a3b      	ldr	r3, [r7, #32]
 80061b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	f003 0301 	and.w	r3, r3, #1
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	bf0c      	ite	eq
 80061c6:	2301      	moveq	r3, #1
 80061c8:	2300      	movne	r3, #0
 80061ca:	b2db      	uxtb	r3, r3
 80061cc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80061ce:	69fb      	ldr	r3, [r7, #28]
 80061d0:	015a      	lsls	r2, r3, #5
 80061d2:	6a3b      	ldr	r3, [r7, #32]
 80061d4:	4413      	add	r3, r2
 80061d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	69fa      	ldr	r2, [r7, #28]
 80061de:	0151      	lsls	r1, r2, #5
 80061e0:	6a3a      	ldr	r2, [r7, #32]
 80061e2:	440a      	add	r2, r1
 80061e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061e8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80061ec:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80061ee:	69fb      	ldr	r3, [r7, #28]
 80061f0:	015a      	lsls	r2, r3, #5
 80061f2:	6a3b      	ldr	r3, [r7, #32]
 80061f4:	4413      	add	r3, r2
 80061f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	7e7b      	ldrb	r3, [r7, #25]
 80061fe:	075b      	lsls	r3, r3, #29
 8006200:	69f9      	ldr	r1, [r7, #28]
 8006202:	0148      	lsls	r0, r1, #5
 8006204:	6a39      	ldr	r1, [r7, #32]
 8006206:	4401      	add	r1, r0
 8006208:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800620c:	4313      	orrs	r3, r2
 800620e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006210:	69fb      	ldr	r3, [r7, #28]
 8006212:	015a      	lsls	r2, r3, #5
 8006214:	6a3b      	ldr	r3, [r7, #32]
 8006216:	4413      	add	r3, r2
 8006218:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006226:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	78db      	ldrb	r3, [r3, #3]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d004      	beq.n	800623a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006236:	613b      	str	r3, [r7, #16]
 8006238:	e003      	b.n	8006242 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006240:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006248:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800624a:	69fb      	ldr	r3, [r7, #28]
 800624c:	015a      	lsls	r2, r3, #5
 800624e:	6a3b      	ldr	r3, [r7, #32]
 8006250:	4413      	add	r3, r2
 8006252:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006256:	461a      	mov	r2, r3
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800625c:	79fb      	ldrb	r3, [r7, #7]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d001      	beq.n	8006266 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006262:	2300      	movs	r3, #0
 8006264:	e04e      	b.n	8006304 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	78db      	ldrb	r3, [r3, #3]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d149      	bne.n	8006302 <USB_HC_StartXfer+0x276>
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	695b      	ldr	r3, [r3, #20]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d045      	beq.n	8006302 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	79db      	ldrb	r3, [r3, #7]
 800627a:	2b03      	cmp	r3, #3
 800627c:	d830      	bhi.n	80062e0 <USB_HC_StartXfer+0x254>
 800627e:	a201      	add	r2, pc, #4	; (adr r2, 8006284 <USB_HC_StartXfer+0x1f8>)
 8006280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006284:	08006295 	.word	0x08006295
 8006288:	080062b9 	.word	0x080062b9
 800628c:	08006295 	.word	0x08006295
 8006290:	080062b9 	.word	0x080062b9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	695b      	ldr	r3, [r3, #20]
 8006298:	3303      	adds	r3, #3
 800629a:	089b      	lsrs	r3, r3, #2
 800629c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800629e:	8afa      	ldrh	r2, [r7, #22]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	429a      	cmp	r2, r3
 80062a8:	d91c      	bls.n	80062e4 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	699b      	ldr	r3, [r3, #24]
 80062ae:	f043 0220 	orr.w	r2, r3, #32
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	619a      	str	r2, [r3, #24]
        }
        break;
 80062b6:	e015      	b.n	80062e4 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	695b      	ldr	r3, [r3, #20]
 80062bc:	3303      	adds	r3, #3
 80062be:	089b      	lsrs	r3, r3, #2
 80062c0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80062c2:	8afa      	ldrh	r2, [r7, #22]
 80062c4:	6a3b      	ldr	r3, [r7, #32]
 80062c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062ca:	691b      	ldr	r3, [r3, #16]
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	429a      	cmp	r2, r3
 80062d0:	d90a      	bls.n	80062e8 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	699b      	ldr	r3, [r3, #24]
 80062d6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	619a      	str	r2, [r3, #24]
        }
        break;
 80062de:	e003      	b.n	80062e8 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80062e0:	bf00      	nop
 80062e2:	e002      	b.n	80062ea <USB_HC_StartXfer+0x25e>
        break;
 80062e4:	bf00      	nop
 80062e6:	e000      	b.n	80062ea <USB_HC_StartXfer+0x25e>
        break;
 80062e8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	68d9      	ldr	r1, [r3, #12]
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	785a      	ldrb	r2, [r3, #1]
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	695b      	ldr	r3, [r3, #20]
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	2000      	movs	r0, #0
 80062fa:	9000      	str	r0, [sp, #0]
 80062fc:	68f8      	ldr	r0, [r7, #12]
 80062fe:	f7ff fb53 	bl	80059a8 <USB_WritePacket>
  }

  return HAL_OK;
 8006302:	2300      	movs	r3, #0
}
 8006304:	4618      	mov	r0, r3
 8006306:	3728      	adds	r7, #40	; 0x28
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}
 800630c:	1ff80000 	.word	0x1ff80000

08006310 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006310:	b480      	push	{r7}
 8006312:	b085      	sub	sp, #20
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006322:	695b      	ldr	r3, [r3, #20]
 8006324:	b29b      	uxth	r3, r3
}
 8006326:	4618      	mov	r0, r3
 8006328:	3714      	adds	r7, #20
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr

08006332 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006332:	b480      	push	{r7}
 8006334:	b089      	sub	sp, #36	; 0x24
 8006336:	af00      	add	r7, sp, #0
 8006338:	6078      	str	r0, [r7, #4]
 800633a:	460b      	mov	r3, r1
 800633c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8006342:	78fb      	ldrb	r3, [r7, #3]
 8006344:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8006346:	2300      	movs	r3, #0
 8006348:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	015a      	lsls	r2, r3, #5
 800634e:	69bb      	ldr	r3, [r7, #24]
 8006350:	4413      	add	r3, r2
 8006352:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	0c9b      	lsrs	r3, r3, #18
 800635a:	f003 0303 	and.w	r3, r3, #3
 800635e:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	015a      	lsls	r2, r3, #5
 8006364:	69bb      	ldr	r3, [r7, #24]
 8006366:	4413      	add	r3, r2
 8006368:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	0fdb      	lsrs	r3, r3, #31
 8006370:	f003 0301 	and.w	r3, r3, #1
 8006374:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	f003 0320 	and.w	r3, r3, #32
 800637e:	2b20      	cmp	r3, #32
 8006380:	d104      	bne.n	800638c <USB_HC_Halt+0x5a>
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d101      	bne.n	800638c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006388:	2300      	movs	r3, #0
 800638a:	e0e8      	b.n	800655e <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d002      	beq.n	8006398 <USB_HC_Halt+0x66>
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	2b02      	cmp	r3, #2
 8006396:	d173      	bne.n	8006480 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	015a      	lsls	r2, r3, #5
 800639c:	69bb      	ldr	r3, [r7, #24]
 800639e:	4413      	add	r3, r2
 80063a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	697a      	ldr	r2, [r7, #20]
 80063a8:	0151      	lsls	r1, r2, #5
 80063aa:	69ba      	ldr	r2, [r7, #24]
 80063ac:	440a      	add	r2, r1
 80063ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80063b6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	f003 0320 	and.w	r3, r3, #32
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	f040 80cb 	bne.w	800655c <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ca:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d143      	bne.n	800645a <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	015a      	lsls	r2, r3, #5
 80063d6:	69bb      	ldr	r3, [r7, #24]
 80063d8:	4413      	add	r3, r2
 80063da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	697a      	ldr	r2, [r7, #20]
 80063e2:	0151      	lsls	r1, r2, #5
 80063e4:	69ba      	ldr	r2, [r7, #24]
 80063e6:	440a      	add	r2, r1
 80063e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80063f0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	015a      	lsls	r2, r3, #5
 80063f6:	69bb      	ldr	r3, [r7, #24]
 80063f8:	4413      	add	r3, r2
 80063fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	697a      	ldr	r2, [r7, #20]
 8006402:	0151      	lsls	r1, r2, #5
 8006404:	69ba      	ldr	r2, [r7, #24]
 8006406:	440a      	add	r2, r1
 8006408:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800640c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006410:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	015a      	lsls	r2, r3, #5
 8006416:	69bb      	ldr	r3, [r7, #24]
 8006418:	4413      	add	r3, r2
 800641a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	697a      	ldr	r2, [r7, #20]
 8006422:	0151      	lsls	r1, r2, #5
 8006424:	69ba      	ldr	r2, [r7, #24]
 8006426:	440a      	add	r2, r1
 8006428:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800642c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006430:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8006432:	69fb      	ldr	r3, [r7, #28]
 8006434:	3301      	adds	r3, #1
 8006436:	61fb      	str	r3, [r7, #28]
 8006438:	69fb      	ldr	r3, [r7, #28]
 800643a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800643e:	d81d      	bhi.n	800647c <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	015a      	lsls	r2, r3, #5
 8006444:	69bb      	ldr	r3, [r7, #24]
 8006446:	4413      	add	r3, r2
 8006448:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006452:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006456:	d0ec      	beq.n	8006432 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006458:	e080      	b.n	800655c <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	015a      	lsls	r2, r3, #5
 800645e:	69bb      	ldr	r3, [r7, #24]
 8006460:	4413      	add	r3, r2
 8006462:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	697a      	ldr	r2, [r7, #20]
 800646a:	0151      	lsls	r1, r2, #5
 800646c:	69ba      	ldr	r2, [r7, #24]
 800646e:	440a      	add	r2, r1
 8006470:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006474:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006478:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800647a:	e06f      	b.n	800655c <USB_HC_Halt+0x22a>
            break;
 800647c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800647e:	e06d      	b.n	800655c <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	015a      	lsls	r2, r3, #5
 8006484:	69bb      	ldr	r3, [r7, #24]
 8006486:	4413      	add	r3, r2
 8006488:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	697a      	ldr	r2, [r7, #20]
 8006490:	0151      	lsls	r1, r2, #5
 8006492:	69ba      	ldr	r2, [r7, #24]
 8006494:	440a      	add	r2, r1
 8006496:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800649a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800649e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80064a0:	69bb      	ldr	r3, [r7, #24]
 80064a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064a6:	691b      	ldr	r3, [r3, #16]
 80064a8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d143      	bne.n	8006538 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	015a      	lsls	r2, r3, #5
 80064b4:	69bb      	ldr	r3, [r7, #24]
 80064b6:	4413      	add	r3, r2
 80064b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	697a      	ldr	r2, [r7, #20]
 80064c0:	0151      	lsls	r1, r2, #5
 80064c2:	69ba      	ldr	r2, [r7, #24]
 80064c4:	440a      	add	r2, r1
 80064c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064ca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80064ce:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	015a      	lsls	r2, r3, #5
 80064d4:	69bb      	ldr	r3, [r7, #24]
 80064d6:	4413      	add	r3, r2
 80064d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	697a      	ldr	r2, [r7, #20]
 80064e0:	0151      	lsls	r1, r2, #5
 80064e2:	69ba      	ldr	r2, [r7, #24]
 80064e4:	440a      	add	r2, r1
 80064e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80064ee:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	015a      	lsls	r2, r3, #5
 80064f4:	69bb      	ldr	r3, [r7, #24]
 80064f6:	4413      	add	r3, r2
 80064f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	697a      	ldr	r2, [r7, #20]
 8006500:	0151      	lsls	r1, r2, #5
 8006502:	69ba      	ldr	r2, [r7, #24]
 8006504:	440a      	add	r2, r1
 8006506:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800650a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800650e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006510:	69fb      	ldr	r3, [r7, #28]
 8006512:	3301      	adds	r3, #1
 8006514:	61fb      	str	r3, [r7, #28]
 8006516:	69fb      	ldr	r3, [r7, #28]
 8006518:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800651c:	d81d      	bhi.n	800655a <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	015a      	lsls	r2, r3, #5
 8006522:	69bb      	ldr	r3, [r7, #24]
 8006524:	4413      	add	r3, r2
 8006526:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006530:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006534:	d0ec      	beq.n	8006510 <USB_HC_Halt+0x1de>
 8006536:	e011      	b.n	800655c <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	015a      	lsls	r2, r3, #5
 800653c:	69bb      	ldr	r3, [r7, #24]
 800653e:	4413      	add	r3, r2
 8006540:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	697a      	ldr	r2, [r7, #20]
 8006548:	0151      	lsls	r1, r2, #5
 800654a:	69ba      	ldr	r2, [r7, #24]
 800654c:	440a      	add	r2, r1
 800654e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006552:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006556:	6013      	str	r3, [r2, #0]
 8006558:	e000      	b.n	800655c <USB_HC_Halt+0x22a>
          break;
 800655a:	bf00      	nop
    }
  }

  return HAL_OK;
 800655c:	2300      	movs	r3, #0
}
 800655e:	4618      	mov	r0, r3
 8006560:	3724      	adds	r7, #36	; 0x24
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr
	...

0800656c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800656c:	b480      	push	{r7}
 800656e:	b087      	sub	sp, #28
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	460b      	mov	r3, r1
 8006576:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800657c:	78fb      	ldrb	r3, [r7, #3]
 800657e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006580:	2301      	movs	r3, #1
 8006582:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	04da      	lsls	r2, r3, #19
 8006588:	4b15      	ldr	r3, [pc, #84]	; (80065e0 <USB_DoPing+0x74>)
 800658a:	4013      	ands	r3, r2
 800658c:	693a      	ldr	r2, [r7, #16]
 800658e:	0151      	lsls	r1, r2, #5
 8006590:	697a      	ldr	r2, [r7, #20]
 8006592:	440a      	add	r2, r1
 8006594:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006598:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800659c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	015a      	lsls	r2, r3, #5
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	4413      	add	r3, r2
 80065a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80065b4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80065bc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	015a      	lsls	r2, r3, #5
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	4413      	add	r3, r2
 80065c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065ca:	461a      	mov	r2, r3
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80065d0:	2300      	movs	r3, #0
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	371c      	adds	r7, #28
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr
 80065de:	bf00      	nop
 80065e0:	1ff80000 	.word	0x1ff80000

080065e4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b086      	sub	sp, #24
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80065f0:	2300      	movs	r3, #0
 80065f2:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f7ff f936 	bl	8005866 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80065fa:	2110      	movs	r1, #16
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f7ff f98f 	bl	8005920 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f7ff f9b0 	bl	8005968 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006608:	2300      	movs	r3, #0
 800660a:	613b      	str	r3, [r7, #16]
 800660c:	e01f      	b.n	800664e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	015a      	lsls	r2, r3, #5
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	4413      	add	r3, r2
 8006616:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006624:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800662c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006634:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	015a      	lsls	r2, r3, #5
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	4413      	add	r3, r2
 800663e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006642:	461a      	mov	r2, r3
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	3301      	adds	r3, #1
 800664c:	613b      	str	r3, [r7, #16]
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	2b0f      	cmp	r3, #15
 8006652:	d9dc      	bls.n	800660e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006654:	2300      	movs	r3, #0
 8006656:	613b      	str	r3, [r7, #16]
 8006658:	e034      	b.n	80066c4 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	015a      	lsls	r2, r3, #5
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	4413      	add	r3, r2
 8006662:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006670:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006678:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006680:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	015a      	lsls	r2, r3, #5
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	4413      	add	r3, r2
 800668a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800668e:	461a      	mov	r2, r3
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	3301      	adds	r3, #1
 8006698:	617b      	str	r3, [r7, #20]
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80066a0:	d80c      	bhi.n	80066bc <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	015a      	lsls	r2, r3, #5
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	4413      	add	r3, r2
 80066aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066b8:	d0ec      	beq.n	8006694 <USB_StopHost+0xb0>
 80066ba:	e000      	b.n	80066be <USB_StopHost+0xda>
        break;
 80066bc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	3301      	adds	r3, #1
 80066c2:	613b      	str	r3, [r7, #16]
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	2b0f      	cmp	r3, #15
 80066c8:	d9c7      	bls.n	800665a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066d0:	461a      	mov	r2, r3
 80066d2:	f04f 33ff 	mov.w	r3, #4294967295
 80066d6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f04f 32ff 	mov.w	r2, #4294967295
 80066de:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f7ff f8af 	bl	8005844 <USB_EnableGlobalInt>

  return HAL_OK;
 80066e6:	2300      	movs	r3, #0
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3718      	adds	r7, #24
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}

080066f0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80066f0:	b590      	push	{r4, r7, lr}
 80066f2:	b089      	sub	sp, #36	; 0x24
 80066f4:	af04      	add	r7, sp, #16
 80066f6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80066f8:	2301      	movs	r3, #1
 80066fa:	2202      	movs	r2, #2
 80066fc:	2102      	movs	r1, #2
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f000 fc66 	bl	8006fd0 <USBH_FindInterface>
 8006704:	4603      	mov	r3, r0
 8006706:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006708:	7bfb      	ldrb	r3, [r7, #15]
 800670a:	2bff      	cmp	r3, #255	; 0xff
 800670c:	d002      	beq.n	8006714 <USBH_CDC_InterfaceInit+0x24>
 800670e:	7bfb      	ldrb	r3, [r7, #15]
 8006710:	2b01      	cmp	r3, #1
 8006712:	d901      	bls.n	8006718 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006714:	2302      	movs	r3, #2
 8006716:	e13d      	b.n	8006994 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006718:	7bfb      	ldrb	r3, [r7, #15]
 800671a:	4619      	mov	r1, r3
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f000 fc3b 	bl	8006f98 <USBH_SelectInterface>
 8006722:	4603      	mov	r3, r0
 8006724:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006726:	7bbb      	ldrb	r3, [r7, #14]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d001      	beq.n	8006730 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800672c:	2302      	movs	r3, #2
 800672e:	e131      	b.n	8006994 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006736:	2050      	movs	r0, #80	; 0x50
 8006738:	f002 fa00 	bl	8008b3c <malloc>
 800673c:	4603      	mov	r3, r0
 800673e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006746:	69db      	ldr	r3, [r3, #28]
 8006748:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d101      	bne.n	8006754 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006750:	2302      	movs	r3, #2
 8006752:	e11f      	b.n	8006994 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006754:	2250      	movs	r2, #80	; 0x50
 8006756:	2100      	movs	r1, #0
 8006758:	68b8      	ldr	r0, [r7, #8]
 800675a:	f002 f9ff 	bl	8008b5c <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800675e:	7bfb      	ldrb	r3, [r7, #15]
 8006760:	687a      	ldr	r2, [r7, #4]
 8006762:	211a      	movs	r1, #26
 8006764:	fb01 f303 	mul.w	r3, r1, r3
 8006768:	4413      	add	r3, r2
 800676a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800676e:	781b      	ldrb	r3, [r3, #0]
 8006770:	b25b      	sxtb	r3, r3
 8006772:	2b00      	cmp	r3, #0
 8006774:	da15      	bge.n	80067a2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006776:	7bfb      	ldrb	r3, [r7, #15]
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	211a      	movs	r1, #26
 800677c:	fb01 f303 	mul.w	r3, r1, r3
 8006780:	4413      	add	r3, r2
 8006782:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006786:	781a      	ldrb	r2, [r3, #0]
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800678c:	7bfb      	ldrb	r3, [r7, #15]
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	211a      	movs	r1, #26
 8006792:	fb01 f303 	mul.w	r3, r1, r3
 8006796:	4413      	add	r3, r2
 8006798:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800679c:	881a      	ldrh	r2, [r3, #0]
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	785b      	ldrb	r3, [r3, #1]
 80067a6:	4619      	mov	r1, r3
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f001 fe32 	bl	8008412 <USBH_AllocPipe>
 80067ae:	4603      	mov	r3, r0
 80067b0:	461a      	mov	r2, r3
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	7819      	ldrb	r1, [r3, #0]
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	7858      	ldrb	r0, [r3, #1]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80067ca:	68ba      	ldr	r2, [r7, #8]
 80067cc:	8952      	ldrh	r2, [r2, #10]
 80067ce:	9202      	str	r2, [sp, #8]
 80067d0:	2203      	movs	r2, #3
 80067d2:	9201      	str	r2, [sp, #4]
 80067d4:	9300      	str	r3, [sp, #0]
 80067d6:	4623      	mov	r3, r4
 80067d8:	4602      	mov	r2, r0
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f001 fdea 	bl	80083b4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	2200      	movs	r2, #0
 80067e6:	4619      	mov	r1, r3
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f002 f8f9 	bl	80089e0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80067ee:	2300      	movs	r3, #0
 80067f0:	2200      	movs	r2, #0
 80067f2:	210a      	movs	r1, #10
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f000 fbeb 	bl	8006fd0 <USBH_FindInterface>
 80067fa:	4603      	mov	r3, r0
 80067fc:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80067fe:	7bfb      	ldrb	r3, [r7, #15]
 8006800:	2bff      	cmp	r3, #255	; 0xff
 8006802:	d002      	beq.n	800680a <USBH_CDC_InterfaceInit+0x11a>
 8006804:	7bfb      	ldrb	r3, [r7, #15]
 8006806:	2b01      	cmp	r3, #1
 8006808:	d901      	bls.n	800680e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800680a:	2302      	movs	r3, #2
 800680c:	e0c2      	b.n	8006994 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800680e:	7bfb      	ldrb	r3, [r7, #15]
 8006810:	687a      	ldr	r2, [r7, #4]
 8006812:	211a      	movs	r1, #26
 8006814:	fb01 f303 	mul.w	r3, r1, r3
 8006818:	4413      	add	r3, r2
 800681a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	b25b      	sxtb	r3, r3
 8006822:	2b00      	cmp	r3, #0
 8006824:	da16      	bge.n	8006854 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006826:	7bfb      	ldrb	r3, [r7, #15]
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	211a      	movs	r1, #26
 800682c:	fb01 f303 	mul.w	r3, r1, r3
 8006830:	4413      	add	r3, r2
 8006832:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006836:	781a      	ldrb	r2, [r3, #0]
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800683c:	7bfb      	ldrb	r3, [r7, #15]
 800683e:	687a      	ldr	r2, [r7, #4]
 8006840:	211a      	movs	r1, #26
 8006842:	fb01 f303 	mul.w	r3, r1, r3
 8006846:	4413      	add	r3, r2
 8006848:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800684c:	881a      	ldrh	r2, [r3, #0]
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	835a      	strh	r2, [r3, #26]
 8006852:	e015      	b.n	8006880 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006854:	7bfb      	ldrb	r3, [r7, #15]
 8006856:	687a      	ldr	r2, [r7, #4]
 8006858:	211a      	movs	r1, #26
 800685a:	fb01 f303 	mul.w	r3, r1, r3
 800685e:	4413      	add	r3, r2
 8006860:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006864:	781a      	ldrb	r2, [r3, #0]
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800686a:	7bfb      	ldrb	r3, [r7, #15]
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	211a      	movs	r1, #26
 8006870:	fb01 f303 	mul.w	r3, r1, r3
 8006874:	4413      	add	r3, r2
 8006876:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800687a:	881a      	ldrh	r2, [r3, #0]
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8006880:	7bfb      	ldrb	r3, [r7, #15]
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	211a      	movs	r1, #26
 8006886:	fb01 f303 	mul.w	r3, r1, r3
 800688a:	4413      	add	r3, r2
 800688c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	b25b      	sxtb	r3, r3
 8006894:	2b00      	cmp	r3, #0
 8006896:	da16      	bge.n	80068c6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006898:	7bfb      	ldrb	r3, [r7, #15]
 800689a:	687a      	ldr	r2, [r7, #4]
 800689c:	211a      	movs	r1, #26
 800689e:	fb01 f303 	mul.w	r3, r1, r3
 80068a2:	4413      	add	r3, r2
 80068a4:	f203 3356 	addw	r3, r3, #854	; 0x356
 80068a8:	781a      	ldrb	r2, [r3, #0]
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80068ae:	7bfb      	ldrb	r3, [r7, #15]
 80068b0:	687a      	ldr	r2, [r7, #4]
 80068b2:	211a      	movs	r1, #26
 80068b4:	fb01 f303 	mul.w	r3, r1, r3
 80068b8:	4413      	add	r3, r2
 80068ba:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80068be:	881a      	ldrh	r2, [r3, #0]
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	835a      	strh	r2, [r3, #26]
 80068c4:	e015      	b.n	80068f2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80068c6:	7bfb      	ldrb	r3, [r7, #15]
 80068c8:	687a      	ldr	r2, [r7, #4]
 80068ca:	211a      	movs	r1, #26
 80068cc:	fb01 f303 	mul.w	r3, r1, r3
 80068d0:	4413      	add	r3, r2
 80068d2:	f203 3356 	addw	r3, r3, #854	; 0x356
 80068d6:	781a      	ldrb	r2, [r3, #0]
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80068dc:	7bfb      	ldrb	r3, [r7, #15]
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	211a      	movs	r1, #26
 80068e2:	fb01 f303 	mul.w	r3, r1, r3
 80068e6:	4413      	add	r3, r2
 80068e8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80068ec:	881a      	ldrh	r2, [r3, #0]
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	7b9b      	ldrb	r3, [r3, #14]
 80068f6:	4619      	mov	r1, r3
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f001 fd8a 	bl	8008412 <USBH_AllocPipe>
 80068fe:	4603      	mov	r3, r0
 8006900:	461a      	mov	r2, r3
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	7bdb      	ldrb	r3, [r3, #15]
 800690a:	4619      	mov	r1, r3
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f001 fd80 	bl	8008412 <USBH_AllocPipe>
 8006912:	4603      	mov	r3, r0
 8006914:	461a      	mov	r2, r3
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	7b59      	ldrb	r1, [r3, #13]
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	7b98      	ldrb	r0, [r3, #14]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800692e:	68ba      	ldr	r2, [r7, #8]
 8006930:	8b12      	ldrh	r2, [r2, #24]
 8006932:	9202      	str	r2, [sp, #8]
 8006934:	2202      	movs	r2, #2
 8006936:	9201      	str	r2, [sp, #4]
 8006938:	9300      	str	r3, [sp, #0]
 800693a:	4623      	mov	r3, r4
 800693c:	4602      	mov	r2, r0
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f001 fd38 	bl	80083b4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	7b19      	ldrb	r1, [r3, #12]
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	7bd8      	ldrb	r0, [r3, #15]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006958:	68ba      	ldr	r2, [r7, #8]
 800695a:	8b52      	ldrh	r2, [r2, #26]
 800695c:	9202      	str	r2, [sp, #8]
 800695e:	2202      	movs	r2, #2
 8006960:	9201      	str	r2, [sp, #4]
 8006962:	9300      	str	r3, [sp, #0]
 8006964:	4623      	mov	r3, r4
 8006966:	4602      	mov	r2, r0
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f001 fd23 	bl	80083b4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	2200      	movs	r2, #0
 8006972:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	7b5b      	ldrb	r3, [r3, #13]
 800697a:	2200      	movs	r2, #0
 800697c:	4619      	mov	r1, r3
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f002 f82e 	bl	80089e0 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	7b1b      	ldrb	r3, [r3, #12]
 8006988:	2200      	movs	r2, #0
 800698a:	4619      	mov	r1, r3
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f002 f827 	bl	80089e0 <USBH_LL_SetToggle>

  return USBH_OK;
 8006992:	2300      	movs	r3, #0
}
 8006994:	4618      	mov	r0, r3
 8006996:	3714      	adds	r7, #20
 8006998:	46bd      	mov	sp, r7
 800699a:	bd90      	pop	{r4, r7, pc}

0800699c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b084      	sub	sp, #16
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069aa:	69db      	ldr	r3, [r3, #28]
 80069ac:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d00e      	beq.n	80069d4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	4619      	mov	r1, r3
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f001 fd18 	bl	80083f2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	781b      	ldrb	r3, [r3, #0]
 80069c6:	4619      	mov	r1, r3
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f001 fd43 	bl	8008454 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2200      	movs	r2, #0
 80069d2:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	7b1b      	ldrb	r3, [r3, #12]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d00e      	beq.n	80069fa <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	7b1b      	ldrb	r3, [r3, #12]
 80069e0:	4619      	mov	r1, r3
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f001 fd05 	bl	80083f2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	7b1b      	ldrb	r3, [r3, #12]
 80069ec:	4619      	mov	r1, r3
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f001 fd30 	bl	8008454 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2200      	movs	r2, #0
 80069f8:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	7b5b      	ldrb	r3, [r3, #13]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d00e      	beq.n	8006a20 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	7b5b      	ldrb	r3, [r3, #13]
 8006a06:	4619      	mov	r1, r3
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f001 fcf2 	bl	80083f2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	7b5b      	ldrb	r3, [r3, #13]
 8006a12:	4619      	mov	r1, r3
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f001 fd1d 	bl	8008454 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a26:	69db      	ldr	r3, [r3, #28]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d00b      	beq.n	8006a44 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a32:	69db      	ldr	r3, [r3, #28]
 8006a34:	4618      	mov	r0, r3
 8006a36:	f002 f889 	bl	8008b4c <free>
    phost->pActiveClass->pData = 0U;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a40:	2200      	movs	r2, #0
 8006a42:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006a44:	2300      	movs	r3, #0
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3710      	adds	r7, #16
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}

08006a4e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006a4e:	b580      	push	{r7, lr}
 8006a50:	b084      	sub	sp, #16
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a5c:	69db      	ldr	r3, [r3, #28]
 8006a5e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	3340      	adds	r3, #64	; 0x40
 8006a64:	4619      	mov	r1, r3
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f000 f8b1 	bl	8006bce <GetLineCoding>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006a70:	7afb      	ldrb	r3, [r7, #11]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d105      	bne.n	8006a82 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006a7c:	2102      	movs	r1, #2
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006a82:	7afb      	ldrb	r3, [r7, #11]
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3710      	adds	r7, #16
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}

08006a8c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b084      	sub	sp, #16
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006a94:	2301      	movs	r3, #1
 8006a96:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006aa2:	69db      	ldr	r3, [r3, #28]
 8006aa4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006aac:	2b04      	cmp	r3, #4
 8006aae:	d877      	bhi.n	8006ba0 <USBH_CDC_Process+0x114>
 8006ab0:	a201      	add	r2, pc, #4	; (adr r2, 8006ab8 <USBH_CDC_Process+0x2c>)
 8006ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ab6:	bf00      	nop
 8006ab8:	08006acd 	.word	0x08006acd
 8006abc:	08006ad3 	.word	0x08006ad3
 8006ac0:	08006b03 	.word	0x08006b03
 8006ac4:	08006b77 	.word	0x08006b77
 8006ac8:	08006b85 	.word	0x08006b85
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006acc:	2300      	movs	r3, #0
 8006ace:	73fb      	strb	r3, [r7, #15]
      break;
 8006ad0:	e06d      	b.n	8006bae <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ad6:	4619      	mov	r1, r3
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f000 f897 	bl	8006c0c <SetLineCoding>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006ae2:	7bbb      	ldrb	r3, [r7, #14]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d104      	bne.n	8006af2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	2202      	movs	r2, #2
 8006aec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006af0:	e058      	b.n	8006ba4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006af2:	7bbb      	ldrb	r3, [r7, #14]
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d055      	beq.n	8006ba4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	2204      	movs	r2, #4
 8006afc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006b00:	e050      	b.n	8006ba4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	3340      	adds	r3, #64	; 0x40
 8006b06:	4619      	mov	r1, r3
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f000 f860 	bl	8006bce <GetLineCoding>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006b12:	7bbb      	ldrb	r3, [r7, #14]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d126      	bne.n	8006b66 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b2a:	791b      	ldrb	r3, [r3, #4]
 8006b2c:	429a      	cmp	r2, r3
 8006b2e:	d13b      	bne.n	8006ba8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b3a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	d133      	bne.n	8006ba8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b4a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d12b      	bne.n	8006ba8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b58:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d124      	bne.n	8006ba8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 f958 	bl	8006e14 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006b64:	e020      	b.n	8006ba8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006b66:	7bbb      	ldrb	r3, [r7, #14]
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d01d      	beq.n	8006ba8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	2204      	movs	r2, #4
 8006b70:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006b74:	e018      	b.n	8006ba8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f000 f867 	bl	8006c4a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f000 f8da 	bl	8006d36 <CDC_ProcessReception>
      break;
 8006b82:	e014      	b.n	8006bae <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006b84:	2100      	movs	r1, #0
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 ffe3 	bl	8007b52 <USBH_ClrFeature>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006b90:	7bbb      	ldrb	r3, [r7, #14]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d10a      	bne.n	8006bac <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006b9e:	e005      	b.n	8006bac <USBH_CDC_Process+0x120>

    default:
      break;
 8006ba0:	bf00      	nop
 8006ba2:	e004      	b.n	8006bae <USBH_CDC_Process+0x122>
      break;
 8006ba4:	bf00      	nop
 8006ba6:	e002      	b.n	8006bae <USBH_CDC_Process+0x122>
      break;
 8006ba8:	bf00      	nop
 8006baa:	e000      	b.n	8006bae <USBH_CDC_Process+0x122>
      break;
 8006bac:	bf00      	nop

  }

  return status;
 8006bae:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3710      	adds	r7, #16
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}

08006bb8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b083      	sub	sp, #12
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006bc0:	2300      	movs	r3, #0
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	370c      	adds	r7, #12
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr

08006bce <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006bce:	b580      	push	{r7, lr}
 8006bd0:	b082      	sub	sp, #8
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	6078      	str	r0, [r7, #4]
 8006bd6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	22a1      	movs	r2, #161	; 0xa1
 8006bdc:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2221      	movs	r2, #33	; 0x21
 8006be2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2200      	movs	r2, #0
 8006be8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2200      	movs	r2, #0
 8006bee:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2207      	movs	r2, #7
 8006bf4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	2207      	movs	r2, #7
 8006bfa:	4619      	mov	r1, r3
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f001 f988 	bl	8007f12 <USBH_CtlReq>
 8006c02:	4603      	mov	r3, r0
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3708      	adds	r7, #8
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}

08006c0c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b082      	sub	sp, #8
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
 8006c14:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2221      	movs	r2, #33	; 0x21
 8006c1a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2220      	movs	r2, #32
 8006c20:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2200      	movs	r2, #0
 8006c26:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2207      	movs	r2, #7
 8006c32:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	2207      	movs	r2, #7
 8006c38:	4619      	mov	r1, r3
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f001 f969 	bl	8007f12 <USBH_CtlReq>
 8006c40:	4603      	mov	r3, r0
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3708      	adds	r7, #8
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}

08006c4a <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006c4a:	b580      	push	{r7, lr}
 8006c4c:	b086      	sub	sp, #24
 8006c4e:	af02      	add	r7, sp, #8
 8006c50:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c58:	69db      	ldr	r3, [r3, #28]
 8006c5a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d002      	beq.n	8006c70 <CDC_ProcessTransmission+0x26>
 8006c6a:	2b02      	cmp	r3, #2
 8006c6c:	d023      	beq.n	8006cb6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006c6e:	e05e      	b.n	8006d2e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c74:	68fa      	ldr	r2, [r7, #12]
 8006c76:	8b12      	ldrh	r2, [r2, #24]
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d90b      	bls.n	8006c94 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	69d9      	ldr	r1, [r3, #28]
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	8b1a      	ldrh	r2, [r3, #24]
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	7b5b      	ldrb	r3, [r3, #13]
 8006c88:	2001      	movs	r0, #1
 8006c8a:	9000      	str	r0, [sp, #0]
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f001 fb4e 	bl	800832e <USBH_BulkSendData>
 8006c92:	e00b      	b.n	8006cac <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8006c9c:	b29a      	uxth	r2, r3
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	7b5b      	ldrb	r3, [r3, #13]
 8006ca2:	2001      	movs	r0, #1
 8006ca4:	9000      	str	r0, [sp, #0]
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f001 fb41 	bl	800832e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2202      	movs	r2, #2
 8006cb0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006cb4:	e03b      	b.n	8006d2e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	7b5b      	ldrb	r3, [r3, #13]
 8006cba:	4619      	mov	r1, r3
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f001 fe65 	bl	800898c <USBH_LL_GetURBState>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006cc6:	7afb      	ldrb	r3, [r7, #11]
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d128      	bne.n	8006d1e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd0:	68fa      	ldr	r2, [r7, #12]
 8006cd2:	8b12      	ldrh	r2, [r2, #24]
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d90e      	bls.n	8006cf6 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cdc:	68fa      	ldr	r2, [r7, #12]
 8006cde:	8b12      	ldrh	r2, [r2, #24]
 8006ce0:	1a9a      	subs	r2, r3, r2
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	69db      	ldr	r3, [r3, #28]
 8006cea:	68fa      	ldr	r2, [r7, #12]
 8006cec:	8b12      	ldrh	r2, [r2, #24]
 8006cee:	441a      	add	r2, r3
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	61da      	str	r2, [r3, #28]
 8006cf4:	e002      	b.n	8006cfc <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d004      	beq.n	8006d0e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2201      	movs	r2, #1
 8006d08:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006d0c:	e00e      	b.n	8006d2c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2200      	movs	r2, #0
 8006d12:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f000 f868 	bl	8006dec <USBH_CDC_TransmitCallback>
      break;
 8006d1c:	e006      	b.n	8006d2c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006d1e:	7afb      	ldrb	r3, [r7, #11]
 8006d20:	2b02      	cmp	r3, #2
 8006d22:	d103      	bne.n	8006d2c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2201      	movs	r2, #1
 8006d28:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006d2c:	bf00      	nop
  }
}
 8006d2e:	bf00      	nop
 8006d30:	3710      	adds	r7, #16
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}

08006d36 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006d36:	b580      	push	{r7, lr}
 8006d38:	b086      	sub	sp, #24
 8006d3a:	af00      	add	r7, sp, #0
 8006d3c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d44:	69db      	ldr	r3, [r3, #28]
 8006d46:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006d52:	2b03      	cmp	r3, #3
 8006d54:	d002      	beq.n	8006d5c <CDC_ProcessReception+0x26>
 8006d56:	2b04      	cmp	r3, #4
 8006d58:	d00e      	beq.n	8006d78 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006d5a:	e043      	b.n	8006de4 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	6a19      	ldr	r1, [r3, #32]
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	8b5a      	ldrh	r2, [r3, #26]
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	7b1b      	ldrb	r3, [r3, #12]
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f001 fb05 	bl	8008378 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	2204      	movs	r2, #4
 8006d72:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006d76:	e035      	b.n	8006de4 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	7b1b      	ldrb	r3, [r3, #12]
 8006d7c:	4619      	mov	r1, r3
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f001 fe04 	bl	800898c <USBH_LL_GetURBState>
 8006d84:	4603      	mov	r3, r0
 8006d86:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006d88:	7cfb      	ldrb	r3, [r7, #19]
 8006d8a:	2b01      	cmp	r3, #1
 8006d8c:	d129      	bne.n	8006de2 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	7b1b      	ldrb	r3, [r3, #12]
 8006d92:	4619      	mov	r1, r3
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f001 fd67 	bl	8008868 <USBH_LL_GetLastXferSize>
 8006d9a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006da0:	68fa      	ldr	r2, [r7, #12]
 8006da2:	429a      	cmp	r2, r3
 8006da4:	d016      	beq.n	8006dd4 <CDC_ProcessReception+0x9e>
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	8b5b      	ldrh	r3, [r3, #26]
 8006daa:	461a      	mov	r2, r3
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d910      	bls.n	8006dd4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	1ad2      	subs	r2, r2, r3
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	6a1a      	ldr	r2, [r3, #32]
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	441a      	add	r2, r3
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	2203      	movs	r2, #3
 8006dce:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006dd2:	e006      	b.n	8006de2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f000 f80f 	bl	8006e00 <USBH_CDC_ReceiveCallback>
      break;
 8006de2:	bf00      	nop
  }
}
 8006de4:	bf00      	nop
 8006de6:	3718      	adds	r7, #24
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}

08006dec <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b083      	sub	sp, #12
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006df4:	bf00      	nop
 8006df6:	370c      	adds	r7, #12
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr

08006e00 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b083      	sub	sp, #12
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006e08:	bf00      	nop
 8006e0a:	370c      	adds	r7, #12
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr

08006e14 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b083      	sub	sp, #12
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006e1c:	bf00      	nop
 8006e1e:	370c      	adds	r7, #12
 8006e20:	46bd      	mov	sp, r7
 8006e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e26:	4770      	bx	lr

08006e28 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b084      	sub	sp, #16
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	60f8      	str	r0, [r7, #12]
 8006e30:	60b9      	str	r1, [r7, #8]
 8006e32:	4613      	mov	r3, r2
 8006e34:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d101      	bne.n	8006e40 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006e3c:	2302      	movs	r3, #2
 8006e3e:	e029      	b.n	8006e94 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	79fa      	ldrb	r2, [r7, #7]
 8006e44:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2200      	movs	r2, #0
 8006e54:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8006e58:	68f8      	ldr	r0, [r7, #12]
 8006e5a:	f000 f81f 	bl	8006e9c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2200      	movs	r2, #0
 8006e62:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2200      	movs	r2, #0
 8006e72:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d003      	beq.n	8006e8c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	68ba      	ldr	r2, [r7, #8]
 8006e88:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8006e8c:	68f8      	ldr	r0, [r7, #12]
 8006e8e:	f001 fc37 	bl	8008700 <USBH_LL_Init>

  return USBH_OK;
 8006e92:	2300      	movs	r3, #0
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3710      	adds	r7, #16
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}

08006e9c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b085      	sub	sp, #20
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	60fb      	str	r3, [r7, #12]
 8006eac:	e009      	b.n	8006ec2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006eae:	687a      	ldr	r2, [r7, #4]
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	33e0      	adds	r3, #224	; 0xe0
 8006eb4:	009b      	lsls	r3, r3, #2
 8006eb6:	4413      	add	r3, r2
 8006eb8:	2200      	movs	r2, #0
 8006eba:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	3301      	adds	r3, #1
 8006ec0:	60fb      	str	r3, [r7, #12]
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2b0e      	cmp	r3, #14
 8006ec6:	d9f2      	bls.n	8006eae <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006ec8:	2300      	movs	r3, #0
 8006eca:	60fb      	str	r3, [r7, #12]
 8006ecc:	e009      	b.n	8006ee2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	4413      	add	r3, r2
 8006ed4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006ed8:	2200      	movs	r2, #0
 8006eda:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	3301      	adds	r3, #1
 8006ee0:	60fb      	str	r3, [r7, #12]
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ee8:	d3f1      	bcc.n	8006ece <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2200      	movs	r2, #0
 8006eee:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2201      	movs	r2, #1
 8006efa:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2200      	movs	r2, #0
 8006f00:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2201      	movs	r2, #1
 8006f08:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2240      	movs	r2, #64	; 0x40
 8006f0e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2201      	movs	r2, #1
 8006f22:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2200      	movs	r2, #0
 8006f32:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006f36:	2300      	movs	r3, #0
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3714      	adds	r7, #20
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr

08006f44 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b085      	sub	sp, #20
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d016      	beq.n	8006f86 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d10e      	bne.n	8006f80 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006f68:	1c59      	adds	r1, r3, #1
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006f70:	687a      	ldr	r2, [r7, #4]
 8006f72:	33de      	adds	r3, #222	; 0xde
 8006f74:	6839      	ldr	r1, [r7, #0]
 8006f76:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	73fb      	strb	r3, [r7, #15]
 8006f7e:	e004      	b.n	8006f8a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006f80:	2302      	movs	r3, #2
 8006f82:	73fb      	strb	r3, [r7, #15]
 8006f84:	e001      	b.n	8006f8a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006f86:	2302      	movs	r3, #2
 8006f88:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3714      	adds	r7, #20
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr

08006f98 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b085      	sub	sp, #20
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
 8006fa0:	460b      	mov	r3, r1
 8006fa2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006fae:	78fa      	ldrb	r2, [r7, #3]
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d204      	bcs.n	8006fbe <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	78fa      	ldrb	r2, [r7, #3]
 8006fb8:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006fbc:	e001      	b.n	8006fc2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006fbe:	2302      	movs	r3, #2
 8006fc0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3714      	adds	r7, #20
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fce:	4770      	bx	lr

08006fd0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b087      	sub	sp, #28
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
 8006fd8:	4608      	mov	r0, r1
 8006fda:	4611      	mov	r1, r2
 8006fdc:	461a      	mov	r2, r3
 8006fde:	4603      	mov	r3, r0
 8006fe0:	70fb      	strb	r3, [r7, #3]
 8006fe2:	460b      	mov	r3, r1
 8006fe4:	70bb      	strb	r3, [r7, #2]
 8006fe6:	4613      	mov	r3, r2
 8006fe8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006fea:	2300      	movs	r3, #0
 8006fec:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006ff8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006ffa:	e025      	b.n	8007048 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006ffc:	7dfb      	ldrb	r3, [r7, #23]
 8006ffe:	221a      	movs	r2, #26
 8007000:	fb02 f303 	mul.w	r3, r2, r3
 8007004:	3308      	adds	r3, #8
 8007006:	68fa      	ldr	r2, [r7, #12]
 8007008:	4413      	add	r3, r2
 800700a:	3302      	adds	r3, #2
 800700c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	795b      	ldrb	r3, [r3, #5]
 8007012:	78fa      	ldrb	r2, [r7, #3]
 8007014:	429a      	cmp	r2, r3
 8007016:	d002      	beq.n	800701e <USBH_FindInterface+0x4e>
 8007018:	78fb      	ldrb	r3, [r7, #3]
 800701a:	2bff      	cmp	r3, #255	; 0xff
 800701c:	d111      	bne.n	8007042 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007022:	78ba      	ldrb	r2, [r7, #2]
 8007024:	429a      	cmp	r2, r3
 8007026:	d002      	beq.n	800702e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007028:	78bb      	ldrb	r3, [r7, #2]
 800702a:	2bff      	cmp	r3, #255	; 0xff
 800702c:	d109      	bne.n	8007042 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007032:	787a      	ldrb	r2, [r7, #1]
 8007034:	429a      	cmp	r2, r3
 8007036:	d002      	beq.n	800703e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007038:	787b      	ldrb	r3, [r7, #1]
 800703a:	2bff      	cmp	r3, #255	; 0xff
 800703c:	d101      	bne.n	8007042 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800703e:	7dfb      	ldrb	r3, [r7, #23]
 8007040:	e006      	b.n	8007050 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007042:	7dfb      	ldrb	r3, [r7, #23]
 8007044:	3301      	adds	r3, #1
 8007046:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007048:	7dfb      	ldrb	r3, [r7, #23]
 800704a:	2b01      	cmp	r3, #1
 800704c:	d9d6      	bls.n	8006ffc <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800704e:	23ff      	movs	r3, #255	; 0xff
}
 8007050:	4618      	mov	r0, r3
 8007052:	371c      	adds	r7, #28
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr

0800705c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b082      	sub	sp, #8
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f001 fb87 	bl	8008778 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800706a:	2101      	movs	r1, #1
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f001 fca0 	bl	80089b2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007072:	2300      	movs	r3, #0
}
 8007074:	4618      	mov	r0, r3
 8007076:	3708      	adds	r7, #8
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}

0800707c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b088      	sub	sp, #32
 8007080:	af04      	add	r7, sp, #16
 8007082:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007084:	2302      	movs	r3, #2
 8007086:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007088:	2300      	movs	r3, #0
 800708a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007092:	b2db      	uxtb	r3, r3
 8007094:	2b01      	cmp	r3, #1
 8007096:	d102      	bne.n	800709e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2203      	movs	r2, #3
 800709c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	781b      	ldrb	r3, [r3, #0]
 80070a2:	b2db      	uxtb	r3, r3
 80070a4:	2b0b      	cmp	r3, #11
 80070a6:	f200 81b3 	bhi.w	8007410 <USBH_Process+0x394>
 80070aa:	a201      	add	r2, pc, #4	; (adr r2, 80070b0 <USBH_Process+0x34>)
 80070ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070b0:	080070e1 	.word	0x080070e1
 80070b4:	08007113 	.word	0x08007113
 80070b8:	0800717b 	.word	0x0800717b
 80070bc:	080073ab 	.word	0x080073ab
 80070c0:	08007411 	.word	0x08007411
 80070c4:	0800721f 	.word	0x0800721f
 80070c8:	08007351 	.word	0x08007351
 80070cc:	08007255 	.word	0x08007255
 80070d0:	08007275 	.word	0x08007275
 80070d4:	08007295 	.word	0x08007295
 80070d8:	080072c3 	.word	0x080072c3
 80070dc:	08007393 	.word	0x08007393
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80070e6:	b2db      	uxtb	r3, r3
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	f000 8193 	beq.w	8007414 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2201      	movs	r2, #1
 80070f2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80070f4:	20c8      	movs	r0, #200	; 0xc8
 80070f6:	f001 fca3 	bl	8008a40 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f001 fb99 	bl	8008832 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2200      	movs	r2, #0
 8007104:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2200      	movs	r2, #0
 800710c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007110:	e180      	b.n	8007414 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007118:	2b01      	cmp	r3, #1
 800711a:	d107      	bne.n	800712c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2200      	movs	r2, #0
 8007120:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2202      	movs	r2, #2
 8007128:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800712a:	e182      	b.n	8007432 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007132:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007136:	d914      	bls.n	8007162 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800713e:	3301      	adds	r3, #1
 8007140:	b2da      	uxtb	r2, r3
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800714e:	2b03      	cmp	r3, #3
 8007150:	d903      	bls.n	800715a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	220d      	movs	r2, #13
 8007156:	701a      	strb	r2, [r3, #0]
      break;
 8007158:	e16b      	b.n	8007432 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2200      	movs	r2, #0
 800715e:	701a      	strb	r2, [r3, #0]
      break;
 8007160:	e167      	b.n	8007432 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007168:	f103 020a 	add.w	r2, r3, #10
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007172:	200a      	movs	r0, #10
 8007174:	f001 fc64 	bl	8008a40 <USBH_Delay>
      break;
 8007178:	e15b      	b.n	8007432 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007180:	2b00      	cmp	r3, #0
 8007182:	d005      	beq.n	8007190 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800718a:	2104      	movs	r1, #4
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007190:	2064      	movs	r0, #100	; 0x64
 8007192:	f001 fc55 	bl	8008a40 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f001 fb24 	bl	80087e4 <USBH_LL_GetSpeed>
 800719c:	4603      	mov	r3, r0
 800719e:	461a      	mov	r2, r3
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2205      	movs	r2, #5
 80071aa:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80071ac:	2100      	movs	r1, #0
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f001 f92f 	bl	8008412 <USBH_AllocPipe>
 80071b4:	4603      	mov	r3, r0
 80071b6:	461a      	mov	r2, r3
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80071bc:	2180      	movs	r1, #128	; 0x80
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f001 f927 	bl	8008412 <USBH_AllocPipe>
 80071c4:	4603      	mov	r3, r0
 80071c6:	461a      	mov	r2, r3
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	7919      	ldrb	r1, [r3, #4]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80071dc:	687a      	ldr	r2, [r7, #4]
 80071de:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80071e0:	b292      	uxth	r2, r2
 80071e2:	9202      	str	r2, [sp, #8]
 80071e4:	2200      	movs	r2, #0
 80071e6:	9201      	str	r2, [sp, #4]
 80071e8:	9300      	str	r3, [sp, #0]
 80071ea:	4603      	mov	r3, r0
 80071ec:	2280      	movs	r2, #128	; 0x80
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f001 f8e0 	bl	80083b4 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	7959      	ldrb	r1, [r3, #5]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007204:	687a      	ldr	r2, [r7, #4]
 8007206:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007208:	b292      	uxth	r2, r2
 800720a:	9202      	str	r2, [sp, #8]
 800720c:	2200      	movs	r2, #0
 800720e:	9201      	str	r2, [sp, #4]
 8007210:	9300      	str	r3, [sp, #0]
 8007212:	4603      	mov	r3, r0
 8007214:	2200      	movs	r2, #0
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f001 f8cc 	bl	80083b4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800721c:	e109      	b.n	8007432 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f000 f90c 	bl	800743c <USBH_HandleEnum>
 8007224:	4603      	mov	r3, r0
 8007226:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007228:	7bbb      	ldrb	r3, [r7, #14]
 800722a:	b2db      	uxtb	r3, r3
 800722c:	2b00      	cmp	r3, #0
 800722e:	f040 80f3 	bne.w	8007418 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2200      	movs	r2, #0
 8007236:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007240:	2b01      	cmp	r3, #1
 8007242:	d103      	bne.n	800724c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2208      	movs	r2, #8
 8007248:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800724a:	e0e5      	b.n	8007418 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2207      	movs	r2, #7
 8007250:	701a      	strb	r2, [r3, #0]
      break;
 8007252:	e0e1      	b.n	8007418 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800725a:	2b00      	cmp	r3, #0
 800725c:	f000 80de 	beq.w	800741c <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007266:	2101      	movs	r1, #1
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2208      	movs	r2, #8
 8007270:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007272:	e0d3      	b.n	800741c <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800727a:	b29b      	uxth	r3, r3
 800727c:	4619      	mov	r1, r3
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f000 fc20 	bl	8007ac4 <USBH_SetCfg>
 8007284:	4603      	mov	r3, r0
 8007286:	2b00      	cmp	r3, #0
 8007288:	f040 80ca 	bne.w	8007420 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2209      	movs	r2, #9
 8007290:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007292:	e0c5      	b.n	8007420 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800729a:	f003 0320 	and.w	r3, r3, #32
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d00b      	beq.n	80072ba <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 80072a2:	2101      	movs	r1, #1
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f000 fc30 	bl	8007b0a <USBH_SetFeature>
 80072aa:	4603      	mov	r3, r0
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	f040 80b9 	bne.w	8007424 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	220a      	movs	r2, #10
 80072b6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80072b8:	e0b4      	b.n	8007424 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	220a      	movs	r2, #10
 80072be:	701a      	strb	r2, [r3, #0]
      break;
 80072c0:	e0b0      	b.n	8007424 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	f000 80ad 	beq.w	8007428 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2200      	movs	r2, #0
 80072d2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80072d6:	2300      	movs	r3, #0
 80072d8:	73fb      	strb	r3, [r7, #15]
 80072da:	e016      	b.n	800730a <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80072dc:	7bfa      	ldrb	r2, [r7, #15]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	32de      	adds	r2, #222	; 0xde
 80072e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072e6:	791a      	ldrb	r2, [r3, #4]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80072ee:	429a      	cmp	r2, r3
 80072f0:	d108      	bne.n	8007304 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 80072f2:	7bfa      	ldrb	r2, [r7, #15]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	32de      	adds	r2, #222	; 0xde
 80072f8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007302:	e005      	b.n	8007310 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007304:	7bfb      	ldrb	r3, [r7, #15]
 8007306:	3301      	adds	r3, #1
 8007308:	73fb      	strb	r3, [r7, #15]
 800730a:	7bfb      	ldrb	r3, [r7, #15]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d0e5      	beq.n	80072dc <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007316:	2b00      	cmp	r3, #0
 8007318:	d016      	beq.n	8007348 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	4798      	blx	r3
 8007326:	4603      	mov	r3, r0
 8007328:	2b00      	cmp	r3, #0
 800732a:	d109      	bne.n	8007340 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2206      	movs	r2, #6
 8007330:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007338:	2103      	movs	r1, #3
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800733e:	e073      	b.n	8007428 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	220d      	movs	r2, #13
 8007344:	701a      	strb	r2, [r3, #0]
      break;
 8007346:	e06f      	b.n	8007428 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	220d      	movs	r2, #13
 800734c:	701a      	strb	r2, [r3, #0]
      break;
 800734e:	e06b      	b.n	8007428 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007356:	2b00      	cmp	r3, #0
 8007358:	d017      	beq.n	800738a <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007360:	691b      	ldr	r3, [r3, #16]
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	4798      	blx	r3
 8007366:	4603      	mov	r3, r0
 8007368:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800736a:	7bbb      	ldrb	r3, [r7, #14]
 800736c:	b2db      	uxtb	r3, r3
 800736e:	2b00      	cmp	r3, #0
 8007370:	d103      	bne.n	800737a <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	220b      	movs	r2, #11
 8007376:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007378:	e058      	b.n	800742c <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800737a:	7bbb      	ldrb	r3, [r7, #14]
 800737c:	b2db      	uxtb	r3, r3
 800737e:	2b02      	cmp	r3, #2
 8007380:	d154      	bne.n	800742c <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	220d      	movs	r2, #13
 8007386:	701a      	strb	r2, [r3, #0]
      break;
 8007388:	e050      	b.n	800742c <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	220d      	movs	r2, #13
 800738e:	701a      	strb	r2, [r3, #0]
      break;
 8007390:	e04c      	b.n	800742c <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007398:	2b00      	cmp	r3, #0
 800739a:	d049      	beq.n	8007430 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073a2:	695b      	ldr	r3, [r3, #20]
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	4798      	blx	r3
      }
      break;
 80073a8:	e042      	b.n	8007430 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2200      	movs	r2, #0
 80073ae:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f7ff fd72 	bl	8006e9c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d009      	beq.n	80073d6 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073c8:	68db      	ldr	r3, [r3, #12]
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2200      	movs	r2, #0
 80073d2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d005      	beq.n	80073ec <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80073e6:	2105      	movs	r1, #5
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80073f2:	b2db      	uxtb	r3, r3
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	d107      	bne.n	8007408 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2200      	movs	r2, #0
 80073fc:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f7ff fe2b 	bl	800705c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007406:	e014      	b.n	8007432 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f001 f9b5 	bl	8008778 <USBH_LL_Start>
      break;
 800740e:	e010      	b.n	8007432 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8007410:	bf00      	nop
 8007412:	e00e      	b.n	8007432 <USBH_Process+0x3b6>
      break;
 8007414:	bf00      	nop
 8007416:	e00c      	b.n	8007432 <USBH_Process+0x3b6>
      break;
 8007418:	bf00      	nop
 800741a:	e00a      	b.n	8007432 <USBH_Process+0x3b6>
    break;
 800741c:	bf00      	nop
 800741e:	e008      	b.n	8007432 <USBH_Process+0x3b6>
      break;
 8007420:	bf00      	nop
 8007422:	e006      	b.n	8007432 <USBH_Process+0x3b6>
      break;
 8007424:	bf00      	nop
 8007426:	e004      	b.n	8007432 <USBH_Process+0x3b6>
      break;
 8007428:	bf00      	nop
 800742a:	e002      	b.n	8007432 <USBH_Process+0x3b6>
      break;
 800742c:	bf00      	nop
 800742e:	e000      	b.n	8007432 <USBH_Process+0x3b6>
      break;
 8007430:	bf00      	nop
  }
  return USBH_OK;
 8007432:	2300      	movs	r3, #0
}
 8007434:	4618      	mov	r0, r3
 8007436:	3710      	adds	r7, #16
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}

0800743c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b088      	sub	sp, #32
 8007440:	af04      	add	r7, sp, #16
 8007442:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007444:	2301      	movs	r3, #1
 8007446:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007448:	2301      	movs	r3, #1
 800744a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	785b      	ldrb	r3, [r3, #1]
 8007450:	2b07      	cmp	r3, #7
 8007452:	f200 81c1 	bhi.w	80077d8 <USBH_HandleEnum+0x39c>
 8007456:	a201      	add	r2, pc, #4	; (adr r2, 800745c <USBH_HandleEnum+0x20>)
 8007458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800745c:	0800747d 	.word	0x0800747d
 8007460:	0800753b 	.word	0x0800753b
 8007464:	080075a5 	.word	0x080075a5
 8007468:	08007633 	.word	0x08007633
 800746c:	0800769d 	.word	0x0800769d
 8007470:	0800770d 	.word	0x0800770d
 8007474:	08007753 	.word	0x08007753
 8007478:	08007799 	.word	0x08007799
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800747c:	2108      	movs	r1, #8
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f000 fa50 	bl	8007924 <USBH_Get_DevDesc>
 8007484:	4603      	mov	r3, r0
 8007486:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007488:	7bbb      	ldrb	r3, [r7, #14]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d130      	bne.n	80074f0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2201      	movs	r2, #1
 800749c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	7919      	ldrb	r1, [r3, #4]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80074b2:	b292      	uxth	r2, r2
 80074b4:	9202      	str	r2, [sp, #8]
 80074b6:	2200      	movs	r2, #0
 80074b8:	9201      	str	r2, [sp, #4]
 80074ba:	9300      	str	r3, [sp, #0]
 80074bc:	4603      	mov	r3, r0
 80074be:	2280      	movs	r2, #128	; 0x80
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f000 ff77 	bl	80083b4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	7959      	ldrb	r1, [r3, #5]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80074d6:	687a      	ldr	r2, [r7, #4]
 80074d8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80074da:	b292      	uxth	r2, r2
 80074dc:	9202      	str	r2, [sp, #8]
 80074de:	2200      	movs	r2, #0
 80074e0:	9201      	str	r2, [sp, #4]
 80074e2:	9300      	str	r3, [sp, #0]
 80074e4:	4603      	mov	r3, r0
 80074e6:	2200      	movs	r2, #0
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f000 ff63 	bl	80083b4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80074ee:	e175      	b.n	80077dc <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80074f0:	7bbb      	ldrb	r3, [r7, #14]
 80074f2:	2b03      	cmp	r3, #3
 80074f4:	f040 8172 	bne.w	80077dc <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80074fe:	3301      	adds	r3, #1
 8007500:	b2da      	uxtb	r2, r3
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800750e:	2b03      	cmp	r3, #3
 8007510:	d903      	bls.n	800751a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	220d      	movs	r2, #13
 8007516:	701a      	strb	r2, [r3, #0]
      break;
 8007518:	e160      	b.n	80077dc <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	795b      	ldrb	r3, [r3, #5]
 800751e:	4619      	mov	r1, r3
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f000 ff97 	bl	8008454 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	791b      	ldrb	r3, [r3, #4]
 800752a:	4619      	mov	r1, r3
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f000 ff91 	bl	8008454 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2200      	movs	r2, #0
 8007536:	701a      	strb	r2, [r3, #0]
      break;
 8007538:	e150      	b.n	80077dc <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800753a:	2112      	movs	r1, #18
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f000 f9f1 	bl	8007924 <USBH_Get_DevDesc>
 8007542:	4603      	mov	r3, r0
 8007544:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007546:	7bbb      	ldrb	r3, [r7, #14]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d103      	bne.n	8007554 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2202      	movs	r2, #2
 8007550:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007552:	e145      	b.n	80077e0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007554:	7bbb      	ldrb	r3, [r7, #14]
 8007556:	2b03      	cmp	r3, #3
 8007558:	f040 8142 	bne.w	80077e0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007562:	3301      	adds	r3, #1
 8007564:	b2da      	uxtb	r2, r3
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007572:	2b03      	cmp	r3, #3
 8007574:	d903      	bls.n	800757e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	220d      	movs	r2, #13
 800757a:	701a      	strb	r2, [r3, #0]
      break;
 800757c:	e130      	b.n	80077e0 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	795b      	ldrb	r3, [r3, #5]
 8007582:	4619      	mov	r1, r3
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f000 ff65 	bl	8008454 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	791b      	ldrb	r3, [r3, #4]
 800758e:	4619      	mov	r1, r3
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f000 ff5f 	bl	8008454 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2200      	movs	r2, #0
 800759a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2200      	movs	r2, #0
 80075a0:	701a      	strb	r2, [r3, #0]
      break;
 80075a2:	e11d      	b.n	80077e0 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80075a4:	2101      	movs	r1, #1
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f000 fa68 	bl	8007a7c <USBH_SetAddress>
 80075ac:	4603      	mov	r3, r0
 80075ae:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80075b0:	7bbb      	ldrb	r3, [r7, #14]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d132      	bne.n	800761c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80075b6:	2002      	movs	r0, #2
 80075b8:	f001 fa42 	bl	8008a40 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2201      	movs	r2, #1
 80075c0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2203      	movs	r2, #3
 80075c8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	7919      	ldrb	r1, [r3, #4]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80075da:	687a      	ldr	r2, [r7, #4]
 80075dc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80075de:	b292      	uxth	r2, r2
 80075e0:	9202      	str	r2, [sp, #8]
 80075e2:	2200      	movs	r2, #0
 80075e4:	9201      	str	r2, [sp, #4]
 80075e6:	9300      	str	r3, [sp, #0]
 80075e8:	4603      	mov	r3, r0
 80075ea:	2280      	movs	r2, #128	; 0x80
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f000 fee1 	bl	80083b4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	7959      	ldrb	r1, [r3, #5]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007602:	687a      	ldr	r2, [r7, #4]
 8007604:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007606:	b292      	uxth	r2, r2
 8007608:	9202      	str	r2, [sp, #8]
 800760a:	2200      	movs	r2, #0
 800760c:	9201      	str	r2, [sp, #4]
 800760e:	9300      	str	r3, [sp, #0]
 8007610:	4603      	mov	r3, r0
 8007612:	2200      	movs	r2, #0
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f000 fecd 	bl	80083b4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800761a:	e0e3      	b.n	80077e4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800761c:	7bbb      	ldrb	r3, [r7, #14]
 800761e:	2b03      	cmp	r3, #3
 8007620:	f040 80e0 	bne.w	80077e4 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	220d      	movs	r2, #13
 8007628:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2200      	movs	r2, #0
 800762e:	705a      	strb	r2, [r3, #1]
      break;
 8007630:	e0d8      	b.n	80077e4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007632:	2109      	movs	r1, #9
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f000 f99d 	bl	8007974 <USBH_Get_CfgDesc>
 800763a:	4603      	mov	r3, r0
 800763c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800763e:	7bbb      	ldrb	r3, [r7, #14]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d103      	bne.n	800764c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2204      	movs	r2, #4
 8007648:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800764a:	e0cd      	b.n	80077e8 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800764c:	7bbb      	ldrb	r3, [r7, #14]
 800764e:	2b03      	cmp	r3, #3
 8007650:	f040 80ca 	bne.w	80077e8 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800765a:	3301      	adds	r3, #1
 800765c:	b2da      	uxtb	r2, r3
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800766a:	2b03      	cmp	r3, #3
 800766c:	d903      	bls.n	8007676 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	220d      	movs	r2, #13
 8007672:	701a      	strb	r2, [r3, #0]
      break;
 8007674:	e0b8      	b.n	80077e8 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	795b      	ldrb	r3, [r3, #5]
 800767a:	4619      	mov	r1, r3
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f000 fee9 	bl	8008454 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	791b      	ldrb	r3, [r3, #4]
 8007686:	4619      	mov	r1, r3
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f000 fee3 	bl	8008454 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2200      	movs	r2, #0
 8007692:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2200      	movs	r2, #0
 8007698:	701a      	strb	r2, [r3, #0]
      break;
 800769a:	e0a5      	b.n	80077e8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80076a2:	4619      	mov	r1, r3
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f000 f965 	bl	8007974 <USBH_Get_CfgDesc>
 80076aa:	4603      	mov	r3, r0
 80076ac:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80076ae:	7bbb      	ldrb	r3, [r7, #14]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d103      	bne.n	80076bc <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2205      	movs	r2, #5
 80076b8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80076ba:	e097      	b.n	80077ec <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80076bc:	7bbb      	ldrb	r3, [r7, #14]
 80076be:	2b03      	cmp	r3, #3
 80076c0:	f040 8094 	bne.w	80077ec <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80076ca:	3301      	adds	r3, #1
 80076cc:	b2da      	uxtb	r2, r3
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80076da:	2b03      	cmp	r3, #3
 80076dc:	d903      	bls.n	80076e6 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	220d      	movs	r2, #13
 80076e2:	701a      	strb	r2, [r3, #0]
      break;
 80076e4:	e082      	b.n	80077ec <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	795b      	ldrb	r3, [r3, #5]
 80076ea:	4619      	mov	r1, r3
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f000 feb1 	bl	8008454 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	791b      	ldrb	r3, [r3, #4]
 80076f6:	4619      	mov	r1, r3
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f000 feab 	bl	8008454 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2200      	movs	r2, #0
 8007702:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2200      	movs	r2, #0
 8007708:	701a      	strb	r2, [r3, #0]
      break;
 800770a:	e06f      	b.n	80077ec <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007712:	2b00      	cmp	r3, #0
 8007714:	d019      	beq.n	800774a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007722:	23ff      	movs	r3, #255	; 0xff
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f000 f949 	bl	80079bc <USBH_Get_StringDesc>
 800772a:	4603      	mov	r3, r0
 800772c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800772e:	7bbb      	ldrb	r3, [r7, #14]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d103      	bne.n	800773c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2206      	movs	r2, #6
 8007738:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800773a:	e059      	b.n	80077f0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800773c:	7bbb      	ldrb	r3, [r7, #14]
 800773e:	2b03      	cmp	r3, #3
 8007740:	d156      	bne.n	80077f0 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2206      	movs	r2, #6
 8007746:	705a      	strb	r2, [r3, #1]
      break;
 8007748:	e052      	b.n	80077f0 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2206      	movs	r2, #6
 800774e:	705a      	strb	r2, [r3, #1]
      break;
 8007750:	e04e      	b.n	80077f0 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007758:	2b00      	cmp	r3, #0
 800775a:	d019      	beq.n	8007790 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007768:	23ff      	movs	r3, #255	; 0xff
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f000 f926 	bl	80079bc <USBH_Get_StringDesc>
 8007770:	4603      	mov	r3, r0
 8007772:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007774:	7bbb      	ldrb	r3, [r7, #14]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d103      	bne.n	8007782 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2207      	movs	r2, #7
 800777e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007780:	e038      	b.n	80077f4 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007782:	7bbb      	ldrb	r3, [r7, #14]
 8007784:	2b03      	cmp	r3, #3
 8007786:	d135      	bne.n	80077f4 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2207      	movs	r2, #7
 800778c:	705a      	strb	r2, [r3, #1]
      break;
 800778e:	e031      	b.n	80077f4 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2207      	movs	r2, #7
 8007794:	705a      	strb	r2, [r3, #1]
      break;
 8007796:	e02d      	b.n	80077f4 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d017      	beq.n	80077d2 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80077ae:	23ff      	movs	r3, #255	; 0xff
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f000 f903 	bl	80079bc <USBH_Get_StringDesc>
 80077b6:	4603      	mov	r3, r0
 80077b8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80077ba:	7bbb      	ldrb	r3, [r7, #14]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d102      	bne.n	80077c6 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80077c0:	2300      	movs	r3, #0
 80077c2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80077c4:	e018      	b.n	80077f8 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80077c6:	7bbb      	ldrb	r3, [r7, #14]
 80077c8:	2b03      	cmp	r3, #3
 80077ca:	d115      	bne.n	80077f8 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80077cc:	2300      	movs	r3, #0
 80077ce:	73fb      	strb	r3, [r7, #15]
      break;
 80077d0:	e012      	b.n	80077f8 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80077d2:	2300      	movs	r3, #0
 80077d4:	73fb      	strb	r3, [r7, #15]
      break;
 80077d6:	e00f      	b.n	80077f8 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80077d8:	bf00      	nop
 80077da:	e00e      	b.n	80077fa <USBH_HandleEnum+0x3be>
      break;
 80077dc:	bf00      	nop
 80077de:	e00c      	b.n	80077fa <USBH_HandleEnum+0x3be>
      break;
 80077e0:	bf00      	nop
 80077e2:	e00a      	b.n	80077fa <USBH_HandleEnum+0x3be>
      break;
 80077e4:	bf00      	nop
 80077e6:	e008      	b.n	80077fa <USBH_HandleEnum+0x3be>
      break;
 80077e8:	bf00      	nop
 80077ea:	e006      	b.n	80077fa <USBH_HandleEnum+0x3be>
      break;
 80077ec:	bf00      	nop
 80077ee:	e004      	b.n	80077fa <USBH_HandleEnum+0x3be>
      break;
 80077f0:	bf00      	nop
 80077f2:	e002      	b.n	80077fa <USBH_HandleEnum+0x3be>
      break;
 80077f4:	bf00      	nop
 80077f6:	e000      	b.n	80077fa <USBH_HandleEnum+0x3be>
      break;
 80077f8:	bf00      	nop
  }
  return Status;
 80077fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	3710      	adds	r7, #16
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}

08007804 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007804:	b480      	push	{r7}
 8007806:	b083      	sub	sp, #12
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	683a      	ldr	r2, [r7, #0]
 8007812:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007816:	bf00      	nop
 8007818:	370c      	adds	r7, #12
 800781a:	46bd      	mov	sp, r7
 800781c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007820:	4770      	bx	lr

08007822 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007822:	b580      	push	{r7, lr}
 8007824:	b082      	sub	sp, #8
 8007826:	af00      	add	r7, sp, #0
 8007828:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007830:	1c5a      	adds	r2, r3, #1
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f000 f804 	bl	8007846 <USBH_HandleSof>
}
 800783e:	bf00      	nop
 8007840:	3708      	adds	r7, #8
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}

08007846 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007846:	b580      	push	{r7, lr}
 8007848:	b082      	sub	sp, #8
 800784a:	af00      	add	r7, sp, #0
 800784c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	781b      	ldrb	r3, [r3, #0]
 8007852:	b2db      	uxtb	r3, r3
 8007854:	2b0b      	cmp	r3, #11
 8007856:	d10a      	bne.n	800786e <USBH_HandleSof+0x28>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800785e:	2b00      	cmp	r3, #0
 8007860:	d005      	beq.n	800786e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007868:	699b      	ldr	r3, [r3, #24]
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	4798      	blx	r3
  }
}
 800786e:	bf00      	nop
 8007870:	3708      	adds	r7, #8
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}

08007876 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007876:	b480      	push	{r7}
 8007878:	b083      	sub	sp, #12
 800787a:	af00      	add	r7, sp, #0
 800787c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2201      	movs	r2, #1
 8007882:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8007886:	bf00      	nop
}
 8007888:	370c      	adds	r7, #12
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr

08007892 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007892:	b480      	push	{r7}
 8007894:	b083      	sub	sp, #12
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2200      	movs	r2, #0
 800789e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80078a2:	bf00      	nop
}
 80078a4:	370c      	adds	r7, #12
 80078a6:	46bd      	mov	sp, r7
 80078a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ac:	4770      	bx	lr

080078ae <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80078ae:	b480      	push	{r7}
 80078b0:	b083      	sub	sp, #12
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2201      	movs	r2, #1
 80078ba:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2200      	movs	r2, #0
 80078c2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2200      	movs	r2, #0
 80078ca:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80078ce:	2300      	movs	r3, #0
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	370c      	adds	r7, #12
 80078d4:	46bd      	mov	sp, r7
 80078d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078da:	4770      	bx	lr

080078dc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b082      	sub	sp, #8
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2201      	movs	r2, #1
 80078e8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2200      	movs	r2, #0
 80078f0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2200      	movs	r2, #0
 80078f8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f000 ff56 	bl	80087ae <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	791b      	ldrb	r3, [r3, #4]
 8007906:	4619      	mov	r1, r3
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f000 fda3 	bl	8008454 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	795b      	ldrb	r3, [r3, #5]
 8007912:	4619      	mov	r1, r3
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f000 fd9d 	bl	8008454 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800791a:	2300      	movs	r3, #0
}
 800791c:	4618      	mov	r0, r3
 800791e:	3708      	adds	r7, #8
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}

08007924 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b086      	sub	sp, #24
 8007928:	af02      	add	r7, sp, #8
 800792a:	6078      	str	r0, [r7, #4]
 800792c:	460b      	mov	r3, r1
 800792e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007936:	78fb      	ldrb	r3, [r7, #3]
 8007938:	b29b      	uxth	r3, r3
 800793a:	9300      	str	r3, [sp, #0]
 800793c:	4613      	mov	r3, r2
 800793e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007942:	2100      	movs	r1, #0
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f000 f864 	bl	8007a12 <USBH_GetDescriptor>
 800794a:	4603      	mov	r3, r0
 800794c:	73fb      	strb	r3, [r7, #15]
 800794e:	7bfb      	ldrb	r3, [r7, #15]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d10a      	bne.n	800796a <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f203 3026 	addw	r0, r3, #806	; 0x326
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007960:	78fa      	ldrb	r2, [r7, #3]
 8007962:	b292      	uxth	r2, r2
 8007964:	4619      	mov	r1, r3
 8007966:	f000 f918 	bl	8007b9a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800796a:	7bfb      	ldrb	r3, [r7, #15]
}
 800796c:	4618      	mov	r0, r3
 800796e:	3710      	adds	r7, #16
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}

08007974 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007974:	b580      	push	{r7, lr}
 8007976:	b086      	sub	sp, #24
 8007978:	af02      	add	r7, sp, #8
 800797a:	6078      	str	r0, [r7, #4]
 800797c:	460b      	mov	r3, r1
 800797e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	331c      	adds	r3, #28
 8007984:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007986:	887b      	ldrh	r3, [r7, #2]
 8007988:	9300      	str	r3, [sp, #0]
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007990:	2100      	movs	r1, #0
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f000 f83d 	bl	8007a12 <USBH_GetDescriptor>
 8007998:	4603      	mov	r3, r0
 800799a:	72fb      	strb	r3, [r7, #11]
 800799c:	7afb      	ldrb	r3, [r7, #11]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d107      	bne.n	80079b2 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80079a8:	887a      	ldrh	r2, [r7, #2]
 80079aa:	68f9      	ldr	r1, [r7, #12]
 80079ac:	4618      	mov	r0, r3
 80079ae:	f000 f964 	bl	8007c7a <USBH_ParseCfgDesc>
  }

  return status;
 80079b2:	7afb      	ldrb	r3, [r7, #11]
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3710      	adds	r7, #16
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}

080079bc <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b088      	sub	sp, #32
 80079c0:	af02      	add	r7, sp, #8
 80079c2:	60f8      	str	r0, [r7, #12]
 80079c4:	607a      	str	r2, [r7, #4]
 80079c6:	461a      	mov	r2, r3
 80079c8:	460b      	mov	r3, r1
 80079ca:	72fb      	strb	r3, [r7, #11]
 80079cc:	4613      	mov	r3, r2
 80079ce:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 80079d0:	7afb      	ldrb	r3, [r7, #11]
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80079d8:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80079e0:	893b      	ldrh	r3, [r7, #8]
 80079e2:	9300      	str	r3, [sp, #0]
 80079e4:	460b      	mov	r3, r1
 80079e6:	2100      	movs	r1, #0
 80079e8:	68f8      	ldr	r0, [r7, #12]
 80079ea:	f000 f812 	bl	8007a12 <USBH_GetDescriptor>
 80079ee:	4603      	mov	r3, r0
 80079f0:	75fb      	strb	r3, [r7, #23]
 80079f2:	7dfb      	ldrb	r3, [r7, #23]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d107      	bne.n	8007a08 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80079fe:	893a      	ldrh	r2, [r7, #8]
 8007a00:	6879      	ldr	r1, [r7, #4]
 8007a02:	4618      	mov	r0, r3
 8007a04:	f000 fa37 	bl	8007e76 <USBH_ParseStringDesc>
  }

  return status;
 8007a08:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3718      	adds	r7, #24
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}

08007a12 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007a12:	b580      	push	{r7, lr}
 8007a14:	b084      	sub	sp, #16
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	60f8      	str	r0, [r7, #12]
 8007a1a:	607b      	str	r3, [r7, #4]
 8007a1c:	460b      	mov	r3, r1
 8007a1e:	72fb      	strb	r3, [r7, #11]
 8007a20:	4613      	mov	r3, r2
 8007a22:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	789b      	ldrb	r3, [r3, #2]
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d11c      	bne.n	8007a66 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007a2c:	7afb      	ldrb	r3, [r7, #11]
 8007a2e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007a32:	b2da      	uxtb	r2, r3
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	2206      	movs	r2, #6
 8007a3c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	893a      	ldrh	r2, [r7, #8]
 8007a42:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007a44:	893b      	ldrh	r3, [r7, #8]
 8007a46:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007a4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a4e:	d104      	bne.n	8007a5a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f240 4209 	movw	r2, #1033	; 0x409
 8007a56:	829a      	strh	r2, [r3, #20]
 8007a58:	e002      	b.n	8007a60 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	8b3a      	ldrh	r2, [r7, #24]
 8007a64:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007a66:	8b3b      	ldrh	r3, [r7, #24]
 8007a68:	461a      	mov	r2, r3
 8007a6a:	6879      	ldr	r1, [r7, #4]
 8007a6c:	68f8      	ldr	r0, [r7, #12]
 8007a6e:	f000 fa50 	bl	8007f12 <USBH_CtlReq>
 8007a72:	4603      	mov	r3, r0
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3710      	adds	r7, #16
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}

08007a7c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b082      	sub	sp, #8
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	460b      	mov	r3, r1
 8007a86:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	789b      	ldrb	r3, [r3, #2]
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	d10f      	bne.n	8007ab0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2200      	movs	r2, #0
 8007a94:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2205      	movs	r2, #5
 8007a9a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007a9c:	78fb      	ldrb	r3, [r7, #3]
 8007a9e:	b29a      	uxth	r2, r3
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2200      	movs	r2, #0
 8007aae:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	2100      	movs	r1, #0
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f000 fa2c 	bl	8007f12 <USBH_CtlReq>
 8007aba:	4603      	mov	r3, r0
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3708      	adds	r7, #8
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}

08007ac4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b082      	sub	sp, #8
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	460b      	mov	r3, r1
 8007ace:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	789b      	ldrb	r3, [r3, #2]
 8007ad4:	2b01      	cmp	r3, #1
 8007ad6:	d10e      	bne.n	8007af6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2200      	movs	r2, #0
 8007adc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2209      	movs	r2, #9
 8007ae2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	887a      	ldrh	r2, [r7, #2]
 8007ae8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2200      	movs	r2, #0
 8007aee:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2200      	movs	r2, #0
 8007af4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007af6:	2200      	movs	r2, #0
 8007af8:	2100      	movs	r1, #0
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f000 fa09 	bl	8007f12 <USBH_CtlReq>
 8007b00:	4603      	mov	r3, r0
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3708      	adds	r7, #8
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}

08007b0a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007b0a:	b580      	push	{r7, lr}
 8007b0c:	b082      	sub	sp, #8
 8007b0e:	af00      	add	r7, sp, #0
 8007b10:	6078      	str	r0, [r7, #4]
 8007b12:	460b      	mov	r3, r1
 8007b14:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	789b      	ldrb	r3, [r3, #2]
 8007b1a:	2b01      	cmp	r3, #1
 8007b1c:	d10f      	bne.n	8007b3e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2200      	movs	r2, #0
 8007b22:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2203      	movs	r2, #3
 8007b28:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007b2a:	78fb      	ldrb	r3, [r7, #3]
 8007b2c:	b29a      	uxth	r2, r3
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2200      	movs	r2, #0
 8007b36:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007b3e:	2200      	movs	r2, #0
 8007b40:	2100      	movs	r1, #0
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 f9e5 	bl	8007f12 <USBH_CtlReq>
 8007b48:	4603      	mov	r3, r0
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3708      	adds	r7, #8
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}

08007b52 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007b52:	b580      	push	{r7, lr}
 8007b54:	b082      	sub	sp, #8
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	6078      	str	r0, [r7, #4]
 8007b5a:	460b      	mov	r3, r1
 8007b5c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	789b      	ldrb	r3, [r3, #2]
 8007b62:	2b01      	cmp	r3, #1
 8007b64:	d10f      	bne.n	8007b86 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2202      	movs	r2, #2
 8007b6a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2201      	movs	r2, #1
 8007b70:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2200      	movs	r2, #0
 8007b76:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007b78:	78fb      	ldrb	r3, [r7, #3]
 8007b7a:	b29a      	uxth	r2, r3
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2200      	movs	r2, #0
 8007b84:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8007b86:	2200      	movs	r2, #0
 8007b88:	2100      	movs	r1, #0
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f000 f9c1 	bl	8007f12 <USBH_CtlReq>
 8007b90:	4603      	mov	r3, r0
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	3708      	adds	r7, #8
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}

08007b9a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007b9a:	b480      	push	{r7}
 8007b9c:	b085      	sub	sp, #20
 8007b9e:	af00      	add	r7, sp, #0
 8007ba0:	60f8      	str	r0, [r7, #12]
 8007ba2:	60b9      	str	r1, [r7, #8]
 8007ba4:	4613      	mov	r3, r2
 8007ba6:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	781a      	ldrb	r2, [r3, #0]
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	785a      	ldrb	r2, [r3, #1]
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	3302      	adds	r3, #2
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	b29a      	uxth	r2, r3
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	3303      	adds	r3, #3
 8007bc4:	781b      	ldrb	r3, [r3, #0]
 8007bc6:	b29b      	uxth	r3, r3
 8007bc8:	021b      	lsls	r3, r3, #8
 8007bca:	b29b      	uxth	r3, r3
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	b29a      	uxth	r2, r3
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	791a      	ldrb	r2, [r3, #4]
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	795a      	ldrb	r2, [r3, #5]
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	799a      	ldrb	r2, [r3, #6]
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	79da      	ldrb	r2, [r3, #7]
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8007bf4:	88fb      	ldrh	r3, [r7, #6]
 8007bf6:	2b08      	cmp	r3, #8
 8007bf8:	d939      	bls.n	8007c6e <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	3308      	adds	r3, #8
 8007bfe:	781b      	ldrb	r3, [r3, #0]
 8007c00:	b29a      	uxth	r2, r3
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	3309      	adds	r3, #9
 8007c06:	781b      	ldrb	r3, [r3, #0]
 8007c08:	b29b      	uxth	r3, r3
 8007c0a:	021b      	lsls	r3, r3, #8
 8007c0c:	b29b      	uxth	r3, r3
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	b29a      	uxth	r2, r3
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	330a      	adds	r3, #10
 8007c1a:	781b      	ldrb	r3, [r3, #0]
 8007c1c:	b29a      	uxth	r2, r3
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	330b      	adds	r3, #11
 8007c22:	781b      	ldrb	r3, [r3, #0]
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	021b      	lsls	r3, r3, #8
 8007c28:	b29b      	uxth	r3, r3
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	b29a      	uxth	r2, r3
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	330c      	adds	r3, #12
 8007c36:	781b      	ldrb	r3, [r3, #0]
 8007c38:	b29a      	uxth	r2, r3
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	330d      	adds	r3, #13
 8007c3e:	781b      	ldrb	r3, [r3, #0]
 8007c40:	b29b      	uxth	r3, r3
 8007c42:	021b      	lsls	r3, r3, #8
 8007c44:	b29b      	uxth	r3, r3
 8007c46:	4313      	orrs	r3, r2
 8007c48:	b29a      	uxth	r2, r3
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	7b9a      	ldrb	r2, [r3, #14]
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	7bda      	ldrb	r2, [r3, #15]
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	7c1a      	ldrb	r2, [r3, #16]
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	7c5a      	ldrb	r2, [r3, #17]
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	745a      	strb	r2, [r3, #17]
  }
}
 8007c6e:	bf00      	nop
 8007c70:	3714      	adds	r7, #20
 8007c72:	46bd      	mov	sp, r7
 8007c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c78:	4770      	bx	lr

08007c7a <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8007c7a:	b580      	push	{r7, lr}
 8007c7c:	b08a      	sub	sp, #40	; 0x28
 8007c7e:	af00      	add	r7, sp, #0
 8007c80:	60f8      	str	r0, [r7, #12]
 8007c82:	60b9      	str	r1, [r7, #8]
 8007c84:	4613      	mov	r3, r2
 8007c86:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8007c92:	2300      	movs	r3, #0
 8007c94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	781a      	ldrb	r2, [r3, #0]
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	785a      	ldrb	r2, [r3, #1]
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	3302      	adds	r3, #2
 8007cb0:	781b      	ldrb	r3, [r3, #0]
 8007cb2:	b29a      	uxth	r2, r3
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	3303      	adds	r3, #3
 8007cb8:	781b      	ldrb	r3, [r3, #0]
 8007cba:	b29b      	uxth	r3, r3
 8007cbc:	021b      	lsls	r3, r3, #8
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	b29a      	uxth	r2, r3
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	791a      	ldrb	r2, [r3, #4]
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	795a      	ldrb	r2, [r3, #5]
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	799a      	ldrb	r2, [r3, #6]
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	79da      	ldrb	r2, [r3, #7]
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	7a1a      	ldrb	r2, [r3, #8]
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007cf0:	88fb      	ldrh	r3, [r7, #6]
 8007cf2:	2b09      	cmp	r3, #9
 8007cf4:	d95f      	bls.n	8007db6 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8007cf6:	2309      	movs	r3, #9
 8007cf8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007cfe:	e051      	b.n	8007da4 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007d00:	f107 0316 	add.w	r3, r7, #22
 8007d04:	4619      	mov	r1, r3
 8007d06:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007d08:	f000 f8e8 	bl	8007edc <USBH_GetNextDesc>
 8007d0c:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8007d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d10:	785b      	ldrb	r3, [r3, #1]
 8007d12:	2b04      	cmp	r3, #4
 8007d14:	d146      	bne.n	8007da4 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8007d16:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007d1a:	221a      	movs	r2, #26
 8007d1c:	fb02 f303 	mul.w	r3, r2, r3
 8007d20:	3308      	adds	r3, #8
 8007d22:	68fa      	ldr	r2, [r7, #12]
 8007d24:	4413      	add	r3, r2
 8007d26:	3302      	adds	r3, #2
 8007d28:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007d2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007d2c:	69f8      	ldr	r0, [r7, #28]
 8007d2e:	f000 f846 	bl	8007dbe <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007d32:	2300      	movs	r3, #0
 8007d34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8007d38:	2300      	movs	r3, #0
 8007d3a:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007d3c:	e022      	b.n	8007d84 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007d3e:	f107 0316 	add.w	r3, r7, #22
 8007d42:	4619      	mov	r1, r3
 8007d44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007d46:	f000 f8c9 	bl	8007edc <USBH_GetNextDesc>
 8007d4a:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8007d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d4e:	785b      	ldrb	r3, [r3, #1]
 8007d50:	2b05      	cmp	r3, #5
 8007d52:	d117      	bne.n	8007d84 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007d54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007d58:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007d5c:	3201      	adds	r2, #1
 8007d5e:	00d2      	lsls	r2, r2, #3
 8007d60:	211a      	movs	r1, #26
 8007d62:	fb01 f303 	mul.w	r3, r1, r3
 8007d66:	4413      	add	r3, r2
 8007d68:	3308      	adds	r3, #8
 8007d6a:	68fa      	ldr	r2, [r7, #12]
 8007d6c:	4413      	add	r3, r2
 8007d6e:	3304      	adds	r3, #4
 8007d70:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8007d72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007d74:	69b8      	ldr	r0, [r7, #24]
 8007d76:	f000 f851 	bl	8007e1c <USBH_ParseEPDesc>
            ep_ix++;
 8007d7a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007d7e:	3301      	adds	r3, #1
 8007d80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007d84:	69fb      	ldr	r3, [r7, #28]
 8007d86:	791b      	ldrb	r3, [r3, #4]
 8007d88:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007d8c:	429a      	cmp	r2, r3
 8007d8e:	d204      	bcs.n	8007d9a <USBH_ParseCfgDesc+0x120>
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	885a      	ldrh	r2, [r3, #2]
 8007d94:	8afb      	ldrh	r3, [r7, #22]
 8007d96:	429a      	cmp	r2, r3
 8007d98:	d8d1      	bhi.n	8007d3e <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8007d9a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007d9e:	3301      	adds	r3, #1
 8007da0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007da4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007da8:	2b01      	cmp	r3, #1
 8007daa:	d804      	bhi.n	8007db6 <USBH_ParseCfgDesc+0x13c>
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	885a      	ldrh	r2, [r3, #2]
 8007db0:	8afb      	ldrh	r3, [r7, #22]
 8007db2:	429a      	cmp	r2, r3
 8007db4:	d8a4      	bhi.n	8007d00 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8007db6:	bf00      	nop
 8007db8:	3728      	adds	r7, #40	; 0x28
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}

08007dbe <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007dbe:	b480      	push	{r7}
 8007dc0:	b083      	sub	sp, #12
 8007dc2:	af00      	add	r7, sp, #0
 8007dc4:	6078      	str	r0, [r7, #4]
 8007dc6:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	781a      	ldrb	r2, [r3, #0]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	785a      	ldrb	r2, [r3, #1]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	789a      	ldrb	r2, [r3, #2]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	78da      	ldrb	r2, [r3, #3]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	791a      	ldrb	r2, [r3, #4]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	795a      	ldrb	r2, [r3, #5]
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	799a      	ldrb	r2, [r3, #6]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	79da      	ldrb	r2, [r3, #7]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	7a1a      	ldrb	r2, [r3, #8]
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	721a      	strb	r2, [r3, #8]
}
 8007e10:	bf00      	nop
 8007e12:	370c      	adds	r7, #12
 8007e14:	46bd      	mov	sp, r7
 8007e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1a:	4770      	bx	lr

08007e1c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b083      	sub	sp, #12
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	781a      	ldrb	r2, [r3, #0]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	785a      	ldrb	r2, [r3, #1]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	789a      	ldrb	r2, [r3, #2]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	78da      	ldrb	r2, [r3, #3]
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	3304      	adds	r3, #4
 8007e4a:	781b      	ldrb	r3, [r3, #0]
 8007e4c:	b29a      	uxth	r2, r3
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	3305      	adds	r3, #5
 8007e52:	781b      	ldrb	r3, [r3, #0]
 8007e54:	b29b      	uxth	r3, r3
 8007e56:	021b      	lsls	r3, r3, #8
 8007e58:	b29b      	uxth	r3, r3
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	b29a      	uxth	r2, r3
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	799a      	ldrb	r2, [r3, #6]
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	719a      	strb	r2, [r3, #6]
}
 8007e6a:	bf00      	nop
 8007e6c:	370c      	adds	r7, #12
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e74:	4770      	bx	lr

08007e76 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007e76:	b480      	push	{r7}
 8007e78:	b087      	sub	sp, #28
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	60f8      	str	r0, [r7, #12]
 8007e7e:	60b9      	str	r1, [r7, #8]
 8007e80:	4613      	mov	r3, r2
 8007e82:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	3301      	adds	r3, #1
 8007e88:	781b      	ldrb	r3, [r3, #0]
 8007e8a:	2b03      	cmp	r3, #3
 8007e8c:	d120      	bne.n	8007ed0 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	781b      	ldrb	r3, [r3, #0]
 8007e92:	1e9a      	subs	r2, r3, #2
 8007e94:	88fb      	ldrh	r3, [r7, #6]
 8007e96:	4293      	cmp	r3, r2
 8007e98:	bf28      	it	cs
 8007e9a:	4613      	movcs	r3, r2
 8007e9c:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	3302      	adds	r3, #2
 8007ea2:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	82fb      	strh	r3, [r7, #22]
 8007ea8:	e00b      	b.n	8007ec2 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007eaa:	8afb      	ldrh	r3, [r7, #22]
 8007eac:	68fa      	ldr	r2, [r7, #12]
 8007eae:	4413      	add	r3, r2
 8007eb0:	781a      	ldrb	r2, [r3, #0]
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	3301      	adds	r3, #1
 8007eba:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007ebc:	8afb      	ldrh	r3, [r7, #22]
 8007ebe:	3302      	adds	r3, #2
 8007ec0:	82fb      	strh	r3, [r7, #22]
 8007ec2:	8afa      	ldrh	r2, [r7, #22]
 8007ec4:	8abb      	ldrh	r3, [r7, #20]
 8007ec6:	429a      	cmp	r2, r3
 8007ec8:	d3ef      	bcc.n	8007eaa <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	701a      	strb	r2, [r3, #0]
  }
}
 8007ed0:	bf00      	nop
 8007ed2:	371c      	adds	r7, #28
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	4770      	bx	lr

08007edc <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b085      	sub	sp, #20
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
 8007ee4:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	881a      	ldrh	r2, [r3, #0]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	781b      	ldrb	r3, [r3, #0]
 8007eee:	b29b      	uxth	r3, r3
 8007ef0:	4413      	add	r3, r2
 8007ef2:	b29a      	uxth	r2, r3
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	781b      	ldrb	r3, [r3, #0]
 8007efc:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	4413      	add	r3, r2
 8007f02:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007f04:	68fb      	ldr	r3, [r7, #12]
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3714      	adds	r7, #20
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f10:	4770      	bx	lr

08007f12 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007f12:	b580      	push	{r7, lr}
 8007f14:	b086      	sub	sp, #24
 8007f16:	af00      	add	r7, sp, #0
 8007f18:	60f8      	str	r0, [r7, #12]
 8007f1a:	60b9      	str	r1, [r7, #8]
 8007f1c:	4613      	mov	r3, r2
 8007f1e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007f20:	2301      	movs	r3, #1
 8007f22:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	789b      	ldrb	r3, [r3, #2]
 8007f28:	2b01      	cmp	r3, #1
 8007f2a:	d002      	beq.n	8007f32 <USBH_CtlReq+0x20>
 8007f2c:	2b02      	cmp	r3, #2
 8007f2e:	d00f      	beq.n	8007f50 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007f30:	e027      	b.n	8007f82 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	68ba      	ldr	r2, [r7, #8]
 8007f36:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	88fa      	ldrh	r2, [r7, #6]
 8007f3c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2201      	movs	r2, #1
 8007f42:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	2202      	movs	r2, #2
 8007f48:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	75fb      	strb	r3, [r7, #23]
      break;
 8007f4e:	e018      	b.n	8007f82 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007f50:	68f8      	ldr	r0, [r7, #12]
 8007f52:	f000 f81b 	bl	8007f8c <USBH_HandleControl>
 8007f56:	4603      	mov	r3, r0
 8007f58:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007f5a:	7dfb      	ldrb	r3, [r7, #23]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d002      	beq.n	8007f66 <USBH_CtlReq+0x54>
 8007f60:	7dfb      	ldrb	r3, [r7, #23]
 8007f62:	2b03      	cmp	r3, #3
 8007f64:	d106      	bne.n	8007f74 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	2201      	movs	r2, #1
 8007f6a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	761a      	strb	r2, [r3, #24]
      break;
 8007f72:	e005      	b.n	8007f80 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007f74:	7dfb      	ldrb	r3, [r7, #23]
 8007f76:	2b02      	cmp	r3, #2
 8007f78:	d102      	bne.n	8007f80 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	2201      	movs	r2, #1
 8007f7e:	709a      	strb	r2, [r3, #2]
      break;
 8007f80:	bf00      	nop
  }
  return status;
 8007f82:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	3718      	adds	r7, #24
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}

08007f8c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b086      	sub	sp, #24
 8007f90:	af02      	add	r7, sp, #8
 8007f92:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007f94:	2301      	movs	r3, #1
 8007f96:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	7e1b      	ldrb	r3, [r3, #24]
 8007fa0:	3b01      	subs	r3, #1
 8007fa2:	2b0a      	cmp	r3, #10
 8007fa4:	f200 8156 	bhi.w	8008254 <USBH_HandleControl+0x2c8>
 8007fa8:	a201      	add	r2, pc, #4	; (adr r2, 8007fb0 <USBH_HandleControl+0x24>)
 8007faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fae:	bf00      	nop
 8007fb0:	08007fdd 	.word	0x08007fdd
 8007fb4:	08007ff7 	.word	0x08007ff7
 8007fb8:	08008061 	.word	0x08008061
 8007fbc:	08008087 	.word	0x08008087
 8007fc0:	080080bf 	.word	0x080080bf
 8007fc4:	080080e9 	.word	0x080080e9
 8007fc8:	0800813b 	.word	0x0800813b
 8007fcc:	0800815d 	.word	0x0800815d
 8007fd0:	08008199 	.word	0x08008199
 8007fd4:	080081bf 	.word	0x080081bf
 8007fd8:	080081fd 	.word	0x080081fd
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f103 0110 	add.w	r1, r3, #16
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	795b      	ldrb	r3, [r3, #5]
 8007fe6:	461a      	mov	r2, r3
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f000 f943 	bl	8008274 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2202      	movs	r2, #2
 8007ff2:	761a      	strb	r2, [r3, #24]
      break;
 8007ff4:	e139      	b.n	800826a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	795b      	ldrb	r3, [r3, #5]
 8007ffa:	4619      	mov	r1, r3
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f000 fcc5 	bl	800898c <USBH_LL_GetURBState>
 8008002:	4603      	mov	r3, r0
 8008004:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008006:	7bbb      	ldrb	r3, [r7, #14]
 8008008:	2b01      	cmp	r3, #1
 800800a:	d11e      	bne.n	800804a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	7c1b      	ldrb	r3, [r3, #16]
 8008010:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008014:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	8adb      	ldrh	r3, [r3, #22]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d00a      	beq.n	8008034 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800801e:	7b7b      	ldrb	r3, [r7, #13]
 8008020:	2b80      	cmp	r3, #128	; 0x80
 8008022:	d103      	bne.n	800802c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2203      	movs	r2, #3
 8008028:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800802a:	e115      	b.n	8008258 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2205      	movs	r2, #5
 8008030:	761a      	strb	r2, [r3, #24]
      break;
 8008032:	e111      	b.n	8008258 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008034:	7b7b      	ldrb	r3, [r7, #13]
 8008036:	2b80      	cmp	r3, #128	; 0x80
 8008038:	d103      	bne.n	8008042 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2209      	movs	r2, #9
 800803e:	761a      	strb	r2, [r3, #24]
      break;
 8008040:	e10a      	b.n	8008258 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2207      	movs	r2, #7
 8008046:	761a      	strb	r2, [r3, #24]
      break;
 8008048:	e106      	b.n	8008258 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800804a:	7bbb      	ldrb	r3, [r7, #14]
 800804c:	2b04      	cmp	r3, #4
 800804e:	d003      	beq.n	8008058 <USBH_HandleControl+0xcc>
 8008050:	7bbb      	ldrb	r3, [r7, #14]
 8008052:	2b02      	cmp	r3, #2
 8008054:	f040 8100 	bne.w	8008258 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	220b      	movs	r2, #11
 800805c:	761a      	strb	r2, [r3, #24]
      break;
 800805e:	e0fb      	b.n	8008258 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008066:	b29a      	uxth	r2, r3
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6899      	ldr	r1, [r3, #8]
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	899a      	ldrh	r2, [r3, #12]
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	791b      	ldrb	r3, [r3, #4]
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f000 f93a 	bl	80082f2 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2204      	movs	r2, #4
 8008082:	761a      	strb	r2, [r3, #24]
      break;
 8008084:	e0f1      	b.n	800826a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	791b      	ldrb	r3, [r3, #4]
 800808a:	4619      	mov	r1, r3
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f000 fc7d 	bl	800898c <USBH_LL_GetURBState>
 8008092:	4603      	mov	r3, r0
 8008094:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008096:	7bbb      	ldrb	r3, [r7, #14]
 8008098:	2b01      	cmp	r3, #1
 800809a:	d102      	bne.n	80080a2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2209      	movs	r2, #9
 80080a0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80080a2:	7bbb      	ldrb	r3, [r7, #14]
 80080a4:	2b05      	cmp	r3, #5
 80080a6:	d102      	bne.n	80080ae <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80080a8:	2303      	movs	r3, #3
 80080aa:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80080ac:	e0d6      	b.n	800825c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80080ae:	7bbb      	ldrb	r3, [r7, #14]
 80080b0:	2b04      	cmp	r3, #4
 80080b2:	f040 80d3 	bne.w	800825c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	220b      	movs	r2, #11
 80080ba:	761a      	strb	r2, [r3, #24]
      break;
 80080bc:	e0ce      	b.n	800825c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6899      	ldr	r1, [r3, #8]
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	899a      	ldrh	r2, [r3, #12]
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	795b      	ldrb	r3, [r3, #5]
 80080ca:	2001      	movs	r0, #1
 80080cc:	9000      	str	r0, [sp, #0]
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f000 f8ea 	bl	80082a8 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80080da:	b29a      	uxth	r2, r3
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2206      	movs	r2, #6
 80080e4:	761a      	strb	r2, [r3, #24]
      break;
 80080e6:	e0c0      	b.n	800826a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	795b      	ldrb	r3, [r3, #5]
 80080ec:	4619      	mov	r1, r3
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f000 fc4c 	bl	800898c <USBH_LL_GetURBState>
 80080f4:	4603      	mov	r3, r0
 80080f6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80080f8:	7bbb      	ldrb	r3, [r7, #14]
 80080fa:	2b01      	cmp	r3, #1
 80080fc:	d103      	bne.n	8008106 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2207      	movs	r2, #7
 8008102:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008104:	e0ac      	b.n	8008260 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008106:	7bbb      	ldrb	r3, [r7, #14]
 8008108:	2b05      	cmp	r3, #5
 800810a:	d105      	bne.n	8008118 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	220c      	movs	r2, #12
 8008110:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008112:	2303      	movs	r3, #3
 8008114:	73fb      	strb	r3, [r7, #15]
      break;
 8008116:	e0a3      	b.n	8008260 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008118:	7bbb      	ldrb	r3, [r7, #14]
 800811a:	2b02      	cmp	r3, #2
 800811c:	d103      	bne.n	8008126 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2205      	movs	r2, #5
 8008122:	761a      	strb	r2, [r3, #24]
      break;
 8008124:	e09c      	b.n	8008260 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008126:	7bbb      	ldrb	r3, [r7, #14]
 8008128:	2b04      	cmp	r3, #4
 800812a:	f040 8099 	bne.w	8008260 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	220b      	movs	r2, #11
 8008132:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008134:	2302      	movs	r3, #2
 8008136:	73fb      	strb	r3, [r7, #15]
      break;
 8008138:	e092      	b.n	8008260 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	791b      	ldrb	r3, [r3, #4]
 800813e:	2200      	movs	r2, #0
 8008140:	2100      	movs	r1, #0
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f000 f8d5 	bl	80082f2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800814e:	b29a      	uxth	r2, r3
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2208      	movs	r2, #8
 8008158:	761a      	strb	r2, [r3, #24]

      break;
 800815a:	e086      	b.n	800826a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	791b      	ldrb	r3, [r3, #4]
 8008160:	4619      	mov	r1, r3
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f000 fc12 	bl	800898c <USBH_LL_GetURBState>
 8008168:	4603      	mov	r3, r0
 800816a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800816c:	7bbb      	ldrb	r3, [r7, #14]
 800816e:	2b01      	cmp	r3, #1
 8008170:	d105      	bne.n	800817e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	220d      	movs	r2, #13
 8008176:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008178:	2300      	movs	r3, #0
 800817a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800817c:	e072      	b.n	8008264 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800817e:	7bbb      	ldrb	r3, [r7, #14]
 8008180:	2b04      	cmp	r3, #4
 8008182:	d103      	bne.n	800818c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	220b      	movs	r2, #11
 8008188:	761a      	strb	r2, [r3, #24]
      break;
 800818a:	e06b      	b.n	8008264 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800818c:	7bbb      	ldrb	r3, [r7, #14]
 800818e:	2b05      	cmp	r3, #5
 8008190:	d168      	bne.n	8008264 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008192:	2303      	movs	r3, #3
 8008194:	73fb      	strb	r3, [r7, #15]
      break;
 8008196:	e065      	b.n	8008264 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	795b      	ldrb	r3, [r3, #5]
 800819c:	2201      	movs	r2, #1
 800819e:	9200      	str	r2, [sp, #0]
 80081a0:	2200      	movs	r2, #0
 80081a2:	2100      	movs	r1, #0
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f000 f87f 	bl	80082a8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80081b0:	b29a      	uxth	r2, r3
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	220a      	movs	r2, #10
 80081ba:	761a      	strb	r2, [r3, #24]
      break;
 80081bc:	e055      	b.n	800826a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	795b      	ldrb	r3, [r3, #5]
 80081c2:	4619      	mov	r1, r3
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f000 fbe1 	bl	800898c <USBH_LL_GetURBState>
 80081ca:	4603      	mov	r3, r0
 80081cc:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80081ce:	7bbb      	ldrb	r3, [r7, #14]
 80081d0:	2b01      	cmp	r3, #1
 80081d2:	d105      	bne.n	80081e0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80081d4:	2300      	movs	r3, #0
 80081d6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	220d      	movs	r2, #13
 80081dc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80081de:	e043      	b.n	8008268 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80081e0:	7bbb      	ldrb	r3, [r7, #14]
 80081e2:	2b02      	cmp	r3, #2
 80081e4:	d103      	bne.n	80081ee <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2209      	movs	r2, #9
 80081ea:	761a      	strb	r2, [r3, #24]
      break;
 80081ec:	e03c      	b.n	8008268 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80081ee:	7bbb      	ldrb	r3, [r7, #14]
 80081f0:	2b04      	cmp	r3, #4
 80081f2:	d139      	bne.n	8008268 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	220b      	movs	r2, #11
 80081f8:	761a      	strb	r2, [r3, #24]
      break;
 80081fa:	e035      	b.n	8008268 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	7e5b      	ldrb	r3, [r3, #25]
 8008200:	3301      	adds	r3, #1
 8008202:	b2da      	uxtb	r2, r3
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	765a      	strb	r2, [r3, #25]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	7e5b      	ldrb	r3, [r3, #25]
 800820c:	2b02      	cmp	r3, #2
 800820e:	d806      	bhi.n	800821e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2201      	movs	r2, #1
 8008214:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2201      	movs	r2, #1
 800821a:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800821c:	e025      	b.n	800826a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008224:	2106      	movs	r1, #6
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2200      	movs	r2, #0
 800822e:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	795b      	ldrb	r3, [r3, #5]
 8008234:	4619      	mov	r1, r3
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f000 f90c 	bl	8008454 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	791b      	ldrb	r3, [r3, #4]
 8008240:	4619      	mov	r1, r3
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f000 f906 	bl	8008454 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2200      	movs	r2, #0
 800824c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800824e:	2302      	movs	r3, #2
 8008250:	73fb      	strb	r3, [r7, #15]
      break;
 8008252:	e00a      	b.n	800826a <USBH_HandleControl+0x2de>

    default:
      break;
 8008254:	bf00      	nop
 8008256:	e008      	b.n	800826a <USBH_HandleControl+0x2de>
      break;
 8008258:	bf00      	nop
 800825a:	e006      	b.n	800826a <USBH_HandleControl+0x2de>
      break;
 800825c:	bf00      	nop
 800825e:	e004      	b.n	800826a <USBH_HandleControl+0x2de>
      break;
 8008260:	bf00      	nop
 8008262:	e002      	b.n	800826a <USBH_HandleControl+0x2de>
      break;
 8008264:	bf00      	nop
 8008266:	e000      	b.n	800826a <USBH_HandleControl+0x2de>
      break;
 8008268:	bf00      	nop
  }

  return status;
 800826a:	7bfb      	ldrb	r3, [r7, #15]
}
 800826c:	4618      	mov	r0, r3
 800826e:	3710      	adds	r7, #16
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}

08008274 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b088      	sub	sp, #32
 8008278:	af04      	add	r7, sp, #16
 800827a:	60f8      	str	r0, [r7, #12]
 800827c:	60b9      	str	r1, [r7, #8]
 800827e:	4613      	mov	r3, r2
 8008280:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008282:	79f9      	ldrb	r1, [r7, #7]
 8008284:	2300      	movs	r3, #0
 8008286:	9303      	str	r3, [sp, #12]
 8008288:	2308      	movs	r3, #8
 800828a:	9302      	str	r3, [sp, #8]
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	9301      	str	r3, [sp, #4]
 8008290:	2300      	movs	r3, #0
 8008292:	9300      	str	r3, [sp, #0]
 8008294:	2300      	movs	r3, #0
 8008296:	2200      	movs	r2, #0
 8008298:	68f8      	ldr	r0, [r7, #12]
 800829a:	f000 fb46 	bl	800892a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800829e:	2300      	movs	r3, #0
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	3710      	adds	r7, #16
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}

080082a8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b088      	sub	sp, #32
 80082ac:	af04      	add	r7, sp, #16
 80082ae:	60f8      	str	r0, [r7, #12]
 80082b0:	60b9      	str	r1, [r7, #8]
 80082b2:	4611      	mov	r1, r2
 80082b4:	461a      	mov	r2, r3
 80082b6:	460b      	mov	r3, r1
 80082b8:	80fb      	strh	r3, [r7, #6]
 80082ba:	4613      	mov	r3, r2
 80082bc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d001      	beq.n	80082cc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80082c8:	2300      	movs	r3, #0
 80082ca:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80082cc:	7979      	ldrb	r1, [r7, #5]
 80082ce:	7e3b      	ldrb	r3, [r7, #24]
 80082d0:	9303      	str	r3, [sp, #12]
 80082d2:	88fb      	ldrh	r3, [r7, #6]
 80082d4:	9302      	str	r3, [sp, #8]
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	9301      	str	r3, [sp, #4]
 80082da:	2301      	movs	r3, #1
 80082dc:	9300      	str	r3, [sp, #0]
 80082de:	2300      	movs	r3, #0
 80082e0:	2200      	movs	r2, #0
 80082e2:	68f8      	ldr	r0, [r7, #12]
 80082e4:	f000 fb21 	bl	800892a <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80082e8:	2300      	movs	r3, #0
}
 80082ea:	4618      	mov	r0, r3
 80082ec:	3710      	adds	r7, #16
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}

080082f2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80082f2:	b580      	push	{r7, lr}
 80082f4:	b088      	sub	sp, #32
 80082f6:	af04      	add	r7, sp, #16
 80082f8:	60f8      	str	r0, [r7, #12]
 80082fa:	60b9      	str	r1, [r7, #8]
 80082fc:	4611      	mov	r1, r2
 80082fe:	461a      	mov	r2, r3
 8008300:	460b      	mov	r3, r1
 8008302:	80fb      	strh	r3, [r7, #6]
 8008304:	4613      	mov	r3, r2
 8008306:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008308:	7979      	ldrb	r1, [r7, #5]
 800830a:	2300      	movs	r3, #0
 800830c:	9303      	str	r3, [sp, #12]
 800830e:	88fb      	ldrh	r3, [r7, #6]
 8008310:	9302      	str	r3, [sp, #8]
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	9301      	str	r3, [sp, #4]
 8008316:	2301      	movs	r3, #1
 8008318:	9300      	str	r3, [sp, #0]
 800831a:	2300      	movs	r3, #0
 800831c:	2201      	movs	r2, #1
 800831e:	68f8      	ldr	r0, [r7, #12]
 8008320:	f000 fb03 	bl	800892a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008324:	2300      	movs	r3, #0

}
 8008326:	4618      	mov	r0, r3
 8008328:	3710      	adds	r7, #16
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}

0800832e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800832e:	b580      	push	{r7, lr}
 8008330:	b088      	sub	sp, #32
 8008332:	af04      	add	r7, sp, #16
 8008334:	60f8      	str	r0, [r7, #12]
 8008336:	60b9      	str	r1, [r7, #8]
 8008338:	4611      	mov	r1, r2
 800833a:	461a      	mov	r2, r3
 800833c:	460b      	mov	r3, r1
 800833e:	80fb      	strh	r3, [r7, #6]
 8008340:	4613      	mov	r3, r2
 8008342:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800834a:	2b00      	cmp	r3, #0
 800834c:	d001      	beq.n	8008352 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800834e:	2300      	movs	r3, #0
 8008350:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008352:	7979      	ldrb	r1, [r7, #5]
 8008354:	7e3b      	ldrb	r3, [r7, #24]
 8008356:	9303      	str	r3, [sp, #12]
 8008358:	88fb      	ldrh	r3, [r7, #6]
 800835a:	9302      	str	r3, [sp, #8]
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	9301      	str	r3, [sp, #4]
 8008360:	2301      	movs	r3, #1
 8008362:	9300      	str	r3, [sp, #0]
 8008364:	2302      	movs	r3, #2
 8008366:	2200      	movs	r2, #0
 8008368:	68f8      	ldr	r0, [r7, #12]
 800836a:	f000 fade 	bl	800892a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800836e:	2300      	movs	r3, #0
}
 8008370:	4618      	mov	r0, r3
 8008372:	3710      	adds	r7, #16
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}

08008378 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b088      	sub	sp, #32
 800837c:	af04      	add	r7, sp, #16
 800837e:	60f8      	str	r0, [r7, #12]
 8008380:	60b9      	str	r1, [r7, #8]
 8008382:	4611      	mov	r1, r2
 8008384:	461a      	mov	r2, r3
 8008386:	460b      	mov	r3, r1
 8008388:	80fb      	strh	r3, [r7, #6]
 800838a:	4613      	mov	r3, r2
 800838c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800838e:	7979      	ldrb	r1, [r7, #5]
 8008390:	2300      	movs	r3, #0
 8008392:	9303      	str	r3, [sp, #12]
 8008394:	88fb      	ldrh	r3, [r7, #6]
 8008396:	9302      	str	r3, [sp, #8]
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	9301      	str	r3, [sp, #4]
 800839c:	2301      	movs	r3, #1
 800839e:	9300      	str	r3, [sp, #0]
 80083a0:	2302      	movs	r3, #2
 80083a2:	2201      	movs	r2, #1
 80083a4:	68f8      	ldr	r0, [r7, #12]
 80083a6:	f000 fac0 	bl	800892a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80083aa:	2300      	movs	r3, #0
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3710      	adds	r7, #16
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}

080083b4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b086      	sub	sp, #24
 80083b8:	af04      	add	r7, sp, #16
 80083ba:	6078      	str	r0, [r7, #4]
 80083bc:	4608      	mov	r0, r1
 80083be:	4611      	mov	r1, r2
 80083c0:	461a      	mov	r2, r3
 80083c2:	4603      	mov	r3, r0
 80083c4:	70fb      	strb	r3, [r7, #3]
 80083c6:	460b      	mov	r3, r1
 80083c8:	70bb      	strb	r3, [r7, #2]
 80083ca:	4613      	mov	r3, r2
 80083cc:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80083ce:	7878      	ldrb	r0, [r7, #1]
 80083d0:	78ba      	ldrb	r2, [r7, #2]
 80083d2:	78f9      	ldrb	r1, [r7, #3]
 80083d4:	8b3b      	ldrh	r3, [r7, #24]
 80083d6:	9302      	str	r3, [sp, #8]
 80083d8:	7d3b      	ldrb	r3, [r7, #20]
 80083da:	9301      	str	r3, [sp, #4]
 80083dc:	7c3b      	ldrb	r3, [r7, #16]
 80083de:	9300      	str	r3, [sp, #0]
 80083e0:	4603      	mov	r3, r0
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f000 fa53 	bl	800888e <USBH_LL_OpenPipe>

  return USBH_OK;
 80083e8:	2300      	movs	r3, #0
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	3708      	adds	r7, #8
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}

080083f2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80083f2:	b580      	push	{r7, lr}
 80083f4:	b082      	sub	sp, #8
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	6078      	str	r0, [r7, #4]
 80083fa:	460b      	mov	r3, r1
 80083fc:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 80083fe:	78fb      	ldrb	r3, [r7, #3]
 8008400:	4619      	mov	r1, r3
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f000 fa72 	bl	80088ec <USBH_LL_ClosePipe>

  return USBH_OK;
 8008408:	2300      	movs	r3, #0
}
 800840a:	4618      	mov	r0, r3
 800840c:	3708      	adds	r7, #8
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}

08008412 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008412:	b580      	push	{r7, lr}
 8008414:	b084      	sub	sp, #16
 8008416:	af00      	add	r7, sp, #0
 8008418:	6078      	str	r0, [r7, #4]
 800841a:	460b      	mov	r3, r1
 800841c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f000 f836 	bl	8008490 <USBH_GetFreePipe>
 8008424:	4603      	mov	r3, r0
 8008426:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008428:	89fb      	ldrh	r3, [r7, #14]
 800842a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800842e:	4293      	cmp	r3, r2
 8008430:	d00a      	beq.n	8008448 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8008432:	78fa      	ldrb	r2, [r7, #3]
 8008434:	89fb      	ldrh	r3, [r7, #14]
 8008436:	f003 030f 	and.w	r3, r3, #15
 800843a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800843e:	6879      	ldr	r1, [r7, #4]
 8008440:	33e0      	adds	r3, #224	; 0xe0
 8008442:	009b      	lsls	r3, r3, #2
 8008444:	440b      	add	r3, r1
 8008446:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008448:	89fb      	ldrh	r3, [r7, #14]
 800844a:	b2db      	uxtb	r3, r3
}
 800844c:	4618      	mov	r0, r3
 800844e:	3710      	adds	r7, #16
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}

08008454 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008454:	b480      	push	{r7}
 8008456:	b083      	sub	sp, #12
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
 800845c:	460b      	mov	r3, r1
 800845e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8008460:	78fb      	ldrb	r3, [r7, #3]
 8008462:	2b0a      	cmp	r3, #10
 8008464:	d80d      	bhi.n	8008482 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008466:	78fb      	ldrb	r3, [r7, #3]
 8008468:	687a      	ldr	r2, [r7, #4]
 800846a:	33e0      	adds	r3, #224	; 0xe0
 800846c:	009b      	lsls	r3, r3, #2
 800846e:	4413      	add	r3, r2
 8008470:	685a      	ldr	r2, [r3, #4]
 8008472:	78fb      	ldrb	r3, [r7, #3]
 8008474:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008478:	6879      	ldr	r1, [r7, #4]
 800847a:	33e0      	adds	r3, #224	; 0xe0
 800847c:	009b      	lsls	r3, r3, #2
 800847e:	440b      	add	r3, r1
 8008480:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008482:	2300      	movs	r3, #0
}
 8008484:	4618      	mov	r0, r3
 8008486:	370c      	adds	r7, #12
 8008488:	46bd      	mov	sp, r7
 800848a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848e:	4770      	bx	lr

08008490 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008490:	b480      	push	{r7}
 8008492:	b085      	sub	sp, #20
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008498:	2300      	movs	r3, #0
 800849a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800849c:	2300      	movs	r3, #0
 800849e:	73fb      	strb	r3, [r7, #15]
 80084a0:	e00f      	b.n	80084c2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80084a2:	7bfb      	ldrb	r3, [r7, #15]
 80084a4:	687a      	ldr	r2, [r7, #4]
 80084a6:	33e0      	adds	r3, #224	; 0xe0
 80084a8:	009b      	lsls	r3, r3, #2
 80084aa:	4413      	add	r3, r2
 80084ac:	685b      	ldr	r3, [r3, #4]
 80084ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d102      	bne.n	80084bc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80084b6:	7bfb      	ldrb	r3, [r7, #15]
 80084b8:	b29b      	uxth	r3, r3
 80084ba:	e007      	b.n	80084cc <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 80084bc:	7bfb      	ldrb	r3, [r7, #15]
 80084be:	3301      	adds	r3, #1
 80084c0:	73fb      	strb	r3, [r7, #15]
 80084c2:	7bfb      	ldrb	r3, [r7, #15]
 80084c4:	2b0a      	cmp	r3, #10
 80084c6:	d9ec      	bls.n	80084a2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80084c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3714      	adds	r7, #20
 80084d0:	46bd      	mov	sp, r7
 80084d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d6:	4770      	bx	lr

080084d8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80084dc:	2201      	movs	r2, #1
 80084de:	490e      	ldr	r1, [pc, #56]	; (8008518 <MX_USB_HOST_Init+0x40>)
 80084e0:	480e      	ldr	r0, [pc, #56]	; (800851c <MX_USB_HOST_Init+0x44>)
 80084e2:	f7fe fca1 	bl	8006e28 <USBH_Init>
 80084e6:	4603      	mov	r3, r0
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d001      	beq.n	80084f0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80084ec:	f7f8 fa88 	bl	8000a00 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80084f0:	490b      	ldr	r1, [pc, #44]	; (8008520 <MX_USB_HOST_Init+0x48>)
 80084f2:	480a      	ldr	r0, [pc, #40]	; (800851c <MX_USB_HOST_Init+0x44>)
 80084f4:	f7fe fd26 	bl	8006f44 <USBH_RegisterClass>
 80084f8:	4603      	mov	r3, r0
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d001      	beq.n	8008502 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80084fe:	f7f8 fa7f 	bl	8000a00 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008502:	4806      	ldr	r0, [pc, #24]	; (800851c <MX_USB_HOST_Init+0x44>)
 8008504:	f7fe fdaa 	bl	800705c <USBH_Start>
 8008508:	4603      	mov	r3, r0
 800850a:	2b00      	cmp	r3, #0
 800850c:	d001      	beq.n	8008512 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800850e:	f7f8 fa77 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008512:	bf00      	nop
 8008514:	bd80      	pop	{r7, pc}
 8008516:	bf00      	nop
 8008518:	08008539 	.word	0x08008539
 800851c:	20000260 	.word	0x20000260
 8008520:	2000000c 	.word	0x2000000c

08008524 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008528:	4802      	ldr	r0, [pc, #8]	; (8008534 <MX_USB_HOST_Process+0x10>)
 800852a:	f7fe fda7 	bl	800707c <USBH_Process>
}
 800852e:	bf00      	nop
 8008530:	bd80      	pop	{r7, pc}
 8008532:	bf00      	nop
 8008534:	20000260 	.word	0x20000260

08008538 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008538:	b480      	push	{r7}
 800853a:	b083      	sub	sp, #12
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	460b      	mov	r3, r1
 8008542:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008544:	78fb      	ldrb	r3, [r7, #3]
 8008546:	3b01      	subs	r3, #1
 8008548:	2b04      	cmp	r3, #4
 800854a:	d819      	bhi.n	8008580 <USBH_UserProcess+0x48>
 800854c:	a201      	add	r2, pc, #4	; (adr r2, 8008554 <USBH_UserProcess+0x1c>)
 800854e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008552:	bf00      	nop
 8008554:	08008581 	.word	0x08008581
 8008558:	08008571 	.word	0x08008571
 800855c:	08008581 	.word	0x08008581
 8008560:	08008579 	.word	0x08008579
 8008564:	08008569 	.word	0x08008569
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008568:	4b09      	ldr	r3, [pc, #36]	; (8008590 <USBH_UserProcess+0x58>)
 800856a:	2203      	movs	r2, #3
 800856c:	701a      	strb	r2, [r3, #0]
  break;
 800856e:	e008      	b.n	8008582 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008570:	4b07      	ldr	r3, [pc, #28]	; (8008590 <USBH_UserProcess+0x58>)
 8008572:	2202      	movs	r2, #2
 8008574:	701a      	strb	r2, [r3, #0]
  break;
 8008576:	e004      	b.n	8008582 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008578:	4b05      	ldr	r3, [pc, #20]	; (8008590 <USBH_UserProcess+0x58>)
 800857a:	2201      	movs	r2, #1
 800857c:	701a      	strb	r2, [r3, #0]
  break;
 800857e:	e000      	b.n	8008582 <USBH_UserProcess+0x4a>

  default:
  break;
 8008580:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008582:	bf00      	nop
 8008584:	370c      	adds	r7, #12
 8008586:	46bd      	mov	sp, r7
 8008588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858c:	4770      	bx	lr
 800858e:	bf00      	nop
 8008590:	200000b0 	.word	0x200000b0

08008594 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b08a      	sub	sp, #40	; 0x28
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800859c:	f107 0314 	add.w	r3, r7, #20
 80085a0:	2200      	movs	r2, #0
 80085a2:	601a      	str	r2, [r3, #0]
 80085a4:	605a      	str	r2, [r3, #4]
 80085a6:	609a      	str	r2, [r3, #8]
 80085a8:	60da      	str	r2, [r3, #12]
 80085aa:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80085b4:	d147      	bne.n	8008646 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80085b6:	2300      	movs	r3, #0
 80085b8:	613b      	str	r3, [r7, #16]
 80085ba:	4b25      	ldr	r3, [pc, #148]	; (8008650 <HAL_HCD_MspInit+0xbc>)
 80085bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085be:	4a24      	ldr	r2, [pc, #144]	; (8008650 <HAL_HCD_MspInit+0xbc>)
 80085c0:	f043 0301 	orr.w	r3, r3, #1
 80085c4:	6313      	str	r3, [r2, #48]	; 0x30
 80085c6:	4b22      	ldr	r3, [pc, #136]	; (8008650 <HAL_HCD_MspInit+0xbc>)
 80085c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085ca:	f003 0301 	and.w	r3, r3, #1
 80085ce:	613b      	str	r3, [r7, #16]
 80085d0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80085d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80085d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80085d8:	2300      	movs	r3, #0
 80085da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085dc:	2300      	movs	r3, #0
 80085de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80085e0:	f107 0314 	add.w	r3, r7, #20
 80085e4:	4619      	mov	r1, r3
 80085e6:	481b      	ldr	r0, [pc, #108]	; (8008654 <HAL_HCD_MspInit+0xc0>)
 80085e8:	f7f9 fd98 	bl	800211c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80085ec:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80085f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085f2:	2302      	movs	r3, #2
 80085f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085f6:	2300      	movs	r3, #0
 80085f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80085fa:	2300      	movs	r3, #0
 80085fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80085fe:	230a      	movs	r3, #10
 8008600:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008602:	f107 0314 	add.w	r3, r7, #20
 8008606:	4619      	mov	r1, r3
 8008608:	4812      	ldr	r0, [pc, #72]	; (8008654 <HAL_HCD_MspInit+0xc0>)
 800860a:	f7f9 fd87 	bl	800211c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800860e:	4b10      	ldr	r3, [pc, #64]	; (8008650 <HAL_HCD_MspInit+0xbc>)
 8008610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008612:	4a0f      	ldr	r2, [pc, #60]	; (8008650 <HAL_HCD_MspInit+0xbc>)
 8008614:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008618:	6353      	str	r3, [r2, #52]	; 0x34
 800861a:	2300      	movs	r3, #0
 800861c:	60fb      	str	r3, [r7, #12]
 800861e:	4b0c      	ldr	r3, [pc, #48]	; (8008650 <HAL_HCD_MspInit+0xbc>)
 8008620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008622:	4a0b      	ldr	r2, [pc, #44]	; (8008650 <HAL_HCD_MspInit+0xbc>)
 8008624:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008628:	6453      	str	r3, [r2, #68]	; 0x44
 800862a:	4b09      	ldr	r3, [pc, #36]	; (8008650 <HAL_HCD_MspInit+0xbc>)
 800862c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800862e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008632:	60fb      	str	r3, [r7, #12]
 8008634:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008636:	2200      	movs	r2, #0
 8008638:	2100      	movs	r1, #0
 800863a:	2043      	movs	r0, #67	; 0x43
 800863c:	f7f9 f9c7 	bl	80019ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008640:	2043      	movs	r0, #67	; 0x43
 8008642:	f7f9 f9e0 	bl	8001a06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008646:	bf00      	nop
 8008648:	3728      	adds	r7, #40	; 0x28
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}
 800864e:	bf00      	nop
 8008650:	40023800 	.word	0x40023800
 8008654:	40020000 	.word	0x40020000

08008658 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b082      	sub	sp, #8
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008666:	4618      	mov	r0, r3
 8008668:	f7ff f8db 	bl	8007822 <USBH_LL_IncTimer>
}
 800866c:	bf00      	nop
 800866e:	3708      	adds	r7, #8
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}

08008674 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b082      	sub	sp, #8
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008682:	4618      	mov	r0, r3
 8008684:	f7ff f913 	bl	80078ae <USBH_LL_Connect>
}
 8008688:	bf00      	nop
 800868a:	3708      	adds	r7, #8
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}

08008690 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b082      	sub	sp, #8
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800869e:	4618      	mov	r0, r3
 80086a0:	f7ff f91c 	bl	80078dc <USBH_LL_Disconnect>
}
 80086a4:	bf00      	nop
 80086a6:	3708      	adds	r7, #8
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}

080086ac <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80086ac:	b480      	push	{r7}
 80086ae:	b083      	sub	sp, #12
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
 80086b4:	460b      	mov	r3, r1
 80086b6:	70fb      	strb	r3, [r7, #3]
 80086b8:	4613      	mov	r3, r2
 80086ba:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80086bc:	bf00      	nop
 80086be:	370c      	adds	r7, #12
 80086c0:	46bd      	mov	sp, r7
 80086c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c6:	4770      	bx	lr

080086c8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b082      	sub	sp, #8
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80086d6:	4618      	mov	r0, r3
 80086d8:	f7ff f8cd 	bl	8007876 <USBH_LL_PortEnabled>
}
 80086dc:	bf00      	nop
 80086de:	3708      	adds	r7, #8
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}

080086e4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b082      	sub	sp, #8
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80086f2:	4618      	mov	r0, r3
 80086f4:	f7ff f8cd 	bl	8007892 <USBH_LL_PortDisabled>
}
 80086f8:	bf00      	nop
 80086fa:	3708      	adds	r7, #8
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bd80      	pop	{r7, pc}

08008700 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b082      	sub	sp, #8
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800870e:	2b01      	cmp	r3, #1
 8008710:	d12a      	bne.n	8008768 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008712:	4a18      	ldr	r2, [pc, #96]	; (8008774 <USBH_LL_Init+0x74>)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	4a15      	ldr	r2, [pc, #84]	; (8008774 <USBH_LL_Init+0x74>)
 800871e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008722:	4b14      	ldr	r3, [pc, #80]	; (8008774 <USBH_LL_Init+0x74>)
 8008724:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008728:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800872a:	4b12      	ldr	r3, [pc, #72]	; (8008774 <USBH_LL_Init+0x74>)
 800872c:	2208      	movs	r2, #8
 800872e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008730:	4b10      	ldr	r3, [pc, #64]	; (8008774 <USBH_LL_Init+0x74>)
 8008732:	2201      	movs	r2, #1
 8008734:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008736:	4b0f      	ldr	r3, [pc, #60]	; (8008774 <USBH_LL_Init+0x74>)
 8008738:	2200      	movs	r2, #0
 800873a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800873c:	4b0d      	ldr	r3, [pc, #52]	; (8008774 <USBH_LL_Init+0x74>)
 800873e:	2202      	movs	r2, #2
 8008740:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008742:	4b0c      	ldr	r3, [pc, #48]	; (8008774 <USBH_LL_Init+0x74>)
 8008744:	2200      	movs	r2, #0
 8008746:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008748:	480a      	ldr	r0, [pc, #40]	; (8008774 <USBH_LL_Init+0x74>)
 800874a:	f7f9 fe9c 	bl	8002486 <HAL_HCD_Init>
 800874e:	4603      	mov	r3, r0
 8008750:	2b00      	cmp	r3, #0
 8008752:	d001      	beq.n	8008758 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008754:	f7f8 f954 	bl	8000a00 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008758:	4806      	ldr	r0, [pc, #24]	; (8008774 <USBH_LL_Init+0x74>)
 800875a:	f7fa fa80 	bl	8002c5e <HAL_HCD_GetCurrentFrame>
 800875e:	4603      	mov	r3, r0
 8008760:	4619      	mov	r1, r3
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f7ff f84e 	bl	8007804 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008768:	2300      	movs	r3, #0
}
 800876a:	4618      	mov	r0, r3
 800876c:	3708      	adds	r7, #8
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}
 8008772:	bf00      	nop
 8008774:	20000638 	.word	0x20000638

08008778 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b084      	sub	sp, #16
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008780:	2300      	movs	r3, #0
 8008782:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008784:	2300      	movs	r3, #0
 8008786:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800878e:	4618      	mov	r0, r3
 8008790:	f7fa f9ef 	bl	8002b72 <HAL_HCD_Start>
 8008794:	4603      	mov	r3, r0
 8008796:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008798:	7bfb      	ldrb	r3, [r7, #15]
 800879a:	4618      	mov	r0, r3
 800879c:	f000 f95c 	bl	8008a58 <USBH_Get_USB_Status>
 80087a0:	4603      	mov	r3, r0
 80087a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	3710      	adds	r7, #16
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}

080087ae <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80087ae:	b580      	push	{r7, lr}
 80087b0:	b084      	sub	sp, #16
 80087b2:	af00      	add	r7, sp, #0
 80087b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087b6:	2300      	movs	r3, #0
 80087b8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80087ba:	2300      	movs	r3, #0
 80087bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80087c4:	4618      	mov	r0, r3
 80087c6:	f7fa f9f7 	bl	8002bb8 <HAL_HCD_Stop>
 80087ca:	4603      	mov	r3, r0
 80087cc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80087ce:	7bfb      	ldrb	r3, [r7, #15]
 80087d0:	4618      	mov	r0, r3
 80087d2:	f000 f941 	bl	8008a58 <USBH_Get_USB_Status>
 80087d6:	4603      	mov	r3, r0
 80087d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087da:	7bbb      	ldrb	r3, [r7, #14]
}
 80087dc:	4618      	mov	r0, r3
 80087de:	3710      	adds	r7, #16
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}

080087e4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b084      	sub	sp, #16
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80087ec:	2301      	movs	r3, #1
 80087ee:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80087f6:	4618      	mov	r0, r3
 80087f8:	f7fa fa3f 	bl	8002c7a <HAL_HCD_GetCurrentSpeed>
 80087fc:	4603      	mov	r3, r0
 80087fe:	2b02      	cmp	r3, #2
 8008800:	d00c      	beq.n	800881c <USBH_LL_GetSpeed+0x38>
 8008802:	2b02      	cmp	r3, #2
 8008804:	d80d      	bhi.n	8008822 <USBH_LL_GetSpeed+0x3e>
 8008806:	2b00      	cmp	r3, #0
 8008808:	d002      	beq.n	8008810 <USBH_LL_GetSpeed+0x2c>
 800880a:	2b01      	cmp	r3, #1
 800880c:	d003      	beq.n	8008816 <USBH_LL_GetSpeed+0x32>
 800880e:	e008      	b.n	8008822 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008810:	2300      	movs	r3, #0
 8008812:	73fb      	strb	r3, [r7, #15]
    break;
 8008814:	e008      	b.n	8008828 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008816:	2301      	movs	r3, #1
 8008818:	73fb      	strb	r3, [r7, #15]
    break;
 800881a:	e005      	b.n	8008828 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800881c:	2302      	movs	r3, #2
 800881e:	73fb      	strb	r3, [r7, #15]
    break;
 8008820:	e002      	b.n	8008828 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008822:	2301      	movs	r3, #1
 8008824:	73fb      	strb	r3, [r7, #15]
    break;
 8008826:	bf00      	nop
  }
  return  speed;
 8008828:	7bfb      	ldrb	r3, [r7, #15]
}
 800882a:	4618      	mov	r0, r3
 800882c:	3710      	adds	r7, #16
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}

08008832 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008832:	b580      	push	{r7, lr}
 8008834:	b084      	sub	sp, #16
 8008836:	af00      	add	r7, sp, #0
 8008838:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800883a:	2300      	movs	r3, #0
 800883c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800883e:	2300      	movs	r3, #0
 8008840:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008848:	4618      	mov	r0, r3
 800884a:	f7fa f9d2 	bl	8002bf2 <HAL_HCD_ResetPort>
 800884e:	4603      	mov	r3, r0
 8008850:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008852:	7bfb      	ldrb	r3, [r7, #15]
 8008854:	4618      	mov	r0, r3
 8008856:	f000 f8ff 	bl	8008a58 <USBH_Get_USB_Status>
 800885a:	4603      	mov	r3, r0
 800885c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800885e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008860:	4618      	mov	r0, r3
 8008862:	3710      	adds	r7, #16
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}

08008868 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b082      	sub	sp, #8
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
 8008870:	460b      	mov	r3, r1
 8008872:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800887a:	78fa      	ldrb	r2, [r7, #3]
 800887c:	4611      	mov	r1, r2
 800887e:	4618      	mov	r0, r3
 8008880:	f7fa f9d9 	bl	8002c36 <HAL_HCD_HC_GetXferCount>
 8008884:	4603      	mov	r3, r0
}
 8008886:	4618      	mov	r0, r3
 8008888:	3708      	adds	r7, #8
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}

0800888e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800888e:	b590      	push	{r4, r7, lr}
 8008890:	b089      	sub	sp, #36	; 0x24
 8008892:	af04      	add	r7, sp, #16
 8008894:	6078      	str	r0, [r7, #4]
 8008896:	4608      	mov	r0, r1
 8008898:	4611      	mov	r1, r2
 800889a:	461a      	mov	r2, r3
 800889c:	4603      	mov	r3, r0
 800889e:	70fb      	strb	r3, [r7, #3]
 80088a0:	460b      	mov	r3, r1
 80088a2:	70bb      	strb	r3, [r7, #2]
 80088a4:	4613      	mov	r3, r2
 80088a6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088a8:	2300      	movs	r3, #0
 80088aa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80088ac:	2300      	movs	r3, #0
 80088ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80088b6:	787c      	ldrb	r4, [r7, #1]
 80088b8:	78ba      	ldrb	r2, [r7, #2]
 80088ba:	78f9      	ldrb	r1, [r7, #3]
 80088bc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80088be:	9302      	str	r3, [sp, #8]
 80088c0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80088c4:	9301      	str	r3, [sp, #4]
 80088c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80088ca:	9300      	str	r3, [sp, #0]
 80088cc:	4623      	mov	r3, r4
 80088ce:	f7f9 fe3c 	bl	800254a <HAL_HCD_HC_Init>
 80088d2:	4603      	mov	r3, r0
 80088d4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80088d6:	7bfb      	ldrb	r3, [r7, #15]
 80088d8:	4618      	mov	r0, r3
 80088da:	f000 f8bd 	bl	8008a58 <USBH_Get_USB_Status>
 80088de:	4603      	mov	r3, r0
 80088e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80088e4:	4618      	mov	r0, r3
 80088e6:	3714      	adds	r7, #20
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd90      	pop	{r4, r7, pc}

080088ec <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b084      	sub	sp, #16
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
 80088f4:	460b      	mov	r3, r1
 80088f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088f8:	2300      	movs	r3, #0
 80088fa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80088fc:	2300      	movs	r3, #0
 80088fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008906:	78fa      	ldrb	r2, [r7, #3]
 8008908:	4611      	mov	r1, r2
 800890a:	4618      	mov	r0, r3
 800890c:	f7f9 feac 	bl	8002668 <HAL_HCD_HC_Halt>
 8008910:	4603      	mov	r3, r0
 8008912:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008914:	7bfb      	ldrb	r3, [r7, #15]
 8008916:	4618      	mov	r0, r3
 8008918:	f000 f89e 	bl	8008a58 <USBH_Get_USB_Status>
 800891c:	4603      	mov	r3, r0
 800891e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008920:	7bbb      	ldrb	r3, [r7, #14]
}
 8008922:	4618      	mov	r0, r3
 8008924:	3710      	adds	r7, #16
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}

0800892a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800892a:	b590      	push	{r4, r7, lr}
 800892c:	b089      	sub	sp, #36	; 0x24
 800892e:	af04      	add	r7, sp, #16
 8008930:	6078      	str	r0, [r7, #4]
 8008932:	4608      	mov	r0, r1
 8008934:	4611      	mov	r1, r2
 8008936:	461a      	mov	r2, r3
 8008938:	4603      	mov	r3, r0
 800893a:	70fb      	strb	r3, [r7, #3]
 800893c:	460b      	mov	r3, r1
 800893e:	70bb      	strb	r3, [r7, #2]
 8008940:	4613      	mov	r3, r2
 8008942:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008944:	2300      	movs	r3, #0
 8008946:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008948:	2300      	movs	r3, #0
 800894a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008952:	787c      	ldrb	r4, [r7, #1]
 8008954:	78ba      	ldrb	r2, [r7, #2]
 8008956:	78f9      	ldrb	r1, [r7, #3]
 8008958:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800895c:	9303      	str	r3, [sp, #12]
 800895e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008960:	9302      	str	r3, [sp, #8]
 8008962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008964:	9301      	str	r3, [sp, #4]
 8008966:	f897 3020 	ldrb.w	r3, [r7, #32]
 800896a:	9300      	str	r3, [sp, #0]
 800896c:	4623      	mov	r3, r4
 800896e:	f7f9 fe9f 	bl	80026b0 <HAL_HCD_HC_SubmitRequest>
 8008972:	4603      	mov	r3, r0
 8008974:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008976:	7bfb      	ldrb	r3, [r7, #15]
 8008978:	4618      	mov	r0, r3
 800897a:	f000 f86d 	bl	8008a58 <USBH_Get_USB_Status>
 800897e:	4603      	mov	r3, r0
 8008980:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008982:	7bbb      	ldrb	r3, [r7, #14]
}
 8008984:	4618      	mov	r0, r3
 8008986:	3714      	adds	r7, #20
 8008988:	46bd      	mov	sp, r7
 800898a:	bd90      	pop	{r4, r7, pc}

0800898c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b082      	sub	sp, #8
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
 8008994:	460b      	mov	r3, r1
 8008996:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800899e:	78fa      	ldrb	r2, [r7, #3]
 80089a0:	4611      	mov	r1, r2
 80089a2:	4618      	mov	r0, r3
 80089a4:	f7fa f933 	bl	8002c0e <HAL_HCD_HC_GetURBState>
 80089a8:	4603      	mov	r3, r0
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	3708      	adds	r7, #8
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}

080089b2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80089b2:	b580      	push	{r7, lr}
 80089b4:	b082      	sub	sp, #8
 80089b6:	af00      	add	r7, sp, #0
 80089b8:	6078      	str	r0, [r7, #4]
 80089ba:	460b      	mov	r3, r1
 80089bc:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80089c4:	2b01      	cmp	r3, #1
 80089c6:	d103      	bne.n	80089d0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80089c8:	78fb      	ldrb	r3, [r7, #3]
 80089ca:	4618      	mov	r0, r3
 80089cc:	f000 f870 	bl	8008ab0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80089d0:	20c8      	movs	r0, #200	; 0xc8
 80089d2:	f7f8 faeb 	bl	8000fac <HAL_Delay>
  return USBH_OK;
 80089d6:	2300      	movs	r3, #0
}
 80089d8:	4618      	mov	r0, r3
 80089da:	3708      	adds	r7, #8
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd80      	pop	{r7, pc}

080089e0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b085      	sub	sp, #20
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
 80089e8:	460b      	mov	r3, r1
 80089ea:	70fb      	strb	r3, [r7, #3]
 80089ec:	4613      	mov	r3, r2
 80089ee:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80089f6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80089f8:	78fb      	ldrb	r3, [r7, #3]
 80089fa:	68fa      	ldr	r2, [r7, #12]
 80089fc:	212c      	movs	r1, #44	; 0x2c
 80089fe:	fb01 f303 	mul.w	r3, r1, r3
 8008a02:	4413      	add	r3, r2
 8008a04:	333b      	adds	r3, #59	; 0x3b
 8008a06:	781b      	ldrb	r3, [r3, #0]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d009      	beq.n	8008a20 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008a0c:	78fb      	ldrb	r3, [r7, #3]
 8008a0e:	68fa      	ldr	r2, [r7, #12]
 8008a10:	212c      	movs	r1, #44	; 0x2c
 8008a12:	fb01 f303 	mul.w	r3, r1, r3
 8008a16:	4413      	add	r3, r2
 8008a18:	3354      	adds	r3, #84	; 0x54
 8008a1a:	78ba      	ldrb	r2, [r7, #2]
 8008a1c:	701a      	strb	r2, [r3, #0]
 8008a1e:	e008      	b.n	8008a32 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008a20:	78fb      	ldrb	r3, [r7, #3]
 8008a22:	68fa      	ldr	r2, [r7, #12]
 8008a24:	212c      	movs	r1, #44	; 0x2c
 8008a26:	fb01 f303 	mul.w	r3, r1, r3
 8008a2a:	4413      	add	r3, r2
 8008a2c:	3355      	adds	r3, #85	; 0x55
 8008a2e:	78ba      	ldrb	r2, [r7, #2]
 8008a30:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008a32:	2300      	movs	r3, #0
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	3714      	adds	r7, #20
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3e:	4770      	bx	lr

08008a40 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b082      	sub	sp, #8
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f7f8 faaf 	bl	8000fac <HAL_Delay>
}
 8008a4e:	bf00      	nop
 8008a50:	3708      	adds	r7, #8
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}
	...

08008a58 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b085      	sub	sp, #20
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	4603      	mov	r3, r0
 8008a60:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008a62:	2300      	movs	r3, #0
 8008a64:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008a66:	79fb      	ldrb	r3, [r7, #7]
 8008a68:	2b03      	cmp	r3, #3
 8008a6a:	d817      	bhi.n	8008a9c <USBH_Get_USB_Status+0x44>
 8008a6c:	a201      	add	r2, pc, #4	; (adr r2, 8008a74 <USBH_Get_USB_Status+0x1c>)
 8008a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a72:	bf00      	nop
 8008a74:	08008a85 	.word	0x08008a85
 8008a78:	08008a8b 	.word	0x08008a8b
 8008a7c:	08008a91 	.word	0x08008a91
 8008a80:	08008a97 	.word	0x08008a97
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008a84:	2300      	movs	r3, #0
 8008a86:	73fb      	strb	r3, [r7, #15]
    break;
 8008a88:	e00b      	b.n	8008aa2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008a8a:	2302      	movs	r3, #2
 8008a8c:	73fb      	strb	r3, [r7, #15]
    break;
 8008a8e:	e008      	b.n	8008aa2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008a90:	2301      	movs	r3, #1
 8008a92:	73fb      	strb	r3, [r7, #15]
    break;
 8008a94:	e005      	b.n	8008aa2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008a96:	2302      	movs	r3, #2
 8008a98:	73fb      	strb	r3, [r7, #15]
    break;
 8008a9a:	e002      	b.n	8008aa2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008a9c:	2302      	movs	r3, #2
 8008a9e:	73fb      	strb	r3, [r7, #15]
    break;
 8008aa0:	bf00      	nop
  }
  return usb_status;
 8008aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3714      	adds	r7, #20
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aae:	4770      	bx	lr

08008ab0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b084      	sub	sp, #16
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008aba:	79fb      	ldrb	r3, [r7, #7]
 8008abc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008abe:	79fb      	ldrb	r3, [r7, #7]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d102      	bne.n	8008aca <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	73fb      	strb	r3, [r7, #15]
 8008ac8:	e001      	b.n	8008ace <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8008aca:	2300      	movs	r3, #0
 8008acc:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008ace:	7bfb      	ldrb	r3, [r7, #15]
 8008ad0:	461a      	mov	r2, r3
 8008ad2:	2101      	movs	r1, #1
 8008ad4:	4803      	ldr	r0, [pc, #12]	; (8008ae4 <MX_DriverVbusFS+0x34>)
 8008ad6:	f7f9 fcbd 	bl	8002454 <HAL_GPIO_WritePin>
}
 8008ada:	bf00      	nop
 8008adc:	3710      	adds	r7, #16
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}
 8008ae2:	bf00      	nop
 8008ae4:	40020800 	.word	0x40020800

08008ae8 <__errno>:
 8008ae8:	4b01      	ldr	r3, [pc, #4]	; (8008af0 <__errno+0x8>)
 8008aea:	6818      	ldr	r0, [r3, #0]
 8008aec:	4770      	bx	lr
 8008aee:	bf00      	nop
 8008af0:	2000002c 	.word	0x2000002c

08008af4 <__libc_init_array>:
 8008af4:	b570      	push	{r4, r5, r6, lr}
 8008af6:	4d0d      	ldr	r5, [pc, #52]	; (8008b2c <__libc_init_array+0x38>)
 8008af8:	4c0d      	ldr	r4, [pc, #52]	; (8008b30 <__libc_init_array+0x3c>)
 8008afa:	1b64      	subs	r4, r4, r5
 8008afc:	10a4      	asrs	r4, r4, #2
 8008afe:	2600      	movs	r6, #0
 8008b00:	42a6      	cmp	r6, r4
 8008b02:	d109      	bne.n	8008b18 <__libc_init_array+0x24>
 8008b04:	4d0b      	ldr	r5, [pc, #44]	; (8008b34 <__libc_init_array+0x40>)
 8008b06:	4c0c      	ldr	r4, [pc, #48]	; (8008b38 <__libc_init_array+0x44>)
 8008b08:	f000 f8f8 	bl	8008cfc <_init>
 8008b0c:	1b64      	subs	r4, r4, r5
 8008b0e:	10a4      	asrs	r4, r4, #2
 8008b10:	2600      	movs	r6, #0
 8008b12:	42a6      	cmp	r6, r4
 8008b14:	d105      	bne.n	8008b22 <__libc_init_array+0x2e>
 8008b16:	bd70      	pop	{r4, r5, r6, pc}
 8008b18:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b1c:	4798      	blx	r3
 8008b1e:	3601      	adds	r6, #1
 8008b20:	e7ee      	b.n	8008b00 <__libc_init_array+0xc>
 8008b22:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b26:	4798      	blx	r3
 8008b28:	3601      	adds	r6, #1
 8008b2a:	e7f2      	b.n	8008b12 <__libc_init_array+0x1e>
 8008b2c:	08008d40 	.word	0x08008d40
 8008b30:	08008d40 	.word	0x08008d40
 8008b34:	08008d40 	.word	0x08008d40
 8008b38:	08008d44 	.word	0x08008d44

08008b3c <malloc>:
 8008b3c:	4b02      	ldr	r3, [pc, #8]	; (8008b48 <malloc+0xc>)
 8008b3e:	4601      	mov	r1, r0
 8008b40:	6818      	ldr	r0, [r3, #0]
 8008b42:	f000 b863 	b.w	8008c0c <_malloc_r>
 8008b46:	bf00      	nop
 8008b48:	2000002c 	.word	0x2000002c

08008b4c <free>:
 8008b4c:	4b02      	ldr	r3, [pc, #8]	; (8008b58 <free+0xc>)
 8008b4e:	4601      	mov	r1, r0
 8008b50:	6818      	ldr	r0, [r3, #0]
 8008b52:	f000 b80b 	b.w	8008b6c <_free_r>
 8008b56:	bf00      	nop
 8008b58:	2000002c 	.word	0x2000002c

08008b5c <memset>:
 8008b5c:	4402      	add	r2, r0
 8008b5e:	4603      	mov	r3, r0
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d100      	bne.n	8008b66 <memset+0xa>
 8008b64:	4770      	bx	lr
 8008b66:	f803 1b01 	strb.w	r1, [r3], #1
 8008b6a:	e7f9      	b.n	8008b60 <memset+0x4>

08008b6c <_free_r>:
 8008b6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008b6e:	2900      	cmp	r1, #0
 8008b70:	d048      	beq.n	8008c04 <_free_r+0x98>
 8008b72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b76:	9001      	str	r0, [sp, #4]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	f1a1 0404 	sub.w	r4, r1, #4
 8008b7e:	bfb8      	it	lt
 8008b80:	18e4      	addlt	r4, r4, r3
 8008b82:	f000 f8ad 	bl	8008ce0 <__malloc_lock>
 8008b86:	4a20      	ldr	r2, [pc, #128]	; (8008c08 <_free_r+0x9c>)
 8008b88:	9801      	ldr	r0, [sp, #4]
 8008b8a:	6813      	ldr	r3, [r2, #0]
 8008b8c:	4615      	mov	r5, r2
 8008b8e:	b933      	cbnz	r3, 8008b9e <_free_r+0x32>
 8008b90:	6063      	str	r3, [r4, #4]
 8008b92:	6014      	str	r4, [r2, #0]
 8008b94:	b003      	add	sp, #12
 8008b96:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008b9a:	f000 b8a7 	b.w	8008cec <__malloc_unlock>
 8008b9e:	42a3      	cmp	r3, r4
 8008ba0:	d90b      	bls.n	8008bba <_free_r+0x4e>
 8008ba2:	6821      	ldr	r1, [r4, #0]
 8008ba4:	1862      	adds	r2, r4, r1
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	bf04      	itt	eq
 8008baa:	681a      	ldreq	r2, [r3, #0]
 8008bac:	685b      	ldreq	r3, [r3, #4]
 8008bae:	6063      	str	r3, [r4, #4]
 8008bb0:	bf04      	itt	eq
 8008bb2:	1852      	addeq	r2, r2, r1
 8008bb4:	6022      	streq	r2, [r4, #0]
 8008bb6:	602c      	str	r4, [r5, #0]
 8008bb8:	e7ec      	b.n	8008b94 <_free_r+0x28>
 8008bba:	461a      	mov	r2, r3
 8008bbc:	685b      	ldr	r3, [r3, #4]
 8008bbe:	b10b      	cbz	r3, 8008bc4 <_free_r+0x58>
 8008bc0:	42a3      	cmp	r3, r4
 8008bc2:	d9fa      	bls.n	8008bba <_free_r+0x4e>
 8008bc4:	6811      	ldr	r1, [r2, #0]
 8008bc6:	1855      	adds	r5, r2, r1
 8008bc8:	42a5      	cmp	r5, r4
 8008bca:	d10b      	bne.n	8008be4 <_free_r+0x78>
 8008bcc:	6824      	ldr	r4, [r4, #0]
 8008bce:	4421      	add	r1, r4
 8008bd0:	1854      	adds	r4, r2, r1
 8008bd2:	42a3      	cmp	r3, r4
 8008bd4:	6011      	str	r1, [r2, #0]
 8008bd6:	d1dd      	bne.n	8008b94 <_free_r+0x28>
 8008bd8:	681c      	ldr	r4, [r3, #0]
 8008bda:	685b      	ldr	r3, [r3, #4]
 8008bdc:	6053      	str	r3, [r2, #4]
 8008bde:	4421      	add	r1, r4
 8008be0:	6011      	str	r1, [r2, #0]
 8008be2:	e7d7      	b.n	8008b94 <_free_r+0x28>
 8008be4:	d902      	bls.n	8008bec <_free_r+0x80>
 8008be6:	230c      	movs	r3, #12
 8008be8:	6003      	str	r3, [r0, #0]
 8008bea:	e7d3      	b.n	8008b94 <_free_r+0x28>
 8008bec:	6825      	ldr	r5, [r4, #0]
 8008bee:	1961      	adds	r1, r4, r5
 8008bf0:	428b      	cmp	r3, r1
 8008bf2:	bf04      	itt	eq
 8008bf4:	6819      	ldreq	r1, [r3, #0]
 8008bf6:	685b      	ldreq	r3, [r3, #4]
 8008bf8:	6063      	str	r3, [r4, #4]
 8008bfa:	bf04      	itt	eq
 8008bfc:	1949      	addeq	r1, r1, r5
 8008bfe:	6021      	streq	r1, [r4, #0]
 8008c00:	6054      	str	r4, [r2, #4]
 8008c02:	e7c7      	b.n	8008b94 <_free_r+0x28>
 8008c04:	b003      	add	sp, #12
 8008c06:	bd30      	pop	{r4, r5, pc}
 8008c08:	200000b4 	.word	0x200000b4

08008c0c <_malloc_r>:
 8008c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c0e:	1ccd      	adds	r5, r1, #3
 8008c10:	f025 0503 	bic.w	r5, r5, #3
 8008c14:	3508      	adds	r5, #8
 8008c16:	2d0c      	cmp	r5, #12
 8008c18:	bf38      	it	cc
 8008c1a:	250c      	movcc	r5, #12
 8008c1c:	2d00      	cmp	r5, #0
 8008c1e:	4606      	mov	r6, r0
 8008c20:	db01      	blt.n	8008c26 <_malloc_r+0x1a>
 8008c22:	42a9      	cmp	r1, r5
 8008c24:	d903      	bls.n	8008c2e <_malloc_r+0x22>
 8008c26:	230c      	movs	r3, #12
 8008c28:	6033      	str	r3, [r6, #0]
 8008c2a:	2000      	movs	r0, #0
 8008c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c2e:	f000 f857 	bl	8008ce0 <__malloc_lock>
 8008c32:	4921      	ldr	r1, [pc, #132]	; (8008cb8 <_malloc_r+0xac>)
 8008c34:	680a      	ldr	r2, [r1, #0]
 8008c36:	4614      	mov	r4, r2
 8008c38:	b99c      	cbnz	r4, 8008c62 <_malloc_r+0x56>
 8008c3a:	4f20      	ldr	r7, [pc, #128]	; (8008cbc <_malloc_r+0xb0>)
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	b923      	cbnz	r3, 8008c4a <_malloc_r+0x3e>
 8008c40:	4621      	mov	r1, r4
 8008c42:	4630      	mov	r0, r6
 8008c44:	f000 f83c 	bl	8008cc0 <_sbrk_r>
 8008c48:	6038      	str	r0, [r7, #0]
 8008c4a:	4629      	mov	r1, r5
 8008c4c:	4630      	mov	r0, r6
 8008c4e:	f000 f837 	bl	8008cc0 <_sbrk_r>
 8008c52:	1c43      	adds	r3, r0, #1
 8008c54:	d123      	bne.n	8008c9e <_malloc_r+0x92>
 8008c56:	230c      	movs	r3, #12
 8008c58:	6033      	str	r3, [r6, #0]
 8008c5a:	4630      	mov	r0, r6
 8008c5c:	f000 f846 	bl	8008cec <__malloc_unlock>
 8008c60:	e7e3      	b.n	8008c2a <_malloc_r+0x1e>
 8008c62:	6823      	ldr	r3, [r4, #0]
 8008c64:	1b5b      	subs	r3, r3, r5
 8008c66:	d417      	bmi.n	8008c98 <_malloc_r+0x8c>
 8008c68:	2b0b      	cmp	r3, #11
 8008c6a:	d903      	bls.n	8008c74 <_malloc_r+0x68>
 8008c6c:	6023      	str	r3, [r4, #0]
 8008c6e:	441c      	add	r4, r3
 8008c70:	6025      	str	r5, [r4, #0]
 8008c72:	e004      	b.n	8008c7e <_malloc_r+0x72>
 8008c74:	6863      	ldr	r3, [r4, #4]
 8008c76:	42a2      	cmp	r2, r4
 8008c78:	bf0c      	ite	eq
 8008c7a:	600b      	streq	r3, [r1, #0]
 8008c7c:	6053      	strne	r3, [r2, #4]
 8008c7e:	4630      	mov	r0, r6
 8008c80:	f000 f834 	bl	8008cec <__malloc_unlock>
 8008c84:	f104 000b 	add.w	r0, r4, #11
 8008c88:	1d23      	adds	r3, r4, #4
 8008c8a:	f020 0007 	bic.w	r0, r0, #7
 8008c8e:	1ac2      	subs	r2, r0, r3
 8008c90:	d0cc      	beq.n	8008c2c <_malloc_r+0x20>
 8008c92:	1a1b      	subs	r3, r3, r0
 8008c94:	50a3      	str	r3, [r4, r2]
 8008c96:	e7c9      	b.n	8008c2c <_malloc_r+0x20>
 8008c98:	4622      	mov	r2, r4
 8008c9a:	6864      	ldr	r4, [r4, #4]
 8008c9c:	e7cc      	b.n	8008c38 <_malloc_r+0x2c>
 8008c9e:	1cc4      	adds	r4, r0, #3
 8008ca0:	f024 0403 	bic.w	r4, r4, #3
 8008ca4:	42a0      	cmp	r0, r4
 8008ca6:	d0e3      	beq.n	8008c70 <_malloc_r+0x64>
 8008ca8:	1a21      	subs	r1, r4, r0
 8008caa:	4630      	mov	r0, r6
 8008cac:	f000 f808 	bl	8008cc0 <_sbrk_r>
 8008cb0:	3001      	adds	r0, #1
 8008cb2:	d1dd      	bne.n	8008c70 <_malloc_r+0x64>
 8008cb4:	e7cf      	b.n	8008c56 <_malloc_r+0x4a>
 8008cb6:	bf00      	nop
 8008cb8:	200000b4 	.word	0x200000b4
 8008cbc:	200000b8 	.word	0x200000b8

08008cc0 <_sbrk_r>:
 8008cc0:	b538      	push	{r3, r4, r5, lr}
 8008cc2:	4d06      	ldr	r5, [pc, #24]	; (8008cdc <_sbrk_r+0x1c>)
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	4604      	mov	r4, r0
 8008cc8:	4608      	mov	r0, r1
 8008cca:	602b      	str	r3, [r5, #0]
 8008ccc:	f7f8 f88a 	bl	8000de4 <_sbrk>
 8008cd0:	1c43      	adds	r3, r0, #1
 8008cd2:	d102      	bne.n	8008cda <_sbrk_r+0x1a>
 8008cd4:	682b      	ldr	r3, [r5, #0]
 8008cd6:	b103      	cbz	r3, 8008cda <_sbrk_r+0x1a>
 8008cd8:	6023      	str	r3, [r4, #0]
 8008cda:	bd38      	pop	{r3, r4, r5, pc}
 8008cdc:	2000093c 	.word	0x2000093c

08008ce0 <__malloc_lock>:
 8008ce0:	4801      	ldr	r0, [pc, #4]	; (8008ce8 <__malloc_lock+0x8>)
 8008ce2:	f000 b809 	b.w	8008cf8 <__retarget_lock_acquire_recursive>
 8008ce6:	bf00      	nop
 8008ce8:	20000944 	.word	0x20000944

08008cec <__malloc_unlock>:
 8008cec:	4801      	ldr	r0, [pc, #4]	; (8008cf4 <__malloc_unlock+0x8>)
 8008cee:	f000 b804 	b.w	8008cfa <__retarget_lock_release_recursive>
 8008cf2:	bf00      	nop
 8008cf4:	20000944 	.word	0x20000944

08008cf8 <__retarget_lock_acquire_recursive>:
 8008cf8:	4770      	bx	lr

08008cfa <__retarget_lock_release_recursive>:
 8008cfa:	4770      	bx	lr

08008cfc <_init>:
 8008cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cfe:	bf00      	nop
 8008d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d02:	bc08      	pop	{r3}
 8008d04:	469e      	mov	lr, r3
 8008d06:	4770      	bx	lr

08008d08 <_fini>:
 8008d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d0a:	bf00      	nop
 8008d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d0e:	bc08      	pop	{r3}
 8008d10:	469e      	mov	lr, r3
 8008d12:	4770      	bx	lr
