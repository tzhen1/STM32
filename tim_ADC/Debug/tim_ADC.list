
tim_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008cc0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08008e48  08008e48  00018e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e64  08008e64  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08008e64  08008e64  00018e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e6c  08008e6c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e6c  08008e6c  00018e6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e70  08008e70  00018e70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08008e74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          000008a4  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000934  20000934  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020ff1  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004433  00000000  00000000  000410b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017f8  00000000  00000000  000454e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001658  00000000  00000000  00046ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026324  00000000  00000000  00048338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f068  00000000  00000000  0006e65c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e07b0  00000000  00000000  0008d6c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0016de74  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000067e0  00000000  00000000  0016dec8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008e30 	.word	0x08008e30

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08008e30 	.word	0x08008e30

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f000 fd20 	bl	8000f08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f81c 	bl	8000504 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 f9ba 	bl	8000844 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d0:	f000 f8d8 	bl	8000684 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004d4:	f000 f904 	bl	80006e0 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004d8:	f000 f932 	bl	8000740 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004dc:	f008 f896 	bl	800860c <MX_USB_HOST_Init>
  MX_ADC1_Init();
 80004e0:	f000 f87e 	bl	80005e0 <MX_ADC1_Init>
  MX_TIM2_Init();
 80004e4:	f000 f962 	bl	80007ac <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  //start timer and adc (as interrupt)
  HAL_TIM_Base_Start(&htim2); //timer handletypedef defined at top
 80004e8:	4804      	ldr	r0, [pc, #16]	; (80004fc <main+0x3c>)
 80004ea:	f004 fefd 	bl	80052e8 <HAL_TIM_Base_Start>
  HAL_ADC_Start_IT(&hadc1); //start interrupt
 80004ee:	4804      	ldr	r0, [pc, #16]	; (8000500 <main+0x40>)
 80004f0:	f000 fde4 	bl	80010bc <HAL_ADC_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80004f4:	f008 f8b0 	bl	8008658 <MX_USB_HOST_Process>
 80004f8:	e7fc      	b.n	80004f4 <main+0x34>
 80004fa:	bf00      	nop
 80004fc:	200001b0 	.word	0x200001b0
 8000500:	20000110 	.word	0x20000110

08000504 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b094      	sub	sp, #80	; 0x50
 8000508:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050a:	f107 0320 	add.w	r3, r7, #32
 800050e:	2230      	movs	r2, #48	; 0x30
 8000510:	2100      	movs	r1, #0
 8000512:	4618      	mov	r0, r3
 8000514:	f008 fbbc 	bl	8008c90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000518:	f107 030c 	add.w	r3, r7, #12
 800051c:	2200      	movs	r2, #0
 800051e:	601a      	str	r2, [r3, #0]
 8000520:	605a      	str	r2, [r3, #4]
 8000522:	609a      	str	r2, [r3, #8]
 8000524:	60da      	str	r2, [r3, #12]
 8000526:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000528:	2300      	movs	r3, #0
 800052a:	60bb      	str	r3, [r7, #8]
 800052c:	4b2a      	ldr	r3, [pc, #168]	; (80005d8 <SystemClock_Config+0xd4>)
 800052e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000530:	4a29      	ldr	r2, [pc, #164]	; (80005d8 <SystemClock_Config+0xd4>)
 8000532:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000536:	6413      	str	r3, [r2, #64]	; 0x40
 8000538:	4b27      	ldr	r3, [pc, #156]	; (80005d8 <SystemClock_Config+0xd4>)
 800053a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800053c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000540:	60bb      	str	r3, [r7, #8]
 8000542:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000544:	2300      	movs	r3, #0
 8000546:	607b      	str	r3, [r7, #4]
 8000548:	4b24      	ldr	r3, [pc, #144]	; (80005dc <SystemClock_Config+0xd8>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a23      	ldr	r2, [pc, #140]	; (80005dc <SystemClock_Config+0xd8>)
 800054e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000552:	6013      	str	r3, [r2, #0]
 8000554:	4b21      	ldr	r3, [pc, #132]	; (80005dc <SystemClock_Config+0xd8>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800055c:	607b      	str	r3, [r7, #4]
 800055e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000560:	2303      	movs	r3, #3
 8000562:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000564:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000568:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800056a:	2301      	movs	r3, #1
 800056c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800056e:	2310      	movs	r3, #16
 8000570:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000572:	2302      	movs	r3, #2
 8000574:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000576:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800057a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800057c:	2308      	movs	r3, #8
 800057e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000580:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000584:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000586:	2302      	movs	r3, #2
 8000588:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800058a:	2307      	movs	r3, #7
 800058c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058e:	f107 0320 	add.w	r3, r7, #32
 8000592:	4618      	mov	r0, r3
 8000594:	f004 f830 	bl	80045f8 <HAL_RCC_OscConfig>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800059e:	f000 fa59 	bl	8000a54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a2:	230f      	movs	r3, #15
 80005a4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005a6:	2300      	movs	r3, #0
 80005a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005aa:	2300      	movs	r3, #0
 80005ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ae:	2300      	movs	r3, #0
 80005b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005b8:	f107 030c 	add.w	r3, r7, #12
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f004 fa92 	bl	8004ae8 <HAL_RCC_ClockConfig>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <SystemClock_Config+0xca>
  {
    Error_Handler();
 80005ca:	f000 fa43 	bl	8000a54 <Error_Handler>
  }
}
 80005ce:	bf00      	nop
 80005d0:	3750      	adds	r7, #80	; 0x50
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	40023800 	.word	0x40023800
 80005dc:	40007000 	.word	0x40007000

080005e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005e6:	463b      	mov	r3, r7
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005f2:	4b22      	ldr	r3, [pc, #136]	; (800067c <MX_ADC1_Init+0x9c>)
 80005f4:	4a22      	ldr	r2, [pc, #136]	; (8000680 <MX_ADC1_Init+0xa0>)
 80005f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80005f8:	4b20      	ldr	r3, [pc, #128]	; (800067c <MX_ADC1_Init+0x9c>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 80005fe:	4b1f      	ldr	r3, [pc, #124]	; (800067c <MX_ADC1_Init+0x9c>)
 8000600:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000604:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000606:	4b1d      	ldr	r3, [pc, #116]	; (800067c <MX_ADC1_Init+0x9c>)
 8000608:	2200      	movs	r2, #0
 800060a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800060c:	4b1b      	ldr	r3, [pc, #108]	; (800067c <MX_ADC1_Init+0x9c>)
 800060e:	2200      	movs	r2, #0
 8000610:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000612:	4b1a      	ldr	r3, [pc, #104]	; (800067c <MX_ADC1_Init+0x9c>)
 8000614:	2200      	movs	r2, #0
 8000616:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800061a:	4b18      	ldr	r3, [pc, #96]	; (800067c <MX_ADC1_Init+0x9c>)
 800061c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000620:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000622:	4b16      	ldr	r3, [pc, #88]	; (800067c <MX_ADC1_Init+0x9c>)
 8000624:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000628:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800062a:	4b14      	ldr	r3, [pc, #80]	; (800067c <MX_ADC1_Init+0x9c>)
 800062c:	2200      	movs	r2, #0
 800062e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000630:	4b12      	ldr	r3, [pc, #72]	; (800067c <MX_ADC1_Init+0x9c>)
 8000632:	2201      	movs	r2, #1
 8000634:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000636:	4b11      	ldr	r3, [pc, #68]	; (800067c <MX_ADC1_Init+0x9c>)
 8000638:	2200      	movs	r2, #0
 800063a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800063e:	4b0f      	ldr	r3, [pc, #60]	; (800067c <MX_ADC1_Init+0x9c>)
 8000640:	2201      	movs	r2, #1
 8000642:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000644:	480d      	ldr	r0, [pc, #52]	; (800067c <MX_ADC1_Init+0x9c>)
 8000646:	f000 fcf5 	bl	8001034 <HAL_ADC_Init>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000650:	f000 fa00 	bl	8000a54 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000654:	2300      	movs	r3, #0
 8000656:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000658:	2301      	movs	r3, #1
 800065a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 800065c:	2302      	movs	r3, #2
 800065e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000660:	463b      	mov	r3, r7
 8000662:	4619      	mov	r1, r3
 8000664:	4805      	ldr	r0, [pc, #20]	; (800067c <MX_ADC1_Init+0x9c>)
 8000666:	f000 ff69 	bl	800153c <HAL_ADC_ConfigChannel>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000670:	f000 f9f0 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000674:	bf00      	nop
 8000676:	3710      	adds	r7, #16
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	20000110 	.word	0x20000110
 8000680:	40012000 	.word	0x40012000

08000684 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000688:	4b12      	ldr	r3, [pc, #72]	; (80006d4 <MX_I2C1_Init+0x50>)
 800068a:	4a13      	ldr	r2, [pc, #76]	; (80006d8 <MX_I2C1_Init+0x54>)
 800068c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800068e:	4b11      	ldr	r3, [pc, #68]	; (80006d4 <MX_I2C1_Init+0x50>)
 8000690:	4a12      	ldr	r2, [pc, #72]	; (80006dc <MX_I2C1_Init+0x58>)
 8000692:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000694:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <MX_I2C1_Init+0x50>)
 8000696:	2200      	movs	r2, #0
 8000698:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800069a:	4b0e      	ldr	r3, [pc, #56]	; (80006d4 <MX_I2C1_Init+0x50>)
 800069c:	2200      	movs	r2, #0
 800069e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006a0:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <MX_I2C1_Init+0x50>)
 80006a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006a8:	4b0a      	ldr	r3, [pc, #40]	; (80006d4 <MX_I2C1_Init+0x50>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006ae:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <MX_I2C1_Init+0x50>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006b4:	4b07      	ldr	r3, [pc, #28]	; (80006d4 <MX_I2C1_Init+0x50>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006ba:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <MX_I2C1_Init+0x50>)
 80006bc:	2200      	movs	r2, #0
 80006be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006c0:	4804      	ldr	r0, [pc, #16]	; (80006d4 <MX_I2C1_Init+0x50>)
 80006c2:	f003 f9b5 	bl	8003a30 <HAL_I2C_Init>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006cc:	f000 f9c2 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006d0:	bf00      	nop
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	200000bc 	.word	0x200000bc
 80006d8:	40005400 	.word	0x40005400
 80006dc:	000186a0 	.word	0x000186a0

080006e0 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80006e4:	4b13      	ldr	r3, [pc, #76]	; (8000734 <MX_I2S3_Init+0x54>)
 80006e6:	4a14      	ldr	r2, [pc, #80]	; (8000738 <MX_I2S3_Init+0x58>)
 80006e8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80006ea:	4b12      	ldr	r3, [pc, #72]	; (8000734 <MX_I2S3_Init+0x54>)
 80006ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006f0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80006f2:	4b10      	ldr	r3, [pc, #64]	; (8000734 <MX_I2S3_Init+0x54>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006f8:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <MX_I2S3_Init+0x54>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80006fe:	4b0d      	ldr	r3, [pc, #52]	; (8000734 <MX_I2S3_Init+0x54>)
 8000700:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000704:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000706:	4b0b      	ldr	r3, [pc, #44]	; (8000734 <MX_I2S3_Init+0x54>)
 8000708:	4a0c      	ldr	r2, [pc, #48]	; (800073c <MX_I2S3_Init+0x5c>)
 800070a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800070c:	4b09      	ldr	r3, [pc, #36]	; (8000734 <MX_I2S3_Init+0x54>)
 800070e:	2200      	movs	r2, #0
 8000710:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000712:	4b08      	ldr	r3, [pc, #32]	; (8000734 <MX_I2S3_Init+0x54>)
 8000714:	2200      	movs	r2, #0
 8000716:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000718:	4b06      	ldr	r3, [pc, #24]	; (8000734 <MX_I2S3_Init+0x54>)
 800071a:	2200      	movs	r2, #0
 800071c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800071e:	4805      	ldr	r0, [pc, #20]	; (8000734 <MX_I2S3_Init+0x54>)
 8000720:	f003 faca 	bl	8003cb8 <HAL_I2S_Init>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800072a:	f000 f993 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	200001fc 	.word	0x200001fc
 8000738:	40003c00 	.word	0x40003c00
 800073c:	00017700 	.word	0x00017700

08000740 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000744:	4b17      	ldr	r3, [pc, #92]	; (80007a4 <MX_SPI1_Init+0x64>)
 8000746:	4a18      	ldr	r2, [pc, #96]	; (80007a8 <MX_SPI1_Init+0x68>)
 8000748:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800074a:	4b16      	ldr	r3, [pc, #88]	; (80007a4 <MX_SPI1_Init+0x64>)
 800074c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000750:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000752:	4b14      	ldr	r3, [pc, #80]	; (80007a4 <MX_SPI1_Init+0x64>)
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000758:	4b12      	ldr	r3, [pc, #72]	; (80007a4 <MX_SPI1_Init+0x64>)
 800075a:	2200      	movs	r2, #0
 800075c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800075e:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <MX_SPI1_Init+0x64>)
 8000760:	2200      	movs	r2, #0
 8000762:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000764:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <MX_SPI1_Init+0x64>)
 8000766:	2200      	movs	r2, #0
 8000768:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800076a:	4b0e      	ldr	r3, [pc, #56]	; (80007a4 <MX_SPI1_Init+0x64>)
 800076c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000770:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000772:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <MX_SPI1_Init+0x64>)
 8000774:	2200      	movs	r2, #0
 8000776:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000778:	4b0a      	ldr	r3, [pc, #40]	; (80007a4 <MX_SPI1_Init+0x64>)
 800077a:	2200      	movs	r2, #0
 800077c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800077e:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <MX_SPI1_Init+0x64>)
 8000780:	2200      	movs	r2, #0
 8000782:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000784:	4b07      	ldr	r3, [pc, #28]	; (80007a4 <MX_SPI1_Init+0x64>)
 8000786:	2200      	movs	r2, #0
 8000788:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800078a:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <MX_SPI1_Init+0x64>)
 800078c:	220a      	movs	r2, #10
 800078e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000790:	4804      	ldr	r0, [pc, #16]	; (80007a4 <MX_SPI1_Init+0x64>)
 8000792:	f004 fcd1 	bl	8005138 <HAL_SPI_Init>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800079c:	f000 f95a 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007a0:	bf00      	nop
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	20000158 	.word	0x20000158
 80007a8:	40013000 	.word	0x40013000

080007ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b086      	sub	sp, #24
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007b2:	f107 0308 	add.w	r3, r7, #8
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007c0:	463b      	mov	r3, r7
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007c8:	4b1d      	ldr	r3, [pc, #116]	; (8000840 <MX_TIM2_Init+0x94>)
 80007ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16000;
 80007d0:	4b1b      	ldr	r3, [pc, #108]	; (8000840 <MX_TIM2_Init+0x94>)
 80007d2:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80007d6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d8:	4b19      	ldr	r3, [pc, #100]	; (8000840 <MX_TIM2_Init+0x94>)
 80007da:	2200      	movs	r2, #0
 80007dc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 80007de:	4b18      	ldr	r3, [pc, #96]	; (8000840 <MX_TIM2_Init+0x94>)
 80007e0:	2264      	movs	r2, #100	; 0x64
 80007e2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007e4:	4b16      	ldr	r3, [pc, #88]	; (8000840 <MX_TIM2_Init+0x94>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ea:	4b15      	ldr	r3, [pc, #84]	; (8000840 <MX_TIM2_Init+0x94>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007f0:	4813      	ldr	r0, [pc, #76]	; (8000840 <MX_TIM2_Init+0x94>)
 80007f2:	f004 fd2a 	bl	800524a <HAL_TIM_Base_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80007fc:	f000 f92a 	bl	8000a54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000800:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000804:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000806:	f107 0308 	add.w	r3, r7, #8
 800080a:	4619      	mov	r1, r3
 800080c:	480c      	ldr	r0, [pc, #48]	; (8000840 <MX_TIM2_Init+0x94>)
 800080e:	f004 fdd3 	bl	80053b8 <HAL_TIM_ConfigClockSource>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000818:	f000 f91c 	bl	8000a54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800081c:	2320      	movs	r3, #32
 800081e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000820:	2300      	movs	r3, #0
 8000822:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000824:	463b      	mov	r3, r7
 8000826:	4619      	mov	r1, r3
 8000828:	4805      	ldr	r0, [pc, #20]	; (8000840 <MX_TIM2_Init+0x94>)
 800082a:	f004 ffc7 	bl	80057bc <HAL_TIMEx_MasterConfigSynchronization>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000834:	f000 f90e 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000838:	bf00      	nop
 800083a:	3718      	adds	r7, #24
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	200001b0 	.word	0x200001b0

08000844 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b08c      	sub	sp, #48	; 0x30
 8000848:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084a:	f107 031c 	add.w	r3, r7, #28
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	605a      	str	r2, [r3, #4]
 8000854:	609a      	str	r2, [r3, #8]
 8000856:	60da      	str	r2, [r3, #12]
 8000858:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	61bb      	str	r3, [r7, #24]
 800085e:	4b6b      	ldr	r3, [pc, #428]	; (8000a0c <MX_GPIO_Init+0x1c8>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a6a      	ldr	r2, [pc, #424]	; (8000a0c <MX_GPIO_Init+0x1c8>)
 8000864:	f043 0310 	orr.w	r3, r3, #16
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b68      	ldr	r3, [pc, #416]	; (8000a0c <MX_GPIO_Init+0x1c8>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f003 0310 	and.w	r3, r3, #16
 8000872:	61bb      	str	r3, [r7, #24]
 8000874:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	617b      	str	r3, [r7, #20]
 800087a:	4b64      	ldr	r3, [pc, #400]	; (8000a0c <MX_GPIO_Init+0x1c8>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a63      	ldr	r2, [pc, #396]	; (8000a0c <MX_GPIO_Init+0x1c8>)
 8000880:	f043 0304 	orr.w	r3, r3, #4
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b61      	ldr	r3, [pc, #388]	; (8000a0c <MX_GPIO_Init+0x1c8>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0304 	and.w	r3, r3, #4
 800088e:	617b      	str	r3, [r7, #20]
 8000890:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	613b      	str	r3, [r7, #16]
 8000896:	4b5d      	ldr	r3, [pc, #372]	; (8000a0c <MX_GPIO_Init+0x1c8>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a5c      	ldr	r2, [pc, #368]	; (8000a0c <MX_GPIO_Init+0x1c8>)
 800089c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b5a      	ldr	r3, [pc, #360]	; (8000a0c <MX_GPIO_Init+0x1c8>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008aa:	613b      	str	r3, [r7, #16]
 80008ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	60fb      	str	r3, [r7, #12]
 80008b2:	4b56      	ldr	r3, [pc, #344]	; (8000a0c <MX_GPIO_Init+0x1c8>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4a55      	ldr	r2, [pc, #340]	; (8000a0c <MX_GPIO_Init+0x1c8>)
 80008b8:	f043 0301 	orr.w	r3, r3, #1
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
 80008be:	4b53      	ldr	r3, [pc, #332]	; (8000a0c <MX_GPIO_Init+0x1c8>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	f003 0301 	and.w	r3, r3, #1
 80008c6:	60fb      	str	r3, [r7, #12]
 80008c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	60bb      	str	r3, [r7, #8]
 80008ce:	4b4f      	ldr	r3, [pc, #316]	; (8000a0c <MX_GPIO_Init+0x1c8>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	4a4e      	ldr	r2, [pc, #312]	; (8000a0c <MX_GPIO_Init+0x1c8>)
 80008d4:	f043 0302 	orr.w	r3, r3, #2
 80008d8:	6313      	str	r3, [r2, #48]	; 0x30
 80008da:	4b4c      	ldr	r3, [pc, #304]	; (8000a0c <MX_GPIO_Init+0x1c8>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	f003 0302 	and.w	r3, r3, #2
 80008e2:	60bb      	str	r3, [r7, #8]
 80008e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	607b      	str	r3, [r7, #4]
 80008ea:	4b48      	ldr	r3, [pc, #288]	; (8000a0c <MX_GPIO_Init+0x1c8>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	4a47      	ldr	r2, [pc, #284]	; (8000a0c <MX_GPIO_Init+0x1c8>)
 80008f0:	f043 0308 	orr.w	r3, r3, #8
 80008f4:	6313      	str	r3, [r2, #48]	; 0x30
 80008f6:	4b45      	ldr	r3, [pc, #276]	; (8000a0c <MX_GPIO_Init+0x1c8>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	f003 0308 	and.w	r3, r3, #8
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000902:	2200      	movs	r2, #0
 8000904:	2108      	movs	r1, #8
 8000906:	4842      	ldr	r0, [pc, #264]	; (8000a10 <MX_GPIO_Init+0x1cc>)
 8000908:	f001 faee 	bl	8001ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800090c:	2201      	movs	r2, #1
 800090e:	2101      	movs	r1, #1
 8000910:	4840      	ldr	r0, [pc, #256]	; (8000a14 <MX_GPIO_Init+0x1d0>)
 8000912:	f001 fae9 	bl	8001ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000916:	2200      	movs	r2, #0
 8000918:	f24f 0110 	movw	r1, #61456	; 0xf010
 800091c:	483e      	ldr	r0, [pc, #248]	; (8000a18 <MX_GPIO_Init+0x1d4>)
 800091e:	f001 fae3 	bl	8001ee8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000922:	2308      	movs	r3, #8
 8000924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000926:	2301      	movs	r3, #1
 8000928:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092e:	2300      	movs	r3, #0
 8000930:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000932:	f107 031c 	add.w	r3, r7, #28
 8000936:	4619      	mov	r1, r3
 8000938:	4835      	ldr	r0, [pc, #212]	; (8000a10 <MX_GPIO_Init+0x1cc>)
 800093a:	f001 f939 	bl	8001bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800093e:	2301      	movs	r3, #1
 8000940:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000942:	2301      	movs	r3, #1
 8000944:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094a:	2300      	movs	r3, #0
 800094c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800094e:	f107 031c 	add.w	r3, r7, #28
 8000952:	4619      	mov	r1, r3
 8000954:	482f      	ldr	r0, [pc, #188]	; (8000a14 <MX_GPIO_Init+0x1d0>)
 8000956:	f001 f92b 	bl	8001bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800095a:	2308      	movs	r3, #8
 800095c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095e:	2302      	movs	r3, #2
 8000960:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000966:	2300      	movs	r3, #0
 8000968:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800096a:	2305      	movs	r3, #5
 800096c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800096e:	f107 031c 	add.w	r3, r7, #28
 8000972:	4619      	mov	r1, r3
 8000974:	4827      	ldr	r0, [pc, #156]	; (8000a14 <MX_GPIO_Init+0x1d0>)
 8000976:	f001 f91b 	bl	8001bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800097a:	2304      	movs	r3, #4
 800097c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800097e:	2300      	movs	r3, #0
 8000980:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000986:	f107 031c 	add.w	r3, r7, #28
 800098a:	4619      	mov	r1, r3
 800098c:	4823      	ldr	r0, [pc, #140]	; (8000a1c <MX_GPIO_Init+0x1d8>)
 800098e:	f001 f90f 	bl	8001bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000992:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000996:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000998:	2302      	movs	r3, #2
 800099a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a0:	2300      	movs	r3, #0
 80009a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009a4:	2305      	movs	r3, #5
 80009a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80009a8:	f107 031c 	add.w	r3, r7, #28
 80009ac:	4619      	mov	r1, r3
 80009ae:	481b      	ldr	r0, [pc, #108]	; (8000a1c <MX_GPIO_Init+0x1d8>)
 80009b0:	f001 f8fe 	bl	8001bb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009b4:	f24f 0310 	movw	r3, #61456	; 0xf010
 80009b8:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ba:	2301      	movs	r3, #1
 80009bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c2:	2300      	movs	r3, #0
 80009c4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009c6:	f107 031c 	add.w	r3, r7, #28
 80009ca:	4619      	mov	r1, r3
 80009cc:	4812      	ldr	r0, [pc, #72]	; (8000a18 <MX_GPIO_Init+0x1d4>)
 80009ce:	f001 f8ef 	bl	8001bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009d2:	2320      	movs	r3, #32
 80009d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d6:	2300      	movs	r3, #0
 80009d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009de:	f107 031c 	add.w	r3, r7, #28
 80009e2:	4619      	mov	r1, r3
 80009e4:	480c      	ldr	r0, [pc, #48]	; (8000a18 <MX_GPIO_Init+0x1d4>)
 80009e6:	f001 f8e3 	bl	8001bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009ea:	2302      	movs	r3, #2
 80009ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009ee:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009f8:	f107 031c 	add.w	r3, r7, #28
 80009fc:	4619      	mov	r1, r3
 80009fe:	4804      	ldr	r0, [pc, #16]	; (8000a10 <MX_GPIO_Init+0x1cc>)
 8000a00:	f001 f8d6 	bl	8001bb0 <HAL_GPIO_Init>

}
 8000a04:	bf00      	nop
 8000a06:	3730      	adds	r7, #48	; 0x30
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	40023800 	.word	0x40023800
 8000a10:	40021000 	.word	0x40021000
 8000a14:	40020800 	.word	0x40020800
 8000a18:	40020c00 	.word	0x40020c00
 8000a1c:	40020400 	.word	0x40020400

08000a20 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

//adc conversion complete callback function, jumps in when a value gets converted
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */

  //read adcValue
  adcValue = HAL_ADC_GetValue(&hadc1);
 8000a28:	4807      	ldr	r0, [pc, #28]	; (8000a48 <HAL_ADC_ConvCpltCallback+0x28>)
 8000a2a:	f000 fd66 	bl	80014fa <HAL_ADC_GetValue>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	b2da      	uxtb	r2, r3
 8000a32:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <HAL_ADC_ConvCpltCallback+0x2c>)
 8000a34:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12); //show led
 8000a36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a3a:	4805      	ldr	r0, [pc, #20]	; (8000a50 <HAL_ADC_ConvCpltCallback+0x30>)
 8000a3c:	f001 fa6d 	bl	8001f1a <HAL_GPIO_TogglePin>


}
 8000a40:	bf00      	nop
 8000a42:	3708      	adds	r7, #8
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	20000110 	.word	0x20000110
 8000a4c:	200001f8 	.word	0x200001f8
 8000a50:	40020c00 	.word	0x40020c00

08000a54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a58:	b672      	cpsid	i
}
 8000a5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a5c:	e7fe      	b.n	8000a5c <Error_Handler+0x8>
	...

08000a60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	607b      	str	r3, [r7, #4]
 8000a6a:	4b10      	ldr	r3, [pc, #64]	; (8000aac <HAL_MspInit+0x4c>)
 8000a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a6e:	4a0f      	ldr	r2, [pc, #60]	; (8000aac <HAL_MspInit+0x4c>)
 8000a70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a74:	6453      	str	r3, [r2, #68]	; 0x44
 8000a76:	4b0d      	ldr	r3, [pc, #52]	; (8000aac <HAL_MspInit+0x4c>)
 8000a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a7e:	607b      	str	r3, [r7, #4]
 8000a80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	603b      	str	r3, [r7, #0]
 8000a86:	4b09      	ldr	r3, [pc, #36]	; (8000aac <HAL_MspInit+0x4c>)
 8000a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8a:	4a08      	ldr	r2, [pc, #32]	; (8000aac <HAL_MspInit+0x4c>)
 8000a8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a90:	6413      	str	r3, [r2, #64]	; 0x40
 8000a92:	4b06      	ldr	r3, [pc, #24]	; (8000aac <HAL_MspInit+0x4c>)
 8000a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a9a:	603b      	str	r3, [r7, #0]
 8000a9c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a9e:	2007      	movs	r0, #7
 8000aa0:	f001 f844 	bl	8001b2c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa4:	bf00      	nop
 8000aa6:	3708      	adds	r7, #8
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	40023800 	.word	0x40023800

08000ab0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b08a      	sub	sp, #40	; 0x28
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab8:	f107 0314 	add.w	r3, r7, #20
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	605a      	str	r2, [r3, #4]
 8000ac2:	609a      	str	r2, [r3, #8]
 8000ac4:	60da      	str	r2, [r3, #12]
 8000ac6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a1b      	ldr	r2, [pc, #108]	; (8000b3c <HAL_ADC_MspInit+0x8c>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d12f      	bne.n	8000b32 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	613b      	str	r3, [r7, #16]
 8000ad6:	4b1a      	ldr	r3, [pc, #104]	; (8000b40 <HAL_ADC_MspInit+0x90>)
 8000ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ada:	4a19      	ldr	r2, [pc, #100]	; (8000b40 <HAL_ADC_MspInit+0x90>)
 8000adc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ae0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ae2:	4b17      	ldr	r3, [pc, #92]	; (8000b40 <HAL_ADC_MspInit+0x90>)
 8000ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000aea:	613b      	str	r3, [r7, #16]
 8000aec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	60fb      	str	r3, [r7, #12]
 8000af2:	4b13      	ldr	r3, [pc, #76]	; (8000b40 <HAL_ADC_MspInit+0x90>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	4a12      	ldr	r2, [pc, #72]	; (8000b40 <HAL_ADC_MspInit+0x90>)
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	6313      	str	r3, [r2, #48]	; 0x30
 8000afe:	4b10      	ldr	r3, [pc, #64]	; (8000b40 <HAL_ADC_MspInit+0x90>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b0e:	2303      	movs	r3, #3
 8000b10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b16:	f107 0314 	add.w	r3, r7, #20
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4809      	ldr	r0, [pc, #36]	; (8000b44 <HAL_ADC_MspInit+0x94>)
 8000b1e:	f001 f847 	bl	8001bb0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000b22:	2200      	movs	r2, #0
 8000b24:	2100      	movs	r1, #0
 8000b26:	2012      	movs	r0, #18
 8000b28:	f001 f80b 	bl	8001b42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000b2c:	2012      	movs	r0, #18
 8000b2e:	f001 f824 	bl	8001b7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b32:	bf00      	nop
 8000b34:	3728      	adds	r7, #40	; 0x28
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40012000 	.word	0x40012000
 8000b40:	40023800 	.word	0x40023800
 8000b44:	40020000 	.word	0x40020000

08000b48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08a      	sub	sp, #40	; 0x28
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	60da      	str	r2, [r3, #12]
 8000b5e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a19      	ldr	r2, [pc, #100]	; (8000bcc <HAL_I2C_MspInit+0x84>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d12c      	bne.n	8000bc4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	613b      	str	r3, [r7, #16]
 8000b6e:	4b18      	ldr	r3, [pc, #96]	; (8000bd0 <HAL_I2C_MspInit+0x88>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	4a17      	ldr	r2, [pc, #92]	; (8000bd0 <HAL_I2C_MspInit+0x88>)
 8000b74:	f043 0302 	orr.w	r3, r3, #2
 8000b78:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7a:	4b15      	ldr	r3, [pc, #84]	; (8000bd0 <HAL_I2C_MspInit+0x88>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	f003 0302 	and.w	r3, r3, #2
 8000b82:	613b      	str	r3, [r7, #16]
 8000b84:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b86:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b8c:	2312      	movs	r3, #18
 8000b8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b90:	2301      	movs	r3, #1
 8000b92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b94:	2300      	movs	r3, #0
 8000b96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b98:	2304      	movs	r3, #4
 8000b9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b9c:	f107 0314 	add.w	r3, r7, #20
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	480c      	ldr	r0, [pc, #48]	; (8000bd4 <HAL_I2C_MspInit+0x8c>)
 8000ba4:	f001 f804 	bl	8001bb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ba8:	2300      	movs	r3, #0
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <HAL_I2C_MspInit+0x88>)
 8000bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb0:	4a07      	ldr	r2, [pc, #28]	; (8000bd0 <HAL_I2C_MspInit+0x88>)
 8000bb2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bb6:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb8:	4b05      	ldr	r3, [pc, #20]	; (8000bd0 <HAL_I2C_MspInit+0x88>)
 8000bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bc0:	60fb      	str	r3, [r7, #12]
 8000bc2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000bc4:	bf00      	nop
 8000bc6:	3728      	adds	r7, #40	; 0x28
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	40005400 	.word	0x40005400
 8000bd0:	40023800 	.word	0x40023800
 8000bd4:	40020400 	.word	0x40020400

08000bd8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08e      	sub	sp, #56	; 0x38
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
 8000bee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bf0:	f107 0314 	add.w	r3, r7, #20
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4a31      	ldr	r2, [pc, #196]	; (8000cc8 <HAL_I2S_MspInit+0xf0>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d15a      	bne.n	8000cbe <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000c0c:	23c0      	movs	r3, #192	; 0xc0
 8000c0e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000c10:	2302      	movs	r3, #2
 8000c12:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f004 f94d 	bl	8004eb8 <HAL_RCCEx_PeriphCLKConfig>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000c24:	f7ff ff16 	bl	8000a54 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c28:	2300      	movs	r3, #0
 8000c2a:	613b      	str	r3, [r7, #16]
 8000c2c:	4b27      	ldr	r3, [pc, #156]	; (8000ccc <HAL_I2S_MspInit+0xf4>)
 8000c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c30:	4a26      	ldr	r2, [pc, #152]	; (8000ccc <HAL_I2S_MspInit+0xf4>)
 8000c32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c36:	6413      	str	r3, [r2, #64]	; 0x40
 8000c38:	4b24      	ldr	r3, [pc, #144]	; (8000ccc <HAL_I2S_MspInit+0xf4>)
 8000c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c40:	613b      	str	r3, [r7, #16]
 8000c42:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c44:	2300      	movs	r3, #0
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	4b20      	ldr	r3, [pc, #128]	; (8000ccc <HAL_I2S_MspInit+0xf4>)
 8000c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4c:	4a1f      	ldr	r2, [pc, #124]	; (8000ccc <HAL_I2S_MspInit+0xf4>)
 8000c4e:	f043 0301 	orr.w	r3, r3, #1
 8000c52:	6313      	str	r3, [r2, #48]	; 0x30
 8000c54:	4b1d      	ldr	r3, [pc, #116]	; (8000ccc <HAL_I2S_MspInit+0xf4>)
 8000c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c58:	f003 0301 	and.w	r3, r3, #1
 8000c5c:	60fb      	str	r3, [r7, #12]
 8000c5e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c60:	2300      	movs	r3, #0
 8000c62:	60bb      	str	r3, [r7, #8]
 8000c64:	4b19      	ldr	r3, [pc, #100]	; (8000ccc <HAL_I2S_MspInit+0xf4>)
 8000c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c68:	4a18      	ldr	r2, [pc, #96]	; (8000ccc <HAL_I2S_MspInit+0xf4>)
 8000c6a:	f043 0304 	orr.w	r3, r3, #4
 8000c6e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c70:	4b16      	ldr	r3, [pc, #88]	; (8000ccc <HAL_I2S_MspInit+0xf4>)
 8000c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c74:	f003 0304 	and.w	r3, r3, #4
 8000c78:	60bb      	str	r3, [r7, #8]
 8000c7a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000c7c:	2310      	movs	r3, #16
 8000c7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c80:	2302      	movs	r3, #2
 8000c82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c8c:	2306      	movs	r3, #6
 8000c8e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000c90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c94:	4619      	mov	r1, r3
 8000c96:	480e      	ldr	r0, [pc, #56]	; (8000cd0 <HAL_I2S_MspInit+0xf8>)
 8000c98:	f000 ff8a 	bl	8001bb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000c9c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000ca0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000caa:	2300      	movs	r3, #0
 8000cac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cae:	2306      	movs	r3, #6
 8000cb0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4806      	ldr	r0, [pc, #24]	; (8000cd4 <HAL_I2S_MspInit+0xfc>)
 8000cba:	f000 ff79 	bl	8001bb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000cbe:	bf00      	nop
 8000cc0:	3738      	adds	r7, #56	; 0x38
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40003c00 	.word	0x40003c00
 8000ccc:	40023800 	.word	0x40023800
 8000cd0:	40020000 	.word	0x40020000
 8000cd4:	40020800 	.word	0x40020800

08000cd8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b08a      	sub	sp, #40	; 0x28
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce0:	f107 0314 	add.w	r3, r7, #20
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]
 8000cee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a19      	ldr	r2, [pc, #100]	; (8000d5c <HAL_SPI_MspInit+0x84>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d12b      	bne.n	8000d52 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	613b      	str	r3, [r7, #16]
 8000cfe:	4b18      	ldr	r3, [pc, #96]	; (8000d60 <HAL_SPI_MspInit+0x88>)
 8000d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d02:	4a17      	ldr	r2, [pc, #92]	; (8000d60 <HAL_SPI_MspInit+0x88>)
 8000d04:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d08:	6453      	str	r3, [r2, #68]	; 0x44
 8000d0a:	4b15      	ldr	r3, [pc, #84]	; (8000d60 <HAL_SPI_MspInit+0x88>)
 8000d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d12:	613b      	str	r3, [r7, #16]
 8000d14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	60fb      	str	r3, [r7, #12]
 8000d1a:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <HAL_SPI_MspInit+0x88>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	4a10      	ldr	r2, [pc, #64]	; (8000d60 <HAL_SPI_MspInit+0x88>)
 8000d20:	f043 0301 	orr.w	r3, r3, #1
 8000d24:	6313      	str	r3, [r2, #48]	; 0x30
 8000d26:	4b0e      	ldr	r3, [pc, #56]	; (8000d60 <HAL_SPI_MspInit+0x88>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	f003 0301 	and.w	r3, r3, #1
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d32:	23e0      	movs	r3, #224	; 0xe0
 8000d34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d36:	2302      	movs	r3, #2
 8000d38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d42:	2305      	movs	r3, #5
 8000d44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d46:	f107 0314 	add.w	r3, r7, #20
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4805      	ldr	r0, [pc, #20]	; (8000d64 <HAL_SPI_MspInit+0x8c>)
 8000d4e:	f000 ff2f 	bl	8001bb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d52:	bf00      	nop
 8000d54:	3728      	adds	r7, #40	; 0x28
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	40013000 	.word	0x40013000
 8000d60:	40023800 	.word	0x40023800
 8000d64:	40020000 	.word	0x40020000

08000d68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b085      	sub	sp, #20
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d78:	d10d      	bne.n	8000d96 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	4b09      	ldr	r3, [pc, #36]	; (8000da4 <HAL_TIM_Base_MspInit+0x3c>)
 8000d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d82:	4a08      	ldr	r2, [pc, #32]	; (8000da4 <HAL_TIM_Base_MspInit+0x3c>)
 8000d84:	f043 0301 	orr.w	r3, r3, #1
 8000d88:	6413      	str	r3, [r2, #64]	; 0x40
 8000d8a:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <HAL_TIM_Base_MspInit+0x3c>)
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8e:	f003 0301 	and.w	r3, r3, #1
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d96:	bf00      	nop
 8000d98:	3714      	adds	r7, #20
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	40023800 	.word	0x40023800

08000da8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dac:	e7fe      	b.n	8000dac <NMI_Handler+0x4>

08000dae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dae:	b480      	push	{r7}
 8000db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000db2:	e7fe      	b.n	8000db2 <HardFault_Handler+0x4>

08000db4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000db8:	e7fe      	b.n	8000db8 <MemManage_Handler+0x4>

08000dba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dbe:	e7fe      	b.n	8000dbe <BusFault_Handler+0x4>

08000dc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dc4:	e7fe      	b.n	8000dc4 <UsageFault_Handler+0x4>

08000dc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr

08000dd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr

08000de2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000de2:	b480      	push	{r7}
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000de6:	bf00      	nop
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr

08000df0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000df4:	f000 f8da 	bl	8000fac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000df8:	bf00      	nop
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000e00:	4802      	ldr	r0, [pc, #8]	; (8000e0c <ADC_IRQHandler+0x10>)
 8000e02:	f000 fa39 	bl	8001278 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	20000110 	.word	0x20000110

08000e10 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000e14:	4802      	ldr	r0, [pc, #8]	; (8000e20 <OTG_FS_IRQHandler+0x10>)
 8000e16:	f001 fb05 	bl	8002424 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	20000620 	.word	0x20000620

08000e24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e2c:	4a14      	ldr	r2, [pc, #80]	; (8000e80 <_sbrk+0x5c>)
 8000e2e:	4b15      	ldr	r3, [pc, #84]	; (8000e84 <_sbrk+0x60>)
 8000e30:	1ad3      	subs	r3, r2, r3
 8000e32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e38:	4b13      	ldr	r3, [pc, #76]	; (8000e88 <_sbrk+0x64>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d102      	bne.n	8000e46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e40:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <_sbrk+0x64>)
 8000e42:	4a12      	ldr	r2, [pc, #72]	; (8000e8c <_sbrk+0x68>)
 8000e44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e46:	4b10      	ldr	r3, [pc, #64]	; (8000e88 <_sbrk+0x64>)
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	d207      	bcs.n	8000e64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e54:	f007 fee2 	bl	8008c1c <__errno>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	220c      	movs	r2, #12
 8000e5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e62:	e009      	b.n	8000e78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e64:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <_sbrk+0x64>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e6a:	4b07      	ldr	r3, [pc, #28]	; (8000e88 <_sbrk+0x64>)
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4413      	add	r3, r2
 8000e72:	4a05      	ldr	r2, [pc, #20]	; (8000e88 <_sbrk+0x64>)
 8000e74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e76:	68fb      	ldr	r3, [r7, #12]
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3718      	adds	r7, #24
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	20020000 	.word	0x20020000
 8000e84:	00000400 	.word	0x00000400
 8000e88:	200000ac 	.word	0x200000ac
 8000e8c:	20000938 	.word	0x20000938

08000e90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e94:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <SystemInit+0x20>)
 8000e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e9a:	4a05      	ldr	r2, [pc, #20]	; (8000eb0 <SystemInit+0x20>)
 8000e9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ea0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000eb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000eec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000eb8:	480d      	ldr	r0, [pc, #52]	; (8000ef0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000eba:	490e      	ldr	r1, [pc, #56]	; (8000ef4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ebc:	4a0e      	ldr	r2, [pc, #56]	; (8000ef8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ebe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ec0:	e002      	b.n	8000ec8 <LoopCopyDataInit>

08000ec2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ec2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ec4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ec6:	3304      	adds	r3, #4

08000ec8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ec8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ecc:	d3f9      	bcc.n	8000ec2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ece:	4a0b      	ldr	r2, [pc, #44]	; (8000efc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ed0:	4c0b      	ldr	r4, [pc, #44]	; (8000f00 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ed2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ed4:	e001      	b.n	8000eda <LoopFillZerobss>

08000ed6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ed6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ed8:	3204      	adds	r2, #4

08000eda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000edc:	d3fb      	bcc.n	8000ed6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ede:	f7ff ffd7 	bl	8000e90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ee2:	f007 fea1 	bl	8008c28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ee6:	f7ff faeb 	bl	80004c0 <main>
  bx  lr    
 8000eea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000eec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ef0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ef4:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000ef8:	08008e74 	.word	0x08008e74
  ldr r2, =_sbss
 8000efc:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000f00:	20000934 	.word	0x20000934

08000f04 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f04:	e7fe      	b.n	8000f04 <CAN1_RX0_IRQHandler>
	...

08000f08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f0c:	4b0e      	ldr	r3, [pc, #56]	; (8000f48 <HAL_Init+0x40>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a0d      	ldr	r2, [pc, #52]	; (8000f48 <HAL_Init+0x40>)
 8000f12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f18:	4b0b      	ldr	r3, [pc, #44]	; (8000f48 <HAL_Init+0x40>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a0a      	ldr	r2, [pc, #40]	; (8000f48 <HAL_Init+0x40>)
 8000f1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f24:	4b08      	ldr	r3, [pc, #32]	; (8000f48 <HAL_Init+0x40>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a07      	ldr	r2, [pc, #28]	; (8000f48 <HAL_Init+0x40>)
 8000f2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f30:	2003      	movs	r0, #3
 8000f32:	f000 fdfb 	bl	8001b2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f36:	2000      	movs	r0, #0
 8000f38:	f000 f808 	bl	8000f4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f3c:	f7ff fd90 	bl	8000a60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f40:	2300      	movs	r3, #0
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	40023c00 	.word	0x40023c00

08000f4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f54:	4b12      	ldr	r3, [pc, #72]	; (8000fa0 <HAL_InitTick+0x54>)
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	4b12      	ldr	r3, [pc, #72]	; (8000fa4 <HAL_InitTick+0x58>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f000 fe13 	bl	8001b96 <HAL_SYSTICK_Config>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
 8000f78:	e00e      	b.n	8000f98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2b0f      	cmp	r3, #15
 8000f7e:	d80a      	bhi.n	8000f96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f80:	2200      	movs	r2, #0
 8000f82:	6879      	ldr	r1, [r7, #4]
 8000f84:	f04f 30ff 	mov.w	r0, #4294967295
 8000f88:	f000 fddb 	bl	8001b42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f8c:	4a06      	ldr	r2, [pc, #24]	; (8000fa8 <HAL_InitTick+0x5c>)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f92:	2300      	movs	r3, #0
 8000f94:	e000      	b.n	8000f98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3708      	adds	r7, #8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	20000000 	.word	0x20000000
 8000fa4:	20000008 	.word	0x20000008
 8000fa8:	20000004 	.word	0x20000004

08000fac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fb0:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <HAL_IncTick+0x20>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <HAL_IncTick+0x24>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4413      	add	r3, r2
 8000fbc:	4a04      	ldr	r2, [pc, #16]	; (8000fd0 <HAL_IncTick+0x24>)
 8000fbe:	6013      	str	r3, [r2, #0]
}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	20000008 	.word	0x20000008
 8000fd0:	20000244 	.word	0x20000244

08000fd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fd8:	4b03      	ldr	r3, [pc, #12]	; (8000fe8 <HAL_GetTick+0x14>)
 8000fda:	681b      	ldr	r3, [r3, #0]
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	20000244 	.word	0x20000244

08000fec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ff4:	f7ff ffee 	bl	8000fd4 <HAL_GetTick>
 8000ff8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001004:	d005      	beq.n	8001012 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001006:	4b0a      	ldr	r3, [pc, #40]	; (8001030 <HAL_Delay+0x44>)
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	461a      	mov	r2, r3
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	4413      	add	r3, r2
 8001010:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001012:	bf00      	nop
 8001014:	f7ff ffde 	bl	8000fd4 <HAL_GetTick>
 8001018:	4602      	mov	r2, r0
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	68fa      	ldr	r2, [r7, #12]
 8001020:	429a      	cmp	r2, r3
 8001022:	d8f7      	bhi.n	8001014 <HAL_Delay+0x28>
  {
  }
}
 8001024:	bf00      	nop
 8001026:	bf00      	nop
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20000008 	.word	0x20000008

08001034 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800103c:	2300      	movs	r3, #0
 800103e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d101      	bne.n	800104a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e033      	b.n	80010b2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104e:	2b00      	cmp	r3, #0
 8001050:	d109      	bne.n	8001066 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f7ff fd2c 	bl	8000ab0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2200      	movs	r2, #0
 800105c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2200      	movs	r2, #0
 8001062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106a:	f003 0310 	and.w	r3, r3, #16
 800106e:	2b00      	cmp	r3, #0
 8001070:	d118      	bne.n	80010a4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001076:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800107a:	f023 0302 	bic.w	r3, r3, #2
 800107e:	f043 0202 	orr.w	r2, r3, #2
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f000 fb7a 	bl	8001780 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2200      	movs	r2, #0
 8001090:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001096:	f023 0303 	bic.w	r3, r3, #3
 800109a:	f043 0201 	orr.w	r2, r3, #1
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	641a      	str	r2, [r3, #64]	; 0x40
 80010a2:	e001      	b.n	80010a8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010a4:	2301      	movs	r3, #1
 80010a6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2200      	movs	r2, #0
 80010ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
	...

080010bc <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80010bc:	b480      	push	{r7}
 80010be:	b085      	sub	sp, #20
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80010c4:	2300      	movs	r3, #0
 80010c6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d101      	bne.n	80010d6 <HAL_ADC_Start_IT+0x1a>
 80010d2:	2302      	movs	r3, #2
 80010d4:	e0bd      	b.n	8001252 <HAL_ADC_Start_IT+0x196>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2201      	movs	r2, #1
 80010da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	f003 0301 	and.w	r3, r3, #1
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d018      	beq.n	800111e <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	689a      	ldr	r2, [r3, #8]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f042 0201 	orr.w	r2, r2, #1
 80010fa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80010fc:	4b58      	ldr	r3, [pc, #352]	; (8001260 <HAL_ADC_Start_IT+0x1a4>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a58      	ldr	r2, [pc, #352]	; (8001264 <HAL_ADC_Start_IT+0x1a8>)
 8001102:	fba2 2303 	umull	r2, r3, r2, r3
 8001106:	0c9a      	lsrs	r2, r3, #18
 8001108:	4613      	mov	r3, r2
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	4413      	add	r3, r2
 800110e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001110:	e002      	b.n	8001118 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	3b01      	subs	r3, #1
 8001116:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d1f9      	bne.n	8001112 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	f003 0301 	and.w	r3, r3, #1
 8001128:	2b01      	cmp	r3, #1
 800112a:	f040 8085 	bne.w	8001238 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001132:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001136:	f023 0301 	bic.w	r3, r3, #1
 800113a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800114c:	2b00      	cmp	r3, #0
 800114e:	d007      	beq.n	8001160 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001154:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001158:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001164:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001168:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800116c:	d106      	bne.n	800117c <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001172:	f023 0206 	bic.w	r2, r3, #6
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	645a      	str	r2, [r3, #68]	; 0x44
 800117a:	e002      	b.n	8001182 <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2200      	movs	r2, #0
 8001180:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2200      	movs	r2, #0
 8001186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800118a:	4b37      	ldr	r3, [pc, #220]	; (8001268 <HAL_ADC_Start_IT+0x1ac>)
 800118c:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001196:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	6812      	ldr	r2, [r2, #0]
 80011a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80011a6:	f043 0320 	orr.w	r3, r3, #32
 80011aa:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f003 031f 	and.w	r3, r3, #31
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d12a      	bne.n	800120e <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a2b      	ldr	r2, [pc, #172]	; (800126c <HAL_ADC_Start_IT+0x1b0>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d015      	beq.n	80011ee <HAL_ADC_Start_IT+0x132>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a2a      	ldr	r2, [pc, #168]	; (8001270 <HAL_ADC_Start_IT+0x1b4>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d105      	bne.n	80011d8 <HAL_ADC_Start_IT+0x11c>
 80011cc:	4b26      	ldr	r3, [pc, #152]	; (8001268 <HAL_ADC_Start_IT+0x1ac>)
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f003 031f 	and.w	r3, r3, #31
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d00a      	beq.n	80011ee <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a25      	ldr	r2, [pc, #148]	; (8001274 <HAL_ADC_Start_IT+0x1b8>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d136      	bne.n	8001250 <HAL_ADC_Start_IT+0x194>
 80011e2:	4b21      	ldr	r3, [pc, #132]	; (8001268 <HAL_ADC_Start_IT+0x1ac>)
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f003 0310 	and.w	r3, r3, #16
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d130      	bne.n	8001250 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d129      	bne.n	8001250 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	689a      	ldr	r2, [r3, #8]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	e020      	b.n	8001250 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a16      	ldr	r2, [pc, #88]	; (800126c <HAL_ADC_Start_IT+0x1b0>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d11b      	bne.n	8001250 <HAL_ADC_Start_IT+0x194>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d114      	bne.n	8001250 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	689a      	ldr	r2, [r3, #8]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001234:	609a      	str	r2, [r3, #8]
 8001236:	e00b      	b.n	8001250 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123c:	f043 0210 	orr.w	r2, r3, #16
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001248:	f043 0201 	orr.w	r2, r3, #1
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001250:	2300      	movs	r3, #0
}
 8001252:	4618      	mov	r0, r3
 8001254:	3714      	adds	r7, #20
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	20000000 	.word	0x20000000
 8001264:	431bde83 	.word	0x431bde83
 8001268:	40012300 	.word	0x40012300
 800126c:	40012000 	.word	0x40012000
 8001270:	40012100 	.word	0x40012100
 8001274:	40012200 	.word	0x40012200

08001278 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001280:	2300      	movs	r3, #0
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	2300      	movs	r3, #0
 8001286:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 0302 	and.w	r3, r3, #2
 8001292:	2b02      	cmp	r3, #2
 8001294:	bf0c      	ite	eq
 8001296:	2301      	moveq	r3, #1
 8001298:	2300      	movne	r3, #0
 800129a:	b2db      	uxtb	r3, r3
 800129c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f003 0320 	and.w	r3, r3, #32
 80012a8:	2b20      	cmp	r3, #32
 80012aa:	bf0c      	ite	eq
 80012ac:	2301      	moveq	r3, #1
 80012ae:	2300      	movne	r3, #0
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d049      	beq.n	800134e <HAL_ADC_IRQHandler+0xd6>
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d046      	beq.n	800134e <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c4:	f003 0310 	and.w	r3, r3, #16
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d105      	bne.n	80012d8 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d12b      	bne.n	800133e <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d127      	bne.n	800133e <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012f4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d006      	beq.n	800130a <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001306:	2b00      	cmp	r3, #0
 8001308:	d119      	bne.n	800133e <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	685a      	ldr	r2, [r3, #4]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f022 0220 	bic.w	r2, r2, #32
 8001318:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d105      	bne.n	800133e <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001336:	f043 0201 	orr.w	r2, r3, #1
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f7ff fb6e 	bl	8000a20 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f06f 0212 	mvn.w	r2, #18
 800134c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f003 0304 	and.w	r3, r3, #4
 8001358:	2b04      	cmp	r3, #4
 800135a:	bf0c      	ite	eq
 800135c:	2301      	moveq	r3, #1
 800135e:	2300      	movne	r3, #0
 8001360:	b2db      	uxtb	r3, r3
 8001362:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800136e:	2b80      	cmp	r3, #128	; 0x80
 8001370:	bf0c      	ite	eq
 8001372:	2301      	moveq	r3, #1
 8001374:	2300      	movne	r3, #0
 8001376:	b2db      	uxtb	r3, r3
 8001378:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d057      	beq.n	8001430 <HAL_ADC_IRQHandler+0x1b8>
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d054      	beq.n	8001430 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138a:	f003 0310 	and.w	r3, r3, #16
 800138e:	2b00      	cmp	r3, #0
 8001390:	d105      	bne.n	800139e <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001396:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d139      	bne.n	8001420 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013b2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d006      	beq.n	80013c8 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d12b      	bne.n	8001420 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d124      	bne.n	8001420 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d11d      	bne.n	8001420 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d119      	bne.n	8001420 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	685a      	ldr	r2, [r3, #4]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013fa:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001400:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001410:	2b00      	cmp	r3, #0
 8001412:	d105      	bne.n	8001420 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001418:	f043 0201 	orr.w	r2, r3, #1
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f000 faa9 	bl	8001978 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f06f 020c 	mvn.w	r2, #12
 800142e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	2b01      	cmp	r3, #1
 800143c:	bf0c      	ite	eq
 800143e:	2301      	moveq	r3, #1
 8001440:	2300      	movne	r3, #0
 8001442:	b2db      	uxtb	r3, r3
 8001444:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001450:	2b40      	cmp	r3, #64	; 0x40
 8001452:	bf0c      	ite	eq
 8001454:	2301      	moveq	r3, #1
 8001456:	2300      	movne	r3, #0
 8001458:	b2db      	uxtb	r3, r3
 800145a:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d017      	beq.n	8001492 <HAL_ADC_IRQHandler+0x21a>
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d014      	beq.n	8001492 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0301 	and.w	r3, r3, #1
 8001472:	2b01      	cmp	r3, #1
 8001474:	d10d      	bne.n	8001492 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f000 f846 	bl	8001514 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f06f 0201 	mvn.w	r2, #1
 8001490:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0320 	and.w	r3, r3, #32
 800149c:	2b20      	cmp	r3, #32
 800149e:	bf0c      	ite	eq
 80014a0:	2301      	moveq	r3, #1
 80014a2:	2300      	movne	r3, #0
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80014b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80014b6:	bf0c      	ite	eq
 80014b8:	2301      	moveq	r3, #1
 80014ba:	2300      	movne	r3, #0
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d015      	beq.n	80014f2 <HAL_ADC_IRQHandler+0x27a>
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d012      	beq.n	80014f2 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d0:	f043 0202 	orr.w	r2, r3, #2
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f06f 0220 	mvn.w	r2, #32
 80014e0:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f000 f820 	bl	8001528 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f06f 0220 	mvn.w	r2, #32
 80014f0:	601a      	str	r2, [r3, #0]
  }
}
 80014f2:	bf00      	nop
 80014f4:	3710      	adds	r7, #16
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80014fa:	b480      	push	{r7}
 80014fc:	b083      	sub	sp, #12
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001508:	4618      	mov	r0, r3
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800151c:	bf00      	nop
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr

08001528 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001530:	bf00      	nop
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001546:	2300      	movs	r3, #0
 8001548:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001550:	2b01      	cmp	r3, #1
 8001552:	d101      	bne.n	8001558 <HAL_ADC_ConfigChannel+0x1c>
 8001554:	2302      	movs	r3, #2
 8001556:	e105      	b.n	8001764 <HAL_ADC_ConfigChannel+0x228>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2201      	movs	r2, #1
 800155c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2b09      	cmp	r3, #9
 8001566:	d925      	bls.n	80015b4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	68d9      	ldr	r1, [r3, #12]
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	b29b      	uxth	r3, r3
 8001574:	461a      	mov	r2, r3
 8001576:	4613      	mov	r3, r2
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	4413      	add	r3, r2
 800157c:	3b1e      	subs	r3, #30
 800157e:	2207      	movs	r2, #7
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	43da      	mvns	r2, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	400a      	ands	r2, r1
 800158c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	68d9      	ldr	r1, [r3, #12]
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	689a      	ldr	r2, [r3, #8]
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	b29b      	uxth	r3, r3
 800159e:	4618      	mov	r0, r3
 80015a0:	4603      	mov	r3, r0
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	4403      	add	r3, r0
 80015a6:	3b1e      	subs	r3, #30
 80015a8:	409a      	lsls	r2, r3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	430a      	orrs	r2, r1
 80015b0:	60da      	str	r2, [r3, #12]
 80015b2:	e022      	b.n	80015fa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	6919      	ldr	r1, [r3, #16]
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	b29b      	uxth	r3, r3
 80015c0:	461a      	mov	r2, r3
 80015c2:	4613      	mov	r3, r2
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	4413      	add	r3, r2
 80015c8:	2207      	movs	r2, #7
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	43da      	mvns	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	400a      	ands	r2, r1
 80015d6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	6919      	ldr	r1, [r3, #16]
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	689a      	ldr	r2, [r3, #8]
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	b29b      	uxth	r3, r3
 80015e8:	4618      	mov	r0, r3
 80015ea:	4603      	mov	r3, r0
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	4403      	add	r3, r0
 80015f0:	409a      	lsls	r2, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	430a      	orrs	r2, r1
 80015f8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	2b06      	cmp	r3, #6
 8001600:	d824      	bhi.n	800164c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685a      	ldr	r2, [r3, #4]
 800160c:	4613      	mov	r3, r2
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	4413      	add	r3, r2
 8001612:	3b05      	subs	r3, #5
 8001614:	221f      	movs	r2, #31
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	43da      	mvns	r2, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	400a      	ands	r2, r1
 8001622:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	b29b      	uxth	r3, r3
 8001630:	4618      	mov	r0, r3
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685a      	ldr	r2, [r3, #4]
 8001636:	4613      	mov	r3, r2
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	4413      	add	r3, r2
 800163c:	3b05      	subs	r3, #5
 800163e:	fa00 f203 	lsl.w	r2, r0, r3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	430a      	orrs	r2, r1
 8001648:	635a      	str	r2, [r3, #52]	; 0x34
 800164a:	e04c      	b.n	80016e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	2b0c      	cmp	r3, #12
 8001652:	d824      	bhi.n	800169e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685a      	ldr	r2, [r3, #4]
 800165e:	4613      	mov	r3, r2
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	4413      	add	r3, r2
 8001664:	3b23      	subs	r3, #35	; 0x23
 8001666:	221f      	movs	r2, #31
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	43da      	mvns	r2, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	400a      	ands	r2, r1
 8001674:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	b29b      	uxth	r3, r3
 8001682:	4618      	mov	r0, r3
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685a      	ldr	r2, [r3, #4]
 8001688:	4613      	mov	r3, r2
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	4413      	add	r3, r2
 800168e:	3b23      	subs	r3, #35	; 0x23
 8001690:	fa00 f203 	lsl.w	r2, r0, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	430a      	orrs	r2, r1
 800169a:	631a      	str	r2, [r3, #48]	; 0x30
 800169c:	e023      	b.n	80016e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685a      	ldr	r2, [r3, #4]
 80016a8:	4613      	mov	r3, r2
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	4413      	add	r3, r2
 80016ae:	3b41      	subs	r3, #65	; 0x41
 80016b0:	221f      	movs	r2, #31
 80016b2:	fa02 f303 	lsl.w	r3, r2, r3
 80016b6:	43da      	mvns	r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	400a      	ands	r2, r1
 80016be:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	4618      	mov	r0, r3
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685a      	ldr	r2, [r3, #4]
 80016d2:	4613      	mov	r3, r2
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	4413      	add	r3, r2
 80016d8:	3b41      	subs	r3, #65	; 0x41
 80016da:	fa00 f203 	lsl.w	r2, r0, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	430a      	orrs	r2, r1
 80016e4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016e6:	4b22      	ldr	r3, [pc, #136]	; (8001770 <HAL_ADC_ConfigChannel+0x234>)
 80016e8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a21      	ldr	r2, [pc, #132]	; (8001774 <HAL_ADC_ConfigChannel+0x238>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d109      	bne.n	8001708 <HAL_ADC_ConfigChannel+0x1cc>
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2b12      	cmp	r3, #18
 80016fa:	d105      	bne.n	8001708 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a19      	ldr	r2, [pc, #100]	; (8001774 <HAL_ADC_ConfigChannel+0x238>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d123      	bne.n	800175a <HAL_ADC_ConfigChannel+0x21e>
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	2b10      	cmp	r3, #16
 8001718:	d003      	beq.n	8001722 <HAL_ADC_ConfigChannel+0x1e6>
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2b11      	cmp	r3, #17
 8001720:	d11b      	bne.n	800175a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	2b10      	cmp	r3, #16
 8001734:	d111      	bne.n	800175a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001736:	4b10      	ldr	r3, [pc, #64]	; (8001778 <HAL_ADC_ConfigChannel+0x23c>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a10      	ldr	r2, [pc, #64]	; (800177c <HAL_ADC_ConfigChannel+0x240>)
 800173c:	fba2 2303 	umull	r2, r3, r2, r3
 8001740:	0c9a      	lsrs	r2, r3, #18
 8001742:	4613      	mov	r3, r2
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	4413      	add	r3, r2
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800174c:	e002      	b.n	8001754 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	3b01      	subs	r3, #1
 8001752:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d1f9      	bne.n	800174e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2200      	movs	r2, #0
 800175e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001762:	2300      	movs	r3, #0
}
 8001764:	4618      	mov	r0, r3
 8001766:	3714      	adds	r7, #20
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr
 8001770:	40012300 	.word	0x40012300
 8001774:	40012000 	.word	0x40012000
 8001778:	20000000 	.word	0x20000000
 800177c:	431bde83 	.word	0x431bde83

08001780 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001788:	4b79      	ldr	r3, [pc, #484]	; (8001970 <ADC_Init+0x1f0>)
 800178a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	685a      	ldr	r2, [r3, #4]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	431a      	orrs	r2, r3
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	685a      	ldr	r2, [r3, #4]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80017b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	6859      	ldr	r1, [r3, #4]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	691b      	ldr	r3, [r3, #16]
 80017c0:	021a      	lsls	r2, r3, #8
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	430a      	orrs	r2, r1
 80017c8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	685a      	ldr	r2, [r3, #4]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80017d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	6859      	ldr	r1, [r3, #4]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	689a      	ldr	r2, [r3, #8]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	430a      	orrs	r2, r1
 80017ea:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	689a      	ldr	r2, [r3, #8]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	6899      	ldr	r1, [r3, #8]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	68da      	ldr	r2, [r3, #12]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	430a      	orrs	r2, r1
 800180c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001812:	4a58      	ldr	r2, [pc, #352]	; (8001974 <ADC_Init+0x1f4>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d022      	beq.n	800185e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	689a      	ldr	r2, [r3, #8]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001826:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	6899      	ldr	r1, [r3, #8]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	430a      	orrs	r2, r1
 8001838:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	689a      	ldr	r2, [r3, #8]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001848:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	6899      	ldr	r1, [r3, #8]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	430a      	orrs	r2, r1
 800185a:	609a      	str	r2, [r3, #8]
 800185c:	e00f      	b.n	800187e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	689a      	ldr	r2, [r3, #8]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800186c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	689a      	ldr	r2, [r3, #8]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800187c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	689a      	ldr	r2, [r3, #8]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f022 0202 	bic.w	r2, r2, #2
 800188c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	6899      	ldr	r1, [r3, #8]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	7e1b      	ldrb	r3, [r3, #24]
 8001898:	005a      	lsls	r2, r3, #1
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	430a      	orrs	r2, r1
 80018a0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d01b      	beq.n	80018e4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	685a      	ldr	r2, [r3, #4]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80018ba:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	685a      	ldr	r2, [r3, #4]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80018ca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	6859      	ldr	r1, [r3, #4]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d6:	3b01      	subs	r3, #1
 80018d8:	035a      	lsls	r2, r3, #13
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	430a      	orrs	r2, r1
 80018e0:	605a      	str	r2, [r3, #4]
 80018e2:	e007      	b.n	80018f4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	685a      	ldr	r2, [r3, #4]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018f2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001902:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	69db      	ldr	r3, [r3, #28]
 800190e:	3b01      	subs	r3, #1
 8001910:	051a      	lsls	r2, r3, #20
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	430a      	orrs	r2, r1
 8001918:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	689a      	ldr	r2, [r3, #8]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001928:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	6899      	ldr	r1, [r3, #8]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001936:	025a      	lsls	r2, r3, #9
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	430a      	orrs	r2, r1
 800193e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	689a      	ldr	r2, [r3, #8]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800194e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	6899      	ldr	r1, [r3, #8]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	695b      	ldr	r3, [r3, #20]
 800195a:	029a      	lsls	r2, r3, #10
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	430a      	orrs	r2, r1
 8001962:	609a      	str	r2, [r3, #8]
}
 8001964:	bf00      	nop
 8001966:	3714      	adds	r7, #20
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr
 8001970:	40012300 	.word	0x40012300
 8001974:	0f000001 	.word	0x0f000001

08001978 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001980:	bf00      	nop
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f003 0307 	and.w	r3, r3, #7
 800199a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800199c:	4b0c      	ldr	r3, [pc, #48]	; (80019d0 <__NVIC_SetPriorityGrouping+0x44>)
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019a2:	68ba      	ldr	r2, [r7, #8]
 80019a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019a8:	4013      	ands	r3, r2
 80019aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019be:	4a04      	ldr	r2, [pc, #16]	; (80019d0 <__NVIC_SetPriorityGrouping+0x44>)
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	60d3      	str	r3, [r2, #12]
}
 80019c4:	bf00      	nop
 80019c6:	3714      	adds	r7, #20
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr
 80019d0:	e000ed00 	.word	0xe000ed00

080019d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019d8:	4b04      	ldr	r3, [pc, #16]	; (80019ec <__NVIC_GetPriorityGrouping+0x18>)
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	0a1b      	lsrs	r3, r3, #8
 80019de:	f003 0307 	and.w	r3, r3, #7
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr
 80019ec:	e000ed00 	.word	0xe000ed00

080019f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	4603      	mov	r3, r0
 80019f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	db0b      	blt.n	8001a1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a02:	79fb      	ldrb	r3, [r7, #7]
 8001a04:	f003 021f 	and.w	r2, r3, #31
 8001a08:	4907      	ldr	r1, [pc, #28]	; (8001a28 <__NVIC_EnableIRQ+0x38>)
 8001a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0e:	095b      	lsrs	r3, r3, #5
 8001a10:	2001      	movs	r0, #1
 8001a12:	fa00 f202 	lsl.w	r2, r0, r2
 8001a16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a1a:	bf00      	nop
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	e000e100 	.word	0xe000e100

08001a2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	4603      	mov	r3, r0
 8001a34:	6039      	str	r1, [r7, #0]
 8001a36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	db0a      	blt.n	8001a56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	b2da      	uxtb	r2, r3
 8001a44:	490c      	ldr	r1, [pc, #48]	; (8001a78 <__NVIC_SetPriority+0x4c>)
 8001a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4a:	0112      	lsls	r2, r2, #4
 8001a4c:	b2d2      	uxtb	r2, r2
 8001a4e:	440b      	add	r3, r1
 8001a50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a54:	e00a      	b.n	8001a6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	b2da      	uxtb	r2, r3
 8001a5a:	4908      	ldr	r1, [pc, #32]	; (8001a7c <__NVIC_SetPriority+0x50>)
 8001a5c:	79fb      	ldrb	r3, [r7, #7]
 8001a5e:	f003 030f 	and.w	r3, r3, #15
 8001a62:	3b04      	subs	r3, #4
 8001a64:	0112      	lsls	r2, r2, #4
 8001a66:	b2d2      	uxtb	r2, r2
 8001a68:	440b      	add	r3, r1
 8001a6a:	761a      	strb	r2, [r3, #24]
}
 8001a6c:	bf00      	nop
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr
 8001a78:	e000e100 	.word	0xe000e100
 8001a7c:	e000ed00 	.word	0xe000ed00

08001a80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b089      	sub	sp, #36	; 0x24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	60b9      	str	r1, [r7, #8]
 8001a8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f003 0307 	and.w	r3, r3, #7
 8001a92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	f1c3 0307 	rsb	r3, r3, #7
 8001a9a:	2b04      	cmp	r3, #4
 8001a9c:	bf28      	it	cs
 8001a9e:	2304      	movcs	r3, #4
 8001aa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	3304      	adds	r3, #4
 8001aa6:	2b06      	cmp	r3, #6
 8001aa8:	d902      	bls.n	8001ab0 <NVIC_EncodePriority+0x30>
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	3b03      	subs	r3, #3
 8001aae:	e000      	b.n	8001ab2 <NVIC_EncodePriority+0x32>
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	fa02 f303 	lsl.w	r3, r2, r3
 8001abe:	43da      	mvns	r2, r3
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	401a      	ands	r2, r3
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ac8:	f04f 31ff 	mov.w	r1, #4294967295
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad2:	43d9      	mvns	r1, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad8:	4313      	orrs	r3, r2
         );
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3724      	adds	r7, #36	; 0x24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
	...

08001ae8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	3b01      	subs	r3, #1
 8001af4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001af8:	d301      	bcc.n	8001afe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001afa:	2301      	movs	r3, #1
 8001afc:	e00f      	b.n	8001b1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001afe:	4a0a      	ldr	r2, [pc, #40]	; (8001b28 <SysTick_Config+0x40>)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	3b01      	subs	r3, #1
 8001b04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b06:	210f      	movs	r1, #15
 8001b08:	f04f 30ff 	mov.w	r0, #4294967295
 8001b0c:	f7ff ff8e 	bl	8001a2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b10:	4b05      	ldr	r3, [pc, #20]	; (8001b28 <SysTick_Config+0x40>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b16:	4b04      	ldr	r3, [pc, #16]	; (8001b28 <SysTick_Config+0x40>)
 8001b18:	2207      	movs	r2, #7
 8001b1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	e000e010 	.word	0xe000e010

08001b2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f7ff ff29 	bl	800198c <__NVIC_SetPriorityGrouping>
}
 8001b3a:	bf00      	nop
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b086      	sub	sp, #24
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	4603      	mov	r3, r0
 8001b4a:	60b9      	str	r1, [r7, #8]
 8001b4c:	607a      	str	r2, [r7, #4]
 8001b4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b50:	2300      	movs	r3, #0
 8001b52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b54:	f7ff ff3e 	bl	80019d4 <__NVIC_GetPriorityGrouping>
 8001b58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	68b9      	ldr	r1, [r7, #8]
 8001b5e:	6978      	ldr	r0, [r7, #20]
 8001b60:	f7ff ff8e 	bl	8001a80 <NVIC_EncodePriority>
 8001b64:	4602      	mov	r2, r0
 8001b66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b6a:	4611      	mov	r1, r2
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff ff5d 	bl	8001a2c <__NVIC_SetPriority>
}
 8001b72:	bf00      	nop
 8001b74:	3718      	adds	r7, #24
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b082      	sub	sp, #8
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	4603      	mov	r3, r0
 8001b82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff ff31 	bl	80019f0 <__NVIC_EnableIRQ>
}
 8001b8e:	bf00      	nop
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b082      	sub	sp, #8
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f7ff ffa2 	bl	8001ae8 <SysTick_Config>
 8001ba4:	4603      	mov	r3, r0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
	...

08001bb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b089      	sub	sp, #36	; 0x24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	61fb      	str	r3, [r7, #28]
 8001bca:	e16b      	b.n	8001ea4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bcc:	2201      	movs	r2, #1
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	697a      	ldr	r2, [r7, #20]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001be0:	693a      	ldr	r2, [r7, #16]
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	f040 815a 	bne.w	8001e9e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f003 0303 	and.w	r3, r3, #3
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d005      	beq.n	8001c02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d130      	bne.n	8001c64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	2203      	movs	r2, #3
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	43db      	mvns	r3, r3
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	4013      	ands	r3, r2
 8001c18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	68da      	ldr	r2, [r3, #12]
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	69ba      	ldr	r2, [r7, #24]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c38:	2201      	movs	r2, #1
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	43db      	mvns	r3, r3
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	4013      	ands	r3, r2
 8001c46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	091b      	lsrs	r3, r3, #4
 8001c4e:	f003 0201 	and.w	r2, r3, #1
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f003 0303 	and.w	r3, r3, #3
 8001c6c:	2b03      	cmp	r3, #3
 8001c6e:	d017      	beq.n	8001ca0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	2203      	movs	r2, #3
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	43db      	mvns	r3, r3
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	4013      	ands	r3, r2
 8001c86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	689a      	ldr	r2, [r3, #8]
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f003 0303 	and.w	r3, r3, #3
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d123      	bne.n	8001cf4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	08da      	lsrs	r2, r3, #3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	3208      	adds	r2, #8
 8001cb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	f003 0307 	and.w	r3, r3, #7
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	220f      	movs	r2, #15
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	43db      	mvns	r3, r3
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	691a      	ldr	r2, [r3, #16]
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	f003 0307 	and.w	r3, r3, #7
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	08da      	lsrs	r2, r3, #3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	3208      	adds	r2, #8
 8001cee:	69b9      	ldr	r1, [r7, #24]
 8001cf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	2203      	movs	r2, #3
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	43db      	mvns	r3, r3
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f003 0203 	and.w	r2, r3, #3
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	f000 80b4 	beq.w	8001e9e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	60fb      	str	r3, [r7, #12]
 8001d3a:	4b60      	ldr	r3, [pc, #384]	; (8001ebc <HAL_GPIO_Init+0x30c>)
 8001d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3e:	4a5f      	ldr	r2, [pc, #380]	; (8001ebc <HAL_GPIO_Init+0x30c>)
 8001d40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d44:	6453      	str	r3, [r2, #68]	; 0x44
 8001d46:	4b5d      	ldr	r3, [pc, #372]	; (8001ebc <HAL_GPIO_Init+0x30c>)
 8001d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d4e:	60fb      	str	r3, [r7, #12]
 8001d50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d52:	4a5b      	ldr	r2, [pc, #364]	; (8001ec0 <HAL_GPIO_Init+0x310>)
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	089b      	lsrs	r3, r3, #2
 8001d58:	3302      	adds	r3, #2
 8001d5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	f003 0303 	and.w	r3, r3, #3
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	220f      	movs	r2, #15
 8001d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6e:	43db      	mvns	r3, r3
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	4013      	ands	r3, r2
 8001d74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a52      	ldr	r2, [pc, #328]	; (8001ec4 <HAL_GPIO_Init+0x314>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d02b      	beq.n	8001dd6 <HAL_GPIO_Init+0x226>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a51      	ldr	r2, [pc, #324]	; (8001ec8 <HAL_GPIO_Init+0x318>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d025      	beq.n	8001dd2 <HAL_GPIO_Init+0x222>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a50      	ldr	r2, [pc, #320]	; (8001ecc <HAL_GPIO_Init+0x31c>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d01f      	beq.n	8001dce <HAL_GPIO_Init+0x21e>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a4f      	ldr	r2, [pc, #316]	; (8001ed0 <HAL_GPIO_Init+0x320>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d019      	beq.n	8001dca <HAL_GPIO_Init+0x21a>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a4e      	ldr	r2, [pc, #312]	; (8001ed4 <HAL_GPIO_Init+0x324>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d013      	beq.n	8001dc6 <HAL_GPIO_Init+0x216>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a4d      	ldr	r2, [pc, #308]	; (8001ed8 <HAL_GPIO_Init+0x328>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d00d      	beq.n	8001dc2 <HAL_GPIO_Init+0x212>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a4c      	ldr	r2, [pc, #304]	; (8001edc <HAL_GPIO_Init+0x32c>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d007      	beq.n	8001dbe <HAL_GPIO_Init+0x20e>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a4b      	ldr	r2, [pc, #300]	; (8001ee0 <HAL_GPIO_Init+0x330>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d101      	bne.n	8001dba <HAL_GPIO_Init+0x20a>
 8001db6:	2307      	movs	r3, #7
 8001db8:	e00e      	b.n	8001dd8 <HAL_GPIO_Init+0x228>
 8001dba:	2308      	movs	r3, #8
 8001dbc:	e00c      	b.n	8001dd8 <HAL_GPIO_Init+0x228>
 8001dbe:	2306      	movs	r3, #6
 8001dc0:	e00a      	b.n	8001dd8 <HAL_GPIO_Init+0x228>
 8001dc2:	2305      	movs	r3, #5
 8001dc4:	e008      	b.n	8001dd8 <HAL_GPIO_Init+0x228>
 8001dc6:	2304      	movs	r3, #4
 8001dc8:	e006      	b.n	8001dd8 <HAL_GPIO_Init+0x228>
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e004      	b.n	8001dd8 <HAL_GPIO_Init+0x228>
 8001dce:	2302      	movs	r3, #2
 8001dd0:	e002      	b.n	8001dd8 <HAL_GPIO_Init+0x228>
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e000      	b.n	8001dd8 <HAL_GPIO_Init+0x228>
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	69fa      	ldr	r2, [r7, #28]
 8001dda:	f002 0203 	and.w	r2, r2, #3
 8001dde:	0092      	lsls	r2, r2, #2
 8001de0:	4093      	lsls	r3, r2
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001de8:	4935      	ldr	r1, [pc, #212]	; (8001ec0 <HAL_GPIO_Init+0x310>)
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	089b      	lsrs	r3, r3, #2
 8001dee:	3302      	adds	r3, #2
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001df6:	4b3b      	ldr	r3, [pc, #236]	; (8001ee4 <HAL_GPIO_Init+0x334>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	43db      	mvns	r3, r3
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	4013      	ands	r3, r2
 8001e04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d003      	beq.n	8001e1a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001e12:	69ba      	ldr	r2, [r7, #24]
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e1a:	4a32      	ldr	r2, [pc, #200]	; (8001ee4 <HAL_GPIO_Init+0x334>)
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e20:	4b30      	ldr	r3, [pc, #192]	; (8001ee4 <HAL_GPIO_Init+0x334>)
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	43db      	mvns	r3, r3
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d003      	beq.n	8001e44 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e44:	4a27      	ldr	r2, [pc, #156]	; (8001ee4 <HAL_GPIO_Init+0x334>)
 8001e46:	69bb      	ldr	r3, [r7, #24]
 8001e48:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e4a:	4b26      	ldr	r3, [pc, #152]	; (8001ee4 <HAL_GPIO_Init+0x334>)
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	43db      	mvns	r3, r3
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	4013      	ands	r3, r2
 8001e58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d003      	beq.n	8001e6e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e6e:	4a1d      	ldr	r2, [pc, #116]	; (8001ee4 <HAL_GPIO_Init+0x334>)
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e74:	4b1b      	ldr	r3, [pc, #108]	; (8001ee4 <HAL_GPIO_Init+0x334>)
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	4013      	ands	r3, r2
 8001e82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d003      	beq.n	8001e98 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e98:	4a12      	ldr	r2, [pc, #72]	; (8001ee4 <HAL_GPIO_Init+0x334>)
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	61fb      	str	r3, [r7, #28]
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	2b0f      	cmp	r3, #15
 8001ea8:	f67f ae90 	bls.w	8001bcc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001eac:	bf00      	nop
 8001eae:	bf00      	nop
 8001eb0:	3724      	adds	r7, #36	; 0x24
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	40023800 	.word	0x40023800
 8001ec0:	40013800 	.word	0x40013800
 8001ec4:	40020000 	.word	0x40020000
 8001ec8:	40020400 	.word	0x40020400
 8001ecc:	40020800 	.word	0x40020800
 8001ed0:	40020c00 	.word	0x40020c00
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	40021400 	.word	0x40021400
 8001edc:	40021800 	.word	0x40021800
 8001ee0:	40021c00 	.word	0x40021c00
 8001ee4:	40013c00 	.word	0x40013c00

08001ee8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	807b      	strh	r3, [r7, #2]
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ef8:	787b      	ldrb	r3, [r7, #1]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d003      	beq.n	8001f06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001efe:	887a      	ldrh	r2, [r7, #2]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f04:	e003      	b.n	8001f0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f06:	887b      	ldrh	r3, [r7, #2]
 8001f08:	041a      	lsls	r2, r3, #16
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	619a      	str	r2, [r3, #24]
}
 8001f0e:	bf00      	nop
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr

08001f1a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	b085      	sub	sp, #20
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
 8001f22:	460b      	mov	r3, r1
 8001f24:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	695b      	ldr	r3, [r3, #20]
 8001f2a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f2c:	887a      	ldrh	r2, [r7, #2]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	4013      	ands	r3, r2
 8001f32:	041a      	lsls	r2, r3, #16
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	43d9      	mvns	r1, r3
 8001f38:	887b      	ldrh	r3, [r7, #2]
 8001f3a:	400b      	ands	r3, r1
 8001f3c:	431a      	orrs	r2, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	619a      	str	r2, [r3, #24]
}
 8001f42:	bf00      	nop
 8001f44:	3714      	adds	r7, #20
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr

08001f4e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001f4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f50:	b08f      	sub	sp, #60	; 0x3c
 8001f52:	af0a      	add	r7, sp, #40	; 0x28
 8001f54:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d101      	bne.n	8001f60 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e054      	b.n	800200a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d106      	bne.n	8001f80 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f006 fba4 	bl	80086c8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2203      	movs	r2, #3
 8001f84:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d102      	bne.n	8001f9a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f003 fcfa 	bl	8005998 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	603b      	str	r3, [r7, #0]
 8001faa:	687e      	ldr	r6, [r7, #4]
 8001fac:	466d      	mov	r5, sp
 8001fae:	f106 0410 	add.w	r4, r6, #16
 8001fb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fb8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fba:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fbe:	e885 0003 	stmia.w	r5, {r0, r1}
 8001fc2:	1d33      	adds	r3, r6, #4
 8001fc4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fc6:	6838      	ldr	r0, [r7, #0]
 8001fc8:	f003 fc74 	bl	80058b4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2101      	movs	r1, #1
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f003 fcf1 	bl	80059ba <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	603b      	str	r3, [r7, #0]
 8001fde:	687e      	ldr	r6, [r7, #4]
 8001fe0:	466d      	mov	r5, sp
 8001fe2:	f106 0410 	add.w	r4, r6, #16
 8001fe6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fe8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fee:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ff2:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ff6:	1d33      	adds	r3, r6, #4
 8001ff8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ffa:	6838      	ldr	r0, [r7, #0]
 8001ffc:	f003 fe58 	bl	8005cb0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3714      	adds	r7, #20
 800200e:	46bd      	mov	sp, r7
 8002010:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002012 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002012:	b590      	push	{r4, r7, lr}
 8002014:	b089      	sub	sp, #36	; 0x24
 8002016:	af04      	add	r7, sp, #16
 8002018:	6078      	str	r0, [r7, #4]
 800201a:	4608      	mov	r0, r1
 800201c:	4611      	mov	r1, r2
 800201e:	461a      	mov	r2, r3
 8002020:	4603      	mov	r3, r0
 8002022:	70fb      	strb	r3, [r7, #3]
 8002024:	460b      	mov	r3, r1
 8002026:	70bb      	strb	r3, [r7, #2]
 8002028:	4613      	mov	r3, r2
 800202a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002032:	2b01      	cmp	r3, #1
 8002034:	d101      	bne.n	800203a <HAL_HCD_HC_Init+0x28>
 8002036:	2302      	movs	r3, #2
 8002038:	e076      	b.n	8002128 <HAL_HCD_HC_Init+0x116>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2201      	movs	r2, #1
 800203e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002042:	78fb      	ldrb	r3, [r7, #3]
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	212c      	movs	r1, #44	; 0x2c
 8002048:	fb01 f303 	mul.w	r3, r1, r3
 800204c:	4413      	add	r3, r2
 800204e:	333d      	adds	r3, #61	; 0x3d
 8002050:	2200      	movs	r2, #0
 8002052:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002054:	78fb      	ldrb	r3, [r7, #3]
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	212c      	movs	r1, #44	; 0x2c
 800205a:	fb01 f303 	mul.w	r3, r1, r3
 800205e:	4413      	add	r3, r2
 8002060:	3338      	adds	r3, #56	; 0x38
 8002062:	787a      	ldrb	r2, [r7, #1]
 8002064:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002066:	78fb      	ldrb	r3, [r7, #3]
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	212c      	movs	r1, #44	; 0x2c
 800206c:	fb01 f303 	mul.w	r3, r1, r3
 8002070:	4413      	add	r3, r2
 8002072:	3340      	adds	r3, #64	; 0x40
 8002074:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002076:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002078:	78fb      	ldrb	r3, [r7, #3]
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	212c      	movs	r1, #44	; 0x2c
 800207e:	fb01 f303 	mul.w	r3, r1, r3
 8002082:	4413      	add	r3, r2
 8002084:	3339      	adds	r3, #57	; 0x39
 8002086:	78fa      	ldrb	r2, [r7, #3]
 8002088:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800208a:	78fb      	ldrb	r3, [r7, #3]
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	212c      	movs	r1, #44	; 0x2c
 8002090:	fb01 f303 	mul.w	r3, r1, r3
 8002094:	4413      	add	r3, r2
 8002096:	333f      	adds	r3, #63	; 0x3f
 8002098:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800209c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800209e:	78fb      	ldrb	r3, [r7, #3]
 80020a0:	78ba      	ldrb	r2, [r7, #2]
 80020a2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80020a6:	b2d0      	uxtb	r0, r2
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	212c      	movs	r1, #44	; 0x2c
 80020ac:	fb01 f303 	mul.w	r3, r1, r3
 80020b0:	4413      	add	r3, r2
 80020b2:	333a      	adds	r3, #58	; 0x3a
 80020b4:	4602      	mov	r2, r0
 80020b6:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80020b8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	da09      	bge.n	80020d4 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80020c0:	78fb      	ldrb	r3, [r7, #3]
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	212c      	movs	r1, #44	; 0x2c
 80020c6:	fb01 f303 	mul.w	r3, r1, r3
 80020ca:	4413      	add	r3, r2
 80020cc:	333b      	adds	r3, #59	; 0x3b
 80020ce:	2201      	movs	r2, #1
 80020d0:	701a      	strb	r2, [r3, #0]
 80020d2:	e008      	b.n	80020e6 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80020d4:	78fb      	ldrb	r3, [r7, #3]
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	212c      	movs	r1, #44	; 0x2c
 80020da:	fb01 f303 	mul.w	r3, r1, r3
 80020de:	4413      	add	r3, r2
 80020e0:	333b      	adds	r3, #59	; 0x3b
 80020e2:	2200      	movs	r2, #0
 80020e4:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80020e6:	78fb      	ldrb	r3, [r7, #3]
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	212c      	movs	r1, #44	; 0x2c
 80020ec:	fb01 f303 	mul.w	r3, r1, r3
 80020f0:	4413      	add	r3, r2
 80020f2:	333c      	adds	r3, #60	; 0x3c
 80020f4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80020f8:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6818      	ldr	r0, [r3, #0]
 80020fe:	787c      	ldrb	r4, [r7, #1]
 8002100:	78ba      	ldrb	r2, [r7, #2]
 8002102:	78f9      	ldrb	r1, [r7, #3]
 8002104:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002106:	9302      	str	r3, [sp, #8]
 8002108:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800210c:	9301      	str	r3, [sp, #4]
 800210e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002112:	9300      	str	r3, [sp, #0]
 8002114:	4623      	mov	r3, r4
 8002116:	f003 ff45 	bl	8005fa4 <USB_HC_Init>
 800211a:	4603      	mov	r3, r0
 800211c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002126:	7bfb      	ldrb	r3, [r7, #15]
}
 8002128:	4618      	mov	r0, r3
 800212a:	3714      	adds	r7, #20
 800212c:	46bd      	mov	sp, r7
 800212e:	bd90      	pop	{r4, r7, pc}

08002130 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	460b      	mov	r3, r1
 800213a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800213c:	2300      	movs	r3, #0
 800213e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002146:	2b01      	cmp	r3, #1
 8002148:	d101      	bne.n	800214e <HAL_HCD_HC_Halt+0x1e>
 800214a:	2302      	movs	r3, #2
 800214c:	e00f      	b.n	800216e <HAL_HCD_HC_Halt+0x3e>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2201      	movs	r2, #1
 8002152:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	78fa      	ldrb	r2, [r7, #3]
 800215c:	4611      	mov	r1, r2
 800215e:	4618      	mov	r0, r3
 8002160:	f004 f981 	bl	8006466 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800216c:	7bfb      	ldrb	r3, [r7, #15]
}
 800216e:	4618      	mov	r0, r3
 8002170:	3710      	adds	r7, #16
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
	...

08002178 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	4608      	mov	r0, r1
 8002182:	4611      	mov	r1, r2
 8002184:	461a      	mov	r2, r3
 8002186:	4603      	mov	r3, r0
 8002188:	70fb      	strb	r3, [r7, #3]
 800218a:	460b      	mov	r3, r1
 800218c:	70bb      	strb	r3, [r7, #2]
 800218e:	4613      	mov	r3, r2
 8002190:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002192:	78fb      	ldrb	r3, [r7, #3]
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	212c      	movs	r1, #44	; 0x2c
 8002198:	fb01 f303 	mul.w	r3, r1, r3
 800219c:	4413      	add	r3, r2
 800219e:	333b      	adds	r3, #59	; 0x3b
 80021a0:	78ba      	ldrb	r2, [r7, #2]
 80021a2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80021a4:	78fb      	ldrb	r3, [r7, #3]
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	212c      	movs	r1, #44	; 0x2c
 80021aa:	fb01 f303 	mul.w	r3, r1, r3
 80021ae:	4413      	add	r3, r2
 80021b0:	333f      	adds	r3, #63	; 0x3f
 80021b2:	787a      	ldrb	r2, [r7, #1]
 80021b4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80021b6:	7c3b      	ldrb	r3, [r7, #16]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d112      	bne.n	80021e2 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80021bc:	78fb      	ldrb	r3, [r7, #3]
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	212c      	movs	r1, #44	; 0x2c
 80021c2:	fb01 f303 	mul.w	r3, r1, r3
 80021c6:	4413      	add	r3, r2
 80021c8:	3342      	adds	r3, #66	; 0x42
 80021ca:	2203      	movs	r2, #3
 80021cc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80021ce:	78fb      	ldrb	r3, [r7, #3]
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	212c      	movs	r1, #44	; 0x2c
 80021d4:	fb01 f303 	mul.w	r3, r1, r3
 80021d8:	4413      	add	r3, r2
 80021da:	333d      	adds	r3, #61	; 0x3d
 80021dc:	7f3a      	ldrb	r2, [r7, #28]
 80021de:	701a      	strb	r2, [r3, #0]
 80021e0:	e008      	b.n	80021f4 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80021e2:	78fb      	ldrb	r3, [r7, #3]
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	212c      	movs	r1, #44	; 0x2c
 80021e8:	fb01 f303 	mul.w	r3, r1, r3
 80021ec:	4413      	add	r3, r2
 80021ee:	3342      	adds	r3, #66	; 0x42
 80021f0:	2202      	movs	r2, #2
 80021f2:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80021f4:	787b      	ldrb	r3, [r7, #1]
 80021f6:	2b03      	cmp	r3, #3
 80021f8:	f200 80c6 	bhi.w	8002388 <HAL_HCD_HC_SubmitRequest+0x210>
 80021fc:	a201      	add	r2, pc, #4	; (adr r2, 8002204 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80021fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002202:	bf00      	nop
 8002204:	08002215 	.word	0x08002215
 8002208:	08002375 	.word	0x08002375
 800220c:	08002279 	.word	0x08002279
 8002210:	080022f7 	.word	0x080022f7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002214:	7c3b      	ldrb	r3, [r7, #16]
 8002216:	2b01      	cmp	r3, #1
 8002218:	f040 80b8 	bne.w	800238c <HAL_HCD_HC_SubmitRequest+0x214>
 800221c:	78bb      	ldrb	r3, [r7, #2]
 800221e:	2b00      	cmp	r3, #0
 8002220:	f040 80b4 	bne.w	800238c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002224:	8b3b      	ldrh	r3, [r7, #24]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d108      	bne.n	800223c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800222a:	78fb      	ldrb	r3, [r7, #3]
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	212c      	movs	r1, #44	; 0x2c
 8002230:	fb01 f303 	mul.w	r3, r1, r3
 8002234:	4413      	add	r3, r2
 8002236:	3355      	adds	r3, #85	; 0x55
 8002238:	2201      	movs	r2, #1
 800223a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800223c:	78fb      	ldrb	r3, [r7, #3]
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	212c      	movs	r1, #44	; 0x2c
 8002242:	fb01 f303 	mul.w	r3, r1, r3
 8002246:	4413      	add	r3, r2
 8002248:	3355      	adds	r3, #85	; 0x55
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d109      	bne.n	8002264 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002250:	78fb      	ldrb	r3, [r7, #3]
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	212c      	movs	r1, #44	; 0x2c
 8002256:	fb01 f303 	mul.w	r3, r1, r3
 800225a:	4413      	add	r3, r2
 800225c:	3342      	adds	r3, #66	; 0x42
 800225e:	2200      	movs	r2, #0
 8002260:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002262:	e093      	b.n	800238c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002264:	78fb      	ldrb	r3, [r7, #3]
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	212c      	movs	r1, #44	; 0x2c
 800226a:	fb01 f303 	mul.w	r3, r1, r3
 800226e:	4413      	add	r3, r2
 8002270:	3342      	adds	r3, #66	; 0x42
 8002272:	2202      	movs	r2, #2
 8002274:	701a      	strb	r2, [r3, #0]
      break;
 8002276:	e089      	b.n	800238c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002278:	78bb      	ldrb	r3, [r7, #2]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d11d      	bne.n	80022ba <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800227e:	78fb      	ldrb	r3, [r7, #3]
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	212c      	movs	r1, #44	; 0x2c
 8002284:	fb01 f303 	mul.w	r3, r1, r3
 8002288:	4413      	add	r3, r2
 800228a:	3355      	adds	r3, #85	; 0x55
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d109      	bne.n	80022a6 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002292:	78fb      	ldrb	r3, [r7, #3]
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	212c      	movs	r1, #44	; 0x2c
 8002298:	fb01 f303 	mul.w	r3, r1, r3
 800229c:	4413      	add	r3, r2
 800229e:	3342      	adds	r3, #66	; 0x42
 80022a0:	2200      	movs	r2, #0
 80022a2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80022a4:	e073      	b.n	800238e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80022a6:	78fb      	ldrb	r3, [r7, #3]
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	212c      	movs	r1, #44	; 0x2c
 80022ac:	fb01 f303 	mul.w	r3, r1, r3
 80022b0:	4413      	add	r3, r2
 80022b2:	3342      	adds	r3, #66	; 0x42
 80022b4:	2202      	movs	r2, #2
 80022b6:	701a      	strb	r2, [r3, #0]
      break;
 80022b8:	e069      	b.n	800238e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80022ba:	78fb      	ldrb	r3, [r7, #3]
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	212c      	movs	r1, #44	; 0x2c
 80022c0:	fb01 f303 	mul.w	r3, r1, r3
 80022c4:	4413      	add	r3, r2
 80022c6:	3354      	adds	r3, #84	; 0x54
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d109      	bne.n	80022e2 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80022ce:	78fb      	ldrb	r3, [r7, #3]
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	212c      	movs	r1, #44	; 0x2c
 80022d4:	fb01 f303 	mul.w	r3, r1, r3
 80022d8:	4413      	add	r3, r2
 80022da:	3342      	adds	r3, #66	; 0x42
 80022dc:	2200      	movs	r2, #0
 80022de:	701a      	strb	r2, [r3, #0]
      break;
 80022e0:	e055      	b.n	800238e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80022e2:	78fb      	ldrb	r3, [r7, #3]
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	212c      	movs	r1, #44	; 0x2c
 80022e8:	fb01 f303 	mul.w	r3, r1, r3
 80022ec:	4413      	add	r3, r2
 80022ee:	3342      	adds	r3, #66	; 0x42
 80022f0:	2202      	movs	r2, #2
 80022f2:	701a      	strb	r2, [r3, #0]
      break;
 80022f4:	e04b      	b.n	800238e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80022f6:	78bb      	ldrb	r3, [r7, #2]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d11d      	bne.n	8002338 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80022fc:	78fb      	ldrb	r3, [r7, #3]
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	212c      	movs	r1, #44	; 0x2c
 8002302:	fb01 f303 	mul.w	r3, r1, r3
 8002306:	4413      	add	r3, r2
 8002308:	3355      	adds	r3, #85	; 0x55
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d109      	bne.n	8002324 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002310:	78fb      	ldrb	r3, [r7, #3]
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	212c      	movs	r1, #44	; 0x2c
 8002316:	fb01 f303 	mul.w	r3, r1, r3
 800231a:	4413      	add	r3, r2
 800231c:	3342      	adds	r3, #66	; 0x42
 800231e:	2200      	movs	r2, #0
 8002320:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002322:	e034      	b.n	800238e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002324:	78fb      	ldrb	r3, [r7, #3]
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	212c      	movs	r1, #44	; 0x2c
 800232a:	fb01 f303 	mul.w	r3, r1, r3
 800232e:	4413      	add	r3, r2
 8002330:	3342      	adds	r3, #66	; 0x42
 8002332:	2202      	movs	r2, #2
 8002334:	701a      	strb	r2, [r3, #0]
      break;
 8002336:	e02a      	b.n	800238e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002338:	78fb      	ldrb	r3, [r7, #3]
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	212c      	movs	r1, #44	; 0x2c
 800233e:	fb01 f303 	mul.w	r3, r1, r3
 8002342:	4413      	add	r3, r2
 8002344:	3354      	adds	r3, #84	; 0x54
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d109      	bne.n	8002360 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800234c:	78fb      	ldrb	r3, [r7, #3]
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	212c      	movs	r1, #44	; 0x2c
 8002352:	fb01 f303 	mul.w	r3, r1, r3
 8002356:	4413      	add	r3, r2
 8002358:	3342      	adds	r3, #66	; 0x42
 800235a:	2200      	movs	r2, #0
 800235c:	701a      	strb	r2, [r3, #0]
      break;
 800235e:	e016      	b.n	800238e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002360:	78fb      	ldrb	r3, [r7, #3]
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	212c      	movs	r1, #44	; 0x2c
 8002366:	fb01 f303 	mul.w	r3, r1, r3
 800236a:	4413      	add	r3, r2
 800236c:	3342      	adds	r3, #66	; 0x42
 800236e:	2202      	movs	r2, #2
 8002370:	701a      	strb	r2, [r3, #0]
      break;
 8002372:	e00c      	b.n	800238e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002374:	78fb      	ldrb	r3, [r7, #3]
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	212c      	movs	r1, #44	; 0x2c
 800237a:	fb01 f303 	mul.w	r3, r1, r3
 800237e:	4413      	add	r3, r2
 8002380:	3342      	adds	r3, #66	; 0x42
 8002382:	2200      	movs	r2, #0
 8002384:	701a      	strb	r2, [r3, #0]
      break;
 8002386:	e002      	b.n	800238e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002388:	bf00      	nop
 800238a:	e000      	b.n	800238e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 800238c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800238e:	78fb      	ldrb	r3, [r7, #3]
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	212c      	movs	r1, #44	; 0x2c
 8002394:	fb01 f303 	mul.w	r3, r1, r3
 8002398:	4413      	add	r3, r2
 800239a:	3344      	adds	r3, #68	; 0x44
 800239c:	697a      	ldr	r2, [r7, #20]
 800239e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80023a0:	78fb      	ldrb	r3, [r7, #3]
 80023a2:	8b3a      	ldrh	r2, [r7, #24]
 80023a4:	6879      	ldr	r1, [r7, #4]
 80023a6:	202c      	movs	r0, #44	; 0x2c
 80023a8:	fb00 f303 	mul.w	r3, r0, r3
 80023ac:	440b      	add	r3, r1
 80023ae:	334c      	adds	r3, #76	; 0x4c
 80023b0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80023b2:	78fb      	ldrb	r3, [r7, #3]
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	212c      	movs	r1, #44	; 0x2c
 80023b8:	fb01 f303 	mul.w	r3, r1, r3
 80023bc:	4413      	add	r3, r2
 80023be:	3360      	adds	r3, #96	; 0x60
 80023c0:	2200      	movs	r2, #0
 80023c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80023c4:	78fb      	ldrb	r3, [r7, #3]
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	212c      	movs	r1, #44	; 0x2c
 80023ca:	fb01 f303 	mul.w	r3, r1, r3
 80023ce:	4413      	add	r3, r2
 80023d0:	3350      	adds	r3, #80	; 0x50
 80023d2:	2200      	movs	r2, #0
 80023d4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80023d6:	78fb      	ldrb	r3, [r7, #3]
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	212c      	movs	r1, #44	; 0x2c
 80023dc:	fb01 f303 	mul.w	r3, r1, r3
 80023e0:	4413      	add	r3, r2
 80023e2:	3339      	adds	r3, #57	; 0x39
 80023e4:	78fa      	ldrb	r2, [r7, #3]
 80023e6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80023e8:	78fb      	ldrb	r3, [r7, #3]
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	212c      	movs	r1, #44	; 0x2c
 80023ee:	fb01 f303 	mul.w	r3, r1, r3
 80023f2:	4413      	add	r3, r2
 80023f4:	3361      	adds	r3, #97	; 0x61
 80023f6:	2200      	movs	r2, #0
 80023f8:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6818      	ldr	r0, [r3, #0]
 80023fe:	78fb      	ldrb	r3, [r7, #3]
 8002400:	222c      	movs	r2, #44	; 0x2c
 8002402:	fb02 f303 	mul.w	r3, r2, r3
 8002406:	3338      	adds	r3, #56	; 0x38
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	18d1      	adds	r1, r2, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	691b      	ldr	r3, [r3, #16]
 8002410:	b2db      	uxtb	r3, r3
 8002412:	461a      	mov	r2, r3
 8002414:	f003 fed4 	bl	80061c0 <USB_HC_StartXfer>
 8002418:	4603      	mov	r3, r0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop

08002424 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b086      	sub	sp, #24
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4618      	mov	r0, r3
 800243c:	f003 fbf7 	bl	8005c2e <USB_GetMode>
 8002440:	4603      	mov	r3, r0
 8002442:	2b01      	cmp	r3, #1
 8002444:	f040 80f6 	bne.w	8002634 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4618      	mov	r0, r3
 800244e:	f003 fbdb 	bl	8005c08 <USB_ReadInterrupts>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	f000 80ec 	beq.w	8002632 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4618      	mov	r0, r3
 8002460:	f003 fbd2 	bl	8005c08 <USB_ReadInterrupts>
 8002464:	4603      	mov	r3, r0
 8002466:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800246a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800246e:	d104      	bne.n	800247a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002478:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4618      	mov	r0, r3
 8002480:	f003 fbc2 	bl	8005c08 <USB_ReadInterrupts>
 8002484:	4603      	mov	r3, r0
 8002486:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800248a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800248e:	d104      	bne.n	800249a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002498:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4618      	mov	r0, r3
 80024a0:	f003 fbb2 	bl	8005c08 <USB_ReadInterrupts>
 80024a4:	4603      	mov	r3, r0
 80024a6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80024aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024ae:	d104      	bne.n	80024ba <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80024b8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4618      	mov	r0, r3
 80024c0:	f003 fba2 	bl	8005c08 <USB_ReadInterrupts>
 80024c4:	4603      	mov	r3, r0
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d103      	bne.n	80024d6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2202      	movs	r2, #2
 80024d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4618      	mov	r0, r3
 80024dc:	f003 fb94 	bl	8005c08 <USB_ReadInterrupts>
 80024e0:	4603      	mov	r3, r0
 80024e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80024e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024ea:	d11c      	bne.n	8002526 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80024f4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	2b00      	cmp	r3, #0
 8002504:	d10f      	bne.n	8002526 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002506:	2110      	movs	r1, #16
 8002508:	6938      	ldr	r0, [r7, #16]
 800250a:	f003 faa3 	bl	8005a54 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800250e:	6938      	ldr	r0, [r7, #16]
 8002510:	f003 fac4 	bl	8005a9c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2101      	movs	r1, #1
 800251a:	4618      	mov	r0, r3
 800251c:	f003 fc7c 	bl	8005e18 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f006 f94f 	bl	80087c4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4618      	mov	r0, r3
 800252c:	f003 fb6c 	bl	8005c08 <USB_ReadInterrupts>
 8002530:	4603      	mov	r3, r0
 8002532:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002536:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800253a:	d102      	bne.n	8002542 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f001 fa03 	bl	8003948 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4618      	mov	r0, r3
 8002548:	f003 fb5e 	bl	8005c08 <USB_ReadInterrupts>
 800254c:	4603      	mov	r3, r0
 800254e:	f003 0308 	and.w	r3, r3, #8
 8002552:	2b08      	cmp	r3, #8
 8002554:	d106      	bne.n	8002564 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f006 f918 	bl	800878c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2208      	movs	r2, #8
 8002562:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4618      	mov	r0, r3
 800256a:	f003 fb4d 	bl	8005c08 <USB_ReadInterrupts>
 800256e:	4603      	mov	r3, r0
 8002570:	f003 0310 	and.w	r3, r3, #16
 8002574:	2b10      	cmp	r3, #16
 8002576:	d101      	bne.n	800257c <HAL_HCD_IRQHandler+0x158>
 8002578:	2301      	movs	r3, #1
 800257a:	e000      	b.n	800257e <HAL_HCD_IRQHandler+0x15a>
 800257c:	2300      	movs	r3, #0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d012      	beq.n	80025a8 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	699a      	ldr	r2, [r3, #24]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f022 0210 	bic.w	r2, r2, #16
 8002590:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f001 f906 	bl	80037a4 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	699a      	ldr	r2, [r3, #24]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f042 0210 	orr.w	r2, r2, #16
 80025a6:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f003 fb2b 	bl	8005c08 <USB_ReadInterrupts>
 80025b2:	4603      	mov	r3, r0
 80025b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80025bc:	d13a      	bne.n	8002634 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f003 ff3e 	bl	8006444 <USB_HC_ReadInterrupt>
 80025c8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80025ca:	2300      	movs	r3, #0
 80025cc:	617b      	str	r3, [r7, #20]
 80025ce:	e025      	b.n	800261c <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	f003 030f 	and.w	r3, r3, #15
 80025d6:	68ba      	ldr	r2, [r7, #8]
 80025d8:	fa22 f303 	lsr.w	r3, r2, r3
 80025dc:	f003 0301 	and.w	r3, r3, #1
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d018      	beq.n	8002616 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	015a      	lsls	r2, r3, #5
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	4413      	add	r3, r2
 80025ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025fa:	d106      	bne.n	800260a <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	4619      	mov	r1, r3
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 f8ab 	bl	800275e <HCD_HC_IN_IRQHandler>
 8002608:	e005      	b.n	8002616 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	b2db      	uxtb	r3, r3
 800260e:	4619      	mov	r1, r3
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f000 fcc6 	bl	8002fa2 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	3301      	adds	r3, #1
 800261a:	617b      	str	r3, [r7, #20]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	697a      	ldr	r2, [r7, #20]
 8002622:	429a      	cmp	r2, r3
 8002624:	d3d4      	bcc.n	80025d0 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800262e:	615a      	str	r2, [r3, #20]
 8002630:	e000      	b.n	8002634 <HAL_HCD_IRQHandler+0x210>
      return;
 8002632:	bf00      	nop
    }
  }
}
 8002634:	3718      	adds	r7, #24
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800263a:	b580      	push	{r7, lr}
 800263c:	b082      	sub	sp, #8
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002648:	2b01      	cmp	r3, #1
 800264a:	d101      	bne.n	8002650 <HAL_HCD_Start+0x16>
 800264c:	2302      	movs	r3, #2
 800264e:	e013      	b.n	8002678 <HAL_HCD_Start+0x3e>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	2101      	movs	r1, #1
 800265e:	4618      	mov	r0, r3
 8002660:	f003 fc3e 	bl	8005ee0 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4618      	mov	r0, r3
 800266a:	f003 f984 	bl	8005976 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002676:	2300      	movs	r3, #0
}
 8002678:	4618      	mov	r0, r3
 800267a:	3708      	adds	r7, #8
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800268e:	2b01      	cmp	r3, #1
 8002690:	d101      	bne.n	8002696 <HAL_HCD_Stop+0x16>
 8002692:	2302      	movs	r3, #2
 8002694:	e00d      	b.n	80026b2 <HAL_HCD_Stop+0x32>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2201      	movs	r2, #1
 800269a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f004 f838 	bl	8006718 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}

080026ba <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80026ba:	b580      	push	{r7, lr}
 80026bc:	b082      	sub	sp, #8
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f003 fbe0 	bl	8005e8c <USB_ResetPort>
 80026cc:	4603      	mov	r3, r0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80026d6:	b480      	push	{r7}
 80026d8:	b083      	sub	sp, #12
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
 80026de:	460b      	mov	r3, r1
 80026e0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80026e2:	78fb      	ldrb	r3, [r7, #3]
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	212c      	movs	r1, #44	; 0x2c
 80026e8:	fb01 f303 	mul.w	r3, r1, r3
 80026ec:	4413      	add	r3, r2
 80026ee:	3360      	adds	r3, #96	; 0x60
 80026f0:	781b      	ldrb	r3, [r3, #0]
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	370c      	adds	r7, #12
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr

080026fe <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80026fe:	b480      	push	{r7}
 8002700:	b083      	sub	sp, #12
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
 8002706:	460b      	mov	r3, r1
 8002708:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800270a:	78fb      	ldrb	r3, [r7, #3]
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	212c      	movs	r1, #44	; 0x2c
 8002710:	fb01 f303 	mul.w	r3, r1, r3
 8002714:	4413      	add	r3, r2
 8002716:	3350      	adds	r3, #80	; 0x50
 8002718:	681b      	ldr	r3, [r3, #0]
}
 800271a:	4618      	mov	r0, r3
 800271c:	370c      	adds	r7, #12
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr

08002726 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002726:	b580      	push	{r7, lr}
 8002728:	b082      	sub	sp, #8
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4618      	mov	r0, r3
 8002734:	f003 fc24 	bl	8005f80 <USB_GetCurrentFrame>
 8002738:	4603      	mov	r3, r0
}
 800273a:	4618      	mov	r0, r3
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}

08002742 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002742:	b580      	push	{r7, lr}
 8002744:	b082      	sub	sp, #8
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4618      	mov	r0, r3
 8002750:	f003 fbff 	bl	8005f52 <USB_GetHostSpeed>
 8002754:	4603      	mov	r3, r0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3708      	adds	r7, #8
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}

0800275e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800275e:	b580      	push	{r7, lr}
 8002760:	b086      	sub	sp, #24
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
 8002766:	460b      	mov	r3, r1
 8002768:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002774:	78fb      	ldrb	r3, [r7, #3]
 8002776:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	015a      	lsls	r2, r3, #5
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	4413      	add	r3, r2
 8002780:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f003 0304 	and.w	r3, r3, #4
 800278a:	2b04      	cmp	r3, #4
 800278c:	d119      	bne.n	80027c2 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	015a      	lsls	r2, r3, #5
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	4413      	add	r3, r2
 8002796:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800279a:	461a      	mov	r2, r3
 800279c:	2304      	movs	r3, #4
 800279e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	015a      	lsls	r2, r3, #5
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	4413      	add	r3, r2
 80027a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	68fa      	ldr	r2, [r7, #12]
 80027b0:	0151      	lsls	r1, r2, #5
 80027b2:	693a      	ldr	r2, [r7, #16]
 80027b4:	440a      	add	r2, r1
 80027b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027ba:	f043 0302 	orr.w	r3, r3, #2
 80027be:	60d3      	str	r3, [r2, #12]
 80027c0:	e101      	b.n	80029c6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	015a      	lsls	r2, r3, #5
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	4413      	add	r3, r2
 80027ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027d8:	d12b      	bne.n	8002832 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	015a      	lsls	r2, r3, #5
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	4413      	add	r3, r2
 80027e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027e6:	461a      	mov	r2, r3
 80027e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027ec:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	212c      	movs	r1, #44	; 0x2c
 80027f4:	fb01 f303 	mul.w	r3, r1, r3
 80027f8:	4413      	add	r3, r2
 80027fa:	3361      	adds	r3, #97	; 0x61
 80027fc:	2207      	movs	r2, #7
 80027fe:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	015a      	lsls	r2, r3, #5
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	4413      	add	r3, r2
 8002808:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	68fa      	ldr	r2, [r7, #12]
 8002810:	0151      	lsls	r1, r2, #5
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	440a      	add	r2, r1
 8002816:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800281a:	f043 0302 	orr.w	r3, r3, #2
 800281e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	68fa      	ldr	r2, [r7, #12]
 8002826:	b2d2      	uxtb	r2, r2
 8002828:	4611      	mov	r1, r2
 800282a:	4618      	mov	r0, r3
 800282c:	f003 fe1b 	bl	8006466 <USB_HC_Halt>
 8002830:	e0c9      	b.n	80029c6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	015a      	lsls	r2, r3, #5
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	4413      	add	r3, r2
 800283a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f003 0320 	and.w	r3, r3, #32
 8002844:	2b20      	cmp	r3, #32
 8002846:	d109      	bne.n	800285c <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	015a      	lsls	r2, r3, #5
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	4413      	add	r3, r2
 8002850:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002854:	461a      	mov	r2, r3
 8002856:	2320      	movs	r3, #32
 8002858:	6093      	str	r3, [r2, #8]
 800285a:	e0b4      	b.n	80029c6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	015a      	lsls	r2, r3, #5
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	4413      	add	r3, r2
 8002864:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f003 0308 	and.w	r3, r3, #8
 800286e:	2b08      	cmp	r3, #8
 8002870:	d133      	bne.n	80028da <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	015a      	lsls	r2, r3, #5
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	4413      	add	r3, r2
 800287a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	68fa      	ldr	r2, [r7, #12]
 8002882:	0151      	lsls	r1, r2, #5
 8002884:	693a      	ldr	r2, [r7, #16]
 8002886:	440a      	add	r2, r1
 8002888:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800288c:	f043 0302 	orr.w	r3, r3, #2
 8002890:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	212c      	movs	r1, #44	; 0x2c
 8002898:	fb01 f303 	mul.w	r3, r1, r3
 800289c:	4413      	add	r3, r2
 800289e:	3361      	adds	r3, #97	; 0x61
 80028a0:	2205      	movs	r2, #5
 80028a2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	015a      	lsls	r2, r3, #5
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	4413      	add	r3, r2
 80028ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028b0:	461a      	mov	r2, r3
 80028b2:	2310      	movs	r3, #16
 80028b4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	015a      	lsls	r2, r3, #5
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	4413      	add	r3, r2
 80028be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028c2:	461a      	mov	r2, r3
 80028c4:	2308      	movs	r3, #8
 80028c6:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	68fa      	ldr	r2, [r7, #12]
 80028ce:	b2d2      	uxtb	r2, r2
 80028d0:	4611      	mov	r1, r2
 80028d2:	4618      	mov	r0, r3
 80028d4:	f003 fdc7 	bl	8006466 <USB_HC_Halt>
 80028d8:	e075      	b.n	80029c6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	015a      	lsls	r2, r3, #5
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	4413      	add	r3, r2
 80028e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028f0:	d134      	bne.n	800295c <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	015a      	lsls	r2, r3, #5
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	4413      	add	r3, r2
 80028fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	68fa      	ldr	r2, [r7, #12]
 8002902:	0151      	lsls	r1, r2, #5
 8002904:	693a      	ldr	r2, [r7, #16]
 8002906:	440a      	add	r2, r1
 8002908:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800290c:	f043 0302 	orr.w	r3, r3, #2
 8002910:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	212c      	movs	r1, #44	; 0x2c
 8002918:	fb01 f303 	mul.w	r3, r1, r3
 800291c:	4413      	add	r3, r2
 800291e:	3361      	adds	r3, #97	; 0x61
 8002920:	2208      	movs	r2, #8
 8002922:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	015a      	lsls	r2, r3, #5
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	4413      	add	r3, r2
 800292c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002930:	461a      	mov	r2, r3
 8002932:	2310      	movs	r3, #16
 8002934:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	015a      	lsls	r2, r3, #5
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	4413      	add	r3, r2
 800293e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002942:	461a      	mov	r2, r3
 8002944:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002948:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	68fa      	ldr	r2, [r7, #12]
 8002950:	b2d2      	uxtb	r2, r2
 8002952:	4611      	mov	r1, r2
 8002954:	4618      	mov	r0, r3
 8002956:	f003 fd86 	bl	8006466 <USB_HC_Halt>
 800295a:	e034      	b.n	80029c6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	015a      	lsls	r2, r3, #5
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	4413      	add	r3, r2
 8002964:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800296e:	2b80      	cmp	r3, #128	; 0x80
 8002970:	d129      	bne.n	80029c6 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	015a      	lsls	r2, r3, #5
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	4413      	add	r3, r2
 800297a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	68fa      	ldr	r2, [r7, #12]
 8002982:	0151      	lsls	r1, r2, #5
 8002984:	693a      	ldr	r2, [r7, #16]
 8002986:	440a      	add	r2, r1
 8002988:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800298c:	f043 0302 	orr.w	r3, r3, #2
 8002990:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	212c      	movs	r1, #44	; 0x2c
 8002998:	fb01 f303 	mul.w	r3, r1, r3
 800299c:	4413      	add	r3, r2
 800299e:	3361      	adds	r3, #97	; 0x61
 80029a0:	2206      	movs	r2, #6
 80029a2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	68fa      	ldr	r2, [r7, #12]
 80029aa:	b2d2      	uxtb	r2, r2
 80029ac:	4611      	mov	r1, r2
 80029ae:	4618      	mov	r0, r3
 80029b0:	f003 fd59 	bl	8006466 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	015a      	lsls	r2, r3, #5
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	4413      	add	r3, r2
 80029bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029c0:	461a      	mov	r2, r3
 80029c2:	2380      	movs	r3, #128	; 0x80
 80029c4:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	015a      	lsls	r2, r3, #5
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	4413      	add	r3, r2
 80029ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029dc:	d122      	bne.n	8002a24 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	015a      	lsls	r2, r3, #5
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	4413      	add	r3, r2
 80029e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	68fa      	ldr	r2, [r7, #12]
 80029ee:	0151      	lsls	r1, r2, #5
 80029f0:	693a      	ldr	r2, [r7, #16]
 80029f2:	440a      	add	r2, r1
 80029f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029f8:	f043 0302 	orr.w	r3, r3, #2
 80029fc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	b2d2      	uxtb	r2, r2
 8002a06:	4611      	mov	r1, r2
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f003 fd2c 	bl	8006466 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	015a      	lsls	r2, r3, #5
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	4413      	add	r3, r2
 8002a16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a20:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002a22:	e2ba      	b.n	8002f9a <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	015a      	lsls	r2, r3, #5
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	f040 811b 	bne.w	8002c72 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	691b      	ldr	r3, [r3, #16]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d019      	beq.n	8002a78 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	212c      	movs	r1, #44	; 0x2c
 8002a4a:	fb01 f303 	mul.w	r3, r1, r3
 8002a4e:	4413      	add	r3, r2
 8002a50:	3348      	adds	r3, #72	; 0x48
 8002a52:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	0159      	lsls	r1, r3, #5
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	440b      	add	r3, r1
 8002a5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002a66:	1ad2      	subs	r2, r2, r3
 8002a68:	6879      	ldr	r1, [r7, #4]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	202c      	movs	r0, #44	; 0x2c
 8002a6e:	fb00 f303 	mul.w	r3, r0, r3
 8002a72:	440b      	add	r3, r1
 8002a74:	3350      	adds	r3, #80	; 0x50
 8002a76:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	212c      	movs	r1, #44	; 0x2c
 8002a7e:	fb01 f303 	mul.w	r3, r1, r3
 8002a82:	4413      	add	r3, r2
 8002a84:	3361      	adds	r3, #97	; 0x61
 8002a86:	2201      	movs	r2, #1
 8002a88:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	212c      	movs	r1, #44	; 0x2c
 8002a90:	fb01 f303 	mul.w	r3, r1, r3
 8002a94:	4413      	add	r3, r2
 8002a96:	335c      	adds	r3, #92	; 0x5c
 8002a98:	2200      	movs	r2, #0
 8002a9a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	015a      	lsls	r2, r3, #5
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	2301      	movs	r3, #1
 8002aac:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	212c      	movs	r1, #44	; 0x2c
 8002ab4:	fb01 f303 	mul.w	r3, r1, r3
 8002ab8:	4413      	add	r3, r2
 8002aba:	333f      	adds	r3, #63	; 0x3f
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d009      	beq.n	8002ad6 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	212c      	movs	r1, #44	; 0x2c
 8002ac8:	fb01 f303 	mul.w	r3, r1, r3
 8002acc:	4413      	add	r3, r2
 8002ace:	333f      	adds	r3, #63	; 0x3f
 8002ad0:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d121      	bne.n	8002b1a <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	015a      	lsls	r2, r3, #5
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	4413      	add	r3, r2
 8002ade:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	68fa      	ldr	r2, [r7, #12]
 8002ae6:	0151      	lsls	r1, r2, #5
 8002ae8:	693a      	ldr	r2, [r7, #16]
 8002aea:	440a      	add	r2, r1
 8002aec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002af0:	f043 0302 	orr.w	r3, r3, #2
 8002af4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	b2d2      	uxtb	r2, r2
 8002afe:	4611      	mov	r1, r2
 8002b00:	4618      	mov	r0, r3
 8002b02:	f003 fcb0 	bl	8006466 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	015a      	lsls	r2, r3, #5
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	4413      	add	r3, r2
 8002b0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b12:	461a      	mov	r2, r3
 8002b14:	2310      	movs	r3, #16
 8002b16:	6093      	str	r3, [r2, #8]
 8002b18:	e066      	b.n	8002be8 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	212c      	movs	r1, #44	; 0x2c
 8002b20:	fb01 f303 	mul.w	r3, r1, r3
 8002b24:	4413      	add	r3, r2
 8002b26:	333f      	adds	r3, #63	; 0x3f
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	2b03      	cmp	r3, #3
 8002b2c:	d127      	bne.n	8002b7e <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	015a      	lsls	r2, r3, #5
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	4413      	add	r3, r2
 8002b36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68fa      	ldr	r2, [r7, #12]
 8002b3e:	0151      	lsls	r1, r2, #5
 8002b40:	693a      	ldr	r2, [r7, #16]
 8002b42:	440a      	add	r2, r1
 8002b44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b48:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002b4c:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	212c      	movs	r1, #44	; 0x2c
 8002b54:	fb01 f303 	mul.w	r3, r1, r3
 8002b58:	4413      	add	r3, r2
 8002b5a:	3360      	adds	r3, #96	; 0x60
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	b2d9      	uxtb	r1, r3
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	202c      	movs	r0, #44	; 0x2c
 8002b6a:	fb00 f303 	mul.w	r3, r0, r3
 8002b6e:	4413      	add	r3, r2
 8002b70:	3360      	adds	r3, #96	; 0x60
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	461a      	mov	r2, r3
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f005 fe32 	bl	80087e0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002b7c:	e034      	b.n	8002be8 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	212c      	movs	r1, #44	; 0x2c
 8002b84:	fb01 f303 	mul.w	r3, r1, r3
 8002b88:	4413      	add	r3, r2
 8002b8a:	333f      	adds	r3, #63	; 0x3f
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d12a      	bne.n	8002be8 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	212c      	movs	r1, #44	; 0x2c
 8002b98:	fb01 f303 	mul.w	r3, r1, r3
 8002b9c:	4413      	add	r3, r2
 8002b9e:	3360      	adds	r3, #96	; 0x60
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	212c      	movs	r1, #44	; 0x2c
 8002baa:	fb01 f303 	mul.w	r3, r1, r3
 8002bae:	4413      	add	r3, r2
 8002bb0:	3354      	adds	r3, #84	; 0x54
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	f083 0301 	eor.w	r3, r3, #1
 8002bb8:	b2d8      	uxtb	r0, r3
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	212c      	movs	r1, #44	; 0x2c
 8002bc0:	fb01 f303 	mul.w	r3, r1, r3
 8002bc4:	4413      	add	r3, r2
 8002bc6:	3354      	adds	r3, #84	; 0x54
 8002bc8:	4602      	mov	r2, r0
 8002bca:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	b2d9      	uxtb	r1, r3
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	202c      	movs	r0, #44	; 0x2c
 8002bd6:	fb00 f303 	mul.w	r3, r0, r3
 8002bda:	4413      	add	r3, r2
 8002bdc:	3360      	adds	r3, #96	; 0x60
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	461a      	mov	r2, r3
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f005 fdfc 	bl	80087e0 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	691b      	ldr	r3, [r3, #16]
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d12b      	bne.n	8002c48 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	212c      	movs	r1, #44	; 0x2c
 8002bf6:	fb01 f303 	mul.w	r3, r1, r3
 8002bfa:	4413      	add	r3, r2
 8002bfc:	3348      	adds	r3, #72	; 0x48
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	6879      	ldr	r1, [r7, #4]
 8002c02:	68fa      	ldr	r2, [r7, #12]
 8002c04:	202c      	movs	r0, #44	; 0x2c
 8002c06:	fb00 f202 	mul.w	r2, r0, r2
 8002c0a:	440a      	add	r2, r1
 8002c0c:	3240      	adds	r2, #64	; 0x40
 8002c0e:	8812      	ldrh	r2, [r2, #0]
 8002c10:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c14:	f003 0301 	and.w	r3, r3, #1
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	f000 81be 	beq.w	8002f9a <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	212c      	movs	r1, #44	; 0x2c
 8002c24:	fb01 f303 	mul.w	r3, r1, r3
 8002c28:	4413      	add	r3, r2
 8002c2a:	3354      	adds	r3, #84	; 0x54
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	f083 0301 	eor.w	r3, r3, #1
 8002c32:	b2d8      	uxtb	r0, r3
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	212c      	movs	r1, #44	; 0x2c
 8002c3a:	fb01 f303 	mul.w	r3, r1, r3
 8002c3e:	4413      	add	r3, r2
 8002c40:	3354      	adds	r3, #84	; 0x54
 8002c42:	4602      	mov	r2, r0
 8002c44:	701a      	strb	r2, [r3, #0]
}
 8002c46:	e1a8      	b.n	8002f9a <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	212c      	movs	r1, #44	; 0x2c
 8002c4e:	fb01 f303 	mul.w	r3, r1, r3
 8002c52:	4413      	add	r3, r2
 8002c54:	3354      	adds	r3, #84	; 0x54
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	f083 0301 	eor.w	r3, r3, #1
 8002c5c:	b2d8      	uxtb	r0, r3
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	212c      	movs	r1, #44	; 0x2c
 8002c64:	fb01 f303 	mul.w	r3, r1, r3
 8002c68:	4413      	add	r3, r2
 8002c6a:	3354      	adds	r3, #84	; 0x54
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	701a      	strb	r2, [r3, #0]
}
 8002c70:	e193      	b.n	8002f9a <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	015a      	lsls	r2, r3, #5
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	4413      	add	r3, r2
 8002c7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	f003 0302 	and.w	r3, r3, #2
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	f040 8106 	bne.w	8002e96 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	015a      	lsls	r2, r3, #5
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	4413      	add	r3, r2
 8002c92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	68fa      	ldr	r2, [r7, #12]
 8002c9a:	0151      	lsls	r1, r2, #5
 8002c9c:	693a      	ldr	r2, [r7, #16]
 8002c9e:	440a      	add	r2, r1
 8002ca0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ca4:	f023 0302 	bic.w	r3, r3, #2
 8002ca8:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	212c      	movs	r1, #44	; 0x2c
 8002cb0:	fb01 f303 	mul.w	r3, r1, r3
 8002cb4:	4413      	add	r3, r2
 8002cb6:	3361      	adds	r3, #97	; 0x61
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d109      	bne.n	8002cd2 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	212c      	movs	r1, #44	; 0x2c
 8002cc4:	fb01 f303 	mul.w	r3, r1, r3
 8002cc8:	4413      	add	r3, r2
 8002cca:	3360      	adds	r3, #96	; 0x60
 8002ccc:	2201      	movs	r2, #1
 8002cce:	701a      	strb	r2, [r3, #0]
 8002cd0:	e0c9      	b.n	8002e66 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	212c      	movs	r1, #44	; 0x2c
 8002cd8:	fb01 f303 	mul.w	r3, r1, r3
 8002cdc:	4413      	add	r3, r2
 8002cde:	3361      	adds	r3, #97	; 0x61
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	2b05      	cmp	r3, #5
 8002ce4:	d109      	bne.n	8002cfa <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	212c      	movs	r1, #44	; 0x2c
 8002cec:	fb01 f303 	mul.w	r3, r1, r3
 8002cf0:	4413      	add	r3, r2
 8002cf2:	3360      	adds	r3, #96	; 0x60
 8002cf4:	2205      	movs	r2, #5
 8002cf6:	701a      	strb	r2, [r3, #0]
 8002cf8:	e0b5      	b.n	8002e66 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	212c      	movs	r1, #44	; 0x2c
 8002d00:	fb01 f303 	mul.w	r3, r1, r3
 8002d04:	4413      	add	r3, r2
 8002d06:	3361      	adds	r3, #97	; 0x61
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	2b06      	cmp	r3, #6
 8002d0c:	d009      	beq.n	8002d22 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	212c      	movs	r1, #44	; 0x2c
 8002d14:	fb01 f303 	mul.w	r3, r1, r3
 8002d18:	4413      	add	r3, r2
 8002d1a:	3361      	adds	r3, #97	; 0x61
 8002d1c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002d1e:	2b08      	cmp	r3, #8
 8002d20:	d150      	bne.n	8002dc4 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	212c      	movs	r1, #44	; 0x2c
 8002d28:	fb01 f303 	mul.w	r3, r1, r3
 8002d2c:	4413      	add	r3, r2
 8002d2e:	335c      	adds	r3, #92	; 0x5c
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	1c5a      	adds	r2, r3, #1
 8002d34:	6879      	ldr	r1, [r7, #4]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	202c      	movs	r0, #44	; 0x2c
 8002d3a:	fb00 f303 	mul.w	r3, r0, r3
 8002d3e:	440b      	add	r3, r1
 8002d40:	335c      	adds	r3, #92	; 0x5c
 8002d42:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	212c      	movs	r1, #44	; 0x2c
 8002d4a:	fb01 f303 	mul.w	r3, r1, r3
 8002d4e:	4413      	add	r3, r2
 8002d50:	335c      	adds	r3, #92	; 0x5c
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d912      	bls.n	8002d7e <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	212c      	movs	r1, #44	; 0x2c
 8002d5e:	fb01 f303 	mul.w	r3, r1, r3
 8002d62:	4413      	add	r3, r2
 8002d64:	335c      	adds	r3, #92	; 0x5c
 8002d66:	2200      	movs	r2, #0
 8002d68:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	212c      	movs	r1, #44	; 0x2c
 8002d70:	fb01 f303 	mul.w	r3, r1, r3
 8002d74:	4413      	add	r3, r2
 8002d76:	3360      	adds	r3, #96	; 0x60
 8002d78:	2204      	movs	r2, #4
 8002d7a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002d7c:	e073      	b.n	8002e66 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	212c      	movs	r1, #44	; 0x2c
 8002d84:	fb01 f303 	mul.w	r3, r1, r3
 8002d88:	4413      	add	r3, r2
 8002d8a:	3360      	adds	r3, #96	; 0x60
 8002d8c:	2202      	movs	r2, #2
 8002d8e:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	015a      	lsls	r2, r3, #5
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	4413      	add	r3, r2
 8002d98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002da6:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002dae:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	015a      	lsls	r2, r3, #5
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	4413      	add	r3, r2
 8002db8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002dc2:	e050      	b.n	8002e66 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	212c      	movs	r1, #44	; 0x2c
 8002dca:	fb01 f303 	mul.w	r3, r1, r3
 8002dce:	4413      	add	r3, r2
 8002dd0:	3361      	adds	r3, #97	; 0x61
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	2b03      	cmp	r3, #3
 8002dd6:	d122      	bne.n	8002e1e <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	212c      	movs	r1, #44	; 0x2c
 8002dde:	fb01 f303 	mul.w	r3, r1, r3
 8002de2:	4413      	add	r3, r2
 8002de4:	3360      	adds	r3, #96	; 0x60
 8002de6:	2202      	movs	r2, #2
 8002de8:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	015a      	lsls	r2, r3, #5
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	4413      	add	r3, r2
 8002df2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e00:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e08:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	015a      	lsls	r2, r3, #5
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	4413      	add	r3, r2
 8002e12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e16:	461a      	mov	r2, r3
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	6013      	str	r3, [r2, #0]
 8002e1c:	e023      	b.n	8002e66 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	212c      	movs	r1, #44	; 0x2c
 8002e24:	fb01 f303 	mul.w	r3, r1, r3
 8002e28:	4413      	add	r3, r2
 8002e2a:	3361      	adds	r3, #97	; 0x61
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	2b07      	cmp	r3, #7
 8002e30:	d119      	bne.n	8002e66 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	212c      	movs	r1, #44	; 0x2c
 8002e38:	fb01 f303 	mul.w	r3, r1, r3
 8002e3c:	4413      	add	r3, r2
 8002e3e:	335c      	adds	r3, #92	; 0x5c
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	1c5a      	adds	r2, r3, #1
 8002e44:	6879      	ldr	r1, [r7, #4]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	202c      	movs	r0, #44	; 0x2c
 8002e4a:	fb00 f303 	mul.w	r3, r0, r3
 8002e4e:	440b      	add	r3, r1
 8002e50:	335c      	adds	r3, #92	; 0x5c
 8002e52:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	212c      	movs	r1, #44	; 0x2c
 8002e5a:	fb01 f303 	mul.w	r3, r1, r3
 8002e5e:	4413      	add	r3, r2
 8002e60:	3360      	adds	r3, #96	; 0x60
 8002e62:	2204      	movs	r2, #4
 8002e64:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	015a      	lsls	r2, r3, #5
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	4413      	add	r3, r2
 8002e6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e72:	461a      	mov	r2, r3
 8002e74:	2302      	movs	r3, #2
 8002e76:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	b2d9      	uxtb	r1, r3
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	202c      	movs	r0, #44	; 0x2c
 8002e82:	fb00 f303 	mul.w	r3, r0, r3
 8002e86:	4413      	add	r3, r2
 8002e88:	3360      	adds	r3, #96	; 0x60
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f005 fca6 	bl	80087e0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002e94:	e081      	b.n	8002f9a <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	015a      	lsls	r2, r3, #5
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	4413      	add	r3, r2
 8002e9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f003 0310 	and.w	r3, r3, #16
 8002ea8:	2b10      	cmp	r3, #16
 8002eaa:	d176      	bne.n	8002f9a <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	212c      	movs	r1, #44	; 0x2c
 8002eb2:	fb01 f303 	mul.w	r3, r1, r3
 8002eb6:	4413      	add	r3, r2
 8002eb8:	333f      	adds	r3, #63	; 0x3f
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	2b03      	cmp	r3, #3
 8002ebe:	d121      	bne.n	8002f04 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	212c      	movs	r1, #44	; 0x2c
 8002ec6:	fb01 f303 	mul.w	r3, r1, r3
 8002eca:	4413      	add	r3, r2
 8002ecc:	335c      	adds	r3, #92	; 0x5c
 8002ece:	2200      	movs	r2, #0
 8002ed0:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	015a      	lsls	r2, r3, #5
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	4413      	add	r3, r2
 8002eda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	68fa      	ldr	r2, [r7, #12]
 8002ee2:	0151      	lsls	r1, r2, #5
 8002ee4:	693a      	ldr	r2, [r7, #16]
 8002ee6:	440a      	add	r2, r1
 8002ee8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002eec:	f043 0302 	orr.w	r3, r3, #2
 8002ef0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68fa      	ldr	r2, [r7, #12]
 8002ef8:	b2d2      	uxtb	r2, r2
 8002efa:	4611      	mov	r1, r2
 8002efc:	4618      	mov	r0, r3
 8002efe:	f003 fab2 	bl	8006466 <USB_HC_Halt>
 8002f02:	e041      	b.n	8002f88 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	212c      	movs	r1, #44	; 0x2c
 8002f0a:	fb01 f303 	mul.w	r3, r1, r3
 8002f0e:	4413      	add	r3, r2
 8002f10:	333f      	adds	r3, #63	; 0x3f
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d009      	beq.n	8002f2c <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	212c      	movs	r1, #44	; 0x2c
 8002f1e:	fb01 f303 	mul.w	r3, r1, r3
 8002f22:	4413      	add	r3, r2
 8002f24:	333f      	adds	r3, #63	; 0x3f
 8002f26:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d12d      	bne.n	8002f88 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	212c      	movs	r1, #44	; 0x2c
 8002f32:	fb01 f303 	mul.w	r3, r1, r3
 8002f36:	4413      	add	r3, r2
 8002f38:	335c      	adds	r3, #92	; 0x5c
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d120      	bne.n	8002f88 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	212c      	movs	r1, #44	; 0x2c
 8002f4c:	fb01 f303 	mul.w	r3, r1, r3
 8002f50:	4413      	add	r3, r2
 8002f52:	3361      	adds	r3, #97	; 0x61
 8002f54:	2203      	movs	r2, #3
 8002f56:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	015a      	lsls	r2, r3, #5
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	4413      	add	r3, r2
 8002f60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	68fa      	ldr	r2, [r7, #12]
 8002f68:	0151      	lsls	r1, r2, #5
 8002f6a:	693a      	ldr	r2, [r7, #16]
 8002f6c:	440a      	add	r2, r1
 8002f6e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f72:	f043 0302 	orr.w	r3, r3, #2
 8002f76:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	68fa      	ldr	r2, [r7, #12]
 8002f7e:	b2d2      	uxtb	r2, r2
 8002f80:	4611      	mov	r1, r2
 8002f82:	4618      	mov	r0, r3
 8002f84:	f003 fa6f 	bl	8006466 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	015a      	lsls	r2, r3, #5
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	4413      	add	r3, r2
 8002f90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f94:	461a      	mov	r2, r3
 8002f96:	2310      	movs	r3, #16
 8002f98:	6093      	str	r3, [r2, #8]
}
 8002f9a:	bf00      	nop
 8002f9c:	3718      	adds	r7, #24
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}

08002fa2 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b088      	sub	sp, #32
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
 8002faa:	460b      	mov	r3, r1
 8002fac:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002fb8:	78fb      	ldrb	r3, [r7, #3]
 8002fba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	015a      	lsls	r2, r3, #5
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	f003 0304 	and.w	r3, r3, #4
 8002fce:	2b04      	cmp	r3, #4
 8002fd0:	d119      	bne.n	8003006 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	015a      	lsls	r2, r3, #5
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	4413      	add	r3, r2
 8002fda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fde:	461a      	mov	r2, r3
 8002fe0:	2304      	movs	r3, #4
 8002fe2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	015a      	lsls	r2, r3, #5
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	4413      	add	r3, r2
 8002fec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	697a      	ldr	r2, [r7, #20]
 8002ff4:	0151      	lsls	r1, r2, #5
 8002ff6:	69ba      	ldr	r2, [r7, #24]
 8002ff8:	440a      	add	r2, r1
 8002ffa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ffe:	f043 0302 	orr.w	r3, r3, #2
 8003002:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003004:	e3ca      	b.n	800379c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	015a      	lsls	r2, r3, #5
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	4413      	add	r3, r2
 800300e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	f003 0320 	and.w	r3, r3, #32
 8003018:	2b20      	cmp	r3, #32
 800301a:	d13e      	bne.n	800309a <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	015a      	lsls	r2, r3, #5
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	4413      	add	r3, r2
 8003024:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003028:	461a      	mov	r2, r3
 800302a:	2320      	movs	r3, #32
 800302c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	212c      	movs	r1, #44	; 0x2c
 8003034:	fb01 f303 	mul.w	r3, r1, r3
 8003038:	4413      	add	r3, r2
 800303a:	333d      	adds	r3, #61	; 0x3d
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	2b01      	cmp	r3, #1
 8003040:	f040 83ac 	bne.w	800379c <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	212c      	movs	r1, #44	; 0x2c
 800304a:	fb01 f303 	mul.w	r3, r1, r3
 800304e:	4413      	add	r3, r2
 8003050:	333d      	adds	r3, #61	; 0x3d
 8003052:	2200      	movs	r2, #0
 8003054:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	212c      	movs	r1, #44	; 0x2c
 800305c:	fb01 f303 	mul.w	r3, r1, r3
 8003060:	4413      	add	r3, r2
 8003062:	3360      	adds	r3, #96	; 0x60
 8003064:	2202      	movs	r2, #2
 8003066:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	015a      	lsls	r2, r3, #5
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	4413      	add	r3, r2
 8003070:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	697a      	ldr	r2, [r7, #20]
 8003078:	0151      	lsls	r1, r2, #5
 800307a:	69ba      	ldr	r2, [r7, #24]
 800307c:	440a      	add	r2, r1
 800307e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003082:	f043 0302 	orr.w	r3, r3, #2
 8003086:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	697a      	ldr	r2, [r7, #20]
 800308e:	b2d2      	uxtb	r2, r2
 8003090:	4611      	mov	r1, r2
 8003092:	4618      	mov	r0, r3
 8003094:	f003 f9e7 	bl	8006466 <USB_HC_Halt>
}
 8003098:	e380      	b.n	800379c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	015a      	lsls	r2, r3, #5
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	4413      	add	r3, r2
 80030a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030b0:	d122      	bne.n	80030f8 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	015a      	lsls	r2, r3, #5
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	4413      	add	r3, r2
 80030ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	697a      	ldr	r2, [r7, #20]
 80030c2:	0151      	lsls	r1, r2, #5
 80030c4:	69ba      	ldr	r2, [r7, #24]
 80030c6:	440a      	add	r2, r1
 80030c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030cc:	f043 0302 	orr.w	r3, r3, #2
 80030d0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	697a      	ldr	r2, [r7, #20]
 80030d8:	b2d2      	uxtb	r2, r2
 80030da:	4611      	mov	r1, r2
 80030dc:	4618      	mov	r0, r3
 80030de:	f003 f9c2 	bl	8006466 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	015a      	lsls	r2, r3, #5
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	4413      	add	r3, r2
 80030ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030ee:	461a      	mov	r2, r3
 80030f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030f4:	6093      	str	r3, [r2, #8]
}
 80030f6:	e351      	b.n	800379c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	015a      	lsls	r2, r3, #5
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	4413      	add	r3, r2
 8003100:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f003 0301 	and.w	r3, r3, #1
 800310a:	2b01      	cmp	r3, #1
 800310c:	d150      	bne.n	80031b0 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	212c      	movs	r1, #44	; 0x2c
 8003114:	fb01 f303 	mul.w	r3, r1, r3
 8003118:	4413      	add	r3, r2
 800311a:	335c      	adds	r3, #92	; 0x5c
 800311c:	2200      	movs	r2, #0
 800311e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	015a      	lsls	r2, r3, #5
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	4413      	add	r3, r2
 8003128:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003132:	2b40      	cmp	r3, #64	; 0x40
 8003134:	d111      	bne.n	800315a <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	212c      	movs	r1, #44	; 0x2c
 800313c:	fb01 f303 	mul.w	r3, r1, r3
 8003140:	4413      	add	r3, r2
 8003142:	333d      	adds	r3, #61	; 0x3d
 8003144:	2201      	movs	r2, #1
 8003146:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	015a      	lsls	r2, r3, #5
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	4413      	add	r3, r2
 8003150:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003154:	461a      	mov	r2, r3
 8003156:	2340      	movs	r3, #64	; 0x40
 8003158:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	015a      	lsls	r2, r3, #5
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	4413      	add	r3, r2
 8003162:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	697a      	ldr	r2, [r7, #20]
 800316a:	0151      	lsls	r1, r2, #5
 800316c:	69ba      	ldr	r2, [r7, #24]
 800316e:	440a      	add	r2, r1
 8003170:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003174:	f043 0302 	orr.w	r3, r3, #2
 8003178:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	697a      	ldr	r2, [r7, #20]
 8003180:	b2d2      	uxtb	r2, r2
 8003182:	4611      	mov	r1, r2
 8003184:	4618      	mov	r0, r3
 8003186:	f003 f96e 	bl	8006466 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	015a      	lsls	r2, r3, #5
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	4413      	add	r3, r2
 8003192:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003196:	461a      	mov	r2, r3
 8003198:	2301      	movs	r3, #1
 800319a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	212c      	movs	r1, #44	; 0x2c
 80031a2:	fb01 f303 	mul.w	r3, r1, r3
 80031a6:	4413      	add	r3, r2
 80031a8:	3361      	adds	r3, #97	; 0x61
 80031aa:	2201      	movs	r2, #1
 80031ac:	701a      	strb	r2, [r3, #0]
}
 80031ae:	e2f5      	b.n	800379c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	015a      	lsls	r2, r3, #5
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	4413      	add	r3, r2
 80031b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031c2:	2b40      	cmp	r3, #64	; 0x40
 80031c4:	d13c      	bne.n	8003240 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	212c      	movs	r1, #44	; 0x2c
 80031cc:	fb01 f303 	mul.w	r3, r1, r3
 80031d0:	4413      	add	r3, r2
 80031d2:	3361      	adds	r3, #97	; 0x61
 80031d4:	2204      	movs	r2, #4
 80031d6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	212c      	movs	r1, #44	; 0x2c
 80031de:	fb01 f303 	mul.w	r3, r1, r3
 80031e2:	4413      	add	r3, r2
 80031e4:	333d      	adds	r3, #61	; 0x3d
 80031e6:	2201      	movs	r2, #1
 80031e8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	212c      	movs	r1, #44	; 0x2c
 80031f0:	fb01 f303 	mul.w	r3, r1, r3
 80031f4:	4413      	add	r3, r2
 80031f6:	335c      	adds	r3, #92	; 0x5c
 80031f8:	2200      	movs	r2, #0
 80031fa:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	015a      	lsls	r2, r3, #5
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	4413      	add	r3, r2
 8003204:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	697a      	ldr	r2, [r7, #20]
 800320c:	0151      	lsls	r1, r2, #5
 800320e:	69ba      	ldr	r2, [r7, #24]
 8003210:	440a      	add	r2, r1
 8003212:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003216:	f043 0302 	orr.w	r3, r3, #2
 800321a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	697a      	ldr	r2, [r7, #20]
 8003222:	b2d2      	uxtb	r2, r2
 8003224:	4611      	mov	r1, r2
 8003226:	4618      	mov	r0, r3
 8003228:	f003 f91d 	bl	8006466 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	015a      	lsls	r2, r3, #5
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	4413      	add	r3, r2
 8003234:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003238:	461a      	mov	r2, r3
 800323a:	2340      	movs	r3, #64	; 0x40
 800323c:	6093      	str	r3, [r2, #8]
}
 800323e:	e2ad      	b.n	800379c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	015a      	lsls	r2, r3, #5
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	4413      	add	r3, r2
 8003248:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	f003 0308 	and.w	r3, r3, #8
 8003252:	2b08      	cmp	r3, #8
 8003254:	d12a      	bne.n	80032ac <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	015a      	lsls	r2, r3, #5
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	4413      	add	r3, r2
 800325e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003262:	461a      	mov	r2, r3
 8003264:	2308      	movs	r3, #8
 8003266:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	015a      	lsls	r2, r3, #5
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	4413      	add	r3, r2
 8003270:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	697a      	ldr	r2, [r7, #20]
 8003278:	0151      	lsls	r1, r2, #5
 800327a:	69ba      	ldr	r2, [r7, #24]
 800327c:	440a      	add	r2, r1
 800327e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003282:	f043 0302 	orr.w	r3, r3, #2
 8003286:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	697a      	ldr	r2, [r7, #20]
 800328e:	b2d2      	uxtb	r2, r2
 8003290:	4611      	mov	r1, r2
 8003292:	4618      	mov	r0, r3
 8003294:	f003 f8e7 	bl	8006466 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	212c      	movs	r1, #44	; 0x2c
 800329e:	fb01 f303 	mul.w	r3, r1, r3
 80032a2:	4413      	add	r3, r2
 80032a4:	3361      	adds	r3, #97	; 0x61
 80032a6:	2205      	movs	r2, #5
 80032a8:	701a      	strb	r2, [r3, #0]
}
 80032aa:	e277      	b.n	800379c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	015a      	lsls	r2, r3, #5
 80032b0:	69bb      	ldr	r3, [r7, #24]
 80032b2:	4413      	add	r3, r2
 80032b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f003 0310 	and.w	r3, r3, #16
 80032be:	2b10      	cmp	r3, #16
 80032c0:	d150      	bne.n	8003364 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	212c      	movs	r1, #44	; 0x2c
 80032c8:	fb01 f303 	mul.w	r3, r1, r3
 80032cc:	4413      	add	r3, r2
 80032ce:	335c      	adds	r3, #92	; 0x5c
 80032d0:	2200      	movs	r2, #0
 80032d2:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	212c      	movs	r1, #44	; 0x2c
 80032da:	fb01 f303 	mul.w	r3, r1, r3
 80032de:	4413      	add	r3, r2
 80032e0:	3361      	adds	r3, #97	; 0x61
 80032e2:	2203      	movs	r2, #3
 80032e4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	212c      	movs	r1, #44	; 0x2c
 80032ec:	fb01 f303 	mul.w	r3, r1, r3
 80032f0:	4413      	add	r3, r2
 80032f2:	333d      	adds	r3, #61	; 0x3d
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d112      	bne.n	8003320 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	212c      	movs	r1, #44	; 0x2c
 8003300:	fb01 f303 	mul.w	r3, r1, r3
 8003304:	4413      	add	r3, r2
 8003306:	333c      	adds	r3, #60	; 0x3c
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d108      	bne.n	8003320 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	212c      	movs	r1, #44	; 0x2c
 8003314:	fb01 f303 	mul.w	r3, r1, r3
 8003318:	4413      	add	r3, r2
 800331a:	333d      	adds	r3, #61	; 0x3d
 800331c:	2201      	movs	r2, #1
 800331e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	015a      	lsls	r2, r3, #5
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	4413      	add	r3, r2
 8003328:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	697a      	ldr	r2, [r7, #20]
 8003330:	0151      	lsls	r1, r2, #5
 8003332:	69ba      	ldr	r2, [r7, #24]
 8003334:	440a      	add	r2, r1
 8003336:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800333a:	f043 0302 	orr.w	r3, r3, #2
 800333e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	697a      	ldr	r2, [r7, #20]
 8003346:	b2d2      	uxtb	r2, r2
 8003348:	4611      	mov	r1, r2
 800334a:	4618      	mov	r0, r3
 800334c:	f003 f88b 	bl	8006466 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	015a      	lsls	r2, r3, #5
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	4413      	add	r3, r2
 8003358:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800335c:	461a      	mov	r2, r3
 800335e:	2310      	movs	r3, #16
 8003360:	6093      	str	r3, [r2, #8]
}
 8003362:	e21b      	b.n	800379c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	015a      	lsls	r2, r3, #5
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	4413      	add	r3, r2
 800336c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003376:	2b80      	cmp	r3, #128	; 0x80
 8003378:	d174      	bne.n	8003464 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d121      	bne.n	80033c6 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	212c      	movs	r1, #44	; 0x2c
 8003388:	fb01 f303 	mul.w	r3, r1, r3
 800338c:	4413      	add	r3, r2
 800338e:	3361      	adds	r3, #97	; 0x61
 8003390:	2206      	movs	r2, #6
 8003392:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	015a      	lsls	r2, r3, #5
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	4413      	add	r3, r2
 800339c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	697a      	ldr	r2, [r7, #20]
 80033a4:	0151      	lsls	r1, r2, #5
 80033a6:	69ba      	ldr	r2, [r7, #24]
 80033a8:	440a      	add	r2, r1
 80033aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80033ae:	f043 0302 	orr.w	r3, r3, #2
 80033b2:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	697a      	ldr	r2, [r7, #20]
 80033ba:	b2d2      	uxtb	r2, r2
 80033bc:	4611      	mov	r1, r2
 80033be:	4618      	mov	r0, r3
 80033c0:	f003 f851 	bl	8006466 <USB_HC_Halt>
 80033c4:	e044      	b.n	8003450 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	212c      	movs	r1, #44	; 0x2c
 80033cc:	fb01 f303 	mul.w	r3, r1, r3
 80033d0:	4413      	add	r3, r2
 80033d2:	335c      	adds	r3, #92	; 0x5c
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	1c5a      	adds	r2, r3, #1
 80033d8:	6879      	ldr	r1, [r7, #4]
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	202c      	movs	r0, #44	; 0x2c
 80033de:	fb00 f303 	mul.w	r3, r0, r3
 80033e2:	440b      	add	r3, r1
 80033e4:	335c      	adds	r3, #92	; 0x5c
 80033e6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	212c      	movs	r1, #44	; 0x2c
 80033ee:	fb01 f303 	mul.w	r3, r1, r3
 80033f2:	4413      	add	r3, r2
 80033f4:	335c      	adds	r3, #92	; 0x5c
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d920      	bls.n	800343e <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	212c      	movs	r1, #44	; 0x2c
 8003402:	fb01 f303 	mul.w	r3, r1, r3
 8003406:	4413      	add	r3, r2
 8003408:	335c      	adds	r3, #92	; 0x5c
 800340a:	2200      	movs	r2, #0
 800340c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	212c      	movs	r1, #44	; 0x2c
 8003414:	fb01 f303 	mul.w	r3, r1, r3
 8003418:	4413      	add	r3, r2
 800341a:	3360      	adds	r3, #96	; 0x60
 800341c:	2204      	movs	r2, #4
 800341e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	b2d9      	uxtb	r1, r3
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	202c      	movs	r0, #44	; 0x2c
 800342a:	fb00 f303 	mul.w	r3, r0, r3
 800342e:	4413      	add	r3, r2
 8003430:	3360      	adds	r3, #96	; 0x60
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	461a      	mov	r2, r3
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f005 f9d2 	bl	80087e0 <HAL_HCD_HC_NotifyURBChange_Callback>
 800343c:	e008      	b.n	8003450 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	212c      	movs	r1, #44	; 0x2c
 8003444:	fb01 f303 	mul.w	r3, r1, r3
 8003448:	4413      	add	r3, r2
 800344a:	3360      	adds	r3, #96	; 0x60
 800344c:	2202      	movs	r2, #2
 800344e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	015a      	lsls	r2, r3, #5
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	4413      	add	r3, r2
 8003458:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800345c:	461a      	mov	r2, r3
 800345e:	2380      	movs	r3, #128	; 0x80
 8003460:	6093      	str	r3, [r2, #8]
}
 8003462:	e19b      	b.n	800379c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	015a      	lsls	r2, r3, #5
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	4413      	add	r3, r2
 800346c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003476:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800347a:	d134      	bne.n	80034e6 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	015a      	lsls	r2, r3, #5
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	4413      	add	r3, r2
 8003484:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	697a      	ldr	r2, [r7, #20]
 800348c:	0151      	lsls	r1, r2, #5
 800348e:	69ba      	ldr	r2, [r7, #24]
 8003490:	440a      	add	r2, r1
 8003492:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003496:	f043 0302 	orr.w	r3, r3, #2
 800349a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	697a      	ldr	r2, [r7, #20]
 80034a2:	b2d2      	uxtb	r2, r2
 80034a4:	4611      	mov	r1, r2
 80034a6:	4618      	mov	r0, r3
 80034a8:	f002 ffdd 	bl	8006466 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	015a      	lsls	r2, r3, #5
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	4413      	add	r3, r2
 80034b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034b8:	461a      	mov	r2, r3
 80034ba:	2310      	movs	r3, #16
 80034bc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	015a      	lsls	r2, r3, #5
 80034c2:	69bb      	ldr	r3, [r7, #24]
 80034c4:	4413      	add	r3, r2
 80034c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034ca:	461a      	mov	r2, r3
 80034cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034d0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	212c      	movs	r1, #44	; 0x2c
 80034d8:	fb01 f303 	mul.w	r3, r1, r3
 80034dc:	4413      	add	r3, r2
 80034de:	3361      	adds	r3, #97	; 0x61
 80034e0:	2208      	movs	r2, #8
 80034e2:	701a      	strb	r2, [r3, #0]
}
 80034e4:	e15a      	b.n	800379c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	015a      	lsls	r2, r3, #5
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	4413      	add	r3, r2
 80034ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f003 0302 	and.w	r3, r3, #2
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	f040 814f 	bne.w	800379c <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	015a      	lsls	r2, r3, #5
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	4413      	add	r3, r2
 8003506:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	697a      	ldr	r2, [r7, #20]
 800350e:	0151      	lsls	r1, r2, #5
 8003510:	69ba      	ldr	r2, [r7, #24]
 8003512:	440a      	add	r2, r1
 8003514:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003518:	f023 0302 	bic.w	r3, r3, #2
 800351c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	212c      	movs	r1, #44	; 0x2c
 8003524:	fb01 f303 	mul.w	r3, r1, r3
 8003528:	4413      	add	r3, r2
 800352a:	3361      	adds	r3, #97	; 0x61
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	2b01      	cmp	r3, #1
 8003530:	d17d      	bne.n	800362e <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	212c      	movs	r1, #44	; 0x2c
 8003538:	fb01 f303 	mul.w	r3, r1, r3
 800353c:	4413      	add	r3, r2
 800353e:	3360      	adds	r3, #96	; 0x60
 8003540:	2201      	movs	r2, #1
 8003542:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	212c      	movs	r1, #44	; 0x2c
 800354a:	fb01 f303 	mul.w	r3, r1, r3
 800354e:	4413      	add	r3, r2
 8003550:	333f      	adds	r3, #63	; 0x3f
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	2b02      	cmp	r3, #2
 8003556:	d00a      	beq.n	800356e <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	212c      	movs	r1, #44	; 0x2c
 800355e:	fb01 f303 	mul.w	r3, r1, r3
 8003562:	4413      	add	r3, r2
 8003564:	333f      	adds	r3, #63	; 0x3f
 8003566:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003568:	2b03      	cmp	r3, #3
 800356a:	f040 8100 	bne.w	800376e <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d113      	bne.n	800359e <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	212c      	movs	r1, #44	; 0x2c
 800357c:	fb01 f303 	mul.w	r3, r1, r3
 8003580:	4413      	add	r3, r2
 8003582:	3355      	adds	r3, #85	; 0x55
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	f083 0301 	eor.w	r3, r3, #1
 800358a:	b2d8      	uxtb	r0, r3
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	212c      	movs	r1, #44	; 0x2c
 8003592:	fb01 f303 	mul.w	r3, r1, r3
 8003596:	4413      	add	r3, r2
 8003598:	3355      	adds	r3, #85	; 0x55
 800359a:	4602      	mov	r2, r0
 800359c:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	f040 80e3 	bne.w	800376e <HCD_HC_OUT_IRQHandler+0x7cc>
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	212c      	movs	r1, #44	; 0x2c
 80035ae:	fb01 f303 	mul.w	r3, r1, r3
 80035b2:	4413      	add	r3, r2
 80035b4:	334c      	adds	r3, #76	; 0x4c
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	f000 80d8 	beq.w	800376e <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	212c      	movs	r1, #44	; 0x2c
 80035c4:	fb01 f303 	mul.w	r3, r1, r3
 80035c8:	4413      	add	r3, r2
 80035ca:	334c      	adds	r3, #76	; 0x4c
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	6879      	ldr	r1, [r7, #4]
 80035d0:	697a      	ldr	r2, [r7, #20]
 80035d2:	202c      	movs	r0, #44	; 0x2c
 80035d4:	fb00 f202 	mul.w	r2, r0, r2
 80035d8:	440a      	add	r2, r1
 80035da:	3240      	adds	r2, #64	; 0x40
 80035dc:	8812      	ldrh	r2, [r2, #0]
 80035de:	4413      	add	r3, r2
 80035e0:	3b01      	subs	r3, #1
 80035e2:	6879      	ldr	r1, [r7, #4]
 80035e4:	697a      	ldr	r2, [r7, #20]
 80035e6:	202c      	movs	r0, #44	; 0x2c
 80035e8:	fb00 f202 	mul.w	r2, r0, r2
 80035ec:	440a      	add	r2, r1
 80035ee:	3240      	adds	r2, #64	; 0x40
 80035f0:	8812      	ldrh	r2, [r2, #0]
 80035f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80035f6:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f003 0301 	and.w	r3, r3, #1
 80035fe:	2b00      	cmp	r3, #0
 8003600:	f000 80b5 	beq.w	800376e <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	212c      	movs	r1, #44	; 0x2c
 800360a:	fb01 f303 	mul.w	r3, r1, r3
 800360e:	4413      	add	r3, r2
 8003610:	3355      	adds	r3, #85	; 0x55
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	f083 0301 	eor.w	r3, r3, #1
 8003618:	b2d8      	uxtb	r0, r3
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	212c      	movs	r1, #44	; 0x2c
 8003620:	fb01 f303 	mul.w	r3, r1, r3
 8003624:	4413      	add	r3, r2
 8003626:	3355      	adds	r3, #85	; 0x55
 8003628:	4602      	mov	r2, r0
 800362a:	701a      	strb	r2, [r3, #0]
 800362c:	e09f      	b.n	800376e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	212c      	movs	r1, #44	; 0x2c
 8003634:	fb01 f303 	mul.w	r3, r1, r3
 8003638:	4413      	add	r3, r2
 800363a:	3361      	adds	r3, #97	; 0x61
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	2b03      	cmp	r3, #3
 8003640:	d109      	bne.n	8003656 <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	212c      	movs	r1, #44	; 0x2c
 8003648:	fb01 f303 	mul.w	r3, r1, r3
 800364c:	4413      	add	r3, r2
 800364e:	3360      	adds	r3, #96	; 0x60
 8003650:	2202      	movs	r2, #2
 8003652:	701a      	strb	r2, [r3, #0]
 8003654:	e08b      	b.n	800376e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	212c      	movs	r1, #44	; 0x2c
 800365c:	fb01 f303 	mul.w	r3, r1, r3
 8003660:	4413      	add	r3, r2
 8003662:	3361      	adds	r3, #97	; 0x61
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	2b04      	cmp	r3, #4
 8003668:	d109      	bne.n	800367e <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	212c      	movs	r1, #44	; 0x2c
 8003670:	fb01 f303 	mul.w	r3, r1, r3
 8003674:	4413      	add	r3, r2
 8003676:	3360      	adds	r3, #96	; 0x60
 8003678:	2202      	movs	r2, #2
 800367a:	701a      	strb	r2, [r3, #0]
 800367c:	e077      	b.n	800376e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	212c      	movs	r1, #44	; 0x2c
 8003684:	fb01 f303 	mul.w	r3, r1, r3
 8003688:	4413      	add	r3, r2
 800368a:	3361      	adds	r3, #97	; 0x61
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	2b05      	cmp	r3, #5
 8003690:	d109      	bne.n	80036a6 <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	212c      	movs	r1, #44	; 0x2c
 8003698:	fb01 f303 	mul.w	r3, r1, r3
 800369c:	4413      	add	r3, r2
 800369e:	3360      	adds	r3, #96	; 0x60
 80036a0:	2205      	movs	r2, #5
 80036a2:	701a      	strb	r2, [r3, #0]
 80036a4:	e063      	b.n	800376e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	212c      	movs	r1, #44	; 0x2c
 80036ac:	fb01 f303 	mul.w	r3, r1, r3
 80036b0:	4413      	add	r3, r2
 80036b2:	3361      	adds	r3, #97	; 0x61
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	2b06      	cmp	r3, #6
 80036b8:	d009      	beq.n	80036ce <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	212c      	movs	r1, #44	; 0x2c
 80036c0:	fb01 f303 	mul.w	r3, r1, r3
 80036c4:	4413      	add	r3, r2
 80036c6:	3361      	adds	r3, #97	; 0x61
 80036c8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80036ca:	2b08      	cmp	r3, #8
 80036cc:	d14f      	bne.n	800376e <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	212c      	movs	r1, #44	; 0x2c
 80036d4:	fb01 f303 	mul.w	r3, r1, r3
 80036d8:	4413      	add	r3, r2
 80036da:	335c      	adds	r3, #92	; 0x5c
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	1c5a      	adds	r2, r3, #1
 80036e0:	6879      	ldr	r1, [r7, #4]
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	202c      	movs	r0, #44	; 0x2c
 80036e6:	fb00 f303 	mul.w	r3, r0, r3
 80036ea:	440b      	add	r3, r1
 80036ec:	335c      	adds	r3, #92	; 0x5c
 80036ee:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	212c      	movs	r1, #44	; 0x2c
 80036f6:	fb01 f303 	mul.w	r3, r1, r3
 80036fa:	4413      	add	r3, r2
 80036fc:	335c      	adds	r3, #92	; 0x5c
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2b02      	cmp	r3, #2
 8003702:	d912      	bls.n	800372a <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	212c      	movs	r1, #44	; 0x2c
 800370a:	fb01 f303 	mul.w	r3, r1, r3
 800370e:	4413      	add	r3, r2
 8003710:	335c      	adds	r3, #92	; 0x5c
 8003712:	2200      	movs	r2, #0
 8003714:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	212c      	movs	r1, #44	; 0x2c
 800371c:	fb01 f303 	mul.w	r3, r1, r3
 8003720:	4413      	add	r3, r2
 8003722:	3360      	adds	r3, #96	; 0x60
 8003724:	2204      	movs	r2, #4
 8003726:	701a      	strb	r2, [r3, #0]
 8003728:	e021      	b.n	800376e <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	212c      	movs	r1, #44	; 0x2c
 8003730:	fb01 f303 	mul.w	r3, r1, r3
 8003734:	4413      	add	r3, r2
 8003736:	3360      	adds	r3, #96	; 0x60
 8003738:	2202      	movs	r2, #2
 800373a:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	015a      	lsls	r2, r3, #5
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	4413      	add	r3, r2
 8003744:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003752:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800375a:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	015a      	lsls	r2, r3, #5
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	4413      	add	r3, r2
 8003764:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003768:	461a      	mov	r2, r3
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	015a      	lsls	r2, r3, #5
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	4413      	add	r3, r2
 8003776:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800377a:	461a      	mov	r2, r3
 800377c:	2302      	movs	r3, #2
 800377e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	b2d9      	uxtb	r1, r3
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	202c      	movs	r0, #44	; 0x2c
 800378a:	fb00 f303 	mul.w	r3, r0, r3
 800378e:	4413      	add	r3, r2
 8003790:	3360      	adds	r3, #96	; 0x60
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	461a      	mov	r2, r3
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f005 f822 	bl	80087e0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800379c:	bf00      	nop
 800379e:	3720      	adds	r7, #32
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b08a      	sub	sp, #40	; 0x28
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b4:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	6a1b      	ldr	r3, [r3, #32]
 80037bc:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	f003 030f 	and.w	r3, r3, #15
 80037c4:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	0c5b      	lsrs	r3, r3, #17
 80037ca:	f003 030f 	and.w	r3, r3, #15
 80037ce:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	091b      	lsrs	r3, r3, #4
 80037d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037d8:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d004      	beq.n	80037ea <HCD_RXQLVL_IRQHandler+0x46>
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	2b05      	cmp	r3, #5
 80037e4:	f000 80a9 	beq.w	800393a <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80037e8:	e0aa      	b.n	8003940 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	f000 80a6 	beq.w	800393e <HCD_RXQLVL_IRQHandler+0x19a>
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	212c      	movs	r1, #44	; 0x2c
 80037f8:	fb01 f303 	mul.w	r3, r1, r3
 80037fc:	4413      	add	r3, r2
 80037fe:	3344      	adds	r3, #68	; 0x44
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2b00      	cmp	r3, #0
 8003804:	f000 809b 	beq.w	800393e <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	212c      	movs	r1, #44	; 0x2c
 800380e:	fb01 f303 	mul.w	r3, r1, r3
 8003812:	4413      	add	r3, r2
 8003814:	3350      	adds	r3, #80	; 0x50
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	441a      	add	r2, r3
 800381c:	6879      	ldr	r1, [r7, #4]
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	202c      	movs	r0, #44	; 0x2c
 8003822:	fb00 f303 	mul.w	r3, r0, r3
 8003826:	440b      	add	r3, r1
 8003828:	334c      	adds	r3, #76	; 0x4c
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	429a      	cmp	r2, r3
 800382e:	d87a      	bhi.n	8003926 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6818      	ldr	r0, [r3, #0]
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	212c      	movs	r1, #44	; 0x2c
 800383a:	fb01 f303 	mul.w	r3, r1, r3
 800383e:	4413      	add	r3, r2
 8003840:	3344      	adds	r3, #68	; 0x44
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	693a      	ldr	r2, [r7, #16]
 8003846:	b292      	uxth	r2, r2
 8003848:	4619      	mov	r1, r3
 800384a:	f002 f985 	bl	8005b58 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	212c      	movs	r1, #44	; 0x2c
 8003854:	fb01 f303 	mul.w	r3, r1, r3
 8003858:	4413      	add	r3, r2
 800385a:	3344      	adds	r3, #68	; 0x44
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	441a      	add	r2, r3
 8003862:	6879      	ldr	r1, [r7, #4]
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	202c      	movs	r0, #44	; 0x2c
 8003868:	fb00 f303 	mul.w	r3, r0, r3
 800386c:	440b      	add	r3, r1
 800386e:	3344      	adds	r3, #68	; 0x44
 8003870:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	212c      	movs	r1, #44	; 0x2c
 8003878:	fb01 f303 	mul.w	r3, r1, r3
 800387c:	4413      	add	r3, r2
 800387e:	3350      	adds	r3, #80	; 0x50
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	441a      	add	r2, r3
 8003886:	6879      	ldr	r1, [r7, #4]
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	202c      	movs	r0, #44	; 0x2c
 800388c:	fb00 f303 	mul.w	r3, r0, r3
 8003890:	440b      	add	r3, r1
 8003892:	3350      	adds	r3, #80	; 0x50
 8003894:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003896:	69bb      	ldr	r3, [r7, #24]
 8003898:	015a      	lsls	r2, r3, #5
 800389a:	6a3b      	ldr	r3, [r7, #32]
 800389c:	4413      	add	r3, r2
 800389e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	0cdb      	lsrs	r3, r3, #19
 80038a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038aa:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	69bb      	ldr	r3, [r7, #24]
 80038b0:	212c      	movs	r1, #44	; 0x2c
 80038b2:	fb01 f303 	mul.w	r3, r1, r3
 80038b6:	4413      	add	r3, r2
 80038b8:	3340      	adds	r3, #64	; 0x40
 80038ba:	881b      	ldrh	r3, [r3, #0]
 80038bc:	461a      	mov	r2, r3
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d13c      	bne.n	800393e <HCD_RXQLVL_IRQHandler+0x19a>
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d039      	beq.n	800393e <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	015a      	lsls	r2, r3, #5
 80038ce:	6a3b      	ldr	r3, [r7, #32]
 80038d0:	4413      	add	r3, r2
 80038d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80038e0:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80038e8:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	015a      	lsls	r2, r3, #5
 80038ee:	6a3b      	ldr	r3, [r7, #32]
 80038f0:	4413      	add	r3, r2
 80038f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038f6:	461a      	mov	r2, r3
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	212c      	movs	r1, #44	; 0x2c
 8003902:	fb01 f303 	mul.w	r3, r1, r3
 8003906:	4413      	add	r3, r2
 8003908:	3354      	adds	r3, #84	; 0x54
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	f083 0301 	eor.w	r3, r3, #1
 8003910:	b2d8      	uxtb	r0, r3
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	69bb      	ldr	r3, [r7, #24]
 8003916:	212c      	movs	r1, #44	; 0x2c
 8003918:	fb01 f303 	mul.w	r3, r1, r3
 800391c:	4413      	add	r3, r2
 800391e:	3354      	adds	r3, #84	; 0x54
 8003920:	4602      	mov	r2, r0
 8003922:	701a      	strb	r2, [r3, #0]
      break;
 8003924:	e00b      	b.n	800393e <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	212c      	movs	r1, #44	; 0x2c
 800392c:	fb01 f303 	mul.w	r3, r1, r3
 8003930:	4413      	add	r3, r2
 8003932:	3360      	adds	r3, #96	; 0x60
 8003934:	2204      	movs	r2, #4
 8003936:	701a      	strb	r2, [r3, #0]
      break;
 8003938:	e001      	b.n	800393e <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800393a:	bf00      	nop
 800393c:	e000      	b.n	8003940 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800393e:	bf00      	nop
  }
}
 8003940:	bf00      	nop
 8003942:	3728      	adds	r7, #40	; 0x28
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b086      	sub	sp, #24
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003974:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f003 0302 	and.w	r3, r3, #2
 800397c:	2b02      	cmp	r3, #2
 800397e:	d10b      	bne.n	8003998 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	2b01      	cmp	r3, #1
 8003988:	d102      	bne.n	8003990 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f004 ff0c 	bl	80087a8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	f043 0302 	orr.w	r3, r3, #2
 8003996:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f003 0308 	and.w	r3, r3, #8
 800399e:	2b08      	cmp	r3, #8
 80039a0:	d132      	bne.n	8003a08 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	f043 0308 	orr.w	r3, r3, #8
 80039a8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f003 0304 	and.w	r3, r3, #4
 80039b0:	2b04      	cmp	r3, #4
 80039b2:	d126      	bne.n	8003a02 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	699b      	ldr	r3, [r3, #24]
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d113      	bne.n	80039e4 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80039c2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80039c6:	d106      	bne.n	80039d6 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2102      	movs	r1, #2
 80039ce:	4618      	mov	r0, r3
 80039d0:	f002 fa22 	bl	8005e18 <USB_InitFSLSPClkSel>
 80039d4:	e011      	b.n	80039fa <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	2101      	movs	r1, #1
 80039dc:	4618      	mov	r0, r3
 80039de:	f002 fa1b 	bl	8005e18 <USB_InitFSLSPClkSel>
 80039e2:	e00a      	b.n	80039fa <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d106      	bne.n	80039fa <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80039f2:	461a      	mov	r2, r3
 80039f4:	f64e 2360 	movw	r3, #60000	; 0xea60
 80039f8:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f004 fefe 	bl	80087fc <HAL_HCD_PortEnabled_Callback>
 8003a00:	e002      	b.n	8003a08 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f004 ff08 	bl	8008818 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f003 0320 	and.w	r3, r3, #32
 8003a0e:	2b20      	cmp	r3, #32
 8003a10:	d103      	bne.n	8003a1a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	f043 0320 	orr.w	r3, r3, #32
 8003a18:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003a20:	461a      	mov	r2, r3
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	6013      	str	r3, [r2, #0]
}
 8003a26:	bf00      	nop
 8003a28:	3718      	adds	r7, #24
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
	...

08003a30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d101      	bne.n	8003a42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e12b      	b.n	8003c9a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d106      	bne.n	8003a5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f7fd f876 	bl	8000b48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2224      	movs	r2, #36	; 0x24
 8003a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f022 0201 	bic.w	r2, r2, #1
 8003a72:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a82:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a92:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a94:	f001 f9fc 	bl	8004e90 <HAL_RCC_GetPCLK1Freq>
 8003a98:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	4a81      	ldr	r2, [pc, #516]	; (8003ca4 <HAL_I2C_Init+0x274>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d807      	bhi.n	8003ab4 <HAL_I2C_Init+0x84>
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	4a80      	ldr	r2, [pc, #512]	; (8003ca8 <HAL_I2C_Init+0x278>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	bf94      	ite	ls
 8003aac:	2301      	movls	r3, #1
 8003aae:	2300      	movhi	r3, #0
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	e006      	b.n	8003ac2 <HAL_I2C_Init+0x92>
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	4a7d      	ldr	r2, [pc, #500]	; (8003cac <HAL_I2C_Init+0x27c>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	bf94      	ite	ls
 8003abc:	2301      	movls	r3, #1
 8003abe:	2300      	movhi	r3, #0
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d001      	beq.n	8003aca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e0e7      	b.n	8003c9a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	4a78      	ldr	r2, [pc, #480]	; (8003cb0 <HAL_I2C_Init+0x280>)
 8003ace:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad2:	0c9b      	lsrs	r3, r3, #18
 8003ad4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68ba      	ldr	r2, [r7, #8]
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	6a1b      	ldr	r3, [r3, #32]
 8003af0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	4a6a      	ldr	r2, [pc, #424]	; (8003ca4 <HAL_I2C_Init+0x274>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d802      	bhi.n	8003b04 <HAL_I2C_Init+0xd4>
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	3301      	adds	r3, #1
 8003b02:	e009      	b.n	8003b18 <HAL_I2C_Init+0xe8>
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003b0a:	fb02 f303 	mul.w	r3, r2, r3
 8003b0e:	4a69      	ldr	r2, [pc, #420]	; (8003cb4 <HAL_I2C_Init+0x284>)
 8003b10:	fba2 2303 	umull	r2, r3, r2, r3
 8003b14:	099b      	lsrs	r3, r3, #6
 8003b16:	3301      	adds	r3, #1
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	6812      	ldr	r2, [r2, #0]
 8003b1c:	430b      	orrs	r3, r1
 8003b1e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	69db      	ldr	r3, [r3, #28]
 8003b26:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003b2a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	495c      	ldr	r1, [pc, #368]	; (8003ca4 <HAL_I2C_Init+0x274>)
 8003b34:	428b      	cmp	r3, r1
 8003b36:	d819      	bhi.n	8003b6c <HAL_I2C_Init+0x13c>
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	1e59      	subs	r1, r3, #1
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	005b      	lsls	r3, r3, #1
 8003b42:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b46:	1c59      	adds	r1, r3, #1
 8003b48:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003b4c:	400b      	ands	r3, r1
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d00a      	beq.n	8003b68 <HAL_I2C_Init+0x138>
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	1e59      	subs	r1, r3, #1
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	005b      	lsls	r3, r3, #1
 8003b5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b60:	3301      	adds	r3, #1
 8003b62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b66:	e051      	b.n	8003c0c <HAL_I2C_Init+0x1dc>
 8003b68:	2304      	movs	r3, #4
 8003b6a:	e04f      	b.n	8003c0c <HAL_I2C_Init+0x1dc>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d111      	bne.n	8003b98 <HAL_I2C_Init+0x168>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	1e58      	subs	r0, r3, #1
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6859      	ldr	r1, [r3, #4]
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	005b      	lsls	r3, r3, #1
 8003b80:	440b      	add	r3, r1
 8003b82:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b86:	3301      	adds	r3, #1
 8003b88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	bf0c      	ite	eq
 8003b90:	2301      	moveq	r3, #1
 8003b92:	2300      	movne	r3, #0
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	e012      	b.n	8003bbe <HAL_I2C_Init+0x18e>
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	1e58      	subs	r0, r3, #1
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6859      	ldr	r1, [r3, #4]
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	440b      	add	r3, r1
 8003ba6:	0099      	lsls	r1, r3, #2
 8003ba8:	440b      	add	r3, r1
 8003baa:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bae:	3301      	adds	r3, #1
 8003bb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	bf0c      	ite	eq
 8003bb8:	2301      	moveq	r3, #1
 8003bba:	2300      	movne	r3, #0
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d001      	beq.n	8003bc6 <HAL_I2C_Init+0x196>
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e022      	b.n	8003c0c <HAL_I2C_Init+0x1dc>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d10e      	bne.n	8003bec <HAL_I2C_Init+0x1bc>
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	1e58      	subs	r0, r3, #1
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6859      	ldr	r1, [r3, #4]
 8003bd6:	460b      	mov	r3, r1
 8003bd8:	005b      	lsls	r3, r3, #1
 8003bda:	440b      	add	r3, r1
 8003bdc:	fbb0 f3f3 	udiv	r3, r0, r3
 8003be0:	3301      	adds	r3, #1
 8003be2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003be6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bea:	e00f      	b.n	8003c0c <HAL_I2C_Init+0x1dc>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	1e58      	subs	r0, r3, #1
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6859      	ldr	r1, [r3, #4]
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	440b      	add	r3, r1
 8003bfa:	0099      	lsls	r1, r3, #2
 8003bfc:	440b      	add	r3, r1
 8003bfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c02:	3301      	adds	r3, #1
 8003c04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c0c:	6879      	ldr	r1, [r7, #4]
 8003c0e:	6809      	ldr	r1, [r1, #0]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	69da      	ldr	r2, [r3, #28]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a1b      	ldr	r3, [r3, #32]
 8003c26:	431a      	orrs	r2, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	430a      	orrs	r2, r1
 8003c2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003c3a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	6911      	ldr	r1, [r2, #16]
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	68d2      	ldr	r2, [r2, #12]
 8003c46:	4311      	orrs	r1, r2
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	6812      	ldr	r2, [r2, #0]
 8003c4c:	430b      	orrs	r3, r1
 8003c4e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	695a      	ldr	r2, [r3, #20]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	431a      	orrs	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f042 0201 	orr.w	r2, r2, #1
 8003c7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2220      	movs	r2, #32
 8003c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3710      	adds	r7, #16
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	000186a0 	.word	0x000186a0
 8003ca8:	001e847f 	.word	0x001e847f
 8003cac:	003d08ff 	.word	0x003d08ff
 8003cb0:	431bde83 	.word	0x431bde83
 8003cb4:	10624dd3 	.word	0x10624dd3

08003cb8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b088      	sub	sp, #32
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d101      	bne.n	8003cca <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e128      	b.n	8003f1c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d109      	bne.n	8003cea <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a90      	ldr	r2, [pc, #576]	; (8003f24 <HAL_I2S_Init+0x26c>)
 8003ce2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f7fc ff77 	bl	8000bd8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2202      	movs	r2, #2
 8003cee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	69db      	ldr	r3, [r3, #28]
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	6812      	ldr	r2, [r2, #0]
 8003cfc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003d00:	f023 030f 	bic.w	r3, r3, #15
 8003d04:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2202      	movs	r2, #2
 8003d0c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	695b      	ldr	r3, [r3, #20]
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d060      	beq.n	8003dd8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d102      	bne.n	8003d24 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003d1e:	2310      	movs	r3, #16
 8003d20:	617b      	str	r3, [r7, #20]
 8003d22:	e001      	b.n	8003d28 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003d24:	2320      	movs	r3, #32
 8003d26:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	2b20      	cmp	r3, #32
 8003d2e:	d802      	bhi.n	8003d36 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	005b      	lsls	r3, r3, #1
 8003d34:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003d36:	2001      	movs	r0, #1
 8003d38:	f001 f9a0 	bl	800507c <HAL_RCCEx_GetPeriphCLKFreq>
 8003d3c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d46:	d125      	bne.n	8003d94 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d010      	beq.n	8003d72 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d5a:	4613      	mov	r3, r2
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	4413      	add	r3, r2
 8003d60:	005b      	lsls	r3, r3, #1
 8003d62:	461a      	mov	r2, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	695b      	ldr	r3, [r3, #20]
 8003d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d6c:	3305      	adds	r3, #5
 8003d6e:	613b      	str	r3, [r7, #16]
 8003d70:	e01f      	b.n	8003db2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	00db      	lsls	r3, r3, #3
 8003d76:	68fa      	ldr	r2, [r7, #12]
 8003d78:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	4413      	add	r3, r2
 8003d82:	005b      	lsls	r3, r3, #1
 8003d84:	461a      	mov	r2, r3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d8e:	3305      	adds	r3, #5
 8003d90:	613b      	str	r3, [r7, #16]
 8003d92:	e00e      	b.n	8003db2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003d94:	68fa      	ldr	r2, [r7, #12]
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	4413      	add	r3, r2
 8003da2:	005b      	lsls	r3, r3, #1
 8003da4:	461a      	mov	r2, r3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	695b      	ldr	r3, [r3, #20]
 8003daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dae:	3305      	adds	r3, #5
 8003db0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	4a5c      	ldr	r2, [pc, #368]	; (8003f28 <HAL_I2S_Init+0x270>)
 8003db6:	fba2 2303 	umull	r2, r3, r2, r3
 8003dba:	08db      	lsrs	r3, r3, #3
 8003dbc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	f003 0301 	and.w	r3, r3, #1
 8003dc4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003dc6:	693a      	ldr	r2, [r7, #16]
 8003dc8:	69bb      	ldr	r3, [r7, #24]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	085b      	lsrs	r3, r3, #1
 8003dce:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	021b      	lsls	r3, r3, #8
 8003dd4:	61bb      	str	r3, [r7, #24]
 8003dd6:	e003      	b.n	8003de0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003dd8:	2302      	movs	r3, #2
 8003dda:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d902      	bls.n	8003dec <HAL_I2S_Init+0x134>
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	2bff      	cmp	r3, #255	; 0xff
 8003dea:	d907      	bls.n	8003dfc <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df0:	f043 0210 	orr.w	r2, r3, #16
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e08f      	b.n	8003f1c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	691a      	ldr	r2, [r3, #16]
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	ea42 0103 	orr.w	r1, r2, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	69fa      	ldr	r2, [r7, #28]
 8003e0c:	430a      	orrs	r2, r1
 8003e0e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	69db      	ldr	r3, [r3, #28]
 8003e16:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003e1a:	f023 030f 	bic.w	r3, r3, #15
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	6851      	ldr	r1, [r2, #4]
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	6892      	ldr	r2, [r2, #8]
 8003e26:	4311      	orrs	r1, r2
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	68d2      	ldr	r2, [r2, #12]
 8003e2c:	4311      	orrs	r1, r2
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	6992      	ldr	r2, [r2, #24]
 8003e32:	430a      	orrs	r2, r1
 8003e34:	431a      	orrs	r2, r3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e3e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a1b      	ldr	r3, [r3, #32]
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d161      	bne.n	8003f0c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4a38      	ldr	r2, [pc, #224]	; (8003f2c <HAL_I2S_Init+0x274>)
 8003e4c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a37      	ldr	r2, [pc, #220]	; (8003f30 <HAL_I2S_Init+0x278>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d101      	bne.n	8003e5c <HAL_I2S_Init+0x1a4>
 8003e58:	4b36      	ldr	r3, [pc, #216]	; (8003f34 <HAL_I2S_Init+0x27c>)
 8003e5a:	e001      	b.n	8003e60 <HAL_I2S_Init+0x1a8>
 8003e5c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e60:	69db      	ldr	r3, [r3, #28]
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	6812      	ldr	r2, [r2, #0]
 8003e66:	4932      	ldr	r1, [pc, #200]	; (8003f30 <HAL_I2S_Init+0x278>)
 8003e68:	428a      	cmp	r2, r1
 8003e6a:	d101      	bne.n	8003e70 <HAL_I2S_Init+0x1b8>
 8003e6c:	4a31      	ldr	r2, [pc, #196]	; (8003f34 <HAL_I2S_Init+0x27c>)
 8003e6e:	e001      	b.n	8003e74 <HAL_I2S_Init+0x1bc>
 8003e70:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003e74:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003e78:	f023 030f 	bic.w	r3, r3, #15
 8003e7c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a2b      	ldr	r2, [pc, #172]	; (8003f30 <HAL_I2S_Init+0x278>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d101      	bne.n	8003e8c <HAL_I2S_Init+0x1d4>
 8003e88:	4b2a      	ldr	r3, [pc, #168]	; (8003f34 <HAL_I2S_Init+0x27c>)
 8003e8a:	e001      	b.n	8003e90 <HAL_I2S_Init+0x1d8>
 8003e8c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e90:	2202      	movs	r2, #2
 8003e92:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a25      	ldr	r2, [pc, #148]	; (8003f30 <HAL_I2S_Init+0x278>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d101      	bne.n	8003ea2 <HAL_I2S_Init+0x1ea>
 8003e9e:	4b25      	ldr	r3, [pc, #148]	; (8003f34 <HAL_I2S_Init+0x27c>)
 8003ea0:	e001      	b.n	8003ea6 <HAL_I2S_Init+0x1ee>
 8003ea2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ea6:	69db      	ldr	r3, [r3, #28]
 8003ea8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003eb2:	d003      	beq.n	8003ebc <HAL_I2S_Init+0x204>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d103      	bne.n	8003ec4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003ebc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ec0:	613b      	str	r3, [r7, #16]
 8003ec2:	e001      	b.n	8003ec8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003edc:	4313      	orrs	r3, r2
 8003ede:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	699b      	ldr	r3, [r3, #24]
 8003ee4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	b29a      	uxth	r2, r3
 8003eea:	897b      	ldrh	r3, [r7, #10]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003ef4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a0d      	ldr	r2, [pc, #52]	; (8003f30 <HAL_I2S_Init+0x278>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d101      	bne.n	8003f04 <HAL_I2S_Init+0x24c>
 8003f00:	4b0c      	ldr	r3, [pc, #48]	; (8003f34 <HAL_I2S_Init+0x27c>)
 8003f02:	e001      	b.n	8003f08 <HAL_I2S_Init+0x250>
 8003f04:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f08:	897a      	ldrh	r2, [r7, #10]
 8003f0a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2201      	movs	r2, #1
 8003f16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003f1a:	2300      	movs	r3, #0
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3720      	adds	r7, #32
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	0800402f 	.word	0x0800402f
 8003f28:	cccccccd 	.word	0xcccccccd
 8003f2c:	08004145 	.word	0x08004145
 8003f30:	40003800 	.word	0x40003800
 8003f34:	40003400 	.word	0x40003400

08003f38 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003f40:	bf00      	nop
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003f54:	bf00      	nop
 8003f56:	370c      	adds	r7, #12
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003f68:	bf00      	nop
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f80:	881a      	ldrh	r2, [r3, #0]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8c:	1c9a      	adds	r2, r3, #2
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	3b01      	subs	r3, #1
 8003f9a:	b29a      	uxth	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d10e      	bne.n	8003fc8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	685a      	ldr	r2, [r3, #4]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003fb8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f7ff ffb8 	bl	8003f38 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003fc8:	bf00      	nop
 8003fca:	3708      	adds	r7, #8
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b082      	sub	sp, #8
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	68da      	ldr	r2, [r3, #12]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe2:	b292      	uxth	r2, r2
 8003fe4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fea:	1c9a      	adds	r2, r3, #2
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	b29a      	uxth	r2, r3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004002:	b29b      	uxth	r3, r3
 8004004:	2b00      	cmp	r3, #0
 8004006:	d10e      	bne.n	8004026 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	685a      	ldr	r2, [r3, #4]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004016:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f7ff ff93 	bl	8003f4c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004026:	bf00      	nop
 8004028:	3708      	adds	r7, #8
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}

0800402e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800402e:	b580      	push	{r7, lr}
 8004030:	b086      	sub	sp, #24
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004044:	b2db      	uxtb	r3, r3
 8004046:	2b04      	cmp	r3, #4
 8004048:	d13a      	bne.n	80040c0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	f003 0301 	and.w	r3, r3, #1
 8004050:	2b01      	cmp	r3, #1
 8004052:	d109      	bne.n	8004068 <I2S_IRQHandler+0x3a>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800405e:	2b40      	cmp	r3, #64	; 0x40
 8004060:	d102      	bne.n	8004068 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f7ff ffb4 	bl	8003fd0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800406e:	2b40      	cmp	r3, #64	; 0x40
 8004070:	d126      	bne.n	80040c0 <I2S_IRQHandler+0x92>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f003 0320 	and.w	r3, r3, #32
 800407c:	2b20      	cmp	r3, #32
 800407e:	d11f      	bne.n	80040c0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	685a      	ldr	r2, [r3, #4]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800408e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004090:	2300      	movs	r3, #0
 8004092:	613b      	str	r3, [r7, #16]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	613b      	str	r3, [r7, #16]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	613b      	str	r3, [r7, #16]
 80040a4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2201      	movs	r2, #1
 80040aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040b2:	f043 0202 	orr.w	r2, r3, #2
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f7ff ff50 	bl	8003f60 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	2b03      	cmp	r3, #3
 80040ca:	d136      	bne.n	800413a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	f003 0302 	and.w	r3, r3, #2
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d109      	bne.n	80040ea <I2S_IRQHandler+0xbc>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040e0:	2b80      	cmp	r3, #128	; 0x80
 80040e2:	d102      	bne.n	80040ea <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f7ff ff45 	bl	8003f74 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	f003 0308 	and.w	r3, r3, #8
 80040f0:	2b08      	cmp	r3, #8
 80040f2:	d122      	bne.n	800413a <I2S_IRQHandler+0x10c>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	f003 0320 	and.w	r3, r3, #32
 80040fe:	2b20      	cmp	r3, #32
 8004100:	d11b      	bne.n	800413a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	685a      	ldr	r2, [r3, #4]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004110:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004112:	2300      	movs	r3, #0
 8004114:	60fb      	str	r3, [r7, #12]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	60fb      	str	r3, [r7, #12]
 800411e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800412c:	f043 0204 	orr.w	r2, r3, #4
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f7ff ff13 	bl	8003f60 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800413a:	bf00      	nop
 800413c:	3718      	adds	r7, #24
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
	...

08004144 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b088      	sub	sp, #32
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4aa2      	ldr	r2, [pc, #648]	; (80043e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d101      	bne.n	8004162 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800415e:	4ba2      	ldr	r3, [pc, #648]	; (80043e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004160:	e001      	b.n	8004166 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004162:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a9b      	ldr	r2, [pc, #620]	; (80043e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d101      	bne.n	8004180 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800417c:	4b9a      	ldr	r3, [pc, #616]	; (80043e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800417e:	e001      	b.n	8004184 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004180:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004190:	d004      	beq.n	800419c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	2b00      	cmp	r3, #0
 8004198:	f040 8099 	bne.w	80042ce <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	f003 0302 	and.w	r3, r3, #2
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d107      	bne.n	80041b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d002      	beq.n	80041b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f000 f925 	bl	8004400 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	f003 0301 	and.w	r3, r3, #1
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d107      	bne.n	80041d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d002      	beq.n	80041d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f000 f9c8 	bl	8004560 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80041d0:	69bb      	ldr	r3, [r7, #24]
 80041d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d6:	2b40      	cmp	r3, #64	; 0x40
 80041d8:	d13a      	bne.n	8004250 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	f003 0320 	and.w	r3, r3, #32
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d035      	beq.n	8004250 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a7e      	ldr	r2, [pc, #504]	; (80043e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d101      	bne.n	80041f2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80041ee:	4b7e      	ldr	r3, [pc, #504]	; (80043e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80041f0:	e001      	b.n	80041f6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80041f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041f6:	685a      	ldr	r2, [r3, #4]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4979      	ldr	r1, [pc, #484]	; (80043e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80041fe:	428b      	cmp	r3, r1
 8004200:	d101      	bne.n	8004206 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004202:	4b79      	ldr	r3, [pc, #484]	; (80043e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004204:	e001      	b.n	800420a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004206:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800420a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800420e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	685a      	ldr	r2, [r3, #4]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800421e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004220:	2300      	movs	r3, #0
 8004222:	60fb      	str	r3, [r7, #12]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	60fb      	str	r3, [r7, #12]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	60fb      	str	r3, [r7, #12]
 8004234:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2201      	movs	r2, #1
 800423a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004242:	f043 0202 	orr.w	r2, r3, #2
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f7ff fe88 	bl	8003f60 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	f003 0308 	and.w	r3, r3, #8
 8004256:	2b08      	cmp	r3, #8
 8004258:	f040 80be 	bne.w	80043d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	f003 0320 	and.w	r3, r3, #32
 8004262:	2b00      	cmp	r3, #0
 8004264:	f000 80b8 	beq.w	80043d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	685a      	ldr	r2, [r3, #4]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004276:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a59      	ldr	r2, [pc, #356]	; (80043e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d101      	bne.n	8004286 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004282:	4b59      	ldr	r3, [pc, #356]	; (80043e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004284:	e001      	b.n	800428a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004286:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800428a:	685a      	ldr	r2, [r3, #4]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4954      	ldr	r1, [pc, #336]	; (80043e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004292:	428b      	cmp	r3, r1
 8004294:	d101      	bne.n	800429a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004296:	4b54      	ldr	r3, [pc, #336]	; (80043e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004298:	e001      	b.n	800429e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800429a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800429e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80042a2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80042a4:	2300      	movs	r3, #0
 80042a6:	60bb      	str	r3, [r7, #8]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	60bb      	str	r3, [r7, #8]
 80042b0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2201      	movs	r2, #1
 80042b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042be:	f043 0204 	orr.w	r2, r3, #4
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f7ff fe4a 	bl	8003f60 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80042cc:	e084      	b.n	80043d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80042ce:	69bb      	ldr	r3, [r7, #24]
 80042d0:	f003 0302 	and.w	r3, r3, #2
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d107      	bne.n	80042e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d002      	beq.n	80042e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f000 f8be 	bl	8004464 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	f003 0301 	and.w	r3, r3, #1
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d107      	bne.n	8004302 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d002      	beq.n	8004302 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f000 f8fd 	bl	80044fc <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004308:	2b40      	cmp	r3, #64	; 0x40
 800430a:	d12f      	bne.n	800436c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	f003 0320 	and.w	r3, r3, #32
 8004312:	2b00      	cmp	r3, #0
 8004314:	d02a      	beq.n	800436c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	685a      	ldr	r2, [r3, #4]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004324:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a2e      	ldr	r2, [pc, #184]	; (80043e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d101      	bne.n	8004334 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004330:	4b2d      	ldr	r3, [pc, #180]	; (80043e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004332:	e001      	b.n	8004338 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004334:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004338:	685a      	ldr	r2, [r3, #4]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4929      	ldr	r1, [pc, #164]	; (80043e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004340:	428b      	cmp	r3, r1
 8004342:	d101      	bne.n	8004348 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004344:	4b28      	ldr	r3, [pc, #160]	; (80043e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004346:	e001      	b.n	800434c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004348:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800434c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004350:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2201      	movs	r2, #1
 8004356:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800435e:	f043 0202 	orr.w	r2, r3, #2
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f7ff fdfa 	bl	8003f60 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800436c:	69bb      	ldr	r3, [r7, #24]
 800436e:	f003 0308 	and.w	r3, r3, #8
 8004372:	2b08      	cmp	r3, #8
 8004374:	d131      	bne.n	80043da <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	f003 0320 	and.w	r3, r3, #32
 800437c:	2b00      	cmp	r3, #0
 800437e:	d02c      	beq.n	80043da <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a17      	ldr	r2, [pc, #92]	; (80043e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d101      	bne.n	800438e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800438a:	4b17      	ldr	r3, [pc, #92]	; (80043e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800438c:	e001      	b.n	8004392 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800438e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004392:	685a      	ldr	r2, [r3, #4]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4912      	ldr	r1, [pc, #72]	; (80043e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800439a:	428b      	cmp	r3, r1
 800439c:	d101      	bne.n	80043a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800439e:	4b12      	ldr	r3, [pc, #72]	; (80043e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80043a0:	e001      	b.n	80043a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80043a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043a6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80043aa:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	685a      	ldr	r2, [r3, #4]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80043ba:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043c8:	f043 0204 	orr.w	r2, r3, #4
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f7ff fdc5 	bl	8003f60 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80043d6:	e000      	b.n	80043da <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80043d8:	bf00      	nop
}
 80043da:	bf00      	nop
 80043dc:	3720      	adds	r7, #32
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	40003800 	.word	0x40003800
 80043e8:	40003400 	.word	0x40003400

080043ec <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80043f4:	bf00      	nop
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b082      	sub	sp, #8
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440c:	1c99      	adds	r1, r3, #2
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	6251      	str	r1, [r2, #36]	; 0x24
 8004412:	881a      	ldrh	r2, [r3, #0]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800441e:	b29b      	uxth	r3, r3
 8004420:	3b01      	subs	r3, #1
 8004422:	b29a      	uxth	r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800442c:	b29b      	uxth	r3, r3
 800442e:	2b00      	cmp	r3, #0
 8004430:	d113      	bne.n	800445a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	685a      	ldr	r2, [r3, #4]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004440:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004446:	b29b      	uxth	r3, r3
 8004448:	2b00      	cmp	r3, #0
 800444a:	d106      	bne.n	800445a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f7ff ffc9 	bl	80043ec <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800445a:	bf00      	nop
 800445c:	3708      	adds	r7, #8
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
	...

08004464 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004470:	1c99      	adds	r1, r3, #2
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	6251      	str	r1, [r2, #36]	; 0x24
 8004476:	8819      	ldrh	r1, [r3, #0]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a1d      	ldr	r2, [pc, #116]	; (80044f4 <I2SEx_TxISR_I2SExt+0x90>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d101      	bne.n	8004486 <I2SEx_TxISR_I2SExt+0x22>
 8004482:	4b1d      	ldr	r3, [pc, #116]	; (80044f8 <I2SEx_TxISR_I2SExt+0x94>)
 8004484:	e001      	b.n	800448a <I2SEx_TxISR_I2SExt+0x26>
 8004486:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800448a:	460a      	mov	r2, r1
 800448c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004492:	b29b      	uxth	r3, r3
 8004494:	3b01      	subs	r3, #1
 8004496:	b29a      	uxth	r2, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d121      	bne.n	80044ea <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a12      	ldr	r2, [pc, #72]	; (80044f4 <I2SEx_TxISR_I2SExt+0x90>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d101      	bne.n	80044b4 <I2SEx_TxISR_I2SExt+0x50>
 80044b0:	4b11      	ldr	r3, [pc, #68]	; (80044f8 <I2SEx_TxISR_I2SExt+0x94>)
 80044b2:	e001      	b.n	80044b8 <I2SEx_TxISR_I2SExt+0x54>
 80044b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044b8:	685a      	ldr	r2, [r3, #4]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	490d      	ldr	r1, [pc, #52]	; (80044f4 <I2SEx_TxISR_I2SExt+0x90>)
 80044c0:	428b      	cmp	r3, r1
 80044c2:	d101      	bne.n	80044c8 <I2SEx_TxISR_I2SExt+0x64>
 80044c4:	4b0c      	ldr	r3, [pc, #48]	; (80044f8 <I2SEx_TxISR_I2SExt+0x94>)
 80044c6:	e001      	b.n	80044cc <I2SEx_TxISR_I2SExt+0x68>
 80044c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044cc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80044d0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d106      	bne.n	80044ea <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f7ff ff81 	bl	80043ec <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80044ea:	bf00      	nop
 80044ec:	3708      	adds	r7, #8
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	40003800 	.word	0x40003800
 80044f8:	40003400 	.word	0x40003400

080044fc <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b082      	sub	sp, #8
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68d8      	ldr	r0, [r3, #12]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800450e:	1c99      	adds	r1, r3, #2
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004514:	b282      	uxth	r2, r0
 8004516:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800451c:	b29b      	uxth	r3, r3
 800451e:	3b01      	subs	r3, #1
 8004520:	b29a      	uxth	r2, r3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800452a:	b29b      	uxth	r3, r3
 800452c:	2b00      	cmp	r3, #0
 800452e:	d113      	bne.n	8004558 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	685a      	ldr	r2, [r3, #4]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800453e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004544:	b29b      	uxth	r3, r3
 8004546:	2b00      	cmp	r3, #0
 8004548:	d106      	bne.n	8004558 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2201      	movs	r2, #1
 800454e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f7ff ff4a 	bl	80043ec <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004558:	bf00      	nop
 800455a:	3708      	adds	r7, #8
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b082      	sub	sp, #8
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a20      	ldr	r2, [pc, #128]	; (80045f0 <I2SEx_RxISR_I2SExt+0x90>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d101      	bne.n	8004576 <I2SEx_RxISR_I2SExt+0x16>
 8004572:	4b20      	ldr	r3, [pc, #128]	; (80045f4 <I2SEx_RxISR_I2SExt+0x94>)
 8004574:	e001      	b.n	800457a <I2SEx_RxISR_I2SExt+0x1a>
 8004576:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800457a:	68d8      	ldr	r0, [r3, #12]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004580:	1c99      	adds	r1, r3, #2
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004586:	b282      	uxth	r2, r0
 8004588:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800458e:	b29b      	uxth	r3, r3
 8004590:	3b01      	subs	r3, #1
 8004592:	b29a      	uxth	r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800459c:	b29b      	uxth	r3, r3
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d121      	bne.n	80045e6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a12      	ldr	r2, [pc, #72]	; (80045f0 <I2SEx_RxISR_I2SExt+0x90>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d101      	bne.n	80045b0 <I2SEx_RxISR_I2SExt+0x50>
 80045ac:	4b11      	ldr	r3, [pc, #68]	; (80045f4 <I2SEx_RxISR_I2SExt+0x94>)
 80045ae:	e001      	b.n	80045b4 <I2SEx_RxISR_I2SExt+0x54>
 80045b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045b4:	685a      	ldr	r2, [r3, #4]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	490d      	ldr	r1, [pc, #52]	; (80045f0 <I2SEx_RxISR_I2SExt+0x90>)
 80045bc:	428b      	cmp	r3, r1
 80045be:	d101      	bne.n	80045c4 <I2SEx_RxISR_I2SExt+0x64>
 80045c0:	4b0c      	ldr	r3, [pc, #48]	; (80045f4 <I2SEx_RxISR_I2SExt+0x94>)
 80045c2:	e001      	b.n	80045c8 <I2SEx_RxISR_I2SExt+0x68>
 80045c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045c8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80045cc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d106      	bne.n	80045e6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f7ff ff03 	bl	80043ec <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80045e6:	bf00      	nop
 80045e8:	3708      	adds	r7, #8
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	40003800 	.word	0x40003800
 80045f4:	40003400 	.word	0x40003400

080045f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b086      	sub	sp, #24
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d101      	bne.n	800460a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e264      	b.n	8004ad4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0301 	and.w	r3, r3, #1
 8004612:	2b00      	cmp	r3, #0
 8004614:	d075      	beq.n	8004702 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004616:	4ba3      	ldr	r3, [pc, #652]	; (80048a4 <HAL_RCC_OscConfig+0x2ac>)
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	f003 030c 	and.w	r3, r3, #12
 800461e:	2b04      	cmp	r3, #4
 8004620:	d00c      	beq.n	800463c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004622:	4ba0      	ldr	r3, [pc, #640]	; (80048a4 <HAL_RCC_OscConfig+0x2ac>)
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800462a:	2b08      	cmp	r3, #8
 800462c:	d112      	bne.n	8004654 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800462e:	4b9d      	ldr	r3, [pc, #628]	; (80048a4 <HAL_RCC_OscConfig+0x2ac>)
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004636:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800463a:	d10b      	bne.n	8004654 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800463c:	4b99      	ldr	r3, [pc, #612]	; (80048a4 <HAL_RCC_OscConfig+0x2ac>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004644:	2b00      	cmp	r3, #0
 8004646:	d05b      	beq.n	8004700 <HAL_RCC_OscConfig+0x108>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d157      	bne.n	8004700 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e23f      	b.n	8004ad4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800465c:	d106      	bne.n	800466c <HAL_RCC_OscConfig+0x74>
 800465e:	4b91      	ldr	r3, [pc, #580]	; (80048a4 <HAL_RCC_OscConfig+0x2ac>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a90      	ldr	r2, [pc, #576]	; (80048a4 <HAL_RCC_OscConfig+0x2ac>)
 8004664:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004668:	6013      	str	r3, [r2, #0]
 800466a:	e01d      	b.n	80046a8 <HAL_RCC_OscConfig+0xb0>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004674:	d10c      	bne.n	8004690 <HAL_RCC_OscConfig+0x98>
 8004676:	4b8b      	ldr	r3, [pc, #556]	; (80048a4 <HAL_RCC_OscConfig+0x2ac>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a8a      	ldr	r2, [pc, #552]	; (80048a4 <HAL_RCC_OscConfig+0x2ac>)
 800467c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004680:	6013      	str	r3, [r2, #0]
 8004682:	4b88      	ldr	r3, [pc, #544]	; (80048a4 <HAL_RCC_OscConfig+0x2ac>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a87      	ldr	r2, [pc, #540]	; (80048a4 <HAL_RCC_OscConfig+0x2ac>)
 8004688:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800468c:	6013      	str	r3, [r2, #0]
 800468e:	e00b      	b.n	80046a8 <HAL_RCC_OscConfig+0xb0>
 8004690:	4b84      	ldr	r3, [pc, #528]	; (80048a4 <HAL_RCC_OscConfig+0x2ac>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a83      	ldr	r2, [pc, #524]	; (80048a4 <HAL_RCC_OscConfig+0x2ac>)
 8004696:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800469a:	6013      	str	r3, [r2, #0]
 800469c:	4b81      	ldr	r3, [pc, #516]	; (80048a4 <HAL_RCC_OscConfig+0x2ac>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a80      	ldr	r2, [pc, #512]	; (80048a4 <HAL_RCC_OscConfig+0x2ac>)
 80046a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d013      	beq.n	80046d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046b0:	f7fc fc90 	bl	8000fd4 <HAL_GetTick>
 80046b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046b6:	e008      	b.n	80046ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046b8:	f7fc fc8c 	bl	8000fd4 <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	2b64      	cmp	r3, #100	; 0x64
 80046c4:	d901      	bls.n	80046ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e204      	b.n	8004ad4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046ca:	4b76      	ldr	r3, [pc, #472]	; (80048a4 <HAL_RCC_OscConfig+0x2ac>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d0f0      	beq.n	80046b8 <HAL_RCC_OscConfig+0xc0>
 80046d6:	e014      	b.n	8004702 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046d8:	f7fc fc7c 	bl	8000fd4 <HAL_GetTick>
 80046dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046de:	e008      	b.n	80046f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046e0:	f7fc fc78 	bl	8000fd4 <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	2b64      	cmp	r3, #100	; 0x64
 80046ec:	d901      	bls.n	80046f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e1f0      	b.n	8004ad4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046f2:	4b6c      	ldr	r3, [pc, #432]	; (80048a4 <HAL_RCC_OscConfig+0x2ac>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d1f0      	bne.n	80046e0 <HAL_RCC_OscConfig+0xe8>
 80046fe:	e000      	b.n	8004702 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004700:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0302 	and.w	r3, r3, #2
 800470a:	2b00      	cmp	r3, #0
 800470c:	d063      	beq.n	80047d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800470e:	4b65      	ldr	r3, [pc, #404]	; (80048a4 <HAL_RCC_OscConfig+0x2ac>)
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	f003 030c 	and.w	r3, r3, #12
 8004716:	2b00      	cmp	r3, #0
 8004718:	d00b      	beq.n	8004732 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800471a:	4b62      	ldr	r3, [pc, #392]	; (80048a4 <HAL_RCC_OscConfig+0x2ac>)
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004722:	2b08      	cmp	r3, #8
 8004724:	d11c      	bne.n	8004760 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004726:	4b5f      	ldr	r3, [pc, #380]	; (80048a4 <HAL_RCC_OscConfig+0x2ac>)
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d116      	bne.n	8004760 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004732:	4b5c      	ldr	r3, [pc, #368]	; (80048a4 <HAL_RCC_OscConfig+0x2ac>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0302 	and.w	r3, r3, #2
 800473a:	2b00      	cmp	r3, #0
 800473c:	d005      	beq.n	800474a <HAL_RCC_OscConfig+0x152>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	2b01      	cmp	r3, #1
 8004744:	d001      	beq.n	800474a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e1c4      	b.n	8004ad4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800474a:	4b56      	ldr	r3, [pc, #344]	; (80048a4 <HAL_RCC_OscConfig+0x2ac>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	00db      	lsls	r3, r3, #3
 8004758:	4952      	ldr	r1, [pc, #328]	; (80048a4 <HAL_RCC_OscConfig+0x2ac>)
 800475a:	4313      	orrs	r3, r2
 800475c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800475e:	e03a      	b.n	80047d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d020      	beq.n	80047aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004768:	4b4f      	ldr	r3, [pc, #316]	; (80048a8 <HAL_RCC_OscConfig+0x2b0>)
 800476a:	2201      	movs	r2, #1
 800476c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800476e:	f7fc fc31 	bl	8000fd4 <HAL_GetTick>
 8004772:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004774:	e008      	b.n	8004788 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004776:	f7fc fc2d 	bl	8000fd4 <HAL_GetTick>
 800477a:	4602      	mov	r2, r0
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	2b02      	cmp	r3, #2
 8004782:	d901      	bls.n	8004788 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e1a5      	b.n	8004ad4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004788:	4b46      	ldr	r3, [pc, #280]	; (80048a4 <HAL_RCC_OscConfig+0x2ac>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0302 	and.w	r3, r3, #2
 8004790:	2b00      	cmp	r3, #0
 8004792:	d0f0      	beq.n	8004776 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004794:	4b43      	ldr	r3, [pc, #268]	; (80048a4 <HAL_RCC_OscConfig+0x2ac>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	691b      	ldr	r3, [r3, #16]
 80047a0:	00db      	lsls	r3, r3, #3
 80047a2:	4940      	ldr	r1, [pc, #256]	; (80048a4 <HAL_RCC_OscConfig+0x2ac>)
 80047a4:	4313      	orrs	r3, r2
 80047a6:	600b      	str	r3, [r1, #0]
 80047a8:	e015      	b.n	80047d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047aa:	4b3f      	ldr	r3, [pc, #252]	; (80048a8 <HAL_RCC_OscConfig+0x2b0>)
 80047ac:	2200      	movs	r2, #0
 80047ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b0:	f7fc fc10 	bl	8000fd4 <HAL_GetTick>
 80047b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047b6:	e008      	b.n	80047ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047b8:	f7fc fc0c 	bl	8000fd4 <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d901      	bls.n	80047ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e184      	b.n	8004ad4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047ca:	4b36      	ldr	r3, [pc, #216]	; (80048a4 <HAL_RCC_OscConfig+0x2ac>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0302 	and.w	r3, r3, #2
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d1f0      	bne.n	80047b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0308 	and.w	r3, r3, #8
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d030      	beq.n	8004844 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	695b      	ldr	r3, [r3, #20]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d016      	beq.n	8004818 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047ea:	4b30      	ldr	r3, [pc, #192]	; (80048ac <HAL_RCC_OscConfig+0x2b4>)
 80047ec:	2201      	movs	r2, #1
 80047ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047f0:	f7fc fbf0 	bl	8000fd4 <HAL_GetTick>
 80047f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047f6:	e008      	b.n	800480a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047f8:	f7fc fbec 	bl	8000fd4 <HAL_GetTick>
 80047fc:	4602      	mov	r2, r0
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	2b02      	cmp	r3, #2
 8004804:	d901      	bls.n	800480a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e164      	b.n	8004ad4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800480a:	4b26      	ldr	r3, [pc, #152]	; (80048a4 <HAL_RCC_OscConfig+0x2ac>)
 800480c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800480e:	f003 0302 	and.w	r3, r3, #2
 8004812:	2b00      	cmp	r3, #0
 8004814:	d0f0      	beq.n	80047f8 <HAL_RCC_OscConfig+0x200>
 8004816:	e015      	b.n	8004844 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004818:	4b24      	ldr	r3, [pc, #144]	; (80048ac <HAL_RCC_OscConfig+0x2b4>)
 800481a:	2200      	movs	r2, #0
 800481c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800481e:	f7fc fbd9 	bl	8000fd4 <HAL_GetTick>
 8004822:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004824:	e008      	b.n	8004838 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004826:	f7fc fbd5 	bl	8000fd4 <HAL_GetTick>
 800482a:	4602      	mov	r2, r0
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	1ad3      	subs	r3, r2, r3
 8004830:	2b02      	cmp	r3, #2
 8004832:	d901      	bls.n	8004838 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004834:	2303      	movs	r3, #3
 8004836:	e14d      	b.n	8004ad4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004838:	4b1a      	ldr	r3, [pc, #104]	; (80048a4 <HAL_RCC_OscConfig+0x2ac>)
 800483a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800483c:	f003 0302 	and.w	r3, r3, #2
 8004840:	2b00      	cmp	r3, #0
 8004842:	d1f0      	bne.n	8004826 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0304 	and.w	r3, r3, #4
 800484c:	2b00      	cmp	r3, #0
 800484e:	f000 80a0 	beq.w	8004992 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004852:	2300      	movs	r3, #0
 8004854:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004856:	4b13      	ldr	r3, [pc, #76]	; (80048a4 <HAL_RCC_OscConfig+0x2ac>)
 8004858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d10f      	bne.n	8004882 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004862:	2300      	movs	r3, #0
 8004864:	60bb      	str	r3, [r7, #8]
 8004866:	4b0f      	ldr	r3, [pc, #60]	; (80048a4 <HAL_RCC_OscConfig+0x2ac>)
 8004868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486a:	4a0e      	ldr	r2, [pc, #56]	; (80048a4 <HAL_RCC_OscConfig+0x2ac>)
 800486c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004870:	6413      	str	r3, [r2, #64]	; 0x40
 8004872:	4b0c      	ldr	r3, [pc, #48]	; (80048a4 <HAL_RCC_OscConfig+0x2ac>)
 8004874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800487a:	60bb      	str	r3, [r7, #8]
 800487c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800487e:	2301      	movs	r3, #1
 8004880:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004882:	4b0b      	ldr	r3, [pc, #44]	; (80048b0 <HAL_RCC_OscConfig+0x2b8>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800488a:	2b00      	cmp	r3, #0
 800488c:	d121      	bne.n	80048d2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800488e:	4b08      	ldr	r3, [pc, #32]	; (80048b0 <HAL_RCC_OscConfig+0x2b8>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a07      	ldr	r2, [pc, #28]	; (80048b0 <HAL_RCC_OscConfig+0x2b8>)
 8004894:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004898:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800489a:	f7fc fb9b 	bl	8000fd4 <HAL_GetTick>
 800489e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048a0:	e011      	b.n	80048c6 <HAL_RCC_OscConfig+0x2ce>
 80048a2:	bf00      	nop
 80048a4:	40023800 	.word	0x40023800
 80048a8:	42470000 	.word	0x42470000
 80048ac:	42470e80 	.word	0x42470e80
 80048b0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048b4:	f7fc fb8e 	bl	8000fd4 <HAL_GetTick>
 80048b8:	4602      	mov	r2, r0
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d901      	bls.n	80048c6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e106      	b.n	8004ad4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048c6:	4b85      	ldr	r3, [pc, #532]	; (8004adc <HAL_RCC_OscConfig+0x4e4>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d0f0      	beq.n	80048b4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d106      	bne.n	80048e8 <HAL_RCC_OscConfig+0x2f0>
 80048da:	4b81      	ldr	r3, [pc, #516]	; (8004ae0 <HAL_RCC_OscConfig+0x4e8>)
 80048dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048de:	4a80      	ldr	r2, [pc, #512]	; (8004ae0 <HAL_RCC_OscConfig+0x4e8>)
 80048e0:	f043 0301 	orr.w	r3, r3, #1
 80048e4:	6713      	str	r3, [r2, #112]	; 0x70
 80048e6:	e01c      	b.n	8004922 <HAL_RCC_OscConfig+0x32a>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	2b05      	cmp	r3, #5
 80048ee:	d10c      	bne.n	800490a <HAL_RCC_OscConfig+0x312>
 80048f0:	4b7b      	ldr	r3, [pc, #492]	; (8004ae0 <HAL_RCC_OscConfig+0x4e8>)
 80048f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048f4:	4a7a      	ldr	r2, [pc, #488]	; (8004ae0 <HAL_RCC_OscConfig+0x4e8>)
 80048f6:	f043 0304 	orr.w	r3, r3, #4
 80048fa:	6713      	str	r3, [r2, #112]	; 0x70
 80048fc:	4b78      	ldr	r3, [pc, #480]	; (8004ae0 <HAL_RCC_OscConfig+0x4e8>)
 80048fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004900:	4a77      	ldr	r2, [pc, #476]	; (8004ae0 <HAL_RCC_OscConfig+0x4e8>)
 8004902:	f043 0301 	orr.w	r3, r3, #1
 8004906:	6713      	str	r3, [r2, #112]	; 0x70
 8004908:	e00b      	b.n	8004922 <HAL_RCC_OscConfig+0x32a>
 800490a:	4b75      	ldr	r3, [pc, #468]	; (8004ae0 <HAL_RCC_OscConfig+0x4e8>)
 800490c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800490e:	4a74      	ldr	r2, [pc, #464]	; (8004ae0 <HAL_RCC_OscConfig+0x4e8>)
 8004910:	f023 0301 	bic.w	r3, r3, #1
 8004914:	6713      	str	r3, [r2, #112]	; 0x70
 8004916:	4b72      	ldr	r3, [pc, #456]	; (8004ae0 <HAL_RCC_OscConfig+0x4e8>)
 8004918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800491a:	4a71      	ldr	r2, [pc, #452]	; (8004ae0 <HAL_RCC_OscConfig+0x4e8>)
 800491c:	f023 0304 	bic.w	r3, r3, #4
 8004920:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d015      	beq.n	8004956 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800492a:	f7fc fb53 	bl	8000fd4 <HAL_GetTick>
 800492e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004930:	e00a      	b.n	8004948 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004932:	f7fc fb4f 	bl	8000fd4 <HAL_GetTick>
 8004936:	4602      	mov	r2, r0
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004940:	4293      	cmp	r3, r2
 8004942:	d901      	bls.n	8004948 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004944:	2303      	movs	r3, #3
 8004946:	e0c5      	b.n	8004ad4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004948:	4b65      	ldr	r3, [pc, #404]	; (8004ae0 <HAL_RCC_OscConfig+0x4e8>)
 800494a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800494c:	f003 0302 	and.w	r3, r3, #2
 8004950:	2b00      	cmp	r3, #0
 8004952:	d0ee      	beq.n	8004932 <HAL_RCC_OscConfig+0x33a>
 8004954:	e014      	b.n	8004980 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004956:	f7fc fb3d 	bl	8000fd4 <HAL_GetTick>
 800495a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800495c:	e00a      	b.n	8004974 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800495e:	f7fc fb39 	bl	8000fd4 <HAL_GetTick>
 8004962:	4602      	mov	r2, r0
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	f241 3288 	movw	r2, #5000	; 0x1388
 800496c:	4293      	cmp	r3, r2
 800496e:	d901      	bls.n	8004974 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004970:	2303      	movs	r3, #3
 8004972:	e0af      	b.n	8004ad4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004974:	4b5a      	ldr	r3, [pc, #360]	; (8004ae0 <HAL_RCC_OscConfig+0x4e8>)
 8004976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004978:	f003 0302 	and.w	r3, r3, #2
 800497c:	2b00      	cmp	r3, #0
 800497e:	d1ee      	bne.n	800495e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004980:	7dfb      	ldrb	r3, [r7, #23]
 8004982:	2b01      	cmp	r3, #1
 8004984:	d105      	bne.n	8004992 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004986:	4b56      	ldr	r3, [pc, #344]	; (8004ae0 <HAL_RCC_OscConfig+0x4e8>)
 8004988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498a:	4a55      	ldr	r2, [pc, #340]	; (8004ae0 <HAL_RCC_OscConfig+0x4e8>)
 800498c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004990:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	699b      	ldr	r3, [r3, #24]
 8004996:	2b00      	cmp	r3, #0
 8004998:	f000 809b 	beq.w	8004ad2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800499c:	4b50      	ldr	r3, [pc, #320]	; (8004ae0 <HAL_RCC_OscConfig+0x4e8>)
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	f003 030c 	and.w	r3, r3, #12
 80049a4:	2b08      	cmp	r3, #8
 80049a6:	d05c      	beq.n	8004a62 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	699b      	ldr	r3, [r3, #24]
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	d141      	bne.n	8004a34 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049b0:	4b4c      	ldr	r3, [pc, #304]	; (8004ae4 <HAL_RCC_OscConfig+0x4ec>)
 80049b2:	2200      	movs	r2, #0
 80049b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049b6:	f7fc fb0d 	bl	8000fd4 <HAL_GetTick>
 80049ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049bc:	e008      	b.n	80049d0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049be:	f7fc fb09 	bl	8000fd4 <HAL_GetTick>
 80049c2:	4602      	mov	r2, r0
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	2b02      	cmp	r3, #2
 80049ca:	d901      	bls.n	80049d0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e081      	b.n	8004ad4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049d0:	4b43      	ldr	r3, [pc, #268]	; (8004ae0 <HAL_RCC_OscConfig+0x4e8>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d1f0      	bne.n	80049be <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	69da      	ldr	r2, [r3, #28]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a1b      	ldr	r3, [r3, #32]
 80049e4:	431a      	orrs	r2, r3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ea:	019b      	lsls	r3, r3, #6
 80049ec:	431a      	orrs	r2, r3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f2:	085b      	lsrs	r3, r3, #1
 80049f4:	3b01      	subs	r3, #1
 80049f6:	041b      	lsls	r3, r3, #16
 80049f8:	431a      	orrs	r2, r3
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049fe:	061b      	lsls	r3, r3, #24
 8004a00:	4937      	ldr	r1, [pc, #220]	; (8004ae0 <HAL_RCC_OscConfig+0x4e8>)
 8004a02:	4313      	orrs	r3, r2
 8004a04:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a06:	4b37      	ldr	r3, [pc, #220]	; (8004ae4 <HAL_RCC_OscConfig+0x4ec>)
 8004a08:	2201      	movs	r2, #1
 8004a0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a0c:	f7fc fae2 	bl	8000fd4 <HAL_GetTick>
 8004a10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a12:	e008      	b.n	8004a26 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a14:	f7fc fade 	bl	8000fd4 <HAL_GetTick>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	2b02      	cmp	r3, #2
 8004a20:	d901      	bls.n	8004a26 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e056      	b.n	8004ad4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a26:	4b2e      	ldr	r3, [pc, #184]	; (8004ae0 <HAL_RCC_OscConfig+0x4e8>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d0f0      	beq.n	8004a14 <HAL_RCC_OscConfig+0x41c>
 8004a32:	e04e      	b.n	8004ad2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a34:	4b2b      	ldr	r3, [pc, #172]	; (8004ae4 <HAL_RCC_OscConfig+0x4ec>)
 8004a36:	2200      	movs	r2, #0
 8004a38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a3a:	f7fc facb 	bl	8000fd4 <HAL_GetTick>
 8004a3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a40:	e008      	b.n	8004a54 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a42:	f7fc fac7 	bl	8000fd4 <HAL_GetTick>
 8004a46:	4602      	mov	r2, r0
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	1ad3      	subs	r3, r2, r3
 8004a4c:	2b02      	cmp	r3, #2
 8004a4e:	d901      	bls.n	8004a54 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004a50:	2303      	movs	r3, #3
 8004a52:	e03f      	b.n	8004ad4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a54:	4b22      	ldr	r3, [pc, #136]	; (8004ae0 <HAL_RCC_OscConfig+0x4e8>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d1f0      	bne.n	8004a42 <HAL_RCC_OscConfig+0x44a>
 8004a60:	e037      	b.n	8004ad2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	699b      	ldr	r3, [r3, #24]
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d101      	bne.n	8004a6e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e032      	b.n	8004ad4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a6e:	4b1c      	ldr	r3, [pc, #112]	; (8004ae0 <HAL_RCC_OscConfig+0x4e8>)
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	699b      	ldr	r3, [r3, #24]
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d028      	beq.n	8004ace <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d121      	bne.n	8004ace <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d11a      	bne.n	8004ace <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a98:	68fa      	ldr	r2, [r7, #12]
 8004a9a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004aa4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d111      	bne.n	8004ace <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab4:	085b      	lsrs	r3, r3, #1
 8004ab6:	3b01      	subs	r3, #1
 8004ab8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d107      	bne.n	8004ace <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d001      	beq.n	8004ad2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e000      	b.n	8004ad4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004ad2:	2300      	movs	r3, #0
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3718      	adds	r7, #24
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	40007000 	.word	0x40007000
 8004ae0:	40023800 	.word	0x40023800
 8004ae4:	42470060 	.word	0x42470060

08004ae8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d101      	bne.n	8004afc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e0cc      	b.n	8004c96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004afc:	4b68      	ldr	r3, [pc, #416]	; (8004ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0307 	and.w	r3, r3, #7
 8004b04:	683a      	ldr	r2, [r7, #0]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d90c      	bls.n	8004b24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b0a:	4b65      	ldr	r3, [pc, #404]	; (8004ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b0c:	683a      	ldr	r2, [r7, #0]
 8004b0e:	b2d2      	uxtb	r2, r2
 8004b10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b12:	4b63      	ldr	r3, [pc, #396]	; (8004ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 0307 	and.w	r3, r3, #7
 8004b1a:	683a      	ldr	r2, [r7, #0]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d001      	beq.n	8004b24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e0b8      	b.n	8004c96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0302 	and.w	r3, r3, #2
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d020      	beq.n	8004b72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 0304 	and.w	r3, r3, #4
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d005      	beq.n	8004b48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b3c:	4b59      	ldr	r3, [pc, #356]	; (8004ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	4a58      	ldr	r2, [pc, #352]	; (8004ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004b46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0308 	and.w	r3, r3, #8
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d005      	beq.n	8004b60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b54:	4b53      	ldr	r3, [pc, #332]	; (8004ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	4a52      	ldr	r2, [pc, #328]	; (8004ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004b5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b60:	4b50      	ldr	r3, [pc, #320]	; (8004ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	494d      	ldr	r1, [pc, #308]	; (8004ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 0301 	and.w	r3, r3, #1
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d044      	beq.n	8004c08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d107      	bne.n	8004b96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b86:	4b47      	ldr	r3, [pc, #284]	; (8004ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d119      	bne.n	8004bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e07f      	b.n	8004c96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	2b02      	cmp	r3, #2
 8004b9c:	d003      	beq.n	8004ba6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ba2:	2b03      	cmp	r3, #3
 8004ba4:	d107      	bne.n	8004bb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ba6:	4b3f      	ldr	r3, [pc, #252]	; (8004ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d109      	bne.n	8004bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e06f      	b.n	8004c96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bb6:	4b3b      	ldr	r3, [pc, #236]	; (8004ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 0302 	and.w	r3, r3, #2
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d101      	bne.n	8004bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e067      	b.n	8004c96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bc6:	4b37      	ldr	r3, [pc, #220]	; (8004ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	f023 0203 	bic.w	r2, r3, #3
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	4934      	ldr	r1, [pc, #208]	; (8004ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004bd8:	f7fc f9fc 	bl	8000fd4 <HAL_GetTick>
 8004bdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bde:	e00a      	b.n	8004bf6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004be0:	f7fc f9f8 	bl	8000fd4 <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d901      	bls.n	8004bf6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	e04f      	b.n	8004c96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bf6:	4b2b      	ldr	r3, [pc, #172]	; (8004ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	f003 020c 	and.w	r2, r3, #12
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d1eb      	bne.n	8004be0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c08:	4b25      	ldr	r3, [pc, #148]	; (8004ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0307 	and.w	r3, r3, #7
 8004c10:	683a      	ldr	r2, [r7, #0]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d20c      	bcs.n	8004c30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c16:	4b22      	ldr	r3, [pc, #136]	; (8004ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c18:	683a      	ldr	r2, [r7, #0]
 8004c1a:	b2d2      	uxtb	r2, r2
 8004c1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c1e:	4b20      	ldr	r3, [pc, #128]	; (8004ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0307 	and.w	r3, r3, #7
 8004c26:	683a      	ldr	r2, [r7, #0]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d001      	beq.n	8004c30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e032      	b.n	8004c96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 0304 	and.w	r3, r3, #4
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d008      	beq.n	8004c4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c3c:	4b19      	ldr	r3, [pc, #100]	; (8004ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	4916      	ldr	r1, [pc, #88]	; (8004ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 0308 	and.w	r3, r3, #8
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d009      	beq.n	8004c6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c5a:	4b12      	ldr	r3, [pc, #72]	; (8004ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	00db      	lsls	r3, r3, #3
 8004c68:	490e      	ldr	r1, [pc, #56]	; (8004ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004c6e:	f000 f821 	bl	8004cb4 <HAL_RCC_GetSysClockFreq>
 8004c72:	4602      	mov	r2, r0
 8004c74:	4b0b      	ldr	r3, [pc, #44]	; (8004ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	091b      	lsrs	r3, r3, #4
 8004c7a:	f003 030f 	and.w	r3, r3, #15
 8004c7e:	490a      	ldr	r1, [pc, #40]	; (8004ca8 <HAL_RCC_ClockConfig+0x1c0>)
 8004c80:	5ccb      	ldrb	r3, [r1, r3]
 8004c82:	fa22 f303 	lsr.w	r3, r2, r3
 8004c86:	4a09      	ldr	r2, [pc, #36]	; (8004cac <HAL_RCC_ClockConfig+0x1c4>)
 8004c88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004c8a:	4b09      	ldr	r3, [pc, #36]	; (8004cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f7fc f95c 	bl	8000f4c <HAL_InitTick>

  return HAL_OK;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3710      	adds	r7, #16
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	40023c00 	.word	0x40023c00
 8004ca4:	40023800 	.word	0x40023800
 8004ca8:	08008e4c 	.word	0x08008e4c
 8004cac:	20000000 	.word	0x20000000
 8004cb0:	20000004 	.word	0x20000004

08004cb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cb4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004cb8:	b084      	sub	sp, #16
 8004cba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	607b      	str	r3, [r7, #4]
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	60fb      	str	r3, [r7, #12]
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ccc:	4b67      	ldr	r3, [pc, #412]	; (8004e6c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	f003 030c 	and.w	r3, r3, #12
 8004cd4:	2b08      	cmp	r3, #8
 8004cd6:	d00d      	beq.n	8004cf4 <HAL_RCC_GetSysClockFreq+0x40>
 8004cd8:	2b08      	cmp	r3, #8
 8004cda:	f200 80bd 	bhi.w	8004e58 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d002      	beq.n	8004ce8 <HAL_RCC_GetSysClockFreq+0x34>
 8004ce2:	2b04      	cmp	r3, #4
 8004ce4:	d003      	beq.n	8004cee <HAL_RCC_GetSysClockFreq+0x3a>
 8004ce6:	e0b7      	b.n	8004e58 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ce8:	4b61      	ldr	r3, [pc, #388]	; (8004e70 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004cea:	60bb      	str	r3, [r7, #8]
       break;
 8004cec:	e0b7      	b.n	8004e5e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004cee:	4b61      	ldr	r3, [pc, #388]	; (8004e74 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004cf0:	60bb      	str	r3, [r7, #8]
      break;
 8004cf2:	e0b4      	b.n	8004e5e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004cf4:	4b5d      	ldr	r3, [pc, #372]	; (8004e6c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cfc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004cfe:	4b5b      	ldr	r3, [pc, #364]	; (8004e6c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d04d      	beq.n	8004da6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d0a:	4b58      	ldr	r3, [pc, #352]	; (8004e6c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	099b      	lsrs	r3, r3, #6
 8004d10:	461a      	mov	r2, r3
 8004d12:	f04f 0300 	mov.w	r3, #0
 8004d16:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004d1a:	f04f 0100 	mov.w	r1, #0
 8004d1e:	ea02 0800 	and.w	r8, r2, r0
 8004d22:	ea03 0901 	and.w	r9, r3, r1
 8004d26:	4640      	mov	r0, r8
 8004d28:	4649      	mov	r1, r9
 8004d2a:	f04f 0200 	mov.w	r2, #0
 8004d2e:	f04f 0300 	mov.w	r3, #0
 8004d32:	014b      	lsls	r3, r1, #5
 8004d34:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004d38:	0142      	lsls	r2, r0, #5
 8004d3a:	4610      	mov	r0, r2
 8004d3c:	4619      	mov	r1, r3
 8004d3e:	ebb0 0008 	subs.w	r0, r0, r8
 8004d42:	eb61 0109 	sbc.w	r1, r1, r9
 8004d46:	f04f 0200 	mov.w	r2, #0
 8004d4a:	f04f 0300 	mov.w	r3, #0
 8004d4e:	018b      	lsls	r3, r1, #6
 8004d50:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004d54:	0182      	lsls	r2, r0, #6
 8004d56:	1a12      	subs	r2, r2, r0
 8004d58:	eb63 0301 	sbc.w	r3, r3, r1
 8004d5c:	f04f 0000 	mov.w	r0, #0
 8004d60:	f04f 0100 	mov.w	r1, #0
 8004d64:	00d9      	lsls	r1, r3, #3
 8004d66:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004d6a:	00d0      	lsls	r0, r2, #3
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	460b      	mov	r3, r1
 8004d70:	eb12 0208 	adds.w	r2, r2, r8
 8004d74:	eb43 0309 	adc.w	r3, r3, r9
 8004d78:	f04f 0000 	mov.w	r0, #0
 8004d7c:	f04f 0100 	mov.w	r1, #0
 8004d80:	0259      	lsls	r1, r3, #9
 8004d82:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004d86:	0250      	lsls	r0, r2, #9
 8004d88:	4602      	mov	r2, r0
 8004d8a:	460b      	mov	r3, r1
 8004d8c:	4610      	mov	r0, r2
 8004d8e:	4619      	mov	r1, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	461a      	mov	r2, r3
 8004d94:	f04f 0300 	mov.w	r3, #0
 8004d98:	f7fb fa16 	bl	80001c8 <__aeabi_uldivmod>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	460b      	mov	r3, r1
 8004da0:	4613      	mov	r3, r2
 8004da2:	60fb      	str	r3, [r7, #12]
 8004da4:	e04a      	b.n	8004e3c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004da6:	4b31      	ldr	r3, [pc, #196]	; (8004e6c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	099b      	lsrs	r3, r3, #6
 8004dac:	461a      	mov	r2, r3
 8004dae:	f04f 0300 	mov.w	r3, #0
 8004db2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004db6:	f04f 0100 	mov.w	r1, #0
 8004dba:	ea02 0400 	and.w	r4, r2, r0
 8004dbe:	ea03 0501 	and.w	r5, r3, r1
 8004dc2:	4620      	mov	r0, r4
 8004dc4:	4629      	mov	r1, r5
 8004dc6:	f04f 0200 	mov.w	r2, #0
 8004dca:	f04f 0300 	mov.w	r3, #0
 8004dce:	014b      	lsls	r3, r1, #5
 8004dd0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004dd4:	0142      	lsls	r2, r0, #5
 8004dd6:	4610      	mov	r0, r2
 8004dd8:	4619      	mov	r1, r3
 8004dda:	1b00      	subs	r0, r0, r4
 8004ddc:	eb61 0105 	sbc.w	r1, r1, r5
 8004de0:	f04f 0200 	mov.w	r2, #0
 8004de4:	f04f 0300 	mov.w	r3, #0
 8004de8:	018b      	lsls	r3, r1, #6
 8004dea:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004dee:	0182      	lsls	r2, r0, #6
 8004df0:	1a12      	subs	r2, r2, r0
 8004df2:	eb63 0301 	sbc.w	r3, r3, r1
 8004df6:	f04f 0000 	mov.w	r0, #0
 8004dfa:	f04f 0100 	mov.w	r1, #0
 8004dfe:	00d9      	lsls	r1, r3, #3
 8004e00:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004e04:	00d0      	lsls	r0, r2, #3
 8004e06:	4602      	mov	r2, r0
 8004e08:	460b      	mov	r3, r1
 8004e0a:	1912      	adds	r2, r2, r4
 8004e0c:	eb45 0303 	adc.w	r3, r5, r3
 8004e10:	f04f 0000 	mov.w	r0, #0
 8004e14:	f04f 0100 	mov.w	r1, #0
 8004e18:	0299      	lsls	r1, r3, #10
 8004e1a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004e1e:	0290      	lsls	r0, r2, #10
 8004e20:	4602      	mov	r2, r0
 8004e22:	460b      	mov	r3, r1
 8004e24:	4610      	mov	r0, r2
 8004e26:	4619      	mov	r1, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	f04f 0300 	mov.w	r3, #0
 8004e30:	f7fb f9ca 	bl	80001c8 <__aeabi_uldivmod>
 8004e34:	4602      	mov	r2, r0
 8004e36:	460b      	mov	r3, r1
 8004e38:	4613      	mov	r3, r2
 8004e3a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004e3c:	4b0b      	ldr	r3, [pc, #44]	; (8004e6c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	0c1b      	lsrs	r3, r3, #16
 8004e42:	f003 0303 	and.w	r3, r3, #3
 8004e46:	3301      	adds	r3, #1
 8004e48:	005b      	lsls	r3, r3, #1
 8004e4a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004e4c:	68fa      	ldr	r2, [r7, #12]
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e54:	60bb      	str	r3, [r7, #8]
      break;
 8004e56:	e002      	b.n	8004e5e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e58:	4b05      	ldr	r3, [pc, #20]	; (8004e70 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004e5a:	60bb      	str	r3, [r7, #8]
      break;
 8004e5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e5e:	68bb      	ldr	r3, [r7, #8]
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3710      	adds	r7, #16
 8004e64:	46bd      	mov	sp, r7
 8004e66:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004e6a:	bf00      	nop
 8004e6c:	40023800 	.word	0x40023800
 8004e70:	00f42400 	.word	0x00f42400
 8004e74:	007a1200 	.word	0x007a1200

08004e78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e7c:	4b03      	ldr	r3, [pc, #12]	; (8004e8c <HAL_RCC_GetHCLKFreq+0x14>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr
 8004e8a:	bf00      	nop
 8004e8c:	20000000 	.word	0x20000000

08004e90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004e94:	f7ff fff0 	bl	8004e78 <HAL_RCC_GetHCLKFreq>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	4b05      	ldr	r3, [pc, #20]	; (8004eb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	0a9b      	lsrs	r3, r3, #10
 8004ea0:	f003 0307 	and.w	r3, r3, #7
 8004ea4:	4903      	ldr	r1, [pc, #12]	; (8004eb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ea6:	5ccb      	ldrb	r3, [r1, r3]
 8004ea8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	40023800 	.word	0x40023800
 8004eb4:	08008e5c 	.word	0x08008e5c

08004eb8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b086      	sub	sp, #24
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 0301 	and.w	r3, r3, #1
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d105      	bne.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d035      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004ee0:	4b62      	ldr	r3, [pc, #392]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ee6:	f7fc f875 	bl	8000fd4 <HAL_GetTick>
 8004eea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004eec:	e008      	b.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004eee:	f7fc f871 	bl	8000fd4 <HAL_GetTick>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	1ad3      	subs	r3, r2, r3
 8004ef8:	2b02      	cmp	r3, #2
 8004efa:	d901      	bls.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004efc:	2303      	movs	r3, #3
 8004efe:	e0b0      	b.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f00:	4b5b      	ldr	r3, [pc, #364]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d1f0      	bne.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	019a      	lsls	r2, r3, #6
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	071b      	lsls	r3, r3, #28
 8004f18:	4955      	ldr	r1, [pc, #340]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004f20:	4b52      	ldr	r3, [pc, #328]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004f22:	2201      	movs	r2, #1
 8004f24:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f26:	f7fc f855 	bl	8000fd4 <HAL_GetTick>
 8004f2a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f2c:	e008      	b.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004f2e:	f7fc f851 	bl	8000fd4 <HAL_GetTick>
 8004f32:	4602      	mov	r2, r0
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	2b02      	cmp	r3, #2
 8004f3a:	d901      	bls.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	e090      	b.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f40:	4b4b      	ldr	r3, [pc, #300]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d0f0      	beq.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 0302 	and.w	r3, r3, #2
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	f000 8083 	beq.w	8005060 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	60fb      	str	r3, [r7, #12]
 8004f5e:	4b44      	ldr	r3, [pc, #272]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f62:	4a43      	ldr	r2, [pc, #268]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f68:	6413      	str	r3, [r2, #64]	; 0x40
 8004f6a:	4b41      	ldr	r3, [pc, #260]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f72:	60fb      	str	r3, [r7, #12]
 8004f74:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004f76:	4b3f      	ldr	r3, [pc, #252]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a3e      	ldr	r2, [pc, #248]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004f7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f80:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004f82:	f7fc f827 	bl	8000fd4 <HAL_GetTick>
 8004f86:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004f88:	e008      	b.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004f8a:	f7fc f823 	bl	8000fd4 <HAL_GetTick>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	1ad3      	subs	r3, r2, r3
 8004f94:	2b02      	cmp	r3, #2
 8004f96:	d901      	bls.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004f98:	2303      	movs	r3, #3
 8004f9a:	e062      	b.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004f9c:	4b35      	ldr	r3, [pc, #212]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d0f0      	beq.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004fa8:	4b31      	ldr	r3, [pc, #196]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fb0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d02f      	beq.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fc0:	693a      	ldr	r2, [r7, #16]
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d028      	beq.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004fc6:	4b2a      	ldr	r3, [pc, #168]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fce:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004fd0:	4b29      	ldr	r3, [pc, #164]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004fd6:	4b28      	ldr	r3, [pc, #160]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004fd8:	2200      	movs	r2, #0
 8004fda:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004fdc:	4a24      	ldr	r2, [pc, #144]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004fe2:	4b23      	ldr	r3, [pc, #140]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fe6:	f003 0301 	and.w	r3, r3, #1
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d114      	bne.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004fee:	f7fb fff1 	bl	8000fd4 <HAL_GetTick>
 8004ff2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ff4:	e00a      	b.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ff6:	f7fb ffed 	bl	8000fd4 <HAL_GetTick>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	1ad3      	subs	r3, r2, r3
 8005000:	f241 3288 	movw	r2, #5000	; 0x1388
 8005004:	4293      	cmp	r3, r2
 8005006:	d901      	bls.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005008:	2303      	movs	r3, #3
 800500a:	e02a      	b.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800500c:	4b18      	ldr	r3, [pc, #96]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800500e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005010:	f003 0302 	and.w	r3, r3, #2
 8005014:	2b00      	cmp	r3, #0
 8005016:	d0ee      	beq.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005020:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005024:	d10d      	bne.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005026:	4b12      	ldr	r3, [pc, #72]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005036:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800503a:	490d      	ldr	r1, [pc, #52]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800503c:	4313      	orrs	r3, r2
 800503e:	608b      	str	r3, [r1, #8]
 8005040:	e005      	b.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005042:	4b0b      	ldr	r3, [pc, #44]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	4a0a      	ldr	r2, [pc, #40]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005048:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800504c:	6093      	str	r3, [r2, #8]
 800504e:	4b08      	ldr	r3, [pc, #32]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005050:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800505a:	4905      	ldr	r1, [pc, #20]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800505c:	4313      	orrs	r3, r2
 800505e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005060:	2300      	movs	r3, #0
}
 8005062:	4618      	mov	r0, r3
 8005064:	3718      	adds	r7, #24
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
 800506a:	bf00      	nop
 800506c:	42470068 	.word	0x42470068
 8005070:	40023800 	.word	0x40023800
 8005074:	40007000 	.word	0x40007000
 8005078:	42470e40 	.word	0x42470e40

0800507c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800507c:	b480      	push	{r7}
 800507e:	b087      	sub	sp, #28
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005084:	2300      	movs	r3, #0
 8005086:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005088:	2300      	movs	r3, #0
 800508a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800508c:	2300      	movs	r3, #0
 800508e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005090:	2300      	movs	r3, #0
 8005092:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2b01      	cmp	r3, #1
 8005098:	d13e      	bne.n	8005118 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800509a:	4b23      	ldr	r3, [pc, #140]	; (8005128 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80050a2:	60fb      	str	r3, [r7, #12]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d005      	beq.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d12f      	bne.n	8005110 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80050b0:	4b1e      	ldr	r3, [pc, #120]	; (800512c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80050b2:	617b      	str	r3, [r7, #20]
          break;
 80050b4:	e02f      	b.n	8005116 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80050b6:	4b1c      	ldr	r3, [pc, #112]	; (8005128 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050c2:	d108      	bne.n	80050d6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80050c4:	4b18      	ldr	r3, [pc, #96]	; (8005128 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050cc:	4a18      	ldr	r2, [pc, #96]	; (8005130 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80050ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80050d2:	613b      	str	r3, [r7, #16]
 80050d4:	e007      	b.n	80050e6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80050d6:	4b14      	ldr	r3, [pc, #80]	; (8005128 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050de:	4a15      	ldr	r2, [pc, #84]	; (8005134 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80050e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80050e4:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80050e6:	4b10      	ldr	r3, [pc, #64]	; (8005128 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80050e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050ec:	099b      	lsrs	r3, r3, #6
 80050ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	fb02 f303 	mul.w	r3, r2, r3
 80050f8:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80050fa:	4b0b      	ldr	r3, [pc, #44]	; (8005128 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80050fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005100:	0f1b      	lsrs	r3, r3, #28
 8005102:	f003 0307 	and.w	r3, r3, #7
 8005106:	68ba      	ldr	r2, [r7, #8]
 8005108:	fbb2 f3f3 	udiv	r3, r2, r3
 800510c:	617b      	str	r3, [r7, #20]
          break;
 800510e:	e002      	b.n	8005116 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005110:	2300      	movs	r3, #0
 8005112:	617b      	str	r3, [r7, #20]
          break;
 8005114:	bf00      	nop
        }
      }
      break;
 8005116:	bf00      	nop
    }
  }
  return frequency;
 8005118:	697b      	ldr	r3, [r7, #20]
}
 800511a:	4618      	mov	r0, r3
 800511c:	371c      	adds	r7, #28
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop
 8005128:	40023800 	.word	0x40023800
 800512c:	00bb8000 	.word	0x00bb8000
 8005130:	007a1200 	.word	0x007a1200
 8005134:	00f42400 	.word	0x00f42400

08005138 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b082      	sub	sp, #8
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d101      	bne.n	800514a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e07b      	b.n	8005242 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514e:	2b00      	cmp	r3, #0
 8005150:	d108      	bne.n	8005164 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800515a:	d009      	beq.n	8005170 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	61da      	str	r2, [r3, #28]
 8005162:	e005      	b.n	8005170 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2200      	movs	r2, #0
 8005174:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800517c:	b2db      	uxtb	r3, r3
 800517e:	2b00      	cmp	r3, #0
 8005180:	d106      	bne.n	8005190 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f7fb fda4 	bl	8000cd8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2202      	movs	r2, #2
 8005194:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051a6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80051b8:	431a      	orrs	r2, r3
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051c2:	431a      	orrs	r2, r3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	691b      	ldr	r3, [r3, #16]
 80051c8:	f003 0302 	and.w	r3, r3, #2
 80051cc:	431a      	orrs	r2, r3
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	695b      	ldr	r3, [r3, #20]
 80051d2:	f003 0301 	and.w	r3, r3, #1
 80051d6:	431a      	orrs	r2, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	699b      	ldr	r3, [r3, #24]
 80051dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051e0:	431a      	orrs	r2, r3
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	69db      	ldr	r3, [r3, #28]
 80051e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80051ea:	431a      	orrs	r2, r3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a1b      	ldr	r3, [r3, #32]
 80051f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051f4:	ea42 0103 	orr.w	r1, r2, r3
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051fc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	430a      	orrs	r2, r1
 8005206:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	699b      	ldr	r3, [r3, #24]
 800520c:	0c1b      	lsrs	r3, r3, #16
 800520e:	f003 0104 	and.w	r1, r3, #4
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005216:	f003 0210 	and.w	r2, r3, #16
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	430a      	orrs	r2, r1
 8005220:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	69da      	ldr	r2, [r3, #28]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005230:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005240:	2300      	movs	r3, #0
}
 8005242:	4618      	mov	r0, r3
 8005244:	3708      	adds	r7, #8
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}

0800524a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800524a:	b580      	push	{r7, lr}
 800524c:	b082      	sub	sp, #8
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d101      	bne.n	800525c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	e041      	b.n	80052e0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005262:	b2db      	uxtb	r3, r3
 8005264:	2b00      	cmp	r3, #0
 8005266:	d106      	bne.n	8005276 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f7fb fd79 	bl	8000d68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2202      	movs	r2, #2
 800527a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	3304      	adds	r3, #4
 8005286:	4619      	mov	r1, r3
 8005288:	4610      	mov	r0, r2
 800528a:	f000 f95d 	bl	8005548 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2201      	movs	r2, #1
 8005292:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2201      	movs	r2, #1
 800529a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2201      	movs	r2, #1
 80052a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2201      	movs	r2, #1
 80052aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2201      	movs	r2, #1
 80052b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2201      	movs	r2, #1
 80052ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2201      	movs	r2, #1
 80052c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2201      	movs	r2, #1
 80052ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2201      	movs	r2, #1
 80052d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2201      	movs	r2, #1
 80052da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052de:	2300      	movs	r3, #0
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3708      	adds	r7, #8
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b085      	sub	sp, #20
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d001      	beq.n	8005300 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	e046      	b.n	800538e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2202      	movs	r2, #2
 8005304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a23      	ldr	r2, [pc, #140]	; (800539c <HAL_TIM_Base_Start+0xb4>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d022      	beq.n	8005358 <HAL_TIM_Base_Start+0x70>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800531a:	d01d      	beq.n	8005358 <HAL_TIM_Base_Start+0x70>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a1f      	ldr	r2, [pc, #124]	; (80053a0 <HAL_TIM_Base_Start+0xb8>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d018      	beq.n	8005358 <HAL_TIM_Base_Start+0x70>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a1e      	ldr	r2, [pc, #120]	; (80053a4 <HAL_TIM_Base_Start+0xbc>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d013      	beq.n	8005358 <HAL_TIM_Base_Start+0x70>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a1c      	ldr	r2, [pc, #112]	; (80053a8 <HAL_TIM_Base_Start+0xc0>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d00e      	beq.n	8005358 <HAL_TIM_Base_Start+0x70>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a1b      	ldr	r2, [pc, #108]	; (80053ac <HAL_TIM_Base_Start+0xc4>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d009      	beq.n	8005358 <HAL_TIM_Base_Start+0x70>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a19      	ldr	r2, [pc, #100]	; (80053b0 <HAL_TIM_Base_Start+0xc8>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d004      	beq.n	8005358 <HAL_TIM_Base_Start+0x70>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a18      	ldr	r2, [pc, #96]	; (80053b4 <HAL_TIM_Base_Start+0xcc>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d111      	bne.n	800537c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	f003 0307 	and.w	r3, r3, #7
 8005362:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2b06      	cmp	r3, #6
 8005368:	d010      	beq.n	800538c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f042 0201 	orr.w	r2, r2, #1
 8005378:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800537a:	e007      	b.n	800538c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f042 0201 	orr.w	r2, r2, #1
 800538a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800538c:	2300      	movs	r3, #0
}
 800538e:	4618      	mov	r0, r3
 8005390:	3714      	adds	r7, #20
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr
 800539a:	bf00      	nop
 800539c:	40010000 	.word	0x40010000
 80053a0:	40000400 	.word	0x40000400
 80053a4:	40000800 	.word	0x40000800
 80053a8:	40000c00 	.word	0x40000c00
 80053ac:	40010400 	.word	0x40010400
 80053b0:	40014000 	.word	0x40014000
 80053b4:	40001800 	.word	0x40001800

080053b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b084      	sub	sp, #16
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053c2:	2300      	movs	r3, #0
 80053c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d101      	bne.n	80053d4 <HAL_TIM_ConfigClockSource+0x1c>
 80053d0:	2302      	movs	r3, #2
 80053d2:	e0b4      	b.n	800553e <HAL_TIM_ConfigClockSource+0x186>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2202      	movs	r2, #2
 80053e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80053f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	68ba      	ldr	r2, [r7, #8]
 8005402:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800540c:	d03e      	beq.n	800548c <HAL_TIM_ConfigClockSource+0xd4>
 800540e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005412:	f200 8087 	bhi.w	8005524 <HAL_TIM_ConfigClockSource+0x16c>
 8005416:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800541a:	f000 8086 	beq.w	800552a <HAL_TIM_ConfigClockSource+0x172>
 800541e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005422:	d87f      	bhi.n	8005524 <HAL_TIM_ConfigClockSource+0x16c>
 8005424:	2b70      	cmp	r3, #112	; 0x70
 8005426:	d01a      	beq.n	800545e <HAL_TIM_ConfigClockSource+0xa6>
 8005428:	2b70      	cmp	r3, #112	; 0x70
 800542a:	d87b      	bhi.n	8005524 <HAL_TIM_ConfigClockSource+0x16c>
 800542c:	2b60      	cmp	r3, #96	; 0x60
 800542e:	d050      	beq.n	80054d2 <HAL_TIM_ConfigClockSource+0x11a>
 8005430:	2b60      	cmp	r3, #96	; 0x60
 8005432:	d877      	bhi.n	8005524 <HAL_TIM_ConfigClockSource+0x16c>
 8005434:	2b50      	cmp	r3, #80	; 0x50
 8005436:	d03c      	beq.n	80054b2 <HAL_TIM_ConfigClockSource+0xfa>
 8005438:	2b50      	cmp	r3, #80	; 0x50
 800543a:	d873      	bhi.n	8005524 <HAL_TIM_ConfigClockSource+0x16c>
 800543c:	2b40      	cmp	r3, #64	; 0x40
 800543e:	d058      	beq.n	80054f2 <HAL_TIM_ConfigClockSource+0x13a>
 8005440:	2b40      	cmp	r3, #64	; 0x40
 8005442:	d86f      	bhi.n	8005524 <HAL_TIM_ConfigClockSource+0x16c>
 8005444:	2b30      	cmp	r3, #48	; 0x30
 8005446:	d064      	beq.n	8005512 <HAL_TIM_ConfigClockSource+0x15a>
 8005448:	2b30      	cmp	r3, #48	; 0x30
 800544a:	d86b      	bhi.n	8005524 <HAL_TIM_ConfigClockSource+0x16c>
 800544c:	2b20      	cmp	r3, #32
 800544e:	d060      	beq.n	8005512 <HAL_TIM_ConfigClockSource+0x15a>
 8005450:	2b20      	cmp	r3, #32
 8005452:	d867      	bhi.n	8005524 <HAL_TIM_ConfigClockSource+0x16c>
 8005454:	2b00      	cmp	r3, #0
 8005456:	d05c      	beq.n	8005512 <HAL_TIM_ConfigClockSource+0x15a>
 8005458:	2b10      	cmp	r3, #16
 800545a:	d05a      	beq.n	8005512 <HAL_TIM_ConfigClockSource+0x15a>
 800545c:	e062      	b.n	8005524 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6818      	ldr	r0, [r3, #0]
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	6899      	ldr	r1, [r3, #8]
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	685a      	ldr	r2, [r3, #4]
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	f000 f985 	bl	800577c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005480:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	68ba      	ldr	r2, [r7, #8]
 8005488:	609a      	str	r2, [r3, #8]
      break;
 800548a:	e04f      	b.n	800552c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6818      	ldr	r0, [r3, #0]
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	6899      	ldr	r1, [r3, #8]
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	685a      	ldr	r2, [r3, #4]
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	f000 f96e 	bl	800577c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	689a      	ldr	r2, [r3, #8]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054ae:	609a      	str	r2, [r3, #8]
      break;
 80054b0:	e03c      	b.n	800552c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6818      	ldr	r0, [r3, #0]
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	6859      	ldr	r1, [r3, #4]
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	68db      	ldr	r3, [r3, #12]
 80054be:	461a      	mov	r2, r3
 80054c0:	f000 f8e2 	bl	8005688 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	2150      	movs	r1, #80	; 0x50
 80054ca:	4618      	mov	r0, r3
 80054cc:	f000 f93b 	bl	8005746 <TIM_ITRx_SetConfig>
      break;
 80054d0:	e02c      	b.n	800552c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6818      	ldr	r0, [r3, #0]
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	6859      	ldr	r1, [r3, #4]
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	461a      	mov	r2, r3
 80054e0:	f000 f901 	bl	80056e6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	2160      	movs	r1, #96	; 0x60
 80054ea:	4618      	mov	r0, r3
 80054ec:	f000 f92b 	bl	8005746 <TIM_ITRx_SetConfig>
      break;
 80054f0:	e01c      	b.n	800552c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6818      	ldr	r0, [r3, #0]
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	6859      	ldr	r1, [r3, #4]
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	461a      	mov	r2, r3
 8005500:	f000 f8c2 	bl	8005688 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	2140      	movs	r1, #64	; 0x40
 800550a:	4618      	mov	r0, r3
 800550c:	f000 f91b 	bl	8005746 <TIM_ITRx_SetConfig>
      break;
 8005510:	e00c      	b.n	800552c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4619      	mov	r1, r3
 800551c:	4610      	mov	r0, r2
 800551e:	f000 f912 	bl	8005746 <TIM_ITRx_SetConfig>
      break;
 8005522:	e003      	b.n	800552c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	73fb      	strb	r3, [r7, #15]
      break;
 8005528:	e000      	b.n	800552c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800552a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800553c:	7bfb      	ldrb	r3, [r7, #15]
}
 800553e:	4618      	mov	r0, r3
 8005540:	3710      	adds	r7, #16
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
	...

08005548 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005548:	b480      	push	{r7}
 800554a:	b085      	sub	sp, #20
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	4a40      	ldr	r2, [pc, #256]	; (800565c <TIM_Base_SetConfig+0x114>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d013      	beq.n	8005588 <TIM_Base_SetConfig+0x40>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005566:	d00f      	beq.n	8005588 <TIM_Base_SetConfig+0x40>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	4a3d      	ldr	r2, [pc, #244]	; (8005660 <TIM_Base_SetConfig+0x118>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d00b      	beq.n	8005588 <TIM_Base_SetConfig+0x40>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	4a3c      	ldr	r2, [pc, #240]	; (8005664 <TIM_Base_SetConfig+0x11c>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d007      	beq.n	8005588 <TIM_Base_SetConfig+0x40>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	4a3b      	ldr	r2, [pc, #236]	; (8005668 <TIM_Base_SetConfig+0x120>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d003      	beq.n	8005588 <TIM_Base_SetConfig+0x40>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	4a3a      	ldr	r2, [pc, #232]	; (800566c <TIM_Base_SetConfig+0x124>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d108      	bne.n	800559a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800558e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	68fa      	ldr	r2, [r7, #12]
 8005596:	4313      	orrs	r3, r2
 8005598:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4a2f      	ldr	r2, [pc, #188]	; (800565c <TIM_Base_SetConfig+0x114>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d02b      	beq.n	80055fa <TIM_Base_SetConfig+0xb2>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055a8:	d027      	beq.n	80055fa <TIM_Base_SetConfig+0xb2>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4a2c      	ldr	r2, [pc, #176]	; (8005660 <TIM_Base_SetConfig+0x118>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d023      	beq.n	80055fa <TIM_Base_SetConfig+0xb2>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a2b      	ldr	r2, [pc, #172]	; (8005664 <TIM_Base_SetConfig+0x11c>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d01f      	beq.n	80055fa <TIM_Base_SetConfig+0xb2>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a2a      	ldr	r2, [pc, #168]	; (8005668 <TIM_Base_SetConfig+0x120>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d01b      	beq.n	80055fa <TIM_Base_SetConfig+0xb2>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a29      	ldr	r2, [pc, #164]	; (800566c <TIM_Base_SetConfig+0x124>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d017      	beq.n	80055fa <TIM_Base_SetConfig+0xb2>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4a28      	ldr	r2, [pc, #160]	; (8005670 <TIM_Base_SetConfig+0x128>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d013      	beq.n	80055fa <TIM_Base_SetConfig+0xb2>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	4a27      	ldr	r2, [pc, #156]	; (8005674 <TIM_Base_SetConfig+0x12c>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d00f      	beq.n	80055fa <TIM_Base_SetConfig+0xb2>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4a26      	ldr	r2, [pc, #152]	; (8005678 <TIM_Base_SetConfig+0x130>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d00b      	beq.n	80055fa <TIM_Base_SetConfig+0xb2>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4a25      	ldr	r2, [pc, #148]	; (800567c <TIM_Base_SetConfig+0x134>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d007      	beq.n	80055fa <TIM_Base_SetConfig+0xb2>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4a24      	ldr	r2, [pc, #144]	; (8005680 <TIM_Base_SetConfig+0x138>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d003      	beq.n	80055fa <TIM_Base_SetConfig+0xb2>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4a23      	ldr	r2, [pc, #140]	; (8005684 <TIM_Base_SetConfig+0x13c>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d108      	bne.n	800560c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005600:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	68fa      	ldr	r2, [r7, #12]
 8005608:	4313      	orrs	r3, r2
 800560a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	695b      	ldr	r3, [r3, #20]
 8005616:	4313      	orrs	r3, r2
 8005618:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	68fa      	ldr	r2, [r7, #12]
 800561e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	689a      	ldr	r2, [r3, #8]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4a0a      	ldr	r2, [pc, #40]	; (800565c <TIM_Base_SetConfig+0x114>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d003      	beq.n	8005640 <TIM_Base_SetConfig+0xf8>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	4a0c      	ldr	r2, [pc, #48]	; (800566c <TIM_Base_SetConfig+0x124>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d103      	bne.n	8005648 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	691a      	ldr	r2, [r3, #16]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2201      	movs	r2, #1
 800564c:	615a      	str	r2, [r3, #20]
}
 800564e:	bf00      	nop
 8005650:	3714      	adds	r7, #20
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr
 800565a:	bf00      	nop
 800565c:	40010000 	.word	0x40010000
 8005660:	40000400 	.word	0x40000400
 8005664:	40000800 	.word	0x40000800
 8005668:	40000c00 	.word	0x40000c00
 800566c:	40010400 	.word	0x40010400
 8005670:	40014000 	.word	0x40014000
 8005674:	40014400 	.word	0x40014400
 8005678:	40014800 	.word	0x40014800
 800567c:	40001800 	.word	0x40001800
 8005680:	40001c00 	.word	0x40001c00
 8005684:	40002000 	.word	0x40002000

08005688 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005688:	b480      	push	{r7}
 800568a:	b087      	sub	sp, #28
 800568c:	af00      	add	r7, sp, #0
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	60b9      	str	r1, [r7, #8]
 8005692:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	6a1b      	ldr	r3, [r3, #32]
 8005698:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	6a1b      	ldr	r3, [r3, #32]
 800569e:	f023 0201 	bic.w	r2, r3, #1
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	699b      	ldr	r3, [r3, #24]
 80056aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	011b      	lsls	r3, r3, #4
 80056b8:	693a      	ldr	r2, [r7, #16]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	f023 030a 	bic.w	r3, r3, #10
 80056c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80056c6:	697a      	ldr	r2, [r7, #20]
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	693a      	ldr	r2, [r7, #16]
 80056d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	697a      	ldr	r2, [r7, #20]
 80056d8:	621a      	str	r2, [r3, #32]
}
 80056da:	bf00      	nop
 80056dc:	371c      	adds	r7, #28
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr

080056e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056e6:	b480      	push	{r7}
 80056e8:	b087      	sub	sp, #28
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	60f8      	str	r0, [r7, #12]
 80056ee:	60b9      	str	r1, [r7, #8]
 80056f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	6a1b      	ldr	r3, [r3, #32]
 80056f6:	f023 0210 	bic.w	r2, r3, #16
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	699b      	ldr	r3, [r3, #24]
 8005702:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6a1b      	ldr	r3, [r3, #32]
 8005708:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005710:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	031b      	lsls	r3, r3, #12
 8005716:	697a      	ldr	r2, [r7, #20]
 8005718:	4313      	orrs	r3, r2
 800571a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005722:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	011b      	lsls	r3, r3, #4
 8005728:	693a      	ldr	r2, [r7, #16]
 800572a:	4313      	orrs	r3, r2
 800572c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	697a      	ldr	r2, [r7, #20]
 8005732:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	693a      	ldr	r2, [r7, #16]
 8005738:	621a      	str	r2, [r3, #32]
}
 800573a:	bf00      	nop
 800573c:	371c      	adds	r7, #28
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr

08005746 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005746:	b480      	push	{r7}
 8005748:	b085      	sub	sp, #20
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
 800574e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800575c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800575e:	683a      	ldr	r2, [r7, #0]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	4313      	orrs	r3, r2
 8005764:	f043 0307 	orr.w	r3, r3, #7
 8005768:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	68fa      	ldr	r2, [r7, #12]
 800576e:	609a      	str	r2, [r3, #8]
}
 8005770:	bf00      	nop
 8005772:	3714      	adds	r7, #20
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr

0800577c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800577c:	b480      	push	{r7}
 800577e:	b087      	sub	sp, #28
 8005780:	af00      	add	r7, sp, #0
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	607a      	str	r2, [r7, #4]
 8005788:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005796:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	021a      	lsls	r2, r3, #8
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	431a      	orrs	r2, r3
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	697a      	ldr	r2, [r7, #20]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	697a      	ldr	r2, [r7, #20]
 80057ae:	609a      	str	r2, [r3, #8]
}
 80057b0:	bf00      	nop
 80057b2:	371c      	adds	r7, #28
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057bc:	b480      	push	{r7}
 80057be:	b085      	sub	sp, #20
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d101      	bne.n	80057d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057d0:	2302      	movs	r3, #2
 80057d2:	e05a      	b.n	800588a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2202      	movs	r2, #2
 80057e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	68fa      	ldr	r2, [r7, #12]
 8005802:	4313      	orrs	r3, r2
 8005804:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	68fa      	ldr	r2, [r7, #12]
 800580c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a21      	ldr	r2, [pc, #132]	; (8005898 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d022      	beq.n	800585e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005820:	d01d      	beq.n	800585e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a1d      	ldr	r2, [pc, #116]	; (800589c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d018      	beq.n	800585e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a1b      	ldr	r2, [pc, #108]	; (80058a0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d013      	beq.n	800585e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a1a      	ldr	r2, [pc, #104]	; (80058a4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d00e      	beq.n	800585e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a18      	ldr	r2, [pc, #96]	; (80058a8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d009      	beq.n	800585e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a17      	ldr	r2, [pc, #92]	; (80058ac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d004      	beq.n	800585e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a15      	ldr	r2, [pc, #84]	; (80058b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d10c      	bne.n	8005878 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005864:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	68ba      	ldr	r2, [r7, #8]
 800586c:	4313      	orrs	r3, r2
 800586e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	68ba      	ldr	r2, [r7, #8]
 8005876:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2200      	movs	r2, #0
 8005884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005888:	2300      	movs	r3, #0
}
 800588a:	4618      	mov	r0, r3
 800588c:	3714      	adds	r7, #20
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr
 8005896:	bf00      	nop
 8005898:	40010000 	.word	0x40010000
 800589c:	40000400 	.word	0x40000400
 80058a0:	40000800 	.word	0x40000800
 80058a4:	40000c00 	.word	0x40000c00
 80058a8:	40010400 	.word	0x40010400
 80058ac:	40014000 	.word	0x40014000
 80058b0:	40001800 	.word	0x40001800

080058b4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80058b4:	b084      	sub	sp, #16
 80058b6:	b580      	push	{r7, lr}
 80058b8:	b084      	sub	sp, #16
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
 80058be:	f107 001c 	add.w	r0, r7, #28
 80058c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80058c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d122      	bne.n	8005912 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80058e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80058f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d105      	bne.n	8005906 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f000 f9a0 	bl	8005c4c <USB_CoreReset>
 800590c:	4603      	mov	r3, r0
 800590e:	73fb      	strb	r3, [r7, #15]
 8005910:	e01a      	b.n	8005948 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f000 f994 	bl	8005c4c <USB_CoreReset>
 8005924:	4603      	mov	r3, r0
 8005926:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005928:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800592a:	2b00      	cmp	r3, #0
 800592c:	d106      	bne.n	800593c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005932:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	639a      	str	r2, [r3, #56]	; 0x38
 800593a:	e005      	b.n	8005948 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005940:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800594a:	2b01      	cmp	r3, #1
 800594c:	d10b      	bne.n	8005966 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	f043 0206 	orr.w	r2, r3, #6
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	f043 0220 	orr.w	r2, r3, #32
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005966:	7bfb      	ldrb	r3, [r7, #15]
}
 8005968:	4618      	mov	r0, r3
 800596a:	3710      	adds	r7, #16
 800596c:	46bd      	mov	sp, r7
 800596e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005972:	b004      	add	sp, #16
 8005974:	4770      	bx	lr

08005976 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005976:	b480      	push	{r7}
 8005978:	b083      	sub	sp, #12
 800597a:	af00      	add	r7, sp, #0
 800597c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	f043 0201 	orr.w	r2, r3, #1
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800598a:	2300      	movs	r3, #0
}
 800598c:	4618      	mov	r0, r3
 800598e:	370c      	adds	r7, #12
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	f023 0201 	bic.w	r2, r3, #1
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80059ac:	2300      	movs	r3, #0
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	370c      	adds	r7, #12
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr

080059ba <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80059ba:	b580      	push	{r7, lr}
 80059bc:	b084      	sub	sp, #16
 80059be:	af00      	add	r7, sp, #0
 80059c0:	6078      	str	r0, [r7, #4]
 80059c2:	460b      	mov	r3, r1
 80059c4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80059c6:	2300      	movs	r3, #0
 80059c8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80059d6:	78fb      	ldrb	r3, [r7, #3]
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d115      	bne.n	8005a08 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80059e8:	2001      	movs	r0, #1
 80059ea:	f7fb faff 	bl	8000fec <HAL_Delay>
      ms++;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	3301      	adds	r3, #1
 80059f2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f000 f91a 	bl	8005c2e <USB_GetMode>
 80059fa:	4603      	mov	r3, r0
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d01e      	beq.n	8005a3e <USB_SetCurrentMode+0x84>
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2b31      	cmp	r3, #49	; 0x31
 8005a04:	d9f0      	bls.n	80059e8 <USB_SetCurrentMode+0x2e>
 8005a06:	e01a      	b.n	8005a3e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005a08:	78fb      	ldrb	r3, [r7, #3]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d115      	bne.n	8005a3a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005a1a:	2001      	movs	r0, #1
 8005a1c:	f7fb fae6 	bl	8000fec <HAL_Delay>
      ms++;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	3301      	adds	r3, #1
 8005a24:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f000 f901 	bl	8005c2e <USB_GetMode>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d005      	beq.n	8005a3e <USB_SetCurrentMode+0x84>
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2b31      	cmp	r3, #49	; 0x31
 8005a36:	d9f0      	bls.n	8005a1a <USB_SetCurrentMode+0x60>
 8005a38:	e001      	b.n	8005a3e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e005      	b.n	8005a4a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2b32      	cmp	r3, #50	; 0x32
 8005a42:	d101      	bne.n	8005a48 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	e000      	b.n	8005a4a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3710      	adds	r7, #16
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}
	...

08005a54 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b085      	sub	sp, #20
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	019b      	lsls	r3, r3, #6
 8005a66:	f043 0220 	orr.w	r2, r3, #32
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	3301      	adds	r3, #1
 8005a72:	60fb      	str	r3, [r7, #12]
 8005a74:	4a08      	ldr	r2, [pc, #32]	; (8005a98 <USB_FlushTxFifo+0x44>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d901      	bls.n	8005a7e <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8005a7a:	2303      	movs	r3, #3
 8005a7c:	e006      	b.n	8005a8c <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	691b      	ldr	r3, [r3, #16]
 8005a82:	f003 0320 	and.w	r3, r3, #32
 8005a86:	2b20      	cmp	r3, #32
 8005a88:	d0f1      	beq.n	8005a6e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005a8a:	2300      	movs	r3, #0
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3714      	adds	r7, #20
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr
 8005a98:	00030d40 	.word	0x00030d40

08005a9c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b085      	sub	sp, #20
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2210      	movs	r2, #16
 8005aac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	3301      	adds	r3, #1
 8005ab2:	60fb      	str	r3, [r7, #12]
 8005ab4:	4a08      	ldr	r2, [pc, #32]	; (8005ad8 <USB_FlushRxFifo+0x3c>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d901      	bls.n	8005abe <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8005aba:	2303      	movs	r3, #3
 8005abc:	e006      	b.n	8005acc <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	691b      	ldr	r3, [r3, #16]
 8005ac2:	f003 0310 	and.w	r3, r3, #16
 8005ac6:	2b10      	cmp	r3, #16
 8005ac8:	d0f1      	beq.n	8005aae <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005aca:	2300      	movs	r3, #0
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3714      	adds	r7, #20
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr
 8005ad8:	00030d40 	.word	0x00030d40

08005adc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b089      	sub	sp, #36	; 0x24
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	4611      	mov	r1, r2
 8005ae8:	461a      	mov	r2, r3
 8005aea:	460b      	mov	r3, r1
 8005aec:	71fb      	strb	r3, [r7, #7]
 8005aee:	4613      	mov	r3, r2
 8005af0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005afa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d123      	bne.n	8005b4a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005b02:	88bb      	ldrh	r3, [r7, #4]
 8005b04:	3303      	adds	r3, #3
 8005b06:	089b      	lsrs	r3, r3, #2
 8005b08:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	61bb      	str	r3, [r7, #24]
 8005b0e:	e018      	b.n	8005b42 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005b10:	79fb      	ldrb	r3, [r7, #7]
 8005b12:	031a      	lsls	r2, r3, #12
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	4413      	add	r3, r2
 8005b18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	3301      	adds	r3, #1
 8005b28:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	3301      	adds	r3, #1
 8005b2e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b30:	69fb      	ldr	r3, [r7, #28]
 8005b32:	3301      	adds	r3, #1
 8005b34:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	3301      	adds	r3, #1
 8005b3a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005b3c:	69bb      	ldr	r3, [r7, #24]
 8005b3e:	3301      	adds	r3, #1
 8005b40:	61bb      	str	r3, [r7, #24]
 8005b42:	69ba      	ldr	r2, [r7, #24]
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	429a      	cmp	r2, r3
 8005b48:	d3e2      	bcc.n	8005b10 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005b4a:	2300      	movs	r3, #0
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3724      	adds	r7, #36	; 0x24
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr

08005b58 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b08b      	sub	sp, #44	; 0x2c
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	60f8      	str	r0, [r7, #12]
 8005b60:	60b9      	str	r1, [r7, #8]
 8005b62:	4613      	mov	r3, r2
 8005b64:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005b6e:	88fb      	ldrh	r3, [r7, #6]
 8005b70:	089b      	lsrs	r3, r3, #2
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005b76:	88fb      	ldrh	r3, [r7, #6]
 8005b78:	f003 0303 	and.w	r3, r3, #3
 8005b7c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005b7e:	2300      	movs	r3, #0
 8005b80:	623b      	str	r3, [r7, #32]
 8005b82:	e014      	b.n	8005bae <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005b84:	69bb      	ldr	r3, [r7, #24]
 8005b86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b92:	3301      	adds	r3, #1
 8005b94:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b98:	3301      	adds	r3, #1
 8005b9a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba4:	3301      	adds	r3, #1
 8005ba6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005ba8:	6a3b      	ldr	r3, [r7, #32]
 8005baa:	3301      	adds	r3, #1
 8005bac:	623b      	str	r3, [r7, #32]
 8005bae:	6a3a      	ldr	r2, [r7, #32]
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d3e6      	bcc.n	8005b84 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005bb6:	8bfb      	ldrh	r3, [r7, #30]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d01e      	beq.n	8005bfa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005bc0:	69bb      	ldr	r3, [r7, #24]
 8005bc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	f107 0310 	add.w	r3, r7, #16
 8005bcc:	6812      	ldr	r2, [r2, #0]
 8005bce:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005bd0:	693a      	ldr	r2, [r7, #16]
 8005bd2:	6a3b      	ldr	r3, [r7, #32]
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	00db      	lsls	r3, r3, #3
 8005bd8:	fa22 f303 	lsr.w	r3, r2, r3
 8005bdc:	b2da      	uxtb	r2, r3
 8005bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be0:	701a      	strb	r2, [r3, #0]
      i++;
 8005be2:	6a3b      	ldr	r3, [r7, #32]
 8005be4:	3301      	adds	r3, #1
 8005be6:	623b      	str	r3, [r7, #32]
      pDest++;
 8005be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bea:	3301      	adds	r3, #1
 8005bec:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005bee:	8bfb      	ldrh	r3, [r7, #30]
 8005bf0:	3b01      	subs	r3, #1
 8005bf2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005bf4:	8bfb      	ldrh	r3, [r7, #30]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d1ea      	bne.n	8005bd0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	372c      	adds	r7, #44	; 0x2c
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr

08005c08 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b085      	sub	sp, #20
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	695b      	ldr	r3, [r3, #20]
 8005c14:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	699b      	ldr	r3, [r3, #24]
 8005c1a:	68fa      	ldr	r2, [r7, #12]
 8005c1c:	4013      	ands	r3, r2
 8005c1e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005c20:	68fb      	ldr	r3, [r7, #12]
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3714      	adds	r7, #20
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr

08005c2e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005c2e:	b480      	push	{r7}
 8005c30:	b083      	sub	sp, #12
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	695b      	ldr	r3, [r3, #20]
 8005c3a:	f003 0301 	and.w	r3, r3, #1
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	370c      	adds	r7, #12
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr
	...

08005c4c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b085      	sub	sp, #20
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c54:	2300      	movs	r3, #0
 8005c56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	60fb      	str	r3, [r7, #12]
 8005c5e:	4a13      	ldr	r2, [pc, #76]	; (8005cac <USB_CoreReset+0x60>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d901      	bls.n	8005c68 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005c64:	2303      	movs	r3, #3
 8005c66:	e01a      	b.n	8005c9e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	691b      	ldr	r3, [r3, #16]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	daf3      	bge.n	8005c58 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005c70:	2300      	movs	r3, #0
 8005c72:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	691b      	ldr	r3, [r3, #16]
 8005c78:	f043 0201 	orr.w	r2, r3, #1
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	3301      	adds	r3, #1
 8005c84:	60fb      	str	r3, [r7, #12]
 8005c86:	4a09      	ldr	r2, [pc, #36]	; (8005cac <USB_CoreReset+0x60>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d901      	bls.n	8005c90 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005c8c:	2303      	movs	r3, #3
 8005c8e:	e006      	b.n	8005c9e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	691b      	ldr	r3, [r3, #16]
 8005c94:	f003 0301 	and.w	r3, r3, #1
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d0f1      	beq.n	8005c80 <USB_CoreReset+0x34>

  return HAL_OK;
 8005c9c:	2300      	movs	r3, #0
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3714      	adds	r7, #20
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr
 8005caa:	bf00      	nop
 8005cac:	00030d40 	.word	0x00030d40

08005cb0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005cb0:	b084      	sub	sp, #16
 8005cb2:	b580      	push	{r7, lr}
 8005cb4:	b084      	sub	sp, #16
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	6078      	str	r0, [r7, #4]
 8005cba:	f107 001c 	add.w	r0, r7, #28
 8005cbe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ccc:	461a      	mov	r2, r3
 8005cce:	2300      	movs	r3, #0
 8005cd0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cd6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cee:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d018      	beq.n	8005d34 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d10a      	bne.n	8005d1e <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	68ba      	ldr	r2, [r7, #8]
 8005d12:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d16:	f043 0304 	orr.w	r3, r3, #4
 8005d1a:	6013      	str	r3, [r2, #0]
 8005d1c:	e014      	b.n	8005d48 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	68ba      	ldr	r2, [r7, #8]
 8005d28:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d2c:	f023 0304 	bic.w	r3, r3, #4
 8005d30:	6013      	str	r3, [r2, #0]
 8005d32:	e009      	b.n	8005d48 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	68ba      	ldr	r2, [r7, #8]
 8005d3e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d42:	f023 0304 	bic.w	r3, r3, #4
 8005d46:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8005d48:	2110      	movs	r1, #16
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f7ff fe82 	bl	8005a54 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f7ff fea3 	bl	8005a9c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005d56:	2300      	movs	r3, #0
 8005d58:	60fb      	str	r3, [r7, #12]
 8005d5a:	e015      	b.n	8005d88 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	015a      	lsls	r2, r3, #5
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	4413      	add	r3, r2
 8005d64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d68:	461a      	mov	r2, r3
 8005d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8005d6e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	015a      	lsls	r2, r3, #5
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	4413      	add	r3, r2
 8005d78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	2300      	movs	r3, #0
 8005d80:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	3301      	adds	r3, #1
 8005d86:	60fb      	str	r3, [r7, #12]
 8005d88:	6a3b      	ldr	r3, [r7, #32]
 8005d8a:	68fa      	ldr	r2, [r7, #12]
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d3e5      	bcc.n	8005d5c <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f04f 32ff 	mov.w	r2, #4294967295
 8005d9c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d00b      	beq.n	8005dc2 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005db0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4a13      	ldr	r2, [pc, #76]	; (8005e04 <USB_HostInit+0x154>)
 8005db6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	4a13      	ldr	r2, [pc, #76]	; (8005e08 <USB_HostInit+0x158>)
 8005dbc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005dc0:	e009      	b.n	8005dd6 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2280      	movs	r2, #128	; 0x80
 8005dc6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	4a10      	ldr	r2, [pc, #64]	; (8005e0c <USB_HostInit+0x15c>)
 8005dcc:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4a0f      	ldr	r2, [pc, #60]	; (8005e10 <USB_HostInit+0x160>)
 8005dd2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d105      	bne.n	8005de8 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	699b      	ldr	r3, [r3, #24]
 8005de0:	f043 0210 	orr.w	r2, r3, #16
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	699a      	ldr	r2, [r3, #24]
 8005dec:	4b09      	ldr	r3, [pc, #36]	; (8005e14 <USB_HostInit+0x164>)
 8005dee:	4313      	orrs	r3, r2
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8005df4:	2300      	movs	r3, #0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3710      	adds	r7, #16
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e00:	b004      	add	sp, #16
 8005e02:	4770      	bx	lr
 8005e04:	01000200 	.word	0x01000200
 8005e08:	00e00300 	.word	0x00e00300
 8005e0c:	00600080 	.word	0x00600080
 8005e10:	004000e0 	.word	0x004000e0
 8005e14:	a3200008 	.word	0xa3200008

08005e18 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b085      	sub	sp, #20
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	460b      	mov	r3, r1
 8005e22:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	68fa      	ldr	r2, [r7, #12]
 8005e32:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005e36:	f023 0303 	bic.w	r3, r3, #3
 8005e3a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	78fb      	ldrb	r3, [r7, #3]
 8005e46:	f003 0303 	and.w	r3, r3, #3
 8005e4a:	68f9      	ldr	r1, [r7, #12]
 8005e4c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005e50:	4313      	orrs	r3, r2
 8005e52:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005e54:	78fb      	ldrb	r3, [r7, #3]
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d107      	bne.n	8005e6a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e60:	461a      	mov	r2, r3
 8005e62:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005e66:	6053      	str	r3, [r2, #4]
 8005e68:	e009      	b.n	8005e7e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005e6a:	78fb      	ldrb	r3, [r7, #3]
 8005e6c:	2b02      	cmp	r3, #2
 8005e6e:	d106      	bne.n	8005e7e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e76:	461a      	mov	r2, r3
 8005e78:	f241 7370 	movw	r3, #6000	; 0x1770
 8005e7c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005e7e:	2300      	movs	r3, #0
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3714      	adds	r7, #20
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr

08005e8c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b084      	sub	sp, #16
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005eac:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	68fa      	ldr	r2, [r7, #12]
 8005eb2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005eb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005eba:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005ebc:	2064      	movs	r0, #100	; 0x64
 8005ebe:	f7fb f895 	bl	8000fec <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	68fa      	ldr	r2, [r7, #12]
 8005ec6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005eca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ece:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005ed0:	200a      	movs	r0, #10
 8005ed2:	f7fb f88b 	bl	8000fec <HAL_Delay>

  return HAL_OK;
 8005ed6:	2300      	movs	r3, #0
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3710      	adds	r7, #16
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}

08005ee0 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b085      	sub	sp, #20
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	460b      	mov	r3, r1
 8005eea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005f04:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d109      	bne.n	8005f24 <USB_DriveVbus+0x44>
 8005f10:	78fb      	ldrb	r3, [r7, #3]
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d106      	bne.n	8005f24 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005f1e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005f22:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f2e:	d109      	bne.n	8005f44 <USB_DriveVbus+0x64>
 8005f30:	78fb      	ldrb	r3, [r7, #3]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d106      	bne.n	8005f44 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	68fa      	ldr	r2, [r7, #12]
 8005f3a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005f3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f42:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005f44:	2300      	movs	r3, #0
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3714      	adds	r7, #20
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr

08005f52 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005f52:	b480      	push	{r7}
 8005f54:	b085      	sub	sp, #20
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	0c5b      	lsrs	r3, r3, #17
 8005f70:	f003 0303 	and.w	r3, r3, #3
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3714      	adds	r7, #20
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b085      	sub	sp, #20
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	b29b      	uxth	r3, r3
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3714      	adds	r7, #20
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr
	...

08005fa4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b088      	sub	sp, #32
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	4608      	mov	r0, r1
 8005fae:	4611      	mov	r1, r2
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	70fb      	strb	r3, [r7, #3]
 8005fb6:	460b      	mov	r3, r1
 8005fb8:	70bb      	strb	r3, [r7, #2]
 8005fba:	4613      	mov	r3, r2
 8005fbc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005fc6:	78fb      	ldrb	r3, [r7, #3]
 8005fc8:	015a      	lsls	r2, r3, #5
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	4413      	add	r3, r2
 8005fce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	f04f 33ff 	mov.w	r3, #4294967295
 8005fd8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005fda:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005fde:	2b03      	cmp	r3, #3
 8005fe0:	d87e      	bhi.n	80060e0 <USB_HC_Init+0x13c>
 8005fe2:	a201      	add	r2, pc, #4	; (adr r2, 8005fe8 <USB_HC_Init+0x44>)
 8005fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fe8:	08005ff9 	.word	0x08005ff9
 8005fec:	080060a3 	.word	0x080060a3
 8005ff0:	08005ff9 	.word	0x08005ff9
 8005ff4:	08006065 	.word	0x08006065
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005ff8:	78fb      	ldrb	r3, [r7, #3]
 8005ffa:	015a      	lsls	r2, r3, #5
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	4413      	add	r3, r2
 8006000:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006004:	461a      	mov	r2, r3
 8006006:	f240 439d 	movw	r3, #1181	; 0x49d
 800600a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800600c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006010:	2b00      	cmp	r3, #0
 8006012:	da10      	bge.n	8006036 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006014:	78fb      	ldrb	r3, [r7, #3]
 8006016:	015a      	lsls	r2, r3, #5
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	4413      	add	r3, r2
 800601c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006020:	68db      	ldr	r3, [r3, #12]
 8006022:	78fa      	ldrb	r2, [r7, #3]
 8006024:	0151      	lsls	r1, r2, #5
 8006026:	693a      	ldr	r2, [r7, #16]
 8006028:	440a      	add	r2, r1
 800602a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800602e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006032:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8006034:	e057      	b.n	80060e6 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800603a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800603e:	2b00      	cmp	r3, #0
 8006040:	d051      	beq.n	80060e6 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006042:	78fb      	ldrb	r3, [r7, #3]
 8006044:	015a      	lsls	r2, r3, #5
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	4413      	add	r3, r2
 800604a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800604e:	68db      	ldr	r3, [r3, #12]
 8006050:	78fa      	ldrb	r2, [r7, #3]
 8006052:	0151      	lsls	r1, r2, #5
 8006054:	693a      	ldr	r2, [r7, #16]
 8006056:	440a      	add	r2, r1
 8006058:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800605c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006060:	60d3      	str	r3, [r2, #12]
      break;
 8006062:	e040      	b.n	80060e6 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006064:	78fb      	ldrb	r3, [r7, #3]
 8006066:	015a      	lsls	r2, r3, #5
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	4413      	add	r3, r2
 800606c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006070:	461a      	mov	r2, r3
 8006072:	f240 639d 	movw	r3, #1693	; 0x69d
 8006076:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006078:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800607c:	2b00      	cmp	r3, #0
 800607e:	da34      	bge.n	80060ea <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006080:	78fb      	ldrb	r3, [r7, #3]
 8006082:	015a      	lsls	r2, r3, #5
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	4413      	add	r3, r2
 8006088:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	78fa      	ldrb	r2, [r7, #3]
 8006090:	0151      	lsls	r1, r2, #5
 8006092:	693a      	ldr	r2, [r7, #16]
 8006094:	440a      	add	r2, r1
 8006096:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800609a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800609e:	60d3      	str	r3, [r2, #12]
      }

      break;
 80060a0:	e023      	b.n	80060ea <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80060a2:	78fb      	ldrb	r3, [r7, #3]
 80060a4:	015a      	lsls	r2, r3, #5
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	4413      	add	r3, r2
 80060aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060ae:	461a      	mov	r2, r3
 80060b0:	f240 2325 	movw	r3, #549	; 0x225
 80060b4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80060b6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	da17      	bge.n	80060ee <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80060be:	78fb      	ldrb	r3, [r7, #3]
 80060c0:	015a      	lsls	r2, r3, #5
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	4413      	add	r3, r2
 80060c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	78fa      	ldrb	r2, [r7, #3]
 80060ce:	0151      	lsls	r1, r2, #5
 80060d0:	693a      	ldr	r2, [r7, #16]
 80060d2:	440a      	add	r2, r1
 80060d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060d8:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80060dc:	60d3      	str	r3, [r2, #12]
      }
      break;
 80060de:	e006      	b.n	80060ee <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	77fb      	strb	r3, [r7, #31]
      break;
 80060e4:	e004      	b.n	80060f0 <USB_HC_Init+0x14c>
      break;
 80060e6:	bf00      	nop
 80060e8:	e002      	b.n	80060f0 <USB_HC_Init+0x14c>
      break;
 80060ea:	bf00      	nop
 80060ec:	e000      	b.n	80060f0 <USB_HC_Init+0x14c>
      break;
 80060ee:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060f6:	699a      	ldr	r2, [r3, #24]
 80060f8:	78fb      	ldrb	r3, [r7, #3]
 80060fa:	f003 030f 	and.w	r3, r3, #15
 80060fe:	2101      	movs	r1, #1
 8006100:	fa01 f303 	lsl.w	r3, r1, r3
 8006104:	6939      	ldr	r1, [r7, #16]
 8006106:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800610a:	4313      	orrs	r3, r2
 800610c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	699b      	ldr	r3, [r3, #24]
 8006112:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800611a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800611e:	2b00      	cmp	r3, #0
 8006120:	da03      	bge.n	800612a <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006122:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006126:	61bb      	str	r3, [r7, #24]
 8006128:	e001      	b.n	800612e <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800612a:	2300      	movs	r3, #0
 800612c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f7ff ff0f 	bl	8005f52 <USB_GetHostSpeed>
 8006134:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006136:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800613a:	2b02      	cmp	r3, #2
 800613c:	d106      	bne.n	800614c <USB_HC_Init+0x1a8>
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2b02      	cmp	r3, #2
 8006142:	d003      	beq.n	800614c <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006144:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006148:	617b      	str	r3, [r7, #20]
 800614a:	e001      	b.n	8006150 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800614c:	2300      	movs	r3, #0
 800614e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006150:	787b      	ldrb	r3, [r7, #1]
 8006152:	059b      	lsls	r3, r3, #22
 8006154:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006158:	78bb      	ldrb	r3, [r7, #2]
 800615a:	02db      	lsls	r3, r3, #11
 800615c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006160:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006162:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006166:	049b      	lsls	r3, r3, #18
 8006168:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800616c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800616e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006170:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006174:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006176:	69bb      	ldr	r3, [r7, #24]
 8006178:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800617a:	78fb      	ldrb	r3, [r7, #3]
 800617c:	0159      	lsls	r1, r3, #5
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	440b      	add	r3, r1
 8006182:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006186:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800618c:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800618e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006192:	2b03      	cmp	r3, #3
 8006194:	d10f      	bne.n	80061b6 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8006196:	78fb      	ldrb	r3, [r7, #3]
 8006198:	015a      	lsls	r2, r3, #5
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	4413      	add	r3, r2
 800619e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	78fa      	ldrb	r2, [r7, #3]
 80061a6:	0151      	lsls	r1, r2, #5
 80061a8:	693a      	ldr	r2, [r7, #16]
 80061aa:	440a      	add	r2, r1
 80061ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80061b4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80061b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3720      	adds	r7, #32
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}

080061c0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b08c      	sub	sp, #48	; 0x30
 80061c4:	af02      	add	r7, sp, #8
 80061c6:	60f8      	str	r0, [r7, #12]
 80061c8:	60b9      	str	r1, [r7, #8]
 80061ca:	4613      	mov	r3, r2
 80061cc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	785b      	ldrb	r3, [r3, #1]
 80061d6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80061d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80061dc:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d02d      	beq.n	8006246 <USB_HC_StartXfer+0x86>
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	791b      	ldrb	r3, [r3, #4]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d129      	bne.n	8006246 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80061f2:	79fb      	ldrb	r3, [r7, #7]
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	d117      	bne.n	8006228 <USB_HC_StartXfer+0x68>
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	79db      	ldrb	r3, [r3, #7]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d003      	beq.n	8006208 <USB_HC_StartXfer+0x48>
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	79db      	ldrb	r3, [r3, #7]
 8006204:	2b02      	cmp	r3, #2
 8006206:	d10f      	bne.n	8006228 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006208:	69fb      	ldr	r3, [r7, #28]
 800620a:	015a      	lsls	r2, r3, #5
 800620c:	6a3b      	ldr	r3, [r7, #32]
 800620e:	4413      	add	r3, r2
 8006210:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006214:	68db      	ldr	r3, [r3, #12]
 8006216:	69fa      	ldr	r2, [r7, #28]
 8006218:	0151      	lsls	r1, r2, #5
 800621a:	6a3a      	ldr	r2, [r7, #32]
 800621c:	440a      	add	r2, r1
 800621e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006226:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006228:	79fb      	ldrb	r3, [r7, #7]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d10b      	bne.n	8006246 <USB_HC_StartXfer+0x86>
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	795b      	ldrb	r3, [r3, #5]
 8006232:	2b01      	cmp	r3, #1
 8006234:	d107      	bne.n	8006246 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	785b      	ldrb	r3, [r3, #1]
 800623a:	4619      	mov	r1, r3
 800623c:	68f8      	ldr	r0, [r7, #12]
 800623e:	f000 fa2f 	bl	80066a0 <USB_DoPing>
      return HAL_OK;
 8006242:	2300      	movs	r3, #0
 8006244:	e0f8      	b.n	8006438 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	695b      	ldr	r3, [r3, #20]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d018      	beq.n	8006280 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	695b      	ldr	r3, [r3, #20]
 8006252:	68ba      	ldr	r2, [r7, #8]
 8006254:	8912      	ldrh	r2, [r2, #8]
 8006256:	4413      	add	r3, r2
 8006258:	3b01      	subs	r3, #1
 800625a:	68ba      	ldr	r2, [r7, #8]
 800625c:	8912      	ldrh	r2, [r2, #8]
 800625e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006262:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006264:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006266:	8b7b      	ldrh	r3, [r7, #26]
 8006268:	429a      	cmp	r2, r3
 800626a:	d90b      	bls.n	8006284 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800626c:	8b7b      	ldrh	r3, [r7, #26]
 800626e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006270:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006272:	68ba      	ldr	r2, [r7, #8]
 8006274:	8912      	ldrh	r2, [r2, #8]
 8006276:	fb02 f203 	mul.w	r2, r2, r3
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	611a      	str	r2, [r3, #16]
 800627e:	e001      	b.n	8006284 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8006280:	2301      	movs	r3, #1
 8006282:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	78db      	ldrb	r3, [r3, #3]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d007      	beq.n	800629c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800628c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800628e:	68ba      	ldr	r2, [r7, #8]
 8006290:	8912      	ldrh	r2, [r2, #8]
 8006292:	fb02 f203 	mul.w	r2, r2, r3
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	611a      	str	r2, [r3, #16]
 800629a:	e003      	b.n	80062a4 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	695a      	ldr	r2, [r3, #20]
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	691b      	ldr	r3, [r3, #16]
 80062a8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80062ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80062ae:	04d9      	lsls	r1, r3, #19
 80062b0:	4b63      	ldr	r3, [pc, #396]	; (8006440 <USB_HC_StartXfer+0x280>)
 80062b2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80062b4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	7a9b      	ldrb	r3, [r3, #10]
 80062ba:	075b      	lsls	r3, r3, #29
 80062bc:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80062c0:	69f9      	ldr	r1, [r7, #28]
 80062c2:	0148      	lsls	r0, r1, #5
 80062c4:	6a39      	ldr	r1, [r7, #32]
 80062c6:	4401      	add	r1, r0
 80062c8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80062cc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80062ce:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80062d0:	79fb      	ldrb	r3, [r7, #7]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d009      	beq.n	80062ea <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	68d9      	ldr	r1, [r3, #12]
 80062da:	69fb      	ldr	r3, [r7, #28]
 80062dc:	015a      	lsls	r2, r3, #5
 80062de:	6a3b      	ldr	r3, [r7, #32]
 80062e0:	4413      	add	r3, r2
 80062e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062e6:	460a      	mov	r2, r1
 80062e8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80062ea:	6a3b      	ldr	r3, [r7, #32]
 80062ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	f003 0301 	and.w	r3, r3, #1
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	bf0c      	ite	eq
 80062fa:	2301      	moveq	r3, #1
 80062fc:	2300      	movne	r3, #0
 80062fe:	b2db      	uxtb	r3, r3
 8006300:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006302:	69fb      	ldr	r3, [r7, #28]
 8006304:	015a      	lsls	r2, r3, #5
 8006306:	6a3b      	ldr	r3, [r7, #32]
 8006308:	4413      	add	r3, r2
 800630a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	69fa      	ldr	r2, [r7, #28]
 8006312:	0151      	lsls	r1, r2, #5
 8006314:	6a3a      	ldr	r2, [r7, #32]
 8006316:	440a      	add	r2, r1
 8006318:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800631c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006320:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006322:	69fb      	ldr	r3, [r7, #28]
 8006324:	015a      	lsls	r2, r3, #5
 8006326:	6a3b      	ldr	r3, [r7, #32]
 8006328:	4413      	add	r3, r2
 800632a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800632e:	681a      	ldr	r2, [r3, #0]
 8006330:	7e7b      	ldrb	r3, [r7, #25]
 8006332:	075b      	lsls	r3, r3, #29
 8006334:	69f9      	ldr	r1, [r7, #28]
 8006336:	0148      	lsls	r0, r1, #5
 8006338:	6a39      	ldr	r1, [r7, #32]
 800633a:	4401      	add	r1, r0
 800633c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006340:	4313      	orrs	r3, r2
 8006342:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006344:	69fb      	ldr	r3, [r7, #28]
 8006346:	015a      	lsls	r2, r3, #5
 8006348:	6a3b      	ldr	r3, [r7, #32]
 800634a:	4413      	add	r3, r2
 800634c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800635a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	78db      	ldrb	r3, [r3, #3]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d004      	beq.n	800636e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800636a:	613b      	str	r3, [r7, #16]
 800636c:	e003      	b.n	8006376 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006374:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800637c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800637e:	69fb      	ldr	r3, [r7, #28]
 8006380:	015a      	lsls	r2, r3, #5
 8006382:	6a3b      	ldr	r3, [r7, #32]
 8006384:	4413      	add	r3, r2
 8006386:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800638a:	461a      	mov	r2, r3
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006390:	79fb      	ldrb	r3, [r7, #7]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d001      	beq.n	800639a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006396:	2300      	movs	r3, #0
 8006398:	e04e      	b.n	8006438 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	78db      	ldrb	r3, [r3, #3]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d149      	bne.n	8006436 <USB_HC_StartXfer+0x276>
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	695b      	ldr	r3, [r3, #20]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d045      	beq.n	8006436 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	79db      	ldrb	r3, [r3, #7]
 80063ae:	2b03      	cmp	r3, #3
 80063b0:	d830      	bhi.n	8006414 <USB_HC_StartXfer+0x254>
 80063b2:	a201      	add	r2, pc, #4	; (adr r2, 80063b8 <USB_HC_StartXfer+0x1f8>)
 80063b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063b8:	080063c9 	.word	0x080063c9
 80063bc:	080063ed 	.word	0x080063ed
 80063c0:	080063c9 	.word	0x080063c9
 80063c4:	080063ed 	.word	0x080063ed
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	695b      	ldr	r3, [r3, #20]
 80063cc:	3303      	adds	r3, #3
 80063ce:	089b      	lsrs	r3, r3, #2
 80063d0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80063d2:	8afa      	ldrh	r2, [r7, #22]
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d8:	b29b      	uxth	r3, r3
 80063da:	429a      	cmp	r2, r3
 80063dc:	d91c      	bls.n	8006418 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	699b      	ldr	r3, [r3, #24]
 80063e2:	f043 0220 	orr.w	r2, r3, #32
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	619a      	str	r2, [r3, #24]
        }
        break;
 80063ea:	e015      	b.n	8006418 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	695b      	ldr	r3, [r3, #20]
 80063f0:	3303      	adds	r3, #3
 80063f2:	089b      	lsrs	r3, r3, #2
 80063f4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80063f6:	8afa      	ldrh	r2, [r7, #22]
 80063f8:	6a3b      	ldr	r3, [r7, #32]
 80063fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063fe:	691b      	ldr	r3, [r3, #16]
 8006400:	b29b      	uxth	r3, r3
 8006402:	429a      	cmp	r2, r3
 8006404:	d90a      	bls.n	800641c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	699b      	ldr	r3, [r3, #24]
 800640a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	619a      	str	r2, [r3, #24]
        }
        break;
 8006412:	e003      	b.n	800641c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006414:	bf00      	nop
 8006416:	e002      	b.n	800641e <USB_HC_StartXfer+0x25e>
        break;
 8006418:	bf00      	nop
 800641a:	e000      	b.n	800641e <USB_HC_StartXfer+0x25e>
        break;
 800641c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	68d9      	ldr	r1, [r3, #12]
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	785a      	ldrb	r2, [r3, #1]
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	695b      	ldr	r3, [r3, #20]
 800642a:	b29b      	uxth	r3, r3
 800642c:	2000      	movs	r0, #0
 800642e:	9000      	str	r0, [sp, #0]
 8006430:	68f8      	ldr	r0, [r7, #12]
 8006432:	f7ff fb53 	bl	8005adc <USB_WritePacket>
  }

  return HAL_OK;
 8006436:	2300      	movs	r3, #0
}
 8006438:	4618      	mov	r0, r3
 800643a:	3728      	adds	r7, #40	; 0x28
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}
 8006440:	1ff80000 	.word	0x1ff80000

08006444 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006444:	b480      	push	{r7}
 8006446:	b085      	sub	sp, #20
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006456:	695b      	ldr	r3, [r3, #20]
 8006458:	b29b      	uxth	r3, r3
}
 800645a:	4618      	mov	r0, r3
 800645c:	3714      	adds	r7, #20
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr

08006466 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006466:	b480      	push	{r7}
 8006468:	b089      	sub	sp, #36	; 0x24
 800646a:	af00      	add	r7, sp, #0
 800646c:	6078      	str	r0, [r7, #4]
 800646e:	460b      	mov	r3, r1
 8006470:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8006476:	78fb      	ldrb	r3, [r7, #3]
 8006478:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800647a:	2300      	movs	r3, #0
 800647c:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	015a      	lsls	r2, r3, #5
 8006482:	69bb      	ldr	r3, [r7, #24]
 8006484:	4413      	add	r3, r2
 8006486:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	0c9b      	lsrs	r3, r3, #18
 800648e:	f003 0303 	and.w	r3, r3, #3
 8006492:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	015a      	lsls	r2, r3, #5
 8006498:	69bb      	ldr	r3, [r7, #24]
 800649a:	4413      	add	r3, r2
 800649c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	0fdb      	lsrs	r3, r3, #31
 80064a4:	f003 0301 	and.w	r3, r3, #1
 80064a8:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	f003 0320 	and.w	r3, r3, #32
 80064b2:	2b20      	cmp	r3, #32
 80064b4:	d104      	bne.n	80064c0 <USB_HC_Halt+0x5a>
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d101      	bne.n	80064c0 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80064bc:	2300      	movs	r3, #0
 80064be:	e0e8      	b.n	8006692 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d002      	beq.n	80064cc <USB_HC_Halt+0x66>
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	2b02      	cmp	r3, #2
 80064ca:	d173      	bne.n	80065b4 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	015a      	lsls	r2, r3, #5
 80064d0:	69bb      	ldr	r3, [r7, #24]
 80064d2:	4413      	add	r3, r2
 80064d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	697a      	ldr	r2, [r7, #20]
 80064dc:	0151      	lsls	r1, r2, #5
 80064de:	69ba      	ldr	r2, [r7, #24]
 80064e0:	440a      	add	r2, r1
 80064e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80064ea:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	f003 0320 	and.w	r3, r3, #32
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	f040 80cb 	bne.w	8006690 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064fe:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006502:	2b00      	cmp	r3, #0
 8006504:	d143      	bne.n	800658e <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	015a      	lsls	r2, r3, #5
 800650a:	69bb      	ldr	r3, [r7, #24]
 800650c:	4413      	add	r3, r2
 800650e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	697a      	ldr	r2, [r7, #20]
 8006516:	0151      	lsls	r1, r2, #5
 8006518:	69ba      	ldr	r2, [r7, #24]
 800651a:	440a      	add	r2, r1
 800651c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006520:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006524:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	015a      	lsls	r2, r3, #5
 800652a:	69bb      	ldr	r3, [r7, #24]
 800652c:	4413      	add	r3, r2
 800652e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	697a      	ldr	r2, [r7, #20]
 8006536:	0151      	lsls	r1, r2, #5
 8006538:	69ba      	ldr	r2, [r7, #24]
 800653a:	440a      	add	r2, r1
 800653c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006540:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006544:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	015a      	lsls	r2, r3, #5
 800654a:	69bb      	ldr	r3, [r7, #24]
 800654c:	4413      	add	r3, r2
 800654e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	697a      	ldr	r2, [r7, #20]
 8006556:	0151      	lsls	r1, r2, #5
 8006558:	69ba      	ldr	r2, [r7, #24]
 800655a:	440a      	add	r2, r1
 800655c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006560:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006564:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8006566:	69fb      	ldr	r3, [r7, #28]
 8006568:	3301      	adds	r3, #1
 800656a:	61fb      	str	r3, [r7, #28]
 800656c:	69fb      	ldr	r3, [r7, #28]
 800656e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006572:	d81d      	bhi.n	80065b0 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	015a      	lsls	r2, r3, #5
 8006578:	69bb      	ldr	r3, [r7, #24]
 800657a:	4413      	add	r3, r2
 800657c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006586:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800658a:	d0ec      	beq.n	8006566 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800658c:	e080      	b.n	8006690 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	015a      	lsls	r2, r3, #5
 8006592:	69bb      	ldr	r3, [r7, #24]
 8006594:	4413      	add	r3, r2
 8006596:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	697a      	ldr	r2, [r7, #20]
 800659e:	0151      	lsls	r1, r2, #5
 80065a0:	69ba      	ldr	r2, [r7, #24]
 80065a2:	440a      	add	r2, r1
 80065a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80065ac:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80065ae:	e06f      	b.n	8006690 <USB_HC_Halt+0x22a>
            break;
 80065b0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80065b2:	e06d      	b.n	8006690 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	015a      	lsls	r2, r3, #5
 80065b8:	69bb      	ldr	r3, [r7, #24]
 80065ba:	4413      	add	r3, r2
 80065bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	697a      	ldr	r2, [r7, #20]
 80065c4:	0151      	lsls	r1, r2, #5
 80065c6:	69ba      	ldr	r2, [r7, #24]
 80065c8:	440a      	add	r2, r1
 80065ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80065d2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80065d4:	69bb      	ldr	r3, [r7, #24]
 80065d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065da:	691b      	ldr	r3, [r3, #16]
 80065dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d143      	bne.n	800666c <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	015a      	lsls	r2, r3, #5
 80065e8:	69bb      	ldr	r3, [r7, #24]
 80065ea:	4413      	add	r3, r2
 80065ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	697a      	ldr	r2, [r7, #20]
 80065f4:	0151      	lsls	r1, r2, #5
 80065f6:	69ba      	ldr	r2, [r7, #24]
 80065f8:	440a      	add	r2, r1
 80065fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006602:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	015a      	lsls	r2, r3, #5
 8006608:	69bb      	ldr	r3, [r7, #24]
 800660a:	4413      	add	r3, r2
 800660c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	697a      	ldr	r2, [r7, #20]
 8006614:	0151      	lsls	r1, r2, #5
 8006616:	69ba      	ldr	r2, [r7, #24]
 8006618:	440a      	add	r2, r1
 800661a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800661e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006622:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	015a      	lsls	r2, r3, #5
 8006628:	69bb      	ldr	r3, [r7, #24]
 800662a:	4413      	add	r3, r2
 800662c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	697a      	ldr	r2, [r7, #20]
 8006634:	0151      	lsls	r1, r2, #5
 8006636:	69ba      	ldr	r2, [r7, #24]
 8006638:	440a      	add	r2, r1
 800663a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800663e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006642:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006644:	69fb      	ldr	r3, [r7, #28]
 8006646:	3301      	adds	r3, #1
 8006648:	61fb      	str	r3, [r7, #28]
 800664a:	69fb      	ldr	r3, [r7, #28]
 800664c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006650:	d81d      	bhi.n	800668e <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	015a      	lsls	r2, r3, #5
 8006656:	69bb      	ldr	r3, [r7, #24]
 8006658:	4413      	add	r3, r2
 800665a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006664:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006668:	d0ec      	beq.n	8006644 <USB_HC_Halt+0x1de>
 800666a:	e011      	b.n	8006690 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	015a      	lsls	r2, r3, #5
 8006670:	69bb      	ldr	r3, [r7, #24]
 8006672:	4413      	add	r3, r2
 8006674:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	697a      	ldr	r2, [r7, #20]
 800667c:	0151      	lsls	r1, r2, #5
 800667e:	69ba      	ldr	r2, [r7, #24]
 8006680:	440a      	add	r2, r1
 8006682:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006686:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800668a:	6013      	str	r3, [r2, #0]
 800668c:	e000      	b.n	8006690 <USB_HC_Halt+0x22a>
          break;
 800668e:	bf00      	nop
    }
  }

  return HAL_OK;
 8006690:	2300      	movs	r3, #0
}
 8006692:	4618      	mov	r0, r3
 8006694:	3724      	adds	r7, #36	; 0x24
 8006696:	46bd      	mov	sp, r7
 8006698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669c:	4770      	bx	lr
	...

080066a0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b087      	sub	sp, #28
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	460b      	mov	r3, r1
 80066aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80066b0:	78fb      	ldrb	r3, [r7, #3]
 80066b2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80066b4:	2301      	movs	r3, #1
 80066b6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	04da      	lsls	r2, r3, #19
 80066bc:	4b15      	ldr	r3, [pc, #84]	; (8006714 <USB_DoPing+0x74>)
 80066be:	4013      	ands	r3, r2
 80066c0:	693a      	ldr	r2, [r7, #16]
 80066c2:	0151      	lsls	r1, r2, #5
 80066c4:	697a      	ldr	r2, [r7, #20]
 80066c6:	440a      	add	r2, r1
 80066c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80066d0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	015a      	lsls	r2, r3, #5
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	4413      	add	r3, r2
 80066da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80066e8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80066f0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	015a      	lsls	r2, r3, #5
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	4413      	add	r3, r2
 80066fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066fe:	461a      	mov	r2, r3
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006704:	2300      	movs	r3, #0
}
 8006706:	4618      	mov	r0, r3
 8006708:	371c      	adds	r7, #28
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr
 8006712:	bf00      	nop
 8006714:	1ff80000 	.word	0x1ff80000

08006718 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b086      	sub	sp, #24
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006724:	2300      	movs	r3, #0
 8006726:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f7ff f935 	bl	8005998 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800672e:	2110      	movs	r1, #16
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f7ff f98f 	bl	8005a54 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f7ff f9b0 	bl	8005a9c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800673c:	2300      	movs	r3, #0
 800673e:	613b      	str	r3, [r7, #16]
 8006740:	e01f      	b.n	8006782 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	015a      	lsls	r2, r3, #5
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	4413      	add	r3, r2
 800674a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006758:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006760:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006768:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	015a      	lsls	r2, r3, #5
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	4413      	add	r3, r2
 8006772:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006776:	461a      	mov	r2, r3
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	3301      	adds	r3, #1
 8006780:	613b      	str	r3, [r7, #16]
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	2b0f      	cmp	r3, #15
 8006786:	d9dc      	bls.n	8006742 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006788:	2300      	movs	r3, #0
 800678a:	613b      	str	r3, [r7, #16]
 800678c:	e034      	b.n	80067f8 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	015a      	lsls	r2, r3, #5
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	4413      	add	r3, r2
 8006796:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80067a4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80067ac:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80067b4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	015a      	lsls	r2, r3, #5
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	4413      	add	r3, r2
 80067be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067c2:	461a      	mov	r2, r3
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	3301      	adds	r3, #1
 80067cc:	617b      	str	r3, [r7, #20]
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80067d4:	d80c      	bhi.n	80067f0 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	015a      	lsls	r2, r3, #5
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	4413      	add	r3, r2
 80067de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067ec:	d0ec      	beq.n	80067c8 <USB_StopHost+0xb0>
 80067ee:	e000      	b.n	80067f2 <USB_StopHost+0xda>
        break;
 80067f0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	3301      	adds	r3, #1
 80067f6:	613b      	str	r3, [r7, #16]
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	2b0f      	cmp	r3, #15
 80067fc:	d9c7      	bls.n	800678e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006804:	461a      	mov	r2, r3
 8006806:	f04f 33ff 	mov.w	r3, #4294967295
 800680a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f04f 32ff 	mov.w	r2, #4294967295
 8006812:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f7ff f8ae 	bl	8005976 <USB_EnableGlobalInt>

  return HAL_OK;
 800681a:	2300      	movs	r3, #0
}
 800681c:	4618      	mov	r0, r3
 800681e:	3718      	adds	r7, #24
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}

08006824 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006824:	b590      	push	{r4, r7, lr}
 8006826:	b089      	sub	sp, #36	; 0x24
 8006828:	af04      	add	r7, sp, #16
 800682a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800682c:	2301      	movs	r3, #1
 800682e:	2202      	movs	r2, #2
 8006830:	2102      	movs	r1, #2
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 fc66 	bl	8007104 <USBH_FindInterface>
 8006838:	4603      	mov	r3, r0
 800683a:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800683c:	7bfb      	ldrb	r3, [r7, #15]
 800683e:	2bff      	cmp	r3, #255	; 0xff
 8006840:	d002      	beq.n	8006848 <USBH_CDC_InterfaceInit+0x24>
 8006842:	7bfb      	ldrb	r3, [r7, #15]
 8006844:	2b01      	cmp	r3, #1
 8006846:	d901      	bls.n	800684c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006848:	2302      	movs	r3, #2
 800684a:	e13d      	b.n	8006ac8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800684c:	7bfb      	ldrb	r3, [r7, #15]
 800684e:	4619      	mov	r1, r3
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f000 fc3b 	bl	80070cc <USBH_SelectInterface>
 8006856:	4603      	mov	r3, r0
 8006858:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800685a:	7bbb      	ldrb	r3, [r7, #14]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d001      	beq.n	8006864 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006860:	2302      	movs	r3, #2
 8006862:	e131      	b.n	8006ac8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800686a:	2050      	movs	r0, #80	; 0x50
 800686c:	f002 fa00 	bl	8008c70 <malloc>
 8006870:	4603      	mov	r3, r0
 8006872:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800687a:	69db      	ldr	r3, [r3, #28]
 800687c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d101      	bne.n	8006888 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006884:	2302      	movs	r3, #2
 8006886:	e11f      	b.n	8006ac8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006888:	2250      	movs	r2, #80	; 0x50
 800688a:	2100      	movs	r1, #0
 800688c:	68b8      	ldr	r0, [r7, #8]
 800688e:	f002 f9ff 	bl	8008c90 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006892:	7bfb      	ldrb	r3, [r7, #15]
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	211a      	movs	r1, #26
 8006898:	fb01 f303 	mul.w	r3, r1, r3
 800689c:	4413      	add	r3, r2
 800689e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	b25b      	sxtb	r3, r3
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	da15      	bge.n	80068d6 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80068aa:	7bfb      	ldrb	r3, [r7, #15]
 80068ac:	687a      	ldr	r2, [r7, #4]
 80068ae:	211a      	movs	r1, #26
 80068b0:	fb01 f303 	mul.w	r3, r1, r3
 80068b4:	4413      	add	r3, r2
 80068b6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80068ba:	781a      	ldrb	r2, [r3, #0]
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80068c0:	7bfb      	ldrb	r3, [r7, #15]
 80068c2:	687a      	ldr	r2, [r7, #4]
 80068c4:	211a      	movs	r1, #26
 80068c6:	fb01 f303 	mul.w	r3, r1, r3
 80068ca:	4413      	add	r3, r2
 80068cc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80068d0:	881a      	ldrh	r2, [r3, #0]
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	785b      	ldrb	r3, [r3, #1]
 80068da:	4619      	mov	r1, r3
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f001 fe32 	bl	8008546 <USBH_AllocPipe>
 80068e2:	4603      	mov	r3, r0
 80068e4:	461a      	mov	r2, r3
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	7819      	ldrb	r1, [r3, #0]
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	7858      	ldrb	r0, [r3, #1]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80068fe:	68ba      	ldr	r2, [r7, #8]
 8006900:	8952      	ldrh	r2, [r2, #10]
 8006902:	9202      	str	r2, [sp, #8]
 8006904:	2203      	movs	r2, #3
 8006906:	9201      	str	r2, [sp, #4]
 8006908:	9300      	str	r3, [sp, #0]
 800690a:	4623      	mov	r3, r4
 800690c:	4602      	mov	r2, r0
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f001 fdea 	bl	80084e8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	2200      	movs	r2, #0
 800691a:	4619      	mov	r1, r3
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f002 f8f9 	bl	8008b14 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006922:	2300      	movs	r3, #0
 8006924:	2200      	movs	r2, #0
 8006926:	210a      	movs	r1, #10
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f000 fbeb 	bl	8007104 <USBH_FindInterface>
 800692e:	4603      	mov	r3, r0
 8006930:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006932:	7bfb      	ldrb	r3, [r7, #15]
 8006934:	2bff      	cmp	r3, #255	; 0xff
 8006936:	d002      	beq.n	800693e <USBH_CDC_InterfaceInit+0x11a>
 8006938:	7bfb      	ldrb	r3, [r7, #15]
 800693a:	2b01      	cmp	r3, #1
 800693c:	d901      	bls.n	8006942 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800693e:	2302      	movs	r3, #2
 8006940:	e0c2      	b.n	8006ac8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006942:	7bfb      	ldrb	r3, [r7, #15]
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	211a      	movs	r1, #26
 8006948:	fb01 f303 	mul.w	r3, r1, r3
 800694c:	4413      	add	r3, r2
 800694e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006952:	781b      	ldrb	r3, [r3, #0]
 8006954:	b25b      	sxtb	r3, r3
 8006956:	2b00      	cmp	r3, #0
 8006958:	da16      	bge.n	8006988 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800695a:	7bfb      	ldrb	r3, [r7, #15]
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	211a      	movs	r1, #26
 8006960:	fb01 f303 	mul.w	r3, r1, r3
 8006964:	4413      	add	r3, r2
 8006966:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800696a:	781a      	ldrb	r2, [r3, #0]
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006970:	7bfb      	ldrb	r3, [r7, #15]
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	211a      	movs	r1, #26
 8006976:	fb01 f303 	mul.w	r3, r1, r3
 800697a:	4413      	add	r3, r2
 800697c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006980:	881a      	ldrh	r2, [r3, #0]
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	835a      	strh	r2, [r3, #26]
 8006986:	e015      	b.n	80069b4 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006988:	7bfb      	ldrb	r3, [r7, #15]
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	211a      	movs	r1, #26
 800698e:	fb01 f303 	mul.w	r3, r1, r3
 8006992:	4413      	add	r3, r2
 8006994:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006998:	781a      	ldrb	r2, [r3, #0]
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800699e:	7bfb      	ldrb	r3, [r7, #15]
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	211a      	movs	r1, #26
 80069a4:	fb01 f303 	mul.w	r3, r1, r3
 80069a8:	4413      	add	r3, r2
 80069aa:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80069ae:	881a      	ldrh	r2, [r3, #0]
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80069b4:	7bfb      	ldrb	r3, [r7, #15]
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	211a      	movs	r1, #26
 80069ba:	fb01 f303 	mul.w	r3, r1, r3
 80069be:	4413      	add	r3, r2
 80069c0:	f203 3356 	addw	r3, r3, #854	; 0x356
 80069c4:	781b      	ldrb	r3, [r3, #0]
 80069c6:	b25b      	sxtb	r3, r3
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	da16      	bge.n	80069fa <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80069cc:	7bfb      	ldrb	r3, [r7, #15]
 80069ce:	687a      	ldr	r2, [r7, #4]
 80069d0:	211a      	movs	r1, #26
 80069d2:	fb01 f303 	mul.w	r3, r1, r3
 80069d6:	4413      	add	r3, r2
 80069d8:	f203 3356 	addw	r3, r3, #854	; 0x356
 80069dc:	781a      	ldrb	r2, [r3, #0]
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80069e2:	7bfb      	ldrb	r3, [r7, #15]
 80069e4:	687a      	ldr	r2, [r7, #4]
 80069e6:	211a      	movs	r1, #26
 80069e8:	fb01 f303 	mul.w	r3, r1, r3
 80069ec:	4413      	add	r3, r2
 80069ee:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80069f2:	881a      	ldrh	r2, [r3, #0]
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	835a      	strh	r2, [r3, #26]
 80069f8:	e015      	b.n	8006a26 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80069fa:	7bfb      	ldrb	r3, [r7, #15]
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	211a      	movs	r1, #26
 8006a00:	fb01 f303 	mul.w	r3, r1, r3
 8006a04:	4413      	add	r3, r2
 8006a06:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006a0a:	781a      	ldrb	r2, [r3, #0]
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006a10:	7bfb      	ldrb	r3, [r7, #15]
 8006a12:	687a      	ldr	r2, [r7, #4]
 8006a14:	211a      	movs	r1, #26
 8006a16:	fb01 f303 	mul.w	r3, r1, r3
 8006a1a:	4413      	add	r3, r2
 8006a1c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006a20:	881a      	ldrh	r2, [r3, #0]
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	7b9b      	ldrb	r3, [r3, #14]
 8006a2a:	4619      	mov	r1, r3
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f001 fd8a 	bl	8008546 <USBH_AllocPipe>
 8006a32:	4603      	mov	r3, r0
 8006a34:	461a      	mov	r2, r3
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	7bdb      	ldrb	r3, [r3, #15]
 8006a3e:	4619      	mov	r1, r3
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f001 fd80 	bl	8008546 <USBH_AllocPipe>
 8006a46:	4603      	mov	r3, r0
 8006a48:	461a      	mov	r2, r3
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	7b59      	ldrb	r1, [r3, #13]
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	7b98      	ldrb	r0, [r3, #14]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006a62:	68ba      	ldr	r2, [r7, #8]
 8006a64:	8b12      	ldrh	r2, [r2, #24]
 8006a66:	9202      	str	r2, [sp, #8]
 8006a68:	2202      	movs	r2, #2
 8006a6a:	9201      	str	r2, [sp, #4]
 8006a6c:	9300      	str	r3, [sp, #0]
 8006a6e:	4623      	mov	r3, r4
 8006a70:	4602      	mov	r2, r0
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f001 fd38 	bl	80084e8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	7b19      	ldrb	r1, [r3, #12]
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	7bd8      	ldrb	r0, [r3, #15]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006a8c:	68ba      	ldr	r2, [r7, #8]
 8006a8e:	8b52      	ldrh	r2, [r2, #26]
 8006a90:	9202      	str	r2, [sp, #8]
 8006a92:	2202      	movs	r2, #2
 8006a94:	9201      	str	r2, [sp, #4]
 8006a96:	9300      	str	r3, [sp, #0]
 8006a98:	4623      	mov	r3, r4
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f001 fd23 	bl	80084e8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	7b5b      	ldrb	r3, [r3, #13]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	4619      	mov	r1, r3
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f002 f82e 	bl	8008b14 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	7b1b      	ldrb	r3, [r3, #12]
 8006abc:	2200      	movs	r2, #0
 8006abe:	4619      	mov	r1, r3
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f002 f827 	bl	8008b14 <USBH_LL_SetToggle>

  return USBH_OK;
 8006ac6:	2300      	movs	r3, #0
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3714      	adds	r7, #20
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd90      	pop	{r4, r7, pc}

08006ad0 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b084      	sub	sp, #16
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ade:	69db      	ldr	r3, [r3, #28]
 8006ae0:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	781b      	ldrb	r3, [r3, #0]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d00e      	beq.n	8006b08 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	781b      	ldrb	r3, [r3, #0]
 8006aee:	4619      	mov	r1, r3
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f001 fd18 	bl	8008526 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	781b      	ldrb	r3, [r3, #0]
 8006afa:	4619      	mov	r1, r3
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f001 fd43 	bl	8008588 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2200      	movs	r2, #0
 8006b06:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	7b1b      	ldrb	r3, [r3, #12]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d00e      	beq.n	8006b2e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	7b1b      	ldrb	r3, [r3, #12]
 8006b14:	4619      	mov	r1, r3
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f001 fd05 	bl	8008526 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	7b1b      	ldrb	r3, [r3, #12]
 8006b20:	4619      	mov	r1, r3
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f001 fd30 	bl	8008588 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	7b5b      	ldrb	r3, [r3, #13]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d00e      	beq.n	8006b54 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	7b5b      	ldrb	r3, [r3, #13]
 8006b3a:	4619      	mov	r1, r3
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f001 fcf2 	bl	8008526 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	7b5b      	ldrb	r3, [r3, #13]
 8006b46:	4619      	mov	r1, r3
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f001 fd1d 	bl	8008588 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2200      	movs	r2, #0
 8006b52:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b5a:	69db      	ldr	r3, [r3, #28]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d00b      	beq.n	8006b78 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b66:	69db      	ldr	r3, [r3, #28]
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f002 f889 	bl	8008c80 <free>
    phost->pActiveClass->pData = 0U;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b74:	2200      	movs	r2, #0
 8006b76:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006b78:	2300      	movs	r3, #0
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3710      	adds	r7, #16
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}

08006b82 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006b82:	b580      	push	{r7, lr}
 8006b84:	b084      	sub	sp, #16
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b90:	69db      	ldr	r3, [r3, #28]
 8006b92:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	3340      	adds	r3, #64	; 0x40
 8006b98:	4619      	mov	r1, r3
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f000 f8b1 	bl	8006d02 <GetLineCoding>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006ba4:	7afb      	ldrb	r3, [r7, #11]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d105      	bne.n	8006bb6 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006bb0:	2102      	movs	r1, #2
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006bb6:	7afb      	ldrb	r3, [r7, #11]
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	3710      	adds	r7, #16
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}

08006bc0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b084      	sub	sp, #16
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006bd6:	69db      	ldr	r3, [r3, #28]
 8006bd8:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006be0:	2b04      	cmp	r3, #4
 8006be2:	d877      	bhi.n	8006cd4 <USBH_CDC_Process+0x114>
 8006be4:	a201      	add	r2, pc, #4	; (adr r2, 8006bec <USBH_CDC_Process+0x2c>)
 8006be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bea:	bf00      	nop
 8006bec:	08006c01 	.word	0x08006c01
 8006bf0:	08006c07 	.word	0x08006c07
 8006bf4:	08006c37 	.word	0x08006c37
 8006bf8:	08006cab 	.word	0x08006cab
 8006bfc:	08006cb9 	.word	0x08006cb9
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006c00:	2300      	movs	r3, #0
 8006c02:	73fb      	strb	r3, [r7, #15]
      break;
 8006c04:	e06d      	b.n	8006ce2 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c0a:	4619      	mov	r1, r3
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f000 f897 	bl	8006d40 <SetLineCoding>
 8006c12:	4603      	mov	r3, r0
 8006c14:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006c16:	7bbb      	ldrb	r3, [r7, #14]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d104      	bne.n	8006c26 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	2202      	movs	r2, #2
 8006c20:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006c24:	e058      	b.n	8006cd8 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006c26:	7bbb      	ldrb	r3, [r7, #14]
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	d055      	beq.n	8006cd8 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	2204      	movs	r2, #4
 8006c30:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006c34:	e050      	b.n	8006cd8 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	3340      	adds	r3, #64	; 0x40
 8006c3a:	4619      	mov	r1, r3
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f000 f860 	bl	8006d02 <GetLineCoding>
 8006c42:	4603      	mov	r3, r0
 8006c44:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006c46:	7bbb      	ldrb	r3, [r7, #14]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d126      	bne.n	8006c9a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c5e:	791b      	ldrb	r3, [r3, #4]
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d13b      	bne.n	8006cdc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c6e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d133      	bne.n	8006cdc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c7e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d12b      	bne.n	8006cdc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c8c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	d124      	bne.n	8006cdc <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f000 f958 	bl	8006f48 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006c98:	e020      	b.n	8006cdc <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006c9a:	7bbb      	ldrb	r3, [r7, #14]
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d01d      	beq.n	8006cdc <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	2204      	movs	r2, #4
 8006ca4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006ca8:	e018      	b.n	8006cdc <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 f867 	bl	8006d7e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f000 f8da 	bl	8006e6a <CDC_ProcessReception>
      break;
 8006cb6:	e014      	b.n	8006ce2 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006cb8:	2100      	movs	r1, #0
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f000 ffe3 	bl	8007c86 <USBH_ClrFeature>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006cc4:	7bbb      	ldrb	r3, [r7, #14]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d10a      	bne.n	8006ce0 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006cd2:	e005      	b.n	8006ce0 <USBH_CDC_Process+0x120>

    default:
      break;
 8006cd4:	bf00      	nop
 8006cd6:	e004      	b.n	8006ce2 <USBH_CDC_Process+0x122>
      break;
 8006cd8:	bf00      	nop
 8006cda:	e002      	b.n	8006ce2 <USBH_CDC_Process+0x122>
      break;
 8006cdc:	bf00      	nop
 8006cde:	e000      	b.n	8006ce2 <USBH_CDC_Process+0x122>
      break;
 8006ce0:	bf00      	nop

  }

  return status;
 8006ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3710      	adds	r7, #16
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}

08006cec <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006cf4:	2300      	movs	r3, #0
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	370c      	adds	r7, #12
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr

08006d02 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006d02:	b580      	push	{r7, lr}
 8006d04:	b082      	sub	sp, #8
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6078      	str	r0, [r7, #4]
 8006d0a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	22a1      	movs	r2, #161	; 0xa1
 8006d10:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2221      	movs	r2, #33	; 0x21
 8006d16:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2200      	movs	r2, #0
 8006d22:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2207      	movs	r2, #7
 8006d28:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	2207      	movs	r2, #7
 8006d2e:	4619      	mov	r1, r3
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f001 f988 	bl	8008046 <USBH_CtlReq>
 8006d36:	4603      	mov	r3, r0
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3708      	adds	r7, #8
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}

08006d40 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b082      	sub	sp, #8
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2221      	movs	r2, #33	; 0x21
 8006d4e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2220      	movs	r2, #32
 8006d54:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2207      	movs	r2, #7
 8006d66:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	2207      	movs	r2, #7
 8006d6c:	4619      	mov	r1, r3
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f001 f969 	bl	8008046 <USBH_CtlReq>
 8006d74:	4603      	mov	r3, r0
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3708      	adds	r7, #8
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}

08006d7e <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006d7e:	b580      	push	{r7, lr}
 8006d80:	b086      	sub	sp, #24
 8006d82:	af02      	add	r7, sp, #8
 8006d84:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d8c:	69db      	ldr	r3, [r3, #28]
 8006d8e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006d90:	2300      	movs	r3, #0
 8006d92:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006d9a:	2b01      	cmp	r3, #1
 8006d9c:	d002      	beq.n	8006da4 <CDC_ProcessTransmission+0x26>
 8006d9e:	2b02      	cmp	r3, #2
 8006da0:	d023      	beq.n	8006dea <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006da2:	e05e      	b.n	8006e62 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da8:	68fa      	ldr	r2, [r7, #12]
 8006daa:	8b12      	ldrh	r2, [r2, #24]
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d90b      	bls.n	8006dc8 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	69d9      	ldr	r1, [r3, #28]
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	8b1a      	ldrh	r2, [r3, #24]
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	7b5b      	ldrb	r3, [r3, #13]
 8006dbc:	2001      	movs	r0, #1
 8006dbe:	9000      	str	r0, [sp, #0]
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f001 fb4e 	bl	8008462 <USBH_BulkSendData>
 8006dc6:	e00b      	b.n	8006de0 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8006dd0:	b29a      	uxth	r2, r3
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	7b5b      	ldrb	r3, [r3, #13]
 8006dd6:	2001      	movs	r0, #1
 8006dd8:	9000      	str	r0, [sp, #0]
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f001 fb41 	bl	8008462 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2202      	movs	r2, #2
 8006de4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006de8:	e03b      	b.n	8006e62 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	7b5b      	ldrb	r3, [r3, #13]
 8006dee:	4619      	mov	r1, r3
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f001 fe65 	bl	8008ac0 <USBH_LL_GetURBState>
 8006df6:	4603      	mov	r3, r0
 8006df8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006dfa:	7afb      	ldrb	r3, [r7, #11]
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d128      	bne.n	8006e52 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e04:	68fa      	ldr	r2, [r7, #12]
 8006e06:	8b12      	ldrh	r2, [r2, #24]
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d90e      	bls.n	8006e2a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e10:	68fa      	ldr	r2, [r7, #12]
 8006e12:	8b12      	ldrh	r2, [r2, #24]
 8006e14:	1a9a      	subs	r2, r3, r2
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	69db      	ldr	r3, [r3, #28]
 8006e1e:	68fa      	ldr	r2, [r7, #12]
 8006e20:	8b12      	ldrh	r2, [r2, #24]
 8006e22:	441a      	add	r2, r3
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	61da      	str	r2, [r3, #28]
 8006e28:	e002      	b.n	8006e30 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d004      	beq.n	8006e42 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006e40:	e00e      	b.n	8006e60 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2200      	movs	r2, #0
 8006e46:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f000 f868 	bl	8006f20 <USBH_CDC_TransmitCallback>
      break;
 8006e50:	e006      	b.n	8006e60 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006e52:	7afb      	ldrb	r3, [r7, #11]
 8006e54:	2b02      	cmp	r3, #2
 8006e56:	d103      	bne.n	8006e60 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006e60:	bf00      	nop
  }
}
 8006e62:	bf00      	nop
 8006e64:	3710      	adds	r7, #16
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}

08006e6a <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006e6a:	b580      	push	{r7, lr}
 8006e6c:	b086      	sub	sp, #24
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e78:	69db      	ldr	r3, [r3, #28]
 8006e7a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006e86:	2b03      	cmp	r3, #3
 8006e88:	d002      	beq.n	8006e90 <CDC_ProcessReception+0x26>
 8006e8a:	2b04      	cmp	r3, #4
 8006e8c:	d00e      	beq.n	8006eac <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006e8e:	e043      	b.n	8006f18 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	6a19      	ldr	r1, [r3, #32]
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	8b5a      	ldrh	r2, [r3, #26]
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	7b1b      	ldrb	r3, [r3, #12]
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f001 fb05 	bl	80084ac <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	2204      	movs	r2, #4
 8006ea6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006eaa:	e035      	b.n	8006f18 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	7b1b      	ldrb	r3, [r3, #12]
 8006eb0:	4619      	mov	r1, r3
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f001 fe04 	bl	8008ac0 <USBH_LL_GetURBState>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006ebc:	7cfb      	ldrb	r3, [r7, #19]
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d129      	bne.n	8006f16 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	7b1b      	ldrb	r3, [r3, #12]
 8006ec6:	4619      	mov	r1, r3
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f001 fd67 	bl	800899c <USBH_LL_GetLastXferSize>
 8006ece:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ed4:	68fa      	ldr	r2, [r7, #12]
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	d016      	beq.n	8006f08 <CDC_ProcessReception+0x9e>
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	8b5b      	ldrh	r3, [r3, #26]
 8006ede:	461a      	mov	r2, r3
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d910      	bls.n	8006f08 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	1ad2      	subs	r2, r2, r3
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	6a1a      	ldr	r2, [r3, #32]
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	441a      	add	r2, r3
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	2203      	movs	r2, #3
 8006f02:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006f06:	e006      	b.n	8006f16 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f000 f80f 	bl	8006f34 <USBH_CDC_ReceiveCallback>
      break;
 8006f16:	bf00      	nop
  }
}
 8006f18:	bf00      	nop
 8006f1a:	3718      	adds	r7, #24
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}

08006f20 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006f28:	bf00      	nop
 8006f2a:	370c      	adds	r7, #12
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr

08006f34 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b083      	sub	sp, #12
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006f3c:	bf00      	nop
 8006f3e:	370c      	adds	r7, #12
 8006f40:	46bd      	mov	sp, r7
 8006f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f46:	4770      	bx	lr

08006f48 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b083      	sub	sp, #12
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006f50:	bf00      	nop
 8006f52:	370c      	adds	r7, #12
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr

08006f5c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b084      	sub	sp, #16
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	60f8      	str	r0, [r7, #12]
 8006f64:	60b9      	str	r1, [r7, #8]
 8006f66:	4613      	mov	r3, r2
 8006f68:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d101      	bne.n	8006f74 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006f70:	2302      	movs	r3, #2
 8006f72:	e029      	b.n	8006fc8 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	79fa      	ldrb	r2, [r7, #7]
 8006f78:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2200      	movs	r2, #0
 8006f88:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8006f8c:	68f8      	ldr	r0, [r7, #12]
 8006f8e:	f000 f81f 	bl	8006fd0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2200      	movs	r2, #0
 8006f96:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2200      	movs	r2, #0
 8006fae:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d003      	beq.n	8006fc0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	68ba      	ldr	r2, [r7, #8]
 8006fbc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8006fc0:	68f8      	ldr	r0, [r7, #12]
 8006fc2:	f001 fc37 	bl	8008834 <USBH_LL_Init>

  return USBH_OK;
 8006fc6:	2300      	movs	r3, #0
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3710      	adds	r7, #16
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}

08006fd0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b085      	sub	sp, #20
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006fdc:	2300      	movs	r3, #0
 8006fde:	60fb      	str	r3, [r7, #12]
 8006fe0:	e009      	b.n	8006ff6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006fe2:	687a      	ldr	r2, [r7, #4]
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	33e0      	adds	r3, #224	; 0xe0
 8006fe8:	009b      	lsls	r3, r3, #2
 8006fea:	4413      	add	r3, r2
 8006fec:	2200      	movs	r2, #0
 8006fee:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	3301      	adds	r3, #1
 8006ff4:	60fb      	str	r3, [r7, #12]
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2b0e      	cmp	r3, #14
 8006ffa:	d9f2      	bls.n	8006fe2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	60fb      	str	r3, [r7, #12]
 8007000:	e009      	b.n	8007016 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007002:	687a      	ldr	r2, [r7, #4]
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	4413      	add	r3, r2
 8007008:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800700c:	2200      	movs	r2, #0
 800700e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	3301      	adds	r3, #1
 8007014:	60fb      	str	r3, [r7, #12]
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800701c:	d3f1      	bcc.n	8007002 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2200      	movs	r2, #0
 8007022:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2200      	movs	r2, #0
 8007028:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2201      	movs	r2, #1
 800702e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2200      	movs	r2, #0
 8007034:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2201      	movs	r2, #1
 800703c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2240      	movs	r2, #64	; 0x40
 8007042:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2200      	movs	r2, #0
 8007048:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2200      	movs	r2, #0
 800704e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2201      	movs	r2, #1
 8007056:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2200      	movs	r2, #0
 800705e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2200      	movs	r2, #0
 8007066:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800706a:	2300      	movs	r3, #0
}
 800706c:	4618      	mov	r0, r3
 800706e:	3714      	adds	r7, #20
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr

08007078 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007078:	b480      	push	{r7}
 800707a:	b085      	sub	sp, #20
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
 8007080:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007082:	2300      	movs	r3, #0
 8007084:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d016      	beq.n	80070ba <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007092:	2b00      	cmp	r3, #0
 8007094:	d10e      	bne.n	80070b4 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800709c:	1c59      	adds	r1, r3, #1
 800709e:	687a      	ldr	r2, [r7, #4]
 80070a0:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80070a4:	687a      	ldr	r2, [r7, #4]
 80070a6:	33de      	adds	r3, #222	; 0xde
 80070a8:	6839      	ldr	r1, [r7, #0]
 80070aa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80070ae:	2300      	movs	r3, #0
 80070b0:	73fb      	strb	r3, [r7, #15]
 80070b2:	e004      	b.n	80070be <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80070b4:	2302      	movs	r3, #2
 80070b6:	73fb      	strb	r3, [r7, #15]
 80070b8:	e001      	b.n	80070be <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80070ba:	2302      	movs	r3, #2
 80070bc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80070be:	7bfb      	ldrb	r3, [r7, #15]
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3714      	adds	r7, #20
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr

080070cc <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b085      	sub	sp, #20
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	460b      	mov	r3, r1
 80070d6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80070d8:	2300      	movs	r3, #0
 80070da:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80070e2:	78fa      	ldrb	r2, [r7, #3]
 80070e4:	429a      	cmp	r2, r3
 80070e6:	d204      	bcs.n	80070f2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	78fa      	ldrb	r2, [r7, #3]
 80070ec:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80070f0:	e001      	b.n	80070f6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80070f2:	2302      	movs	r3, #2
 80070f4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80070f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3714      	adds	r7, #20
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr

08007104 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007104:	b480      	push	{r7}
 8007106:	b087      	sub	sp, #28
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	4608      	mov	r0, r1
 800710e:	4611      	mov	r1, r2
 8007110:	461a      	mov	r2, r3
 8007112:	4603      	mov	r3, r0
 8007114:	70fb      	strb	r3, [r7, #3]
 8007116:	460b      	mov	r3, r1
 8007118:	70bb      	strb	r3, [r7, #2]
 800711a:	4613      	mov	r3, r2
 800711c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800711e:	2300      	movs	r3, #0
 8007120:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8007122:	2300      	movs	r3, #0
 8007124:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800712c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800712e:	e025      	b.n	800717c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007130:	7dfb      	ldrb	r3, [r7, #23]
 8007132:	221a      	movs	r2, #26
 8007134:	fb02 f303 	mul.w	r3, r2, r3
 8007138:	3308      	adds	r3, #8
 800713a:	68fa      	ldr	r2, [r7, #12]
 800713c:	4413      	add	r3, r2
 800713e:	3302      	adds	r3, #2
 8007140:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	795b      	ldrb	r3, [r3, #5]
 8007146:	78fa      	ldrb	r2, [r7, #3]
 8007148:	429a      	cmp	r2, r3
 800714a:	d002      	beq.n	8007152 <USBH_FindInterface+0x4e>
 800714c:	78fb      	ldrb	r3, [r7, #3]
 800714e:	2bff      	cmp	r3, #255	; 0xff
 8007150:	d111      	bne.n	8007176 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007156:	78ba      	ldrb	r2, [r7, #2]
 8007158:	429a      	cmp	r2, r3
 800715a:	d002      	beq.n	8007162 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800715c:	78bb      	ldrb	r3, [r7, #2]
 800715e:	2bff      	cmp	r3, #255	; 0xff
 8007160:	d109      	bne.n	8007176 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007166:	787a      	ldrb	r2, [r7, #1]
 8007168:	429a      	cmp	r2, r3
 800716a:	d002      	beq.n	8007172 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800716c:	787b      	ldrb	r3, [r7, #1]
 800716e:	2bff      	cmp	r3, #255	; 0xff
 8007170:	d101      	bne.n	8007176 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007172:	7dfb      	ldrb	r3, [r7, #23]
 8007174:	e006      	b.n	8007184 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007176:	7dfb      	ldrb	r3, [r7, #23]
 8007178:	3301      	adds	r3, #1
 800717a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800717c:	7dfb      	ldrb	r3, [r7, #23]
 800717e:	2b01      	cmp	r3, #1
 8007180:	d9d6      	bls.n	8007130 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007182:	23ff      	movs	r3, #255	; 0xff
}
 8007184:	4618      	mov	r0, r3
 8007186:	371c      	adds	r7, #28
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr

08007190 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b082      	sub	sp, #8
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f001 fb87 	bl	80088ac <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800719e:	2101      	movs	r1, #1
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f001 fca0 	bl	8008ae6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80071a6:	2300      	movs	r3, #0
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3708      	adds	r7, #8
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}

080071b0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b088      	sub	sp, #32
 80071b4:	af04      	add	r7, sp, #16
 80071b6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80071b8:	2302      	movs	r3, #2
 80071ba:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80071bc:	2300      	movs	r3, #0
 80071be:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80071c6:	b2db      	uxtb	r3, r3
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	d102      	bne.n	80071d2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2203      	movs	r2, #3
 80071d0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	781b      	ldrb	r3, [r3, #0]
 80071d6:	b2db      	uxtb	r3, r3
 80071d8:	2b0b      	cmp	r3, #11
 80071da:	f200 81b3 	bhi.w	8007544 <USBH_Process+0x394>
 80071de:	a201      	add	r2, pc, #4	; (adr r2, 80071e4 <USBH_Process+0x34>)
 80071e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071e4:	08007215 	.word	0x08007215
 80071e8:	08007247 	.word	0x08007247
 80071ec:	080072af 	.word	0x080072af
 80071f0:	080074df 	.word	0x080074df
 80071f4:	08007545 	.word	0x08007545
 80071f8:	08007353 	.word	0x08007353
 80071fc:	08007485 	.word	0x08007485
 8007200:	08007389 	.word	0x08007389
 8007204:	080073a9 	.word	0x080073a9
 8007208:	080073c9 	.word	0x080073c9
 800720c:	080073f7 	.word	0x080073f7
 8007210:	080074c7 	.word	0x080074c7
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800721a:	b2db      	uxtb	r3, r3
 800721c:	2b00      	cmp	r3, #0
 800721e:	f000 8193 	beq.w	8007548 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2201      	movs	r2, #1
 8007226:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007228:	20c8      	movs	r0, #200	; 0xc8
 800722a:	f001 fca3 	bl	8008b74 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f001 fb99 	bl	8008966 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2200      	movs	r2, #0
 8007238:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2200      	movs	r2, #0
 8007240:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007244:	e180      	b.n	8007548 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800724c:	2b01      	cmp	r3, #1
 800724e:	d107      	bne.n	8007260 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2200      	movs	r2, #0
 8007254:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2202      	movs	r2, #2
 800725c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800725e:	e182      	b.n	8007566 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007266:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800726a:	d914      	bls.n	8007296 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007272:	3301      	adds	r3, #1
 8007274:	b2da      	uxtb	r2, r3
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007282:	2b03      	cmp	r3, #3
 8007284:	d903      	bls.n	800728e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	220d      	movs	r2, #13
 800728a:	701a      	strb	r2, [r3, #0]
      break;
 800728c:	e16b      	b.n	8007566 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2200      	movs	r2, #0
 8007292:	701a      	strb	r2, [r3, #0]
      break;
 8007294:	e167      	b.n	8007566 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800729c:	f103 020a 	add.w	r2, r3, #10
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80072a6:	200a      	movs	r0, #10
 80072a8:	f001 fc64 	bl	8008b74 <USBH_Delay>
      break;
 80072ac:	e15b      	b.n	8007566 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d005      	beq.n	80072c4 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80072be:	2104      	movs	r1, #4
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80072c4:	2064      	movs	r0, #100	; 0x64
 80072c6:	f001 fc55 	bl	8008b74 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f001 fb24 	bl	8008918 <USBH_LL_GetSpeed>
 80072d0:	4603      	mov	r3, r0
 80072d2:	461a      	mov	r2, r3
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2205      	movs	r2, #5
 80072de:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80072e0:	2100      	movs	r1, #0
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f001 f92f 	bl	8008546 <USBH_AllocPipe>
 80072e8:	4603      	mov	r3, r0
 80072ea:	461a      	mov	r2, r3
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80072f0:	2180      	movs	r1, #128	; 0x80
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f001 f927 	bl	8008546 <USBH_AllocPipe>
 80072f8:	4603      	mov	r3, r0
 80072fa:	461a      	mov	r2, r3
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	7919      	ldrb	r1, [r3, #4]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007314:	b292      	uxth	r2, r2
 8007316:	9202      	str	r2, [sp, #8]
 8007318:	2200      	movs	r2, #0
 800731a:	9201      	str	r2, [sp, #4]
 800731c:	9300      	str	r3, [sp, #0]
 800731e:	4603      	mov	r3, r0
 8007320:	2280      	movs	r2, #128	; 0x80
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f001 f8e0 	bl	80084e8 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	7959      	ldrb	r1, [r3, #5]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007338:	687a      	ldr	r2, [r7, #4]
 800733a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800733c:	b292      	uxth	r2, r2
 800733e:	9202      	str	r2, [sp, #8]
 8007340:	2200      	movs	r2, #0
 8007342:	9201      	str	r2, [sp, #4]
 8007344:	9300      	str	r3, [sp, #0]
 8007346:	4603      	mov	r3, r0
 8007348:	2200      	movs	r2, #0
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f001 f8cc 	bl	80084e8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007350:	e109      	b.n	8007566 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f000 f90c 	bl	8007570 <USBH_HandleEnum>
 8007358:	4603      	mov	r3, r0
 800735a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800735c:	7bbb      	ldrb	r3, [r7, #14]
 800735e:	b2db      	uxtb	r3, r3
 8007360:	2b00      	cmp	r3, #0
 8007362:	f040 80f3 	bne.w	800754c <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2200      	movs	r2, #0
 800736a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007374:	2b01      	cmp	r3, #1
 8007376:	d103      	bne.n	8007380 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2208      	movs	r2, #8
 800737c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800737e:	e0e5      	b.n	800754c <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2207      	movs	r2, #7
 8007384:	701a      	strb	r2, [r3, #0]
      break;
 8007386:	e0e1      	b.n	800754c <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800738e:	2b00      	cmp	r3, #0
 8007390:	f000 80de 	beq.w	8007550 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800739a:	2101      	movs	r1, #1
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2208      	movs	r2, #8
 80073a4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80073a6:	e0d3      	b.n	8007550 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	4619      	mov	r1, r3
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f000 fc20 	bl	8007bf8 <USBH_SetCfg>
 80073b8:	4603      	mov	r3, r0
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	f040 80ca 	bne.w	8007554 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2209      	movs	r2, #9
 80073c4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80073c6:	e0c5      	b.n	8007554 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80073ce:	f003 0320 	and.w	r3, r3, #32
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d00b      	beq.n	80073ee <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 80073d6:	2101      	movs	r1, #1
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f000 fc30 	bl	8007c3e <USBH_SetFeature>
 80073de:	4603      	mov	r3, r0
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	f040 80b9 	bne.w	8007558 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	220a      	movs	r2, #10
 80073ea:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80073ec:	e0b4      	b.n	8007558 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	220a      	movs	r2, #10
 80073f2:	701a      	strb	r2, [r3, #0]
      break;
 80073f4:	e0b0      	b.n	8007558 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	f000 80ad 	beq.w	800755c <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2200      	movs	r2, #0
 8007406:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800740a:	2300      	movs	r3, #0
 800740c:	73fb      	strb	r3, [r7, #15]
 800740e:	e016      	b.n	800743e <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007410:	7bfa      	ldrb	r2, [r7, #15]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	32de      	adds	r2, #222	; 0xde
 8007416:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800741a:	791a      	ldrb	r2, [r3, #4]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007422:	429a      	cmp	r2, r3
 8007424:	d108      	bne.n	8007438 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007426:	7bfa      	ldrb	r2, [r7, #15]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	32de      	adds	r2, #222	; 0xde
 800742c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007436:	e005      	b.n	8007444 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007438:	7bfb      	ldrb	r3, [r7, #15]
 800743a:	3301      	adds	r3, #1
 800743c:	73fb      	strb	r3, [r7, #15]
 800743e:	7bfb      	ldrb	r3, [r7, #15]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d0e5      	beq.n	8007410 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800744a:	2b00      	cmp	r3, #0
 800744c:	d016      	beq.n	800747c <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007454:	689b      	ldr	r3, [r3, #8]
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	4798      	blx	r3
 800745a:	4603      	mov	r3, r0
 800745c:	2b00      	cmp	r3, #0
 800745e:	d109      	bne.n	8007474 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2206      	movs	r2, #6
 8007464:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800746c:	2103      	movs	r1, #3
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007472:	e073      	b.n	800755c <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	220d      	movs	r2, #13
 8007478:	701a      	strb	r2, [r3, #0]
      break;
 800747a:	e06f      	b.n	800755c <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	220d      	movs	r2, #13
 8007480:	701a      	strb	r2, [r3, #0]
      break;
 8007482:	e06b      	b.n	800755c <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800748a:	2b00      	cmp	r3, #0
 800748c:	d017      	beq.n	80074be <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007494:	691b      	ldr	r3, [r3, #16]
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	4798      	blx	r3
 800749a:	4603      	mov	r3, r0
 800749c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800749e:	7bbb      	ldrb	r3, [r7, #14]
 80074a0:	b2db      	uxtb	r3, r3
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d103      	bne.n	80074ae <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	220b      	movs	r2, #11
 80074aa:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80074ac:	e058      	b.n	8007560 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 80074ae:	7bbb      	ldrb	r3, [r7, #14]
 80074b0:	b2db      	uxtb	r3, r3
 80074b2:	2b02      	cmp	r3, #2
 80074b4:	d154      	bne.n	8007560 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	220d      	movs	r2, #13
 80074ba:	701a      	strb	r2, [r3, #0]
      break;
 80074bc:	e050      	b.n	8007560 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	220d      	movs	r2, #13
 80074c2:	701a      	strb	r2, [r3, #0]
      break;
 80074c4:	e04c      	b.n	8007560 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d049      	beq.n	8007564 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074d6:	695b      	ldr	r3, [r3, #20]
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	4798      	blx	r3
      }
      break;
 80074dc:	e042      	b.n	8007564 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2200      	movs	r2, #0
 80074e2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f7ff fd72 	bl	8006fd0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d009      	beq.n	800750a <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074fc:	68db      	ldr	r3, [r3, #12]
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2200      	movs	r2, #0
 8007506:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007510:	2b00      	cmp	r3, #0
 8007512:	d005      	beq.n	8007520 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800751a:	2105      	movs	r1, #5
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007526:	b2db      	uxtb	r3, r3
 8007528:	2b01      	cmp	r3, #1
 800752a:	d107      	bne.n	800753c <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2200      	movs	r2, #0
 8007530:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f7ff fe2b 	bl	8007190 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800753a:	e014      	b.n	8007566 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f001 f9b5 	bl	80088ac <USBH_LL_Start>
      break;
 8007542:	e010      	b.n	8007566 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8007544:	bf00      	nop
 8007546:	e00e      	b.n	8007566 <USBH_Process+0x3b6>
      break;
 8007548:	bf00      	nop
 800754a:	e00c      	b.n	8007566 <USBH_Process+0x3b6>
      break;
 800754c:	bf00      	nop
 800754e:	e00a      	b.n	8007566 <USBH_Process+0x3b6>
    break;
 8007550:	bf00      	nop
 8007552:	e008      	b.n	8007566 <USBH_Process+0x3b6>
      break;
 8007554:	bf00      	nop
 8007556:	e006      	b.n	8007566 <USBH_Process+0x3b6>
      break;
 8007558:	bf00      	nop
 800755a:	e004      	b.n	8007566 <USBH_Process+0x3b6>
      break;
 800755c:	bf00      	nop
 800755e:	e002      	b.n	8007566 <USBH_Process+0x3b6>
      break;
 8007560:	bf00      	nop
 8007562:	e000      	b.n	8007566 <USBH_Process+0x3b6>
      break;
 8007564:	bf00      	nop
  }
  return USBH_OK;
 8007566:	2300      	movs	r3, #0
}
 8007568:	4618      	mov	r0, r3
 800756a:	3710      	adds	r7, #16
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}

08007570 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b088      	sub	sp, #32
 8007574:	af04      	add	r7, sp, #16
 8007576:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007578:	2301      	movs	r3, #1
 800757a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800757c:	2301      	movs	r3, #1
 800757e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	785b      	ldrb	r3, [r3, #1]
 8007584:	2b07      	cmp	r3, #7
 8007586:	f200 81c1 	bhi.w	800790c <USBH_HandleEnum+0x39c>
 800758a:	a201      	add	r2, pc, #4	; (adr r2, 8007590 <USBH_HandleEnum+0x20>)
 800758c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007590:	080075b1 	.word	0x080075b1
 8007594:	0800766f 	.word	0x0800766f
 8007598:	080076d9 	.word	0x080076d9
 800759c:	08007767 	.word	0x08007767
 80075a0:	080077d1 	.word	0x080077d1
 80075a4:	08007841 	.word	0x08007841
 80075a8:	08007887 	.word	0x08007887
 80075ac:	080078cd 	.word	0x080078cd
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80075b0:	2108      	movs	r1, #8
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 fa50 	bl	8007a58 <USBH_Get_DevDesc>
 80075b8:	4603      	mov	r3, r0
 80075ba:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80075bc:	7bbb      	ldrb	r3, [r7, #14]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d130      	bne.n	8007624 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2201      	movs	r2, #1
 80075d0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	7919      	ldrb	r1, [r3, #4]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80075e2:	687a      	ldr	r2, [r7, #4]
 80075e4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80075e6:	b292      	uxth	r2, r2
 80075e8:	9202      	str	r2, [sp, #8]
 80075ea:	2200      	movs	r2, #0
 80075ec:	9201      	str	r2, [sp, #4]
 80075ee:	9300      	str	r3, [sp, #0]
 80075f0:	4603      	mov	r3, r0
 80075f2:	2280      	movs	r2, #128	; 0x80
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f000 ff77 	bl	80084e8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	7959      	ldrb	r1, [r3, #5]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800760a:	687a      	ldr	r2, [r7, #4]
 800760c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800760e:	b292      	uxth	r2, r2
 8007610:	9202      	str	r2, [sp, #8]
 8007612:	2200      	movs	r2, #0
 8007614:	9201      	str	r2, [sp, #4]
 8007616:	9300      	str	r3, [sp, #0]
 8007618:	4603      	mov	r3, r0
 800761a:	2200      	movs	r2, #0
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f000 ff63 	bl	80084e8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007622:	e175      	b.n	8007910 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007624:	7bbb      	ldrb	r3, [r7, #14]
 8007626:	2b03      	cmp	r3, #3
 8007628:	f040 8172 	bne.w	8007910 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007632:	3301      	adds	r3, #1
 8007634:	b2da      	uxtb	r2, r3
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007642:	2b03      	cmp	r3, #3
 8007644:	d903      	bls.n	800764e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	220d      	movs	r2, #13
 800764a:	701a      	strb	r2, [r3, #0]
      break;
 800764c:	e160      	b.n	8007910 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	795b      	ldrb	r3, [r3, #5]
 8007652:	4619      	mov	r1, r3
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f000 ff97 	bl	8008588 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	791b      	ldrb	r3, [r3, #4]
 800765e:	4619      	mov	r1, r3
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f000 ff91 	bl	8008588 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2200      	movs	r2, #0
 800766a:	701a      	strb	r2, [r3, #0]
      break;
 800766c:	e150      	b.n	8007910 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800766e:	2112      	movs	r1, #18
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f000 f9f1 	bl	8007a58 <USBH_Get_DevDesc>
 8007676:	4603      	mov	r3, r0
 8007678:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800767a:	7bbb      	ldrb	r3, [r7, #14]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d103      	bne.n	8007688 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2202      	movs	r2, #2
 8007684:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007686:	e145      	b.n	8007914 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007688:	7bbb      	ldrb	r3, [r7, #14]
 800768a:	2b03      	cmp	r3, #3
 800768c:	f040 8142 	bne.w	8007914 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007696:	3301      	adds	r3, #1
 8007698:	b2da      	uxtb	r2, r3
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80076a6:	2b03      	cmp	r3, #3
 80076a8:	d903      	bls.n	80076b2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	220d      	movs	r2, #13
 80076ae:	701a      	strb	r2, [r3, #0]
      break;
 80076b0:	e130      	b.n	8007914 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	795b      	ldrb	r3, [r3, #5]
 80076b6:	4619      	mov	r1, r3
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f000 ff65 	bl	8008588 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	791b      	ldrb	r3, [r3, #4]
 80076c2:	4619      	mov	r1, r3
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f000 ff5f 	bl	8008588 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2200      	movs	r2, #0
 80076ce:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2200      	movs	r2, #0
 80076d4:	701a      	strb	r2, [r3, #0]
      break;
 80076d6:	e11d      	b.n	8007914 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80076d8:	2101      	movs	r1, #1
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f000 fa68 	bl	8007bb0 <USBH_SetAddress>
 80076e0:	4603      	mov	r3, r0
 80076e2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80076e4:	7bbb      	ldrb	r3, [r7, #14]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d132      	bne.n	8007750 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80076ea:	2002      	movs	r0, #2
 80076ec:	f001 fa42 	bl	8008b74 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2201      	movs	r2, #1
 80076f4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2203      	movs	r2, #3
 80076fc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	7919      	ldrb	r1, [r3, #4]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800770e:	687a      	ldr	r2, [r7, #4]
 8007710:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007712:	b292      	uxth	r2, r2
 8007714:	9202      	str	r2, [sp, #8]
 8007716:	2200      	movs	r2, #0
 8007718:	9201      	str	r2, [sp, #4]
 800771a:	9300      	str	r3, [sp, #0]
 800771c:	4603      	mov	r3, r0
 800771e:	2280      	movs	r2, #128	; 0x80
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f000 fee1 	bl	80084e8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	7959      	ldrb	r1, [r3, #5]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007736:	687a      	ldr	r2, [r7, #4]
 8007738:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800773a:	b292      	uxth	r2, r2
 800773c:	9202      	str	r2, [sp, #8]
 800773e:	2200      	movs	r2, #0
 8007740:	9201      	str	r2, [sp, #4]
 8007742:	9300      	str	r3, [sp, #0]
 8007744:	4603      	mov	r3, r0
 8007746:	2200      	movs	r2, #0
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f000 fecd 	bl	80084e8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800774e:	e0e3      	b.n	8007918 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007750:	7bbb      	ldrb	r3, [r7, #14]
 8007752:	2b03      	cmp	r3, #3
 8007754:	f040 80e0 	bne.w	8007918 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	220d      	movs	r2, #13
 800775c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2200      	movs	r2, #0
 8007762:	705a      	strb	r2, [r3, #1]
      break;
 8007764:	e0d8      	b.n	8007918 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007766:	2109      	movs	r1, #9
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f000 f99d 	bl	8007aa8 <USBH_Get_CfgDesc>
 800776e:	4603      	mov	r3, r0
 8007770:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007772:	7bbb      	ldrb	r3, [r7, #14]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d103      	bne.n	8007780 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2204      	movs	r2, #4
 800777c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800777e:	e0cd      	b.n	800791c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007780:	7bbb      	ldrb	r3, [r7, #14]
 8007782:	2b03      	cmp	r3, #3
 8007784:	f040 80ca 	bne.w	800791c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800778e:	3301      	adds	r3, #1
 8007790:	b2da      	uxtb	r2, r3
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800779e:	2b03      	cmp	r3, #3
 80077a0:	d903      	bls.n	80077aa <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	220d      	movs	r2, #13
 80077a6:	701a      	strb	r2, [r3, #0]
      break;
 80077a8:	e0b8      	b.n	800791c <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	795b      	ldrb	r3, [r3, #5]
 80077ae:	4619      	mov	r1, r3
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f000 fee9 	bl	8008588 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	791b      	ldrb	r3, [r3, #4]
 80077ba:	4619      	mov	r1, r3
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f000 fee3 	bl	8008588 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2200      	movs	r2, #0
 80077c6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2200      	movs	r2, #0
 80077cc:	701a      	strb	r2, [r3, #0]
      break;
 80077ce:	e0a5      	b.n	800791c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80077d6:	4619      	mov	r1, r3
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f000 f965 	bl	8007aa8 <USBH_Get_CfgDesc>
 80077de:	4603      	mov	r3, r0
 80077e0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80077e2:	7bbb      	ldrb	r3, [r7, #14]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d103      	bne.n	80077f0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2205      	movs	r2, #5
 80077ec:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80077ee:	e097      	b.n	8007920 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80077f0:	7bbb      	ldrb	r3, [r7, #14]
 80077f2:	2b03      	cmp	r3, #3
 80077f4:	f040 8094 	bne.w	8007920 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80077fe:	3301      	adds	r3, #1
 8007800:	b2da      	uxtb	r2, r3
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800780e:	2b03      	cmp	r3, #3
 8007810:	d903      	bls.n	800781a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	220d      	movs	r2, #13
 8007816:	701a      	strb	r2, [r3, #0]
      break;
 8007818:	e082      	b.n	8007920 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	795b      	ldrb	r3, [r3, #5]
 800781e:	4619      	mov	r1, r3
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f000 feb1 	bl	8008588 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	791b      	ldrb	r3, [r3, #4]
 800782a:	4619      	mov	r1, r3
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f000 feab 	bl	8008588 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2200      	movs	r2, #0
 8007836:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2200      	movs	r2, #0
 800783c:	701a      	strb	r2, [r3, #0]
      break;
 800783e:	e06f      	b.n	8007920 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007846:	2b00      	cmp	r3, #0
 8007848:	d019      	beq.n	800787e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007856:	23ff      	movs	r3, #255	; 0xff
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f000 f949 	bl	8007af0 <USBH_Get_StringDesc>
 800785e:	4603      	mov	r3, r0
 8007860:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007862:	7bbb      	ldrb	r3, [r7, #14]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d103      	bne.n	8007870 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2206      	movs	r2, #6
 800786c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800786e:	e059      	b.n	8007924 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007870:	7bbb      	ldrb	r3, [r7, #14]
 8007872:	2b03      	cmp	r3, #3
 8007874:	d156      	bne.n	8007924 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2206      	movs	r2, #6
 800787a:	705a      	strb	r2, [r3, #1]
      break;
 800787c:	e052      	b.n	8007924 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2206      	movs	r2, #6
 8007882:	705a      	strb	r2, [r3, #1]
      break;
 8007884:	e04e      	b.n	8007924 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800788c:	2b00      	cmp	r3, #0
 800788e:	d019      	beq.n	80078c4 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800789c:	23ff      	movs	r3, #255	; 0xff
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f000 f926 	bl	8007af0 <USBH_Get_StringDesc>
 80078a4:	4603      	mov	r3, r0
 80078a6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80078a8:	7bbb      	ldrb	r3, [r7, #14]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d103      	bne.n	80078b6 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2207      	movs	r2, #7
 80078b2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80078b4:	e038      	b.n	8007928 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80078b6:	7bbb      	ldrb	r3, [r7, #14]
 80078b8:	2b03      	cmp	r3, #3
 80078ba:	d135      	bne.n	8007928 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2207      	movs	r2, #7
 80078c0:	705a      	strb	r2, [r3, #1]
      break;
 80078c2:	e031      	b.n	8007928 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2207      	movs	r2, #7
 80078c8:	705a      	strb	r2, [r3, #1]
      break;
 80078ca:	e02d      	b.n	8007928 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d017      	beq.n	8007906 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80078e2:	23ff      	movs	r3, #255	; 0xff
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f000 f903 	bl	8007af0 <USBH_Get_StringDesc>
 80078ea:	4603      	mov	r3, r0
 80078ec:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80078ee:	7bbb      	ldrb	r3, [r7, #14]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d102      	bne.n	80078fa <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80078f4:	2300      	movs	r3, #0
 80078f6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80078f8:	e018      	b.n	800792c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80078fa:	7bbb      	ldrb	r3, [r7, #14]
 80078fc:	2b03      	cmp	r3, #3
 80078fe:	d115      	bne.n	800792c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007900:	2300      	movs	r3, #0
 8007902:	73fb      	strb	r3, [r7, #15]
      break;
 8007904:	e012      	b.n	800792c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007906:	2300      	movs	r3, #0
 8007908:	73fb      	strb	r3, [r7, #15]
      break;
 800790a:	e00f      	b.n	800792c <USBH_HandleEnum+0x3bc>

    default:
      break;
 800790c:	bf00      	nop
 800790e:	e00e      	b.n	800792e <USBH_HandleEnum+0x3be>
      break;
 8007910:	bf00      	nop
 8007912:	e00c      	b.n	800792e <USBH_HandleEnum+0x3be>
      break;
 8007914:	bf00      	nop
 8007916:	e00a      	b.n	800792e <USBH_HandleEnum+0x3be>
      break;
 8007918:	bf00      	nop
 800791a:	e008      	b.n	800792e <USBH_HandleEnum+0x3be>
      break;
 800791c:	bf00      	nop
 800791e:	e006      	b.n	800792e <USBH_HandleEnum+0x3be>
      break;
 8007920:	bf00      	nop
 8007922:	e004      	b.n	800792e <USBH_HandleEnum+0x3be>
      break;
 8007924:	bf00      	nop
 8007926:	e002      	b.n	800792e <USBH_HandleEnum+0x3be>
      break;
 8007928:	bf00      	nop
 800792a:	e000      	b.n	800792e <USBH_HandleEnum+0x3be>
      break;
 800792c:	bf00      	nop
  }
  return Status;
 800792e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007930:	4618      	mov	r0, r3
 8007932:	3710      	adds	r7, #16
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}

08007938 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007938:	b480      	push	{r7}
 800793a:	b083      	sub	sp, #12
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	683a      	ldr	r2, [r7, #0]
 8007946:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800794a:	bf00      	nop
 800794c:	370c      	adds	r7, #12
 800794e:	46bd      	mov	sp, r7
 8007950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007954:	4770      	bx	lr

08007956 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007956:	b580      	push	{r7, lr}
 8007958:	b082      	sub	sp, #8
 800795a:	af00      	add	r7, sp, #0
 800795c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007964:	1c5a      	adds	r2, r3, #1
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f000 f804 	bl	800797a <USBH_HandleSof>
}
 8007972:	bf00      	nop
 8007974:	3708      	adds	r7, #8
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}

0800797a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800797a:	b580      	push	{r7, lr}
 800797c:	b082      	sub	sp, #8
 800797e:	af00      	add	r7, sp, #0
 8007980:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	781b      	ldrb	r3, [r3, #0]
 8007986:	b2db      	uxtb	r3, r3
 8007988:	2b0b      	cmp	r3, #11
 800798a:	d10a      	bne.n	80079a2 <USBH_HandleSof+0x28>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007992:	2b00      	cmp	r3, #0
 8007994:	d005      	beq.n	80079a2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800799c:	699b      	ldr	r3, [r3, #24]
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	4798      	blx	r3
  }
}
 80079a2:	bf00      	nop
 80079a4:	3708      	adds	r7, #8
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}

080079aa <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80079aa:	b480      	push	{r7}
 80079ac:	b083      	sub	sp, #12
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2201      	movs	r2, #1
 80079b6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 80079ba:	bf00      	nop
}
 80079bc:	370c      	adds	r7, #12
 80079be:	46bd      	mov	sp, r7
 80079c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c4:	4770      	bx	lr

080079c6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80079c6:	b480      	push	{r7}
 80079c8:	b083      	sub	sp, #12
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2200      	movs	r2, #0
 80079d2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80079d6:	bf00      	nop
}
 80079d8:	370c      	adds	r7, #12
 80079da:	46bd      	mov	sp, r7
 80079dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e0:	4770      	bx	lr

080079e2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80079e2:	b480      	push	{r7}
 80079e4:	b083      	sub	sp, #12
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2201      	movs	r2, #1
 80079ee:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2200      	movs	r2, #0
 80079f6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2200      	movs	r2, #0
 80079fe:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007a02:	2300      	movs	r3, #0
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	370c      	adds	r7, #12
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0e:	4770      	bx	lr

08007a10 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b082      	sub	sp, #8
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2200      	movs	r2, #0
 8007a24:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f000 ff56 	bl	80088e2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	791b      	ldrb	r3, [r3, #4]
 8007a3a:	4619      	mov	r1, r3
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f000 fda3 	bl	8008588 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	795b      	ldrb	r3, [r3, #5]
 8007a46:	4619      	mov	r1, r3
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f000 fd9d 	bl	8008588 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007a4e:	2300      	movs	r3, #0
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	3708      	adds	r7, #8
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}

08007a58 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b086      	sub	sp, #24
 8007a5c:	af02      	add	r7, sp, #8
 8007a5e:	6078      	str	r0, [r7, #4]
 8007a60:	460b      	mov	r3, r1
 8007a62:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007a6a:	78fb      	ldrb	r3, [r7, #3]
 8007a6c:	b29b      	uxth	r3, r3
 8007a6e:	9300      	str	r3, [sp, #0]
 8007a70:	4613      	mov	r3, r2
 8007a72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007a76:	2100      	movs	r1, #0
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f000 f864 	bl	8007b46 <USBH_GetDescriptor>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	73fb      	strb	r3, [r7, #15]
 8007a82:	7bfb      	ldrb	r3, [r7, #15]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d10a      	bne.n	8007a9e <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007a94:	78fa      	ldrb	r2, [r7, #3]
 8007a96:	b292      	uxth	r2, r2
 8007a98:	4619      	mov	r1, r3
 8007a9a:	f000 f918 	bl	8007cce <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3710      	adds	r7, #16
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}

08007aa8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b086      	sub	sp, #24
 8007aac:	af02      	add	r7, sp, #8
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	460b      	mov	r3, r1
 8007ab2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	331c      	adds	r3, #28
 8007ab8:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007aba:	887b      	ldrh	r3, [r7, #2]
 8007abc:	9300      	str	r3, [sp, #0]
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ac4:	2100      	movs	r1, #0
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f000 f83d 	bl	8007b46 <USBH_GetDescriptor>
 8007acc:	4603      	mov	r3, r0
 8007ace:	72fb      	strb	r3, [r7, #11]
 8007ad0:	7afb      	ldrb	r3, [r7, #11]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d107      	bne.n	8007ae6 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007adc:	887a      	ldrh	r2, [r7, #2]
 8007ade:	68f9      	ldr	r1, [r7, #12]
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	f000 f964 	bl	8007dae <USBH_ParseCfgDesc>
  }

  return status;
 8007ae6:	7afb      	ldrb	r3, [r7, #11]
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3710      	adds	r7, #16
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}

08007af0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b088      	sub	sp, #32
 8007af4:	af02      	add	r7, sp, #8
 8007af6:	60f8      	str	r0, [r7, #12]
 8007af8:	607a      	str	r2, [r7, #4]
 8007afa:	461a      	mov	r2, r3
 8007afc:	460b      	mov	r3, r1
 8007afe:	72fb      	strb	r3, [r7, #11]
 8007b00:	4613      	mov	r3, r2
 8007b02:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8007b04:	7afb      	ldrb	r3, [r7, #11]
 8007b06:	b29b      	uxth	r3, r3
 8007b08:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007b0c:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007b14:	893b      	ldrh	r3, [r7, #8]
 8007b16:	9300      	str	r3, [sp, #0]
 8007b18:	460b      	mov	r3, r1
 8007b1a:	2100      	movs	r1, #0
 8007b1c:	68f8      	ldr	r0, [r7, #12]
 8007b1e:	f000 f812 	bl	8007b46 <USBH_GetDescriptor>
 8007b22:	4603      	mov	r3, r0
 8007b24:	75fb      	strb	r3, [r7, #23]
 8007b26:	7dfb      	ldrb	r3, [r7, #23]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d107      	bne.n	8007b3c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007b32:	893a      	ldrh	r2, [r7, #8]
 8007b34:	6879      	ldr	r1, [r7, #4]
 8007b36:	4618      	mov	r0, r3
 8007b38:	f000 fa37 	bl	8007faa <USBH_ParseStringDesc>
  }

  return status;
 8007b3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	3718      	adds	r7, #24
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}

08007b46 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007b46:	b580      	push	{r7, lr}
 8007b48:	b084      	sub	sp, #16
 8007b4a:	af00      	add	r7, sp, #0
 8007b4c:	60f8      	str	r0, [r7, #12]
 8007b4e:	607b      	str	r3, [r7, #4]
 8007b50:	460b      	mov	r3, r1
 8007b52:	72fb      	strb	r3, [r7, #11]
 8007b54:	4613      	mov	r3, r2
 8007b56:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	789b      	ldrb	r3, [r3, #2]
 8007b5c:	2b01      	cmp	r3, #1
 8007b5e:	d11c      	bne.n	8007b9a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007b60:	7afb      	ldrb	r3, [r7, #11]
 8007b62:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007b66:	b2da      	uxtb	r2, r3
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2206      	movs	r2, #6
 8007b70:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	893a      	ldrh	r2, [r7, #8]
 8007b76:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007b78:	893b      	ldrh	r3, [r7, #8]
 8007b7a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007b7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b82:	d104      	bne.n	8007b8e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f240 4209 	movw	r2, #1033	; 0x409
 8007b8a:	829a      	strh	r2, [r3, #20]
 8007b8c:	e002      	b.n	8007b94 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2200      	movs	r2, #0
 8007b92:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	8b3a      	ldrh	r2, [r7, #24]
 8007b98:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007b9a:	8b3b      	ldrh	r3, [r7, #24]
 8007b9c:	461a      	mov	r2, r3
 8007b9e:	6879      	ldr	r1, [r7, #4]
 8007ba0:	68f8      	ldr	r0, [r7, #12]
 8007ba2:	f000 fa50 	bl	8008046 <USBH_CtlReq>
 8007ba6:	4603      	mov	r3, r0
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	3710      	adds	r7, #16
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}

08007bb0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b082      	sub	sp, #8
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
 8007bb8:	460b      	mov	r3, r1
 8007bba:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	789b      	ldrb	r3, [r3, #2]
 8007bc0:	2b01      	cmp	r3, #1
 8007bc2:	d10f      	bne.n	8007be4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2205      	movs	r2, #5
 8007bce:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007bd0:	78fb      	ldrb	r3, [r7, #3]
 8007bd2:	b29a      	uxth	r2, r3
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2200      	movs	r2, #0
 8007be2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007be4:	2200      	movs	r2, #0
 8007be6:	2100      	movs	r1, #0
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f000 fa2c 	bl	8008046 <USBH_CtlReq>
 8007bee:	4603      	mov	r3, r0
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3708      	adds	r7, #8
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}

08007bf8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b082      	sub	sp, #8
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
 8007c00:	460b      	mov	r3, r1
 8007c02:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	789b      	ldrb	r3, [r3, #2]
 8007c08:	2b01      	cmp	r3, #1
 8007c0a:	d10e      	bne.n	8007c2a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2209      	movs	r2, #9
 8007c16:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	887a      	ldrh	r2, [r7, #2]
 8007c1c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2200      	movs	r2, #0
 8007c22:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2200      	movs	r2, #0
 8007c28:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	2100      	movs	r1, #0
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f000 fa09 	bl	8008046 <USBH_CtlReq>
 8007c34:	4603      	mov	r3, r0
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3708      	adds	r7, #8
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}

08007c3e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007c3e:	b580      	push	{r7, lr}
 8007c40:	b082      	sub	sp, #8
 8007c42:	af00      	add	r7, sp, #0
 8007c44:	6078      	str	r0, [r7, #4]
 8007c46:	460b      	mov	r3, r1
 8007c48:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	789b      	ldrb	r3, [r3, #2]
 8007c4e:	2b01      	cmp	r3, #1
 8007c50:	d10f      	bne.n	8007c72 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2200      	movs	r2, #0
 8007c56:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2203      	movs	r2, #3
 8007c5c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007c5e:	78fb      	ldrb	r3, [r7, #3]
 8007c60:	b29a      	uxth	r2, r3
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007c72:	2200      	movs	r2, #0
 8007c74:	2100      	movs	r1, #0
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f000 f9e5 	bl	8008046 <USBH_CtlReq>
 8007c7c:	4603      	mov	r3, r0
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3708      	adds	r7, #8
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}

08007c86 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007c86:	b580      	push	{r7, lr}
 8007c88:	b082      	sub	sp, #8
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	6078      	str	r0, [r7, #4]
 8007c8e:	460b      	mov	r3, r1
 8007c90:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	789b      	ldrb	r3, [r3, #2]
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	d10f      	bne.n	8007cba <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2202      	movs	r2, #2
 8007c9e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007cac:	78fb      	ldrb	r3, [r7, #3]
 8007cae:	b29a      	uxth	r2, r3
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8007cba:	2200      	movs	r2, #0
 8007cbc:	2100      	movs	r1, #0
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f000 f9c1 	bl	8008046 <USBH_CtlReq>
 8007cc4:	4603      	mov	r3, r0
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3708      	adds	r7, #8
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}

08007cce <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007cce:	b480      	push	{r7}
 8007cd0:	b085      	sub	sp, #20
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	60f8      	str	r0, [r7, #12]
 8007cd6:	60b9      	str	r1, [r7, #8]
 8007cd8:	4613      	mov	r3, r2
 8007cda:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	781a      	ldrb	r2, [r3, #0]
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	785a      	ldrb	r2, [r3, #1]
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	3302      	adds	r3, #2
 8007cf0:	781b      	ldrb	r3, [r3, #0]
 8007cf2:	b29a      	uxth	r2, r3
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	3303      	adds	r3, #3
 8007cf8:	781b      	ldrb	r3, [r3, #0]
 8007cfa:	b29b      	uxth	r3, r3
 8007cfc:	021b      	lsls	r3, r3, #8
 8007cfe:	b29b      	uxth	r3, r3
 8007d00:	4313      	orrs	r3, r2
 8007d02:	b29a      	uxth	r2, r3
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	791a      	ldrb	r2, [r3, #4]
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	795a      	ldrb	r2, [r3, #5]
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	799a      	ldrb	r2, [r3, #6]
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	79da      	ldrb	r2, [r3, #7]
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8007d28:	88fb      	ldrh	r3, [r7, #6]
 8007d2a:	2b08      	cmp	r3, #8
 8007d2c:	d939      	bls.n	8007da2 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	3308      	adds	r3, #8
 8007d32:	781b      	ldrb	r3, [r3, #0]
 8007d34:	b29a      	uxth	r2, r3
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	3309      	adds	r3, #9
 8007d3a:	781b      	ldrb	r3, [r3, #0]
 8007d3c:	b29b      	uxth	r3, r3
 8007d3e:	021b      	lsls	r3, r3, #8
 8007d40:	b29b      	uxth	r3, r3
 8007d42:	4313      	orrs	r3, r2
 8007d44:	b29a      	uxth	r2, r3
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	330a      	adds	r3, #10
 8007d4e:	781b      	ldrb	r3, [r3, #0]
 8007d50:	b29a      	uxth	r2, r3
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	330b      	adds	r3, #11
 8007d56:	781b      	ldrb	r3, [r3, #0]
 8007d58:	b29b      	uxth	r3, r3
 8007d5a:	021b      	lsls	r3, r3, #8
 8007d5c:	b29b      	uxth	r3, r3
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	b29a      	uxth	r2, r3
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	330c      	adds	r3, #12
 8007d6a:	781b      	ldrb	r3, [r3, #0]
 8007d6c:	b29a      	uxth	r2, r3
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	330d      	adds	r3, #13
 8007d72:	781b      	ldrb	r3, [r3, #0]
 8007d74:	b29b      	uxth	r3, r3
 8007d76:	021b      	lsls	r3, r3, #8
 8007d78:	b29b      	uxth	r3, r3
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	b29a      	uxth	r2, r3
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	7b9a      	ldrb	r2, [r3, #14]
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	7bda      	ldrb	r2, [r3, #15]
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	7c1a      	ldrb	r2, [r3, #16]
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	7c5a      	ldrb	r2, [r3, #17]
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	745a      	strb	r2, [r3, #17]
  }
}
 8007da2:	bf00      	nop
 8007da4:	3714      	adds	r7, #20
 8007da6:	46bd      	mov	sp, r7
 8007da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dac:	4770      	bx	lr

08007dae <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8007dae:	b580      	push	{r7, lr}
 8007db0:	b08a      	sub	sp, #40	; 0x28
 8007db2:	af00      	add	r7, sp, #0
 8007db4:	60f8      	str	r0, [r7, #12]
 8007db6:	60b9      	str	r1, [r7, #8]
 8007db8:	4613      	mov	r3, r2
 8007dba:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	781a      	ldrb	r2, [r3, #0]
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	785a      	ldrb	r2, [r3, #1]
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	3302      	adds	r3, #2
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	b29a      	uxth	r2, r3
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	3303      	adds	r3, #3
 8007dec:	781b      	ldrb	r3, [r3, #0]
 8007dee:	b29b      	uxth	r3, r3
 8007df0:	021b      	lsls	r3, r3, #8
 8007df2:	b29b      	uxth	r3, r3
 8007df4:	4313      	orrs	r3, r2
 8007df6:	b29a      	uxth	r2, r3
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	791a      	ldrb	r2, [r3, #4]
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	795a      	ldrb	r2, [r3, #5]
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	799a      	ldrb	r2, [r3, #6]
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	79da      	ldrb	r2, [r3, #7]
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	7a1a      	ldrb	r2, [r3, #8]
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007e24:	88fb      	ldrh	r3, [r7, #6]
 8007e26:	2b09      	cmp	r3, #9
 8007e28:	d95f      	bls.n	8007eea <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8007e2a:	2309      	movs	r3, #9
 8007e2c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007e32:	e051      	b.n	8007ed8 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007e34:	f107 0316 	add.w	r3, r7, #22
 8007e38:	4619      	mov	r1, r3
 8007e3a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007e3c:	f000 f8e8 	bl	8008010 <USBH_GetNextDesc>
 8007e40:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8007e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e44:	785b      	ldrb	r3, [r3, #1]
 8007e46:	2b04      	cmp	r3, #4
 8007e48:	d146      	bne.n	8007ed8 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8007e4a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007e4e:	221a      	movs	r2, #26
 8007e50:	fb02 f303 	mul.w	r3, r2, r3
 8007e54:	3308      	adds	r3, #8
 8007e56:	68fa      	ldr	r2, [r7, #12]
 8007e58:	4413      	add	r3, r2
 8007e5a:	3302      	adds	r3, #2
 8007e5c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007e5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007e60:	69f8      	ldr	r0, [r7, #28]
 8007e62:	f000 f846 	bl	8007ef2 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007e66:	2300      	movs	r3, #0
 8007e68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007e70:	e022      	b.n	8007eb8 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007e72:	f107 0316 	add.w	r3, r7, #22
 8007e76:	4619      	mov	r1, r3
 8007e78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007e7a:	f000 f8c9 	bl	8008010 <USBH_GetNextDesc>
 8007e7e:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8007e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e82:	785b      	ldrb	r3, [r3, #1]
 8007e84:	2b05      	cmp	r3, #5
 8007e86:	d117      	bne.n	8007eb8 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007e88:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007e8c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007e90:	3201      	adds	r2, #1
 8007e92:	00d2      	lsls	r2, r2, #3
 8007e94:	211a      	movs	r1, #26
 8007e96:	fb01 f303 	mul.w	r3, r1, r3
 8007e9a:	4413      	add	r3, r2
 8007e9c:	3308      	adds	r3, #8
 8007e9e:	68fa      	ldr	r2, [r7, #12]
 8007ea0:	4413      	add	r3, r2
 8007ea2:	3304      	adds	r3, #4
 8007ea4:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8007ea6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007ea8:	69b8      	ldr	r0, [r7, #24]
 8007eaa:	f000 f851 	bl	8007f50 <USBH_ParseEPDesc>
            ep_ix++;
 8007eae:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007eb2:	3301      	adds	r3, #1
 8007eb4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007eb8:	69fb      	ldr	r3, [r7, #28]
 8007eba:	791b      	ldrb	r3, [r3, #4]
 8007ebc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	d204      	bcs.n	8007ece <USBH_ParseCfgDesc+0x120>
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	885a      	ldrh	r2, [r3, #2]
 8007ec8:	8afb      	ldrh	r3, [r7, #22]
 8007eca:	429a      	cmp	r2, r3
 8007ecc:	d8d1      	bhi.n	8007e72 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8007ece:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007ed2:	3301      	adds	r3, #1
 8007ed4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007ed8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007edc:	2b01      	cmp	r3, #1
 8007ede:	d804      	bhi.n	8007eea <USBH_ParseCfgDesc+0x13c>
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	885a      	ldrh	r2, [r3, #2]
 8007ee4:	8afb      	ldrh	r3, [r7, #22]
 8007ee6:	429a      	cmp	r2, r3
 8007ee8:	d8a4      	bhi.n	8007e34 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8007eea:	bf00      	nop
 8007eec:	3728      	adds	r7, #40	; 0x28
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}

08007ef2 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007ef2:	b480      	push	{r7}
 8007ef4:	b083      	sub	sp, #12
 8007ef6:	af00      	add	r7, sp, #0
 8007ef8:	6078      	str	r0, [r7, #4]
 8007efa:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	781a      	ldrb	r2, [r3, #0]
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	785a      	ldrb	r2, [r3, #1]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	789a      	ldrb	r2, [r3, #2]
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	78da      	ldrb	r2, [r3, #3]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	791a      	ldrb	r2, [r3, #4]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	795a      	ldrb	r2, [r3, #5]
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	799a      	ldrb	r2, [r3, #6]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	79da      	ldrb	r2, [r3, #7]
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	7a1a      	ldrb	r2, [r3, #8]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	721a      	strb	r2, [r3, #8]
}
 8007f44:	bf00      	nop
 8007f46:	370c      	adds	r7, #12
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4e:	4770      	bx	lr

08007f50 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b083      	sub	sp, #12
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	781a      	ldrb	r2, [r3, #0]
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	785a      	ldrb	r2, [r3, #1]
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	789a      	ldrb	r2, [r3, #2]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	78da      	ldrb	r2, [r3, #3]
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	3304      	adds	r3, #4
 8007f7e:	781b      	ldrb	r3, [r3, #0]
 8007f80:	b29a      	uxth	r2, r3
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	3305      	adds	r3, #5
 8007f86:	781b      	ldrb	r3, [r3, #0]
 8007f88:	b29b      	uxth	r3, r3
 8007f8a:	021b      	lsls	r3, r3, #8
 8007f8c:	b29b      	uxth	r3, r3
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	b29a      	uxth	r2, r3
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	799a      	ldrb	r2, [r3, #6]
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	719a      	strb	r2, [r3, #6]
}
 8007f9e:	bf00      	nop
 8007fa0:	370c      	adds	r7, #12
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa8:	4770      	bx	lr

08007faa <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007faa:	b480      	push	{r7}
 8007fac:	b087      	sub	sp, #28
 8007fae:	af00      	add	r7, sp, #0
 8007fb0:	60f8      	str	r0, [r7, #12]
 8007fb2:	60b9      	str	r1, [r7, #8]
 8007fb4:	4613      	mov	r3, r2
 8007fb6:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	3301      	adds	r3, #1
 8007fbc:	781b      	ldrb	r3, [r3, #0]
 8007fbe:	2b03      	cmp	r3, #3
 8007fc0:	d120      	bne.n	8008004 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	781b      	ldrb	r3, [r3, #0]
 8007fc6:	1e9a      	subs	r2, r3, #2
 8007fc8:	88fb      	ldrh	r3, [r7, #6]
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	bf28      	it	cs
 8007fce:	4613      	movcs	r3, r2
 8007fd0:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	3302      	adds	r3, #2
 8007fd6:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007fd8:	2300      	movs	r3, #0
 8007fda:	82fb      	strh	r3, [r7, #22]
 8007fdc:	e00b      	b.n	8007ff6 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007fde:	8afb      	ldrh	r3, [r7, #22]
 8007fe0:	68fa      	ldr	r2, [r7, #12]
 8007fe2:	4413      	add	r3, r2
 8007fe4:	781a      	ldrb	r2, [r3, #0]
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	3301      	adds	r3, #1
 8007fee:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007ff0:	8afb      	ldrh	r3, [r7, #22]
 8007ff2:	3302      	adds	r3, #2
 8007ff4:	82fb      	strh	r3, [r7, #22]
 8007ff6:	8afa      	ldrh	r2, [r7, #22]
 8007ff8:	8abb      	ldrh	r3, [r7, #20]
 8007ffa:	429a      	cmp	r2, r3
 8007ffc:	d3ef      	bcc.n	8007fde <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	2200      	movs	r2, #0
 8008002:	701a      	strb	r2, [r3, #0]
  }
}
 8008004:	bf00      	nop
 8008006:	371c      	adds	r7, #28
 8008008:	46bd      	mov	sp, r7
 800800a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800e:	4770      	bx	lr

08008010 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008010:	b480      	push	{r7}
 8008012:	b085      	sub	sp, #20
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
 8008018:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	881a      	ldrh	r2, [r3, #0]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	781b      	ldrb	r3, [r3, #0]
 8008022:	b29b      	uxth	r3, r3
 8008024:	4413      	add	r3, r2
 8008026:	b29a      	uxth	r2, r3
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	781b      	ldrb	r3, [r3, #0]
 8008030:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	4413      	add	r3, r2
 8008036:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008038:	68fb      	ldr	r3, [r7, #12]
}
 800803a:	4618      	mov	r0, r3
 800803c:	3714      	adds	r7, #20
 800803e:	46bd      	mov	sp, r7
 8008040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008044:	4770      	bx	lr

08008046 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008046:	b580      	push	{r7, lr}
 8008048:	b086      	sub	sp, #24
 800804a:	af00      	add	r7, sp, #0
 800804c:	60f8      	str	r0, [r7, #12]
 800804e:	60b9      	str	r1, [r7, #8]
 8008050:	4613      	mov	r3, r2
 8008052:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008054:	2301      	movs	r3, #1
 8008056:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	789b      	ldrb	r3, [r3, #2]
 800805c:	2b01      	cmp	r3, #1
 800805e:	d002      	beq.n	8008066 <USBH_CtlReq+0x20>
 8008060:	2b02      	cmp	r3, #2
 8008062:	d00f      	beq.n	8008084 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008064:	e027      	b.n	80080b6 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	68ba      	ldr	r2, [r7, #8]
 800806a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	88fa      	ldrh	r2, [r7, #6]
 8008070:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	2201      	movs	r2, #1
 8008076:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	2202      	movs	r2, #2
 800807c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800807e:	2301      	movs	r3, #1
 8008080:	75fb      	strb	r3, [r7, #23]
      break;
 8008082:	e018      	b.n	80080b6 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008084:	68f8      	ldr	r0, [r7, #12]
 8008086:	f000 f81b 	bl	80080c0 <USBH_HandleControl>
 800808a:	4603      	mov	r3, r0
 800808c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800808e:	7dfb      	ldrb	r3, [r7, #23]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d002      	beq.n	800809a <USBH_CtlReq+0x54>
 8008094:	7dfb      	ldrb	r3, [r7, #23]
 8008096:	2b03      	cmp	r3, #3
 8008098:	d106      	bne.n	80080a8 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	2201      	movs	r2, #1
 800809e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	2200      	movs	r2, #0
 80080a4:	761a      	strb	r2, [r3, #24]
      break;
 80080a6:	e005      	b.n	80080b4 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80080a8:	7dfb      	ldrb	r3, [r7, #23]
 80080aa:	2b02      	cmp	r3, #2
 80080ac:	d102      	bne.n	80080b4 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	2201      	movs	r2, #1
 80080b2:	709a      	strb	r2, [r3, #2]
      break;
 80080b4:	bf00      	nop
  }
  return status;
 80080b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	3718      	adds	r7, #24
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}

080080c0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b086      	sub	sp, #24
 80080c4:	af02      	add	r7, sp, #8
 80080c6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80080c8:	2301      	movs	r3, #1
 80080ca:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80080cc:	2300      	movs	r3, #0
 80080ce:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	7e1b      	ldrb	r3, [r3, #24]
 80080d4:	3b01      	subs	r3, #1
 80080d6:	2b0a      	cmp	r3, #10
 80080d8:	f200 8156 	bhi.w	8008388 <USBH_HandleControl+0x2c8>
 80080dc:	a201      	add	r2, pc, #4	; (adr r2, 80080e4 <USBH_HandleControl+0x24>)
 80080de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080e2:	bf00      	nop
 80080e4:	08008111 	.word	0x08008111
 80080e8:	0800812b 	.word	0x0800812b
 80080ec:	08008195 	.word	0x08008195
 80080f0:	080081bb 	.word	0x080081bb
 80080f4:	080081f3 	.word	0x080081f3
 80080f8:	0800821d 	.word	0x0800821d
 80080fc:	0800826f 	.word	0x0800826f
 8008100:	08008291 	.word	0x08008291
 8008104:	080082cd 	.word	0x080082cd
 8008108:	080082f3 	.word	0x080082f3
 800810c:	08008331 	.word	0x08008331
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f103 0110 	add.w	r1, r3, #16
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	795b      	ldrb	r3, [r3, #5]
 800811a:	461a      	mov	r2, r3
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f000 f943 	bl	80083a8 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2202      	movs	r2, #2
 8008126:	761a      	strb	r2, [r3, #24]
      break;
 8008128:	e139      	b.n	800839e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	795b      	ldrb	r3, [r3, #5]
 800812e:	4619      	mov	r1, r3
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f000 fcc5 	bl	8008ac0 <USBH_LL_GetURBState>
 8008136:	4603      	mov	r3, r0
 8008138:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800813a:	7bbb      	ldrb	r3, [r7, #14]
 800813c:	2b01      	cmp	r3, #1
 800813e:	d11e      	bne.n	800817e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	7c1b      	ldrb	r3, [r3, #16]
 8008144:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008148:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	8adb      	ldrh	r3, [r3, #22]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d00a      	beq.n	8008168 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008152:	7b7b      	ldrb	r3, [r7, #13]
 8008154:	2b80      	cmp	r3, #128	; 0x80
 8008156:	d103      	bne.n	8008160 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2203      	movs	r2, #3
 800815c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800815e:	e115      	b.n	800838c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2205      	movs	r2, #5
 8008164:	761a      	strb	r2, [r3, #24]
      break;
 8008166:	e111      	b.n	800838c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008168:	7b7b      	ldrb	r3, [r7, #13]
 800816a:	2b80      	cmp	r3, #128	; 0x80
 800816c:	d103      	bne.n	8008176 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2209      	movs	r2, #9
 8008172:	761a      	strb	r2, [r3, #24]
      break;
 8008174:	e10a      	b.n	800838c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2207      	movs	r2, #7
 800817a:	761a      	strb	r2, [r3, #24]
      break;
 800817c:	e106      	b.n	800838c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800817e:	7bbb      	ldrb	r3, [r7, #14]
 8008180:	2b04      	cmp	r3, #4
 8008182:	d003      	beq.n	800818c <USBH_HandleControl+0xcc>
 8008184:	7bbb      	ldrb	r3, [r7, #14]
 8008186:	2b02      	cmp	r3, #2
 8008188:	f040 8100 	bne.w	800838c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	220b      	movs	r2, #11
 8008190:	761a      	strb	r2, [r3, #24]
      break;
 8008192:	e0fb      	b.n	800838c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800819a:	b29a      	uxth	r2, r3
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6899      	ldr	r1, [r3, #8]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	899a      	ldrh	r2, [r3, #12]
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	791b      	ldrb	r3, [r3, #4]
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f000 f93a 	bl	8008426 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2204      	movs	r2, #4
 80081b6:	761a      	strb	r2, [r3, #24]
      break;
 80081b8:	e0f1      	b.n	800839e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	791b      	ldrb	r3, [r3, #4]
 80081be:	4619      	mov	r1, r3
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f000 fc7d 	bl	8008ac0 <USBH_LL_GetURBState>
 80081c6:	4603      	mov	r3, r0
 80081c8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80081ca:	7bbb      	ldrb	r3, [r7, #14]
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	d102      	bne.n	80081d6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2209      	movs	r2, #9
 80081d4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80081d6:	7bbb      	ldrb	r3, [r7, #14]
 80081d8:	2b05      	cmp	r3, #5
 80081da:	d102      	bne.n	80081e2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80081dc:	2303      	movs	r3, #3
 80081de:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80081e0:	e0d6      	b.n	8008390 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80081e2:	7bbb      	ldrb	r3, [r7, #14]
 80081e4:	2b04      	cmp	r3, #4
 80081e6:	f040 80d3 	bne.w	8008390 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	220b      	movs	r2, #11
 80081ee:	761a      	strb	r2, [r3, #24]
      break;
 80081f0:	e0ce      	b.n	8008390 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6899      	ldr	r1, [r3, #8]
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	899a      	ldrh	r2, [r3, #12]
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	795b      	ldrb	r3, [r3, #5]
 80081fe:	2001      	movs	r0, #1
 8008200:	9000      	str	r0, [sp, #0]
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f000 f8ea 	bl	80083dc <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800820e:	b29a      	uxth	r2, r3
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2206      	movs	r2, #6
 8008218:	761a      	strb	r2, [r3, #24]
      break;
 800821a:	e0c0      	b.n	800839e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	795b      	ldrb	r3, [r3, #5]
 8008220:	4619      	mov	r1, r3
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f000 fc4c 	bl	8008ac0 <USBH_LL_GetURBState>
 8008228:	4603      	mov	r3, r0
 800822a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800822c:	7bbb      	ldrb	r3, [r7, #14]
 800822e:	2b01      	cmp	r3, #1
 8008230:	d103      	bne.n	800823a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2207      	movs	r2, #7
 8008236:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008238:	e0ac      	b.n	8008394 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800823a:	7bbb      	ldrb	r3, [r7, #14]
 800823c:	2b05      	cmp	r3, #5
 800823e:	d105      	bne.n	800824c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	220c      	movs	r2, #12
 8008244:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008246:	2303      	movs	r3, #3
 8008248:	73fb      	strb	r3, [r7, #15]
      break;
 800824a:	e0a3      	b.n	8008394 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800824c:	7bbb      	ldrb	r3, [r7, #14]
 800824e:	2b02      	cmp	r3, #2
 8008250:	d103      	bne.n	800825a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2205      	movs	r2, #5
 8008256:	761a      	strb	r2, [r3, #24]
      break;
 8008258:	e09c      	b.n	8008394 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800825a:	7bbb      	ldrb	r3, [r7, #14]
 800825c:	2b04      	cmp	r3, #4
 800825e:	f040 8099 	bne.w	8008394 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	220b      	movs	r2, #11
 8008266:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008268:	2302      	movs	r3, #2
 800826a:	73fb      	strb	r3, [r7, #15]
      break;
 800826c:	e092      	b.n	8008394 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	791b      	ldrb	r3, [r3, #4]
 8008272:	2200      	movs	r2, #0
 8008274:	2100      	movs	r1, #0
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f000 f8d5 	bl	8008426 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008282:	b29a      	uxth	r2, r3
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2208      	movs	r2, #8
 800828c:	761a      	strb	r2, [r3, #24]

      break;
 800828e:	e086      	b.n	800839e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	791b      	ldrb	r3, [r3, #4]
 8008294:	4619      	mov	r1, r3
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f000 fc12 	bl	8008ac0 <USBH_LL_GetURBState>
 800829c:	4603      	mov	r3, r0
 800829e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80082a0:	7bbb      	ldrb	r3, [r7, #14]
 80082a2:	2b01      	cmp	r3, #1
 80082a4:	d105      	bne.n	80082b2 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	220d      	movs	r2, #13
 80082aa:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80082ac:	2300      	movs	r3, #0
 80082ae:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80082b0:	e072      	b.n	8008398 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80082b2:	7bbb      	ldrb	r3, [r7, #14]
 80082b4:	2b04      	cmp	r3, #4
 80082b6:	d103      	bne.n	80082c0 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	220b      	movs	r2, #11
 80082bc:	761a      	strb	r2, [r3, #24]
      break;
 80082be:	e06b      	b.n	8008398 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80082c0:	7bbb      	ldrb	r3, [r7, #14]
 80082c2:	2b05      	cmp	r3, #5
 80082c4:	d168      	bne.n	8008398 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80082c6:	2303      	movs	r3, #3
 80082c8:	73fb      	strb	r3, [r7, #15]
      break;
 80082ca:	e065      	b.n	8008398 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	795b      	ldrb	r3, [r3, #5]
 80082d0:	2201      	movs	r2, #1
 80082d2:	9200      	str	r2, [sp, #0]
 80082d4:	2200      	movs	r2, #0
 80082d6:	2100      	movs	r1, #0
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f000 f87f 	bl	80083dc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80082e4:	b29a      	uxth	r2, r3
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	220a      	movs	r2, #10
 80082ee:	761a      	strb	r2, [r3, #24]
      break;
 80082f0:	e055      	b.n	800839e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	795b      	ldrb	r3, [r3, #5]
 80082f6:	4619      	mov	r1, r3
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f000 fbe1 	bl	8008ac0 <USBH_LL_GetURBState>
 80082fe:	4603      	mov	r3, r0
 8008300:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008302:	7bbb      	ldrb	r3, [r7, #14]
 8008304:	2b01      	cmp	r3, #1
 8008306:	d105      	bne.n	8008314 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008308:	2300      	movs	r3, #0
 800830a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	220d      	movs	r2, #13
 8008310:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008312:	e043      	b.n	800839c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008314:	7bbb      	ldrb	r3, [r7, #14]
 8008316:	2b02      	cmp	r3, #2
 8008318:	d103      	bne.n	8008322 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2209      	movs	r2, #9
 800831e:	761a      	strb	r2, [r3, #24]
      break;
 8008320:	e03c      	b.n	800839c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008322:	7bbb      	ldrb	r3, [r7, #14]
 8008324:	2b04      	cmp	r3, #4
 8008326:	d139      	bne.n	800839c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	220b      	movs	r2, #11
 800832c:	761a      	strb	r2, [r3, #24]
      break;
 800832e:	e035      	b.n	800839c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	7e5b      	ldrb	r3, [r3, #25]
 8008334:	3301      	adds	r3, #1
 8008336:	b2da      	uxtb	r2, r3
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	765a      	strb	r2, [r3, #25]
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	7e5b      	ldrb	r3, [r3, #25]
 8008340:	2b02      	cmp	r3, #2
 8008342:	d806      	bhi.n	8008352 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2201      	movs	r2, #1
 8008348:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2201      	movs	r2, #1
 800834e:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008350:	e025      	b.n	800839e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008358:	2106      	movs	r1, #6
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2200      	movs	r2, #0
 8008362:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	795b      	ldrb	r3, [r3, #5]
 8008368:	4619      	mov	r1, r3
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 f90c 	bl	8008588 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	791b      	ldrb	r3, [r3, #4]
 8008374:	4619      	mov	r1, r3
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f000 f906 	bl	8008588 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2200      	movs	r2, #0
 8008380:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008382:	2302      	movs	r3, #2
 8008384:	73fb      	strb	r3, [r7, #15]
      break;
 8008386:	e00a      	b.n	800839e <USBH_HandleControl+0x2de>

    default:
      break;
 8008388:	bf00      	nop
 800838a:	e008      	b.n	800839e <USBH_HandleControl+0x2de>
      break;
 800838c:	bf00      	nop
 800838e:	e006      	b.n	800839e <USBH_HandleControl+0x2de>
      break;
 8008390:	bf00      	nop
 8008392:	e004      	b.n	800839e <USBH_HandleControl+0x2de>
      break;
 8008394:	bf00      	nop
 8008396:	e002      	b.n	800839e <USBH_HandleControl+0x2de>
      break;
 8008398:	bf00      	nop
 800839a:	e000      	b.n	800839e <USBH_HandleControl+0x2de>
      break;
 800839c:	bf00      	nop
  }

  return status;
 800839e:	7bfb      	ldrb	r3, [r7, #15]
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	3710      	adds	r7, #16
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}

080083a8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b088      	sub	sp, #32
 80083ac:	af04      	add	r7, sp, #16
 80083ae:	60f8      	str	r0, [r7, #12]
 80083b0:	60b9      	str	r1, [r7, #8]
 80083b2:	4613      	mov	r3, r2
 80083b4:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80083b6:	79f9      	ldrb	r1, [r7, #7]
 80083b8:	2300      	movs	r3, #0
 80083ba:	9303      	str	r3, [sp, #12]
 80083bc:	2308      	movs	r3, #8
 80083be:	9302      	str	r3, [sp, #8]
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	9301      	str	r3, [sp, #4]
 80083c4:	2300      	movs	r3, #0
 80083c6:	9300      	str	r3, [sp, #0]
 80083c8:	2300      	movs	r3, #0
 80083ca:	2200      	movs	r2, #0
 80083cc:	68f8      	ldr	r0, [r7, #12]
 80083ce:	f000 fb46 	bl	8008a5e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 80083d2:	2300      	movs	r3, #0
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	3710      	adds	r7, #16
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}

080083dc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b088      	sub	sp, #32
 80083e0:	af04      	add	r7, sp, #16
 80083e2:	60f8      	str	r0, [r7, #12]
 80083e4:	60b9      	str	r1, [r7, #8]
 80083e6:	4611      	mov	r1, r2
 80083e8:	461a      	mov	r2, r3
 80083ea:	460b      	mov	r3, r1
 80083ec:	80fb      	strh	r3, [r7, #6]
 80083ee:	4613      	mov	r3, r2
 80083f0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d001      	beq.n	8008400 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80083fc:	2300      	movs	r3, #0
 80083fe:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008400:	7979      	ldrb	r1, [r7, #5]
 8008402:	7e3b      	ldrb	r3, [r7, #24]
 8008404:	9303      	str	r3, [sp, #12]
 8008406:	88fb      	ldrh	r3, [r7, #6]
 8008408:	9302      	str	r3, [sp, #8]
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	9301      	str	r3, [sp, #4]
 800840e:	2301      	movs	r3, #1
 8008410:	9300      	str	r3, [sp, #0]
 8008412:	2300      	movs	r3, #0
 8008414:	2200      	movs	r2, #0
 8008416:	68f8      	ldr	r0, [r7, #12]
 8008418:	f000 fb21 	bl	8008a5e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800841c:	2300      	movs	r3, #0
}
 800841e:	4618      	mov	r0, r3
 8008420:	3710      	adds	r7, #16
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}

08008426 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008426:	b580      	push	{r7, lr}
 8008428:	b088      	sub	sp, #32
 800842a:	af04      	add	r7, sp, #16
 800842c:	60f8      	str	r0, [r7, #12]
 800842e:	60b9      	str	r1, [r7, #8]
 8008430:	4611      	mov	r1, r2
 8008432:	461a      	mov	r2, r3
 8008434:	460b      	mov	r3, r1
 8008436:	80fb      	strh	r3, [r7, #6]
 8008438:	4613      	mov	r3, r2
 800843a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800843c:	7979      	ldrb	r1, [r7, #5]
 800843e:	2300      	movs	r3, #0
 8008440:	9303      	str	r3, [sp, #12]
 8008442:	88fb      	ldrh	r3, [r7, #6]
 8008444:	9302      	str	r3, [sp, #8]
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	9301      	str	r3, [sp, #4]
 800844a:	2301      	movs	r3, #1
 800844c:	9300      	str	r3, [sp, #0]
 800844e:	2300      	movs	r3, #0
 8008450:	2201      	movs	r2, #1
 8008452:	68f8      	ldr	r0, [r7, #12]
 8008454:	f000 fb03 	bl	8008a5e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008458:	2300      	movs	r3, #0

}
 800845a:	4618      	mov	r0, r3
 800845c:	3710      	adds	r7, #16
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}

08008462 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008462:	b580      	push	{r7, lr}
 8008464:	b088      	sub	sp, #32
 8008466:	af04      	add	r7, sp, #16
 8008468:	60f8      	str	r0, [r7, #12]
 800846a:	60b9      	str	r1, [r7, #8]
 800846c:	4611      	mov	r1, r2
 800846e:	461a      	mov	r2, r3
 8008470:	460b      	mov	r3, r1
 8008472:	80fb      	strh	r3, [r7, #6]
 8008474:	4613      	mov	r3, r2
 8008476:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800847e:	2b00      	cmp	r3, #0
 8008480:	d001      	beq.n	8008486 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008482:	2300      	movs	r3, #0
 8008484:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008486:	7979      	ldrb	r1, [r7, #5]
 8008488:	7e3b      	ldrb	r3, [r7, #24]
 800848a:	9303      	str	r3, [sp, #12]
 800848c:	88fb      	ldrh	r3, [r7, #6]
 800848e:	9302      	str	r3, [sp, #8]
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	9301      	str	r3, [sp, #4]
 8008494:	2301      	movs	r3, #1
 8008496:	9300      	str	r3, [sp, #0]
 8008498:	2302      	movs	r3, #2
 800849a:	2200      	movs	r2, #0
 800849c:	68f8      	ldr	r0, [r7, #12]
 800849e:	f000 fade 	bl	8008a5e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80084a2:	2300      	movs	r3, #0
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	3710      	adds	r7, #16
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}

080084ac <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b088      	sub	sp, #32
 80084b0:	af04      	add	r7, sp, #16
 80084b2:	60f8      	str	r0, [r7, #12]
 80084b4:	60b9      	str	r1, [r7, #8]
 80084b6:	4611      	mov	r1, r2
 80084b8:	461a      	mov	r2, r3
 80084ba:	460b      	mov	r3, r1
 80084bc:	80fb      	strh	r3, [r7, #6]
 80084be:	4613      	mov	r3, r2
 80084c0:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80084c2:	7979      	ldrb	r1, [r7, #5]
 80084c4:	2300      	movs	r3, #0
 80084c6:	9303      	str	r3, [sp, #12]
 80084c8:	88fb      	ldrh	r3, [r7, #6]
 80084ca:	9302      	str	r3, [sp, #8]
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	9301      	str	r3, [sp, #4]
 80084d0:	2301      	movs	r3, #1
 80084d2:	9300      	str	r3, [sp, #0]
 80084d4:	2302      	movs	r3, #2
 80084d6:	2201      	movs	r2, #1
 80084d8:	68f8      	ldr	r0, [r7, #12]
 80084da:	f000 fac0 	bl	8008a5e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80084de:	2300      	movs	r3, #0
}
 80084e0:	4618      	mov	r0, r3
 80084e2:	3710      	adds	r7, #16
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}

080084e8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b086      	sub	sp, #24
 80084ec:	af04      	add	r7, sp, #16
 80084ee:	6078      	str	r0, [r7, #4]
 80084f0:	4608      	mov	r0, r1
 80084f2:	4611      	mov	r1, r2
 80084f4:	461a      	mov	r2, r3
 80084f6:	4603      	mov	r3, r0
 80084f8:	70fb      	strb	r3, [r7, #3]
 80084fa:	460b      	mov	r3, r1
 80084fc:	70bb      	strb	r3, [r7, #2]
 80084fe:	4613      	mov	r3, r2
 8008500:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008502:	7878      	ldrb	r0, [r7, #1]
 8008504:	78ba      	ldrb	r2, [r7, #2]
 8008506:	78f9      	ldrb	r1, [r7, #3]
 8008508:	8b3b      	ldrh	r3, [r7, #24]
 800850a:	9302      	str	r3, [sp, #8]
 800850c:	7d3b      	ldrb	r3, [r7, #20]
 800850e:	9301      	str	r3, [sp, #4]
 8008510:	7c3b      	ldrb	r3, [r7, #16]
 8008512:	9300      	str	r3, [sp, #0]
 8008514:	4603      	mov	r3, r0
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f000 fa53 	bl	80089c2 <USBH_LL_OpenPipe>

  return USBH_OK;
 800851c:	2300      	movs	r3, #0
}
 800851e:	4618      	mov	r0, r3
 8008520:	3708      	adds	r7, #8
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}

08008526 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008526:	b580      	push	{r7, lr}
 8008528:	b082      	sub	sp, #8
 800852a:	af00      	add	r7, sp, #0
 800852c:	6078      	str	r0, [r7, #4]
 800852e:	460b      	mov	r3, r1
 8008530:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8008532:	78fb      	ldrb	r3, [r7, #3]
 8008534:	4619      	mov	r1, r3
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f000 fa72 	bl	8008a20 <USBH_LL_ClosePipe>

  return USBH_OK;
 800853c:	2300      	movs	r3, #0
}
 800853e:	4618      	mov	r0, r3
 8008540:	3708      	adds	r7, #8
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}

08008546 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008546:	b580      	push	{r7, lr}
 8008548:	b084      	sub	sp, #16
 800854a:	af00      	add	r7, sp, #0
 800854c:	6078      	str	r0, [r7, #4]
 800854e:	460b      	mov	r3, r1
 8008550:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f000 f836 	bl	80085c4 <USBH_GetFreePipe>
 8008558:	4603      	mov	r3, r0
 800855a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800855c:	89fb      	ldrh	r3, [r7, #14]
 800855e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008562:	4293      	cmp	r3, r2
 8008564:	d00a      	beq.n	800857c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8008566:	78fa      	ldrb	r2, [r7, #3]
 8008568:	89fb      	ldrh	r3, [r7, #14]
 800856a:	f003 030f 	and.w	r3, r3, #15
 800856e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008572:	6879      	ldr	r1, [r7, #4]
 8008574:	33e0      	adds	r3, #224	; 0xe0
 8008576:	009b      	lsls	r3, r3, #2
 8008578:	440b      	add	r3, r1
 800857a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800857c:	89fb      	ldrh	r3, [r7, #14]
 800857e:	b2db      	uxtb	r3, r3
}
 8008580:	4618      	mov	r0, r3
 8008582:	3710      	adds	r7, #16
 8008584:	46bd      	mov	sp, r7
 8008586:	bd80      	pop	{r7, pc}

08008588 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008588:	b480      	push	{r7}
 800858a:	b083      	sub	sp, #12
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
 8008590:	460b      	mov	r3, r1
 8008592:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8008594:	78fb      	ldrb	r3, [r7, #3]
 8008596:	2b0a      	cmp	r3, #10
 8008598:	d80d      	bhi.n	80085b6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800859a:	78fb      	ldrb	r3, [r7, #3]
 800859c:	687a      	ldr	r2, [r7, #4]
 800859e:	33e0      	adds	r3, #224	; 0xe0
 80085a0:	009b      	lsls	r3, r3, #2
 80085a2:	4413      	add	r3, r2
 80085a4:	685a      	ldr	r2, [r3, #4]
 80085a6:	78fb      	ldrb	r3, [r7, #3]
 80085a8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80085ac:	6879      	ldr	r1, [r7, #4]
 80085ae:	33e0      	adds	r3, #224	; 0xe0
 80085b0:	009b      	lsls	r3, r3, #2
 80085b2:	440b      	add	r3, r1
 80085b4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80085b6:	2300      	movs	r3, #0
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	370c      	adds	r7, #12
 80085bc:	46bd      	mov	sp, r7
 80085be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c2:	4770      	bx	lr

080085c4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80085c4:	b480      	push	{r7}
 80085c6:	b085      	sub	sp, #20
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80085cc:	2300      	movs	r3, #0
 80085ce:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80085d0:	2300      	movs	r3, #0
 80085d2:	73fb      	strb	r3, [r7, #15]
 80085d4:	e00f      	b.n	80085f6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80085d6:	7bfb      	ldrb	r3, [r7, #15]
 80085d8:	687a      	ldr	r2, [r7, #4]
 80085da:	33e0      	adds	r3, #224	; 0xe0
 80085dc:	009b      	lsls	r3, r3, #2
 80085de:	4413      	add	r3, r2
 80085e0:	685b      	ldr	r3, [r3, #4]
 80085e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d102      	bne.n	80085f0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80085ea:	7bfb      	ldrb	r3, [r7, #15]
 80085ec:	b29b      	uxth	r3, r3
 80085ee:	e007      	b.n	8008600 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 80085f0:	7bfb      	ldrb	r3, [r7, #15]
 80085f2:	3301      	adds	r3, #1
 80085f4:	73fb      	strb	r3, [r7, #15]
 80085f6:	7bfb      	ldrb	r3, [r7, #15]
 80085f8:	2b0a      	cmp	r3, #10
 80085fa:	d9ec      	bls.n	80085d6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80085fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008600:	4618      	mov	r0, r3
 8008602:	3714      	adds	r7, #20
 8008604:	46bd      	mov	sp, r7
 8008606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860a:	4770      	bx	lr

0800860c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008610:	2201      	movs	r2, #1
 8008612:	490e      	ldr	r1, [pc, #56]	; (800864c <MX_USB_HOST_Init+0x40>)
 8008614:	480e      	ldr	r0, [pc, #56]	; (8008650 <MX_USB_HOST_Init+0x44>)
 8008616:	f7fe fca1 	bl	8006f5c <USBH_Init>
 800861a:	4603      	mov	r3, r0
 800861c:	2b00      	cmp	r3, #0
 800861e:	d001      	beq.n	8008624 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008620:	f7f8 fa18 	bl	8000a54 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008624:	490b      	ldr	r1, [pc, #44]	; (8008654 <MX_USB_HOST_Init+0x48>)
 8008626:	480a      	ldr	r0, [pc, #40]	; (8008650 <MX_USB_HOST_Init+0x44>)
 8008628:	f7fe fd26 	bl	8007078 <USBH_RegisterClass>
 800862c:	4603      	mov	r3, r0
 800862e:	2b00      	cmp	r3, #0
 8008630:	d001      	beq.n	8008636 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008632:	f7f8 fa0f 	bl	8000a54 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008636:	4806      	ldr	r0, [pc, #24]	; (8008650 <MX_USB_HOST_Init+0x44>)
 8008638:	f7fe fdaa 	bl	8007190 <USBH_Start>
 800863c:	4603      	mov	r3, r0
 800863e:	2b00      	cmp	r3, #0
 8008640:	d001      	beq.n	8008646 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008642:	f7f8 fa07 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008646:	bf00      	nop
 8008648:	bd80      	pop	{r7, pc}
 800864a:	bf00      	nop
 800864c:	0800866d 	.word	0x0800866d
 8008650:	20000248 	.word	0x20000248
 8008654:	2000000c 	.word	0x2000000c

08008658 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800865c:	4802      	ldr	r0, [pc, #8]	; (8008668 <MX_USB_HOST_Process+0x10>)
 800865e:	f7fe fda7 	bl	80071b0 <USBH_Process>
}
 8008662:	bf00      	nop
 8008664:	bd80      	pop	{r7, pc}
 8008666:	bf00      	nop
 8008668:	20000248 	.word	0x20000248

0800866c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800866c:	b480      	push	{r7}
 800866e:	b083      	sub	sp, #12
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
 8008674:	460b      	mov	r3, r1
 8008676:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008678:	78fb      	ldrb	r3, [r7, #3]
 800867a:	3b01      	subs	r3, #1
 800867c:	2b04      	cmp	r3, #4
 800867e:	d819      	bhi.n	80086b4 <USBH_UserProcess+0x48>
 8008680:	a201      	add	r2, pc, #4	; (adr r2, 8008688 <USBH_UserProcess+0x1c>)
 8008682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008686:	bf00      	nop
 8008688:	080086b5 	.word	0x080086b5
 800868c:	080086a5 	.word	0x080086a5
 8008690:	080086b5 	.word	0x080086b5
 8008694:	080086ad 	.word	0x080086ad
 8008698:	0800869d 	.word	0x0800869d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800869c:	4b09      	ldr	r3, [pc, #36]	; (80086c4 <USBH_UserProcess+0x58>)
 800869e:	2203      	movs	r2, #3
 80086a0:	701a      	strb	r2, [r3, #0]
  break;
 80086a2:	e008      	b.n	80086b6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80086a4:	4b07      	ldr	r3, [pc, #28]	; (80086c4 <USBH_UserProcess+0x58>)
 80086a6:	2202      	movs	r2, #2
 80086a8:	701a      	strb	r2, [r3, #0]
  break;
 80086aa:	e004      	b.n	80086b6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80086ac:	4b05      	ldr	r3, [pc, #20]	; (80086c4 <USBH_UserProcess+0x58>)
 80086ae:	2201      	movs	r2, #1
 80086b0:	701a      	strb	r2, [r3, #0]
  break;
 80086b2:	e000      	b.n	80086b6 <USBH_UserProcess+0x4a>

  default:
  break;
 80086b4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80086b6:	bf00      	nop
 80086b8:	370c      	adds	r7, #12
 80086ba:	46bd      	mov	sp, r7
 80086bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c0:	4770      	bx	lr
 80086c2:	bf00      	nop
 80086c4:	200000b0 	.word	0x200000b0

080086c8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b08a      	sub	sp, #40	; 0x28
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80086d0:	f107 0314 	add.w	r3, r7, #20
 80086d4:	2200      	movs	r2, #0
 80086d6:	601a      	str	r2, [r3, #0]
 80086d8:	605a      	str	r2, [r3, #4]
 80086da:	609a      	str	r2, [r3, #8]
 80086dc:	60da      	str	r2, [r3, #12]
 80086de:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80086e8:	d147      	bne.n	800877a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80086ea:	2300      	movs	r3, #0
 80086ec:	613b      	str	r3, [r7, #16]
 80086ee:	4b25      	ldr	r3, [pc, #148]	; (8008784 <HAL_HCD_MspInit+0xbc>)
 80086f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086f2:	4a24      	ldr	r2, [pc, #144]	; (8008784 <HAL_HCD_MspInit+0xbc>)
 80086f4:	f043 0301 	orr.w	r3, r3, #1
 80086f8:	6313      	str	r3, [r2, #48]	; 0x30
 80086fa:	4b22      	ldr	r3, [pc, #136]	; (8008784 <HAL_HCD_MspInit+0xbc>)
 80086fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086fe:	f003 0301 	and.w	r3, r3, #1
 8008702:	613b      	str	r3, [r7, #16]
 8008704:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008706:	f44f 7300 	mov.w	r3, #512	; 0x200
 800870a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800870c:	2300      	movs	r3, #0
 800870e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008710:	2300      	movs	r3, #0
 8008712:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008714:	f107 0314 	add.w	r3, r7, #20
 8008718:	4619      	mov	r1, r3
 800871a:	481b      	ldr	r0, [pc, #108]	; (8008788 <HAL_HCD_MspInit+0xc0>)
 800871c:	f7f9 fa48 	bl	8001bb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008720:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008724:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008726:	2302      	movs	r3, #2
 8008728:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800872a:	2300      	movs	r3, #0
 800872c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800872e:	2300      	movs	r3, #0
 8008730:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008732:	230a      	movs	r3, #10
 8008734:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008736:	f107 0314 	add.w	r3, r7, #20
 800873a:	4619      	mov	r1, r3
 800873c:	4812      	ldr	r0, [pc, #72]	; (8008788 <HAL_HCD_MspInit+0xc0>)
 800873e:	f7f9 fa37 	bl	8001bb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008742:	4b10      	ldr	r3, [pc, #64]	; (8008784 <HAL_HCD_MspInit+0xbc>)
 8008744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008746:	4a0f      	ldr	r2, [pc, #60]	; (8008784 <HAL_HCD_MspInit+0xbc>)
 8008748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800874c:	6353      	str	r3, [r2, #52]	; 0x34
 800874e:	2300      	movs	r3, #0
 8008750:	60fb      	str	r3, [r7, #12]
 8008752:	4b0c      	ldr	r3, [pc, #48]	; (8008784 <HAL_HCD_MspInit+0xbc>)
 8008754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008756:	4a0b      	ldr	r2, [pc, #44]	; (8008784 <HAL_HCD_MspInit+0xbc>)
 8008758:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800875c:	6453      	str	r3, [r2, #68]	; 0x44
 800875e:	4b09      	ldr	r3, [pc, #36]	; (8008784 <HAL_HCD_MspInit+0xbc>)
 8008760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008762:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008766:	60fb      	str	r3, [r7, #12]
 8008768:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800876a:	2200      	movs	r2, #0
 800876c:	2100      	movs	r1, #0
 800876e:	2043      	movs	r0, #67	; 0x43
 8008770:	f7f9 f9e7 	bl	8001b42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008774:	2043      	movs	r0, #67	; 0x43
 8008776:	f7f9 fa00 	bl	8001b7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800877a:	bf00      	nop
 800877c:	3728      	adds	r7, #40	; 0x28
 800877e:	46bd      	mov	sp, r7
 8008780:	bd80      	pop	{r7, pc}
 8008782:	bf00      	nop
 8008784:	40023800 	.word	0x40023800
 8008788:	40020000 	.word	0x40020000

0800878c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b082      	sub	sp, #8
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800879a:	4618      	mov	r0, r3
 800879c:	f7ff f8db 	bl	8007956 <USBH_LL_IncTimer>
}
 80087a0:	bf00      	nop
 80087a2:	3708      	adds	r7, #8
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}

080087a8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b082      	sub	sp, #8
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80087b6:	4618      	mov	r0, r3
 80087b8:	f7ff f913 	bl	80079e2 <USBH_LL_Connect>
}
 80087bc:	bf00      	nop
 80087be:	3708      	adds	r7, #8
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}

080087c4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b082      	sub	sp, #8
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80087d2:	4618      	mov	r0, r3
 80087d4:	f7ff f91c 	bl	8007a10 <USBH_LL_Disconnect>
}
 80087d8:	bf00      	nop
 80087da:	3708      	adds	r7, #8
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}

080087e0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80087e0:	b480      	push	{r7}
 80087e2:	b083      	sub	sp, #12
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
 80087e8:	460b      	mov	r3, r1
 80087ea:	70fb      	strb	r3, [r7, #3]
 80087ec:	4613      	mov	r3, r2
 80087ee:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80087f0:	bf00      	nop
 80087f2:	370c      	adds	r7, #12
 80087f4:	46bd      	mov	sp, r7
 80087f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fa:	4770      	bx	lr

080087fc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b082      	sub	sp, #8
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800880a:	4618      	mov	r0, r3
 800880c:	f7ff f8cd 	bl	80079aa <USBH_LL_PortEnabled>
}
 8008810:	bf00      	nop
 8008812:	3708      	adds	r7, #8
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}

08008818 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b082      	sub	sp, #8
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008826:	4618      	mov	r0, r3
 8008828:	f7ff f8cd 	bl	80079c6 <USBH_LL_PortDisabled>
}
 800882c:	bf00      	nop
 800882e:	3708      	adds	r7, #8
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}

08008834 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b082      	sub	sp, #8
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008842:	2b01      	cmp	r3, #1
 8008844:	d12a      	bne.n	800889c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008846:	4a18      	ldr	r2, [pc, #96]	; (80088a8 <USBH_LL_Init+0x74>)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	4a15      	ldr	r2, [pc, #84]	; (80088a8 <USBH_LL_Init+0x74>)
 8008852:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008856:	4b14      	ldr	r3, [pc, #80]	; (80088a8 <USBH_LL_Init+0x74>)
 8008858:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800885c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800885e:	4b12      	ldr	r3, [pc, #72]	; (80088a8 <USBH_LL_Init+0x74>)
 8008860:	2208      	movs	r2, #8
 8008862:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008864:	4b10      	ldr	r3, [pc, #64]	; (80088a8 <USBH_LL_Init+0x74>)
 8008866:	2201      	movs	r2, #1
 8008868:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800886a:	4b0f      	ldr	r3, [pc, #60]	; (80088a8 <USBH_LL_Init+0x74>)
 800886c:	2200      	movs	r2, #0
 800886e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008870:	4b0d      	ldr	r3, [pc, #52]	; (80088a8 <USBH_LL_Init+0x74>)
 8008872:	2202      	movs	r2, #2
 8008874:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008876:	4b0c      	ldr	r3, [pc, #48]	; (80088a8 <USBH_LL_Init+0x74>)
 8008878:	2200      	movs	r2, #0
 800887a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800887c:	480a      	ldr	r0, [pc, #40]	; (80088a8 <USBH_LL_Init+0x74>)
 800887e:	f7f9 fb66 	bl	8001f4e <HAL_HCD_Init>
 8008882:	4603      	mov	r3, r0
 8008884:	2b00      	cmp	r3, #0
 8008886:	d001      	beq.n	800888c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008888:	f7f8 f8e4 	bl	8000a54 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800888c:	4806      	ldr	r0, [pc, #24]	; (80088a8 <USBH_LL_Init+0x74>)
 800888e:	f7f9 ff4a 	bl	8002726 <HAL_HCD_GetCurrentFrame>
 8008892:	4603      	mov	r3, r0
 8008894:	4619      	mov	r1, r3
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f7ff f84e 	bl	8007938 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800889c:	2300      	movs	r3, #0
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3708      	adds	r7, #8
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}
 80088a6:	bf00      	nop
 80088a8:	20000620 	.word	0x20000620

080088ac <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b084      	sub	sp, #16
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088b4:	2300      	movs	r3, #0
 80088b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80088b8:	2300      	movs	r3, #0
 80088ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80088c2:	4618      	mov	r0, r3
 80088c4:	f7f9 feb9 	bl	800263a <HAL_HCD_Start>
 80088c8:	4603      	mov	r3, r0
 80088ca:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80088cc:	7bfb      	ldrb	r3, [r7, #15]
 80088ce:	4618      	mov	r0, r3
 80088d0:	f000 f95c 	bl	8008b8c <USBH_Get_USB_Status>
 80088d4:	4603      	mov	r3, r0
 80088d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80088da:	4618      	mov	r0, r3
 80088dc:	3710      	adds	r7, #16
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}

080088e2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80088e2:	b580      	push	{r7, lr}
 80088e4:	b084      	sub	sp, #16
 80088e6:	af00      	add	r7, sp, #0
 80088e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088ea:	2300      	movs	r3, #0
 80088ec:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80088ee:	2300      	movs	r3, #0
 80088f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80088f8:	4618      	mov	r0, r3
 80088fa:	f7f9 fec1 	bl	8002680 <HAL_HCD_Stop>
 80088fe:	4603      	mov	r3, r0
 8008900:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008902:	7bfb      	ldrb	r3, [r7, #15]
 8008904:	4618      	mov	r0, r3
 8008906:	f000 f941 	bl	8008b8c <USBH_Get_USB_Status>
 800890a:	4603      	mov	r3, r0
 800890c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800890e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008910:	4618      	mov	r0, r3
 8008912:	3710      	adds	r7, #16
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}

08008918 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b084      	sub	sp, #16
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008920:	2301      	movs	r3, #1
 8008922:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800892a:	4618      	mov	r0, r3
 800892c:	f7f9 ff09 	bl	8002742 <HAL_HCD_GetCurrentSpeed>
 8008930:	4603      	mov	r3, r0
 8008932:	2b02      	cmp	r3, #2
 8008934:	d00c      	beq.n	8008950 <USBH_LL_GetSpeed+0x38>
 8008936:	2b02      	cmp	r3, #2
 8008938:	d80d      	bhi.n	8008956 <USBH_LL_GetSpeed+0x3e>
 800893a:	2b00      	cmp	r3, #0
 800893c:	d002      	beq.n	8008944 <USBH_LL_GetSpeed+0x2c>
 800893e:	2b01      	cmp	r3, #1
 8008940:	d003      	beq.n	800894a <USBH_LL_GetSpeed+0x32>
 8008942:	e008      	b.n	8008956 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008944:	2300      	movs	r3, #0
 8008946:	73fb      	strb	r3, [r7, #15]
    break;
 8008948:	e008      	b.n	800895c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800894a:	2301      	movs	r3, #1
 800894c:	73fb      	strb	r3, [r7, #15]
    break;
 800894e:	e005      	b.n	800895c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008950:	2302      	movs	r3, #2
 8008952:	73fb      	strb	r3, [r7, #15]
    break;
 8008954:	e002      	b.n	800895c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008956:	2301      	movs	r3, #1
 8008958:	73fb      	strb	r3, [r7, #15]
    break;
 800895a:	bf00      	nop
  }
  return  speed;
 800895c:	7bfb      	ldrb	r3, [r7, #15]
}
 800895e:	4618      	mov	r0, r3
 8008960:	3710      	adds	r7, #16
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}

08008966 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008966:	b580      	push	{r7, lr}
 8008968:	b084      	sub	sp, #16
 800896a:	af00      	add	r7, sp, #0
 800896c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800896e:	2300      	movs	r3, #0
 8008970:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008972:	2300      	movs	r3, #0
 8008974:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800897c:	4618      	mov	r0, r3
 800897e:	f7f9 fe9c 	bl	80026ba <HAL_HCD_ResetPort>
 8008982:	4603      	mov	r3, r0
 8008984:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008986:	7bfb      	ldrb	r3, [r7, #15]
 8008988:	4618      	mov	r0, r3
 800898a:	f000 f8ff 	bl	8008b8c <USBH_Get_USB_Status>
 800898e:	4603      	mov	r3, r0
 8008990:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008992:	7bbb      	ldrb	r3, [r7, #14]
}
 8008994:	4618      	mov	r0, r3
 8008996:	3710      	adds	r7, #16
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}

0800899c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b082      	sub	sp, #8
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
 80089a4:	460b      	mov	r3, r1
 80089a6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80089ae:	78fa      	ldrb	r2, [r7, #3]
 80089b0:	4611      	mov	r1, r2
 80089b2:	4618      	mov	r0, r3
 80089b4:	f7f9 fea3 	bl	80026fe <HAL_HCD_HC_GetXferCount>
 80089b8:	4603      	mov	r3, r0
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	3708      	adds	r7, #8
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}

080089c2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80089c2:	b590      	push	{r4, r7, lr}
 80089c4:	b089      	sub	sp, #36	; 0x24
 80089c6:	af04      	add	r7, sp, #16
 80089c8:	6078      	str	r0, [r7, #4]
 80089ca:	4608      	mov	r0, r1
 80089cc:	4611      	mov	r1, r2
 80089ce:	461a      	mov	r2, r3
 80089d0:	4603      	mov	r3, r0
 80089d2:	70fb      	strb	r3, [r7, #3]
 80089d4:	460b      	mov	r3, r1
 80089d6:	70bb      	strb	r3, [r7, #2]
 80089d8:	4613      	mov	r3, r2
 80089da:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089dc:	2300      	movs	r3, #0
 80089de:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80089e0:	2300      	movs	r3, #0
 80089e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80089ea:	787c      	ldrb	r4, [r7, #1]
 80089ec:	78ba      	ldrb	r2, [r7, #2]
 80089ee:	78f9      	ldrb	r1, [r7, #3]
 80089f0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80089f2:	9302      	str	r3, [sp, #8]
 80089f4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80089f8:	9301      	str	r3, [sp, #4]
 80089fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80089fe:	9300      	str	r3, [sp, #0]
 8008a00:	4623      	mov	r3, r4
 8008a02:	f7f9 fb06 	bl	8002012 <HAL_HCD_HC_Init>
 8008a06:	4603      	mov	r3, r0
 8008a08:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008a0a:	7bfb      	ldrb	r3, [r7, #15]
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f000 f8bd 	bl	8008b8c <USBH_Get_USB_Status>
 8008a12:	4603      	mov	r3, r0
 8008a14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a16:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	3714      	adds	r7, #20
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	bd90      	pop	{r4, r7, pc}

08008a20 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b084      	sub	sp, #16
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
 8008a28:	460b      	mov	r3, r1
 8008a2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008a30:	2300      	movs	r3, #0
 8008a32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008a3a:	78fa      	ldrb	r2, [r7, #3]
 8008a3c:	4611      	mov	r1, r2
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f7f9 fb76 	bl	8002130 <HAL_HCD_HC_Halt>
 8008a44:	4603      	mov	r3, r0
 8008a46:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008a48:	7bfb      	ldrb	r3, [r7, #15]
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f000 f89e 	bl	8008b8c <USBH_Get_USB_Status>
 8008a50:	4603      	mov	r3, r0
 8008a52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a54:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	3710      	adds	r7, #16
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}

08008a5e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008a5e:	b590      	push	{r4, r7, lr}
 8008a60:	b089      	sub	sp, #36	; 0x24
 8008a62:	af04      	add	r7, sp, #16
 8008a64:	6078      	str	r0, [r7, #4]
 8008a66:	4608      	mov	r0, r1
 8008a68:	4611      	mov	r1, r2
 8008a6a:	461a      	mov	r2, r3
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	70fb      	strb	r3, [r7, #3]
 8008a70:	460b      	mov	r3, r1
 8008a72:	70bb      	strb	r3, [r7, #2]
 8008a74:	4613      	mov	r3, r2
 8008a76:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a78:	2300      	movs	r3, #0
 8008a7a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008a86:	787c      	ldrb	r4, [r7, #1]
 8008a88:	78ba      	ldrb	r2, [r7, #2]
 8008a8a:	78f9      	ldrb	r1, [r7, #3]
 8008a8c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008a90:	9303      	str	r3, [sp, #12]
 8008a92:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008a94:	9302      	str	r3, [sp, #8]
 8008a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a98:	9301      	str	r3, [sp, #4]
 8008a9a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008a9e:	9300      	str	r3, [sp, #0]
 8008aa0:	4623      	mov	r3, r4
 8008aa2:	f7f9 fb69 	bl	8002178 <HAL_HCD_HC_SubmitRequest>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008aaa:	7bfb      	ldrb	r3, [r7, #15]
 8008aac:	4618      	mov	r0, r3
 8008aae:	f000 f86d 	bl	8008b8c <USBH_Get_USB_Status>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ab6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	3714      	adds	r7, #20
 8008abc:	46bd      	mov	sp, r7
 8008abe:	bd90      	pop	{r4, r7, pc}

08008ac0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b082      	sub	sp, #8
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
 8008ac8:	460b      	mov	r3, r1
 8008aca:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008ad2:	78fa      	ldrb	r2, [r7, #3]
 8008ad4:	4611      	mov	r1, r2
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f7f9 fdfd 	bl	80026d6 <HAL_HCD_HC_GetURBState>
 8008adc:	4603      	mov	r3, r0
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3708      	adds	r7, #8
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}

08008ae6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008ae6:	b580      	push	{r7, lr}
 8008ae8:	b082      	sub	sp, #8
 8008aea:	af00      	add	r7, sp, #0
 8008aec:	6078      	str	r0, [r7, #4]
 8008aee:	460b      	mov	r3, r1
 8008af0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008af8:	2b01      	cmp	r3, #1
 8008afa:	d103      	bne.n	8008b04 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008afc:	78fb      	ldrb	r3, [r7, #3]
 8008afe:	4618      	mov	r0, r3
 8008b00:	f000 f870 	bl	8008be4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008b04:	20c8      	movs	r0, #200	; 0xc8
 8008b06:	f7f8 fa71 	bl	8000fec <HAL_Delay>
  return USBH_OK;
 8008b0a:	2300      	movs	r3, #0
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	3708      	adds	r7, #8
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}

08008b14 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008b14:	b480      	push	{r7}
 8008b16:	b085      	sub	sp, #20
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
 8008b1c:	460b      	mov	r3, r1
 8008b1e:	70fb      	strb	r3, [r7, #3]
 8008b20:	4613      	mov	r3, r2
 8008b22:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008b2a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008b2c:	78fb      	ldrb	r3, [r7, #3]
 8008b2e:	68fa      	ldr	r2, [r7, #12]
 8008b30:	212c      	movs	r1, #44	; 0x2c
 8008b32:	fb01 f303 	mul.w	r3, r1, r3
 8008b36:	4413      	add	r3, r2
 8008b38:	333b      	adds	r3, #59	; 0x3b
 8008b3a:	781b      	ldrb	r3, [r3, #0]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d009      	beq.n	8008b54 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008b40:	78fb      	ldrb	r3, [r7, #3]
 8008b42:	68fa      	ldr	r2, [r7, #12]
 8008b44:	212c      	movs	r1, #44	; 0x2c
 8008b46:	fb01 f303 	mul.w	r3, r1, r3
 8008b4a:	4413      	add	r3, r2
 8008b4c:	3354      	adds	r3, #84	; 0x54
 8008b4e:	78ba      	ldrb	r2, [r7, #2]
 8008b50:	701a      	strb	r2, [r3, #0]
 8008b52:	e008      	b.n	8008b66 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008b54:	78fb      	ldrb	r3, [r7, #3]
 8008b56:	68fa      	ldr	r2, [r7, #12]
 8008b58:	212c      	movs	r1, #44	; 0x2c
 8008b5a:	fb01 f303 	mul.w	r3, r1, r3
 8008b5e:	4413      	add	r3, r2
 8008b60:	3355      	adds	r3, #85	; 0x55
 8008b62:	78ba      	ldrb	r2, [r7, #2]
 8008b64:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008b66:	2300      	movs	r3, #0
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	3714      	adds	r7, #20
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b72:	4770      	bx	lr

08008b74 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b082      	sub	sp, #8
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f7f8 fa35 	bl	8000fec <HAL_Delay>
}
 8008b82:	bf00      	nop
 8008b84:	3708      	adds	r7, #8
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}
	...

08008b8c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	b085      	sub	sp, #20
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	4603      	mov	r3, r0
 8008b94:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008b96:	2300      	movs	r3, #0
 8008b98:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008b9a:	79fb      	ldrb	r3, [r7, #7]
 8008b9c:	2b03      	cmp	r3, #3
 8008b9e:	d817      	bhi.n	8008bd0 <USBH_Get_USB_Status+0x44>
 8008ba0:	a201      	add	r2, pc, #4	; (adr r2, 8008ba8 <USBH_Get_USB_Status+0x1c>)
 8008ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ba6:	bf00      	nop
 8008ba8:	08008bb9 	.word	0x08008bb9
 8008bac:	08008bbf 	.word	0x08008bbf
 8008bb0:	08008bc5 	.word	0x08008bc5
 8008bb4:	08008bcb 	.word	0x08008bcb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	73fb      	strb	r3, [r7, #15]
    break;
 8008bbc:	e00b      	b.n	8008bd6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008bbe:	2302      	movs	r3, #2
 8008bc0:	73fb      	strb	r3, [r7, #15]
    break;
 8008bc2:	e008      	b.n	8008bd6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	73fb      	strb	r3, [r7, #15]
    break;
 8008bc8:	e005      	b.n	8008bd6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008bca:	2302      	movs	r3, #2
 8008bcc:	73fb      	strb	r3, [r7, #15]
    break;
 8008bce:	e002      	b.n	8008bd6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008bd0:	2302      	movs	r3, #2
 8008bd2:	73fb      	strb	r3, [r7, #15]
    break;
 8008bd4:	bf00      	nop
  }
  return usb_status;
 8008bd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	3714      	adds	r7, #20
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be2:	4770      	bx	lr

08008be4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b084      	sub	sp, #16
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	4603      	mov	r3, r0
 8008bec:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008bee:	79fb      	ldrb	r3, [r7, #7]
 8008bf0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008bf2:	79fb      	ldrb	r3, [r7, #7]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d102      	bne.n	8008bfe <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	73fb      	strb	r3, [r7, #15]
 8008bfc:	e001      	b.n	8008c02 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008c02:	7bfb      	ldrb	r3, [r7, #15]
 8008c04:	461a      	mov	r2, r3
 8008c06:	2101      	movs	r1, #1
 8008c08:	4803      	ldr	r0, [pc, #12]	; (8008c18 <MX_DriverVbusFS+0x34>)
 8008c0a:	f7f9 f96d 	bl	8001ee8 <HAL_GPIO_WritePin>
}
 8008c0e:	bf00      	nop
 8008c10:	3710      	adds	r7, #16
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd80      	pop	{r7, pc}
 8008c16:	bf00      	nop
 8008c18:	40020800 	.word	0x40020800

08008c1c <__errno>:
 8008c1c:	4b01      	ldr	r3, [pc, #4]	; (8008c24 <__errno+0x8>)
 8008c1e:	6818      	ldr	r0, [r3, #0]
 8008c20:	4770      	bx	lr
 8008c22:	bf00      	nop
 8008c24:	2000002c 	.word	0x2000002c

08008c28 <__libc_init_array>:
 8008c28:	b570      	push	{r4, r5, r6, lr}
 8008c2a:	4d0d      	ldr	r5, [pc, #52]	; (8008c60 <__libc_init_array+0x38>)
 8008c2c:	4c0d      	ldr	r4, [pc, #52]	; (8008c64 <__libc_init_array+0x3c>)
 8008c2e:	1b64      	subs	r4, r4, r5
 8008c30:	10a4      	asrs	r4, r4, #2
 8008c32:	2600      	movs	r6, #0
 8008c34:	42a6      	cmp	r6, r4
 8008c36:	d109      	bne.n	8008c4c <__libc_init_array+0x24>
 8008c38:	4d0b      	ldr	r5, [pc, #44]	; (8008c68 <__libc_init_array+0x40>)
 8008c3a:	4c0c      	ldr	r4, [pc, #48]	; (8008c6c <__libc_init_array+0x44>)
 8008c3c:	f000 f8f8 	bl	8008e30 <_init>
 8008c40:	1b64      	subs	r4, r4, r5
 8008c42:	10a4      	asrs	r4, r4, #2
 8008c44:	2600      	movs	r6, #0
 8008c46:	42a6      	cmp	r6, r4
 8008c48:	d105      	bne.n	8008c56 <__libc_init_array+0x2e>
 8008c4a:	bd70      	pop	{r4, r5, r6, pc}
 8008c4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c50:	4798      	blx	r3
 8008c52:	3601      	adds	r6, #1
 8008c54:	e7ee      	b.n	8008c34 <__libc_init_array+0xc>
 8008c56:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c5a:	4798      	blx	r3
 8008c5c:	3601      	adds	r6, #1
 8008c5e:	e7f2      	b.n	8008c46 <__libc_init_array+0x1e>
 8008c60:	08008e6c 	.word	0x08008e6c
 8008c64:	08008e6c 	.word	0x08008e6c
 8008c68:	08008e6c 	.word	0x08008e6c
 8008c6c:	08008e70 	.word	0x08008e70

08008c70 <malloc>:
 8008c70:	4b02      	ldr	r3, [pc, #8]	; (8008c7c <malloc+0xc>)
 8008c72:	4601      	mov	r1, r0
 8008c74:	6818      	ldr	r0, [r3, #0]
 8008c76:	f000 b863 	b.w	8008d40 <_malloc_r>
 8008c7a:	bf00      	nop
 8008c7c:	2000002c 	.word	0x2000002c

08008c80 <free>:
 8008c80:	4b02      	ldr	r3, [pc, #8]	; (8008c8c <free+0xc>)
 8008c82:	4601      	mov	r1, r0
 8008c84:	6818      	ldr	r0, [r3, #0]
 8008c86:	f000 b80b 	b.w	8008ca0 <_free_r>
 8008c8a:	bf00      	nop
 8008c8c:	2000002c 	.word	0x2000002c

08008c90 <memset>:
 8008c90:	4402      	add	r2, r0
 8008c92:	4603      	mov	r3, r0
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d100      	bne.n	8008c9a <memset+0xa>
 8008c98:	4770      	bx	lr
 8008c9a:	f803 1b01 	strb.w	r1, [r3], #1
 8008c9e:	e7f9      	b.n	8008c94 <memset+0x4>

08008ca0 <_free_r>:
 8008ca0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008ca2:	2900      	cmp	r1, #0
 8008ca4:	d048      	beq.n	8008d38 <_free_r+0x98>
 8008ca6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008caa:	9001      	str	r0, [sp, #4]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	f1a1 0404 	sub.w	r4, r1, #4
 8008cb2:	bfb8      	it	lt
 8008cb4:	18e4      	addlt	r4, r4, r3
 8008cb6:	f000 f8ad 	bl	8008e14 <__malloc_lock>
 8008cba:	4a20      	ldr	r2, [pc, #128]	; (8008d3c <_free_r+0x9c>)
 8008cbc:	9801      	ldr	r0, [sp, #4]
 8008cbe:	6813      	ldr	r3, [r2, #0]
 8008cc0:	4615      	mov	r5, r2
 8008cc2:	b933      	cbnz	r3, 8008cd2 <_free_r+0x32>
 8008cc4:	6063      	str	r3, [r4, #4]
 8008cc6:	6014      	str	r4, [r2, #0]
 8008cc8:	b003      	add	sp, #12
 8008cca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008cce:	f000 b8a7 	b.w	8008e20 <__malloc_unlock>
 8008cd2:	42a3      	cmp	r3, r4
 8008cd4:	d90b      	bls.n	8008cee <_free_r+0x4e>
 8008cd6:	6821      	ldr	r1, [r4, #0]
 8008cd8:	1862      	adds	r2, r4, r1
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	bf04      	itt	eq
 8008cde:	681a      	ldreq	r2, [r3, #0]
 8008ce0:	685b      	ldreq	r3, [r3, #4]
 8008ce2:	6063      	str	r3, [r4, #4]
 8008ce4:	bf04      	itt	eq
 8008ce6:	1852      	addeq	r2, r2, r1
 8008ce8:	6022      	streq	r2, [r4, #0]
 8008cea:	602c      	str	r4, [r5, #0]
 8008cec:	e7ec      	b.n	8008cc8 <_free_r+0x28>
 8008cee:	461a      	mov	r2, r3
 8008cf0:	685b      	ldr	r3, [r3, #4]
 8008cf2:	b10b      	cbz	r3, 8008cf8 <_free_r+0x58>
 8008cf4:	42a3      	cmp	r3, r4
 8008cf6:	d9fa      	bls.n	8008cee <_free_r+0x4e>
 8008cf8:	6811      	ldr	r1, [r2, #0]
 8008cfa:	1855      	adds	r5, r2, r1
 8008cfc:	42a5      	cmp	r5, r4
 8008cfe:	d10b      	bne.n	8008d18 <_free_r+0x78>
 8008d00:	6824      	ldr	r4, [r4, #0]
 8008d02:	4421      	add	r1, r4
 8008d04:	1854      	adds	r4, r2, r1
 8008d06:	42a3      	cmp	r3, r4
 8008d08:	6011      	str	r1, [r2, #0]
 8008d0a:	d1dd      	bne.n	8008cc8 <_free_r+0x28>
 8008d0c:	681c      	ldr	r4, [r3, #0]
 8008d0e:	685b      	ldr	r3, [r3, #4]
 8008d10:	6053      	str	r3, [r2, #4]
 8008d12:	4421      	add	r1, r4
 8008d14:	6011      	str	r1, [r2, #0]
 8008d16:	e7d7      	b.n	8008cc8 <_free_r+0x28>
 8008d18:	d902      	bls.n	8008d20 <_free_r+0x80>
 8008d1a:	230c      	movs	r3, #12
 8008d1c:	6003      	str	r3, [r0, #0]
 8008d1e:	e7d3      	b.n	8008cc8 <_free_r+0x28>
 8008d20:	6825      	ldr	r5, [r4, #0]
 8008d22:	1961      	adds	r1, r4, r5
 8008d24:	428b      	cmp	r3, r1
 8008d26:	bf04      	itt	eq
 8008d28:	6819      	ldreq	r1, [r3, #0]
 8008d2a:	685b      	ldreq	r3, [r3, #4]
 8008d2c:	6063      	str	r3, [r4, #4]
 8008d2e:	bf04      	itt	eq
 8008d30:	1949      	addeq	r1, r1, r5
 8008d32:	6021      	streq	r1, [r4, #0]
 8008d34:	6054      	str	r4, [r2, #4]
 8008d36:	e7c7      	b.n	8008cc8 <_free_r+0x28>
 8008d38:	b003      	add	sp, #12
 8008d3a:	bd30      	pop	{r4, r5, pc}
 8008d3c:	200000b4 	.word	0x200000b4

08008d40 <_malloc_r>:
 8008d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d42:	1ccd      	adds	r5, r1, #3
 8008d44:	f025 0503 	bic.w	r5, r5, #3
 8008d48:	3508      	adds	r5, #8
 8008d4a:	2d0c      	cmp	r5, #12
 8008d4c:	bf38      	it	cc
 8008d4e:	250c      	movcc	r5, #12
 8008d50:	2d00      	cmp	r5, #0
 8008d52:	4606      	mov	r6, r0
 8008d54:	db01      	blt.n	8008d5a <_malloc_r+0x1a>
 8008d56:	42a9      	cmp	r1, r5
 8008d58:	d903      	bls.n	8008d62 <_malloc_r+0x22>
 8008d5a:	230c      	movs	r3, #12
 8008d5c:	6033      	str	r3, [r6, #0]
 8008d5e:	2000      	movs	r0, #0
 8008d60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d62:	f000 f857 	bl	8008e14 <__malloc_lock>
 8008d66:	4921      	ldr	r1, [pc, #132]	; (8008dec <_malloc_r+0xac>)
 8008d68:	680a      	ldr	r2, [r1, #0]
 8008d6a:	4614      	mov	r4, r2
 8008d6c:	b99c      	cbnz	r4, 8008d96 <_malloc_r+0x56>
 8008d6e:	4f20      	ldr	r7, [pc, #128]	; (8008df0 <_malloc_r+0xb0>)
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	b923      	cbnz	r3, 8008d7e <_malloc_r+0x3e>
 8008d74:	4621      	mov	r1, r4
 8008d76:	4630      	mov	r0, r6
 8008d78:	f000 f83c 	bl	8008df4 <_sbrk_r>
 8008d7c:	6038      	str	r0, [r7, #0]
 8008d7e:	4629      	mov	r1, r5
 8008d80:	4630      	mov	r0, r6
 8008d82:	f000 f837 	bl	8008df4 <_sbrk_r>
 8008d86:	1c43      	adds	r3, r0, #1
 8008d88:	d123      	bne.n	8008dd2 <_malloc_r+0x92>
 8008d8a:	230c      	movs	r3, #12
 8008d8c:	6033      	str	r3, [r6, #0]
 8008d8e:	4630      	mov	r0, r6
 8008d90:	f000 f846 	bl	8008e20 <__malloc_unlock>
 8008d94:	e7e3      	b.n	8008d5e <_malloc_r+0x1e>
 8008d96:	6823      	ldr	r3, [r4, #0]
 8008d98:	1b5b      	subs	r3, r3, r5
 8008d9a:	d417      	bmi.n	8008dcc <_malloc_r+0x8c>
 8008d9c:	2b0b      	cmp	r3, #11
 8008d9e:	d903      	bls.n	8008da8 <_malloc_r+0x68>
 8008da0:	6023      	str	r3, [r4, #0]
 8008da2:	441c      	add	r4, r3
 8008da4:	6025      	str	r5, [r4, #0]
 8008da6:	e004      	b.n	8008db2 <_malloc_r+0x72>
 8008da8:	6863      	ldr	r3, [r4, #4]
 8008daa:	42a2      	cmp	r2, r4
 8008dac:	bf0c      	ite	eq
 8008dae:	600b      	streq	r3, [r1, #0]
 8008db0:	6053      	strne	r3, [r2, #4]
 8008db2:	4630      	mov	r0, r6
 8008db4:	f000 f834 	bl	8008e20 <__malloc_unlock>
 8008db8:	f104 000b 	add.w	r0, r4, #11
 8008dbc:	1d23      	adds	r3, r4, #4
 8008dbe:	f020 0007 	bic.w	r0, r0, #7
 8008dc2:	1ac2      	subs	r2, r0, r3
 8008dc4:	d0cc      	beq.n	8008d60 <_malloc_r+0x20>
 8008dc6:	1a1b      	subs	r3, r3, r0
 8008dc8:	50a3      	str	r3, [r4, r2]
 8008dca:	e7c9      	b.n	8008d60 <_malloc_r+0x20>
 8008dcc:	4622      	mov	r2, r4
 8008dce:	6864      	ldr	r4, [r4, #4]
 8008dd0:	e7cc      	b.n	8008d6c <_malloc_r+0x2c>
 8008dd2:	1cc4      	adds	r4, r0, #3
 8008dd4:	f024 0403 	bic.w	r4, r4, #3
 8008dd8:	42a0      	cmp	r0, r4
 8008dda:	d0e3      	beq.n	8008da4 <_malloc_r+0x64>
 8008ddc:	1a21      	subs	r1, r4, r0
 8008dde:	4630      	mov	r0, r6
 8008de0:	f000 f808 	bl	8008df4 <_sbrk_r>
 8008de4:	3001      	adds	r0, #1
 8008de6:	d1dd      	bne.n	8008da4 <_malloc_r+0x64>
 8008de8:	e7cf      	b.n	8008d8a <_malloc_r+0x4a>
 8008dea:	bf00      	nop
 8008dec:	200000b4 	.word	0x200000b4
 8008df0:	200000b8 	.word	0x200000b8

08008df4 <_sbrk_r>:
 8008df4:	b538      	push	{r3, r4, r5, lr}
 8008df6:	4d06      	ldr	r5, [pc, #24]	; (8008e10 <_sbrk_r+0x1c>)
 8008df8:	2300      	movs	r3, #0
 8008dfa:	4604      	mov	r4, r0
 8008dfc:	4608      	mov	r0, r1
 8008dfe:	602b      	str	r3, [r5, #0]
 8008e00:	f7f8 f810 	bl	8000e24 <_sbrk>
 8008e04:	1c43      	adds	r3, r0, #1
 8008e06:	d102      	bne.n	8008e0e <_sbrk_r+0x1a>
 8008e08:	682b      	ldr	r3, [r5, #0]
 8008e0a:	b103      	cbz	r3, 8008e0e <_sbrk_r+0x1a>
 8008e0c:	6023      	str	r3, [r4, #0]
 8008e0e:	bd38      	pop	{r3, r4, r5, pc}
 8008e10:	20000924 	.word	0x20000924

08008e14 <__malloc_lock>:
 8008e14:	4801      	ldr	r0, [pc, #4]	; (8008e1c <__malloc_lock+0x8>)
 8008e16:	f000 b809 	b.w	8008e2c <__retarget_lock_acquire_recursive>
 8008e1a:	bf00      	nop
 8008e1c:	2000092c 	.word	0x2000092c

08008e20 <__malloc_unlock>:
 8008e20:	4801      	ldr	r0, [pc, #4]	; (8008e28 <__malloc_unlock+0x8>)
 8008e22:	f000 b804 	b.w	8008e2e <__retarget_lock_release_recursive>
 8008e26:	bf00      	nop
 8008e28:	2000092c 	.word	0x2000092c

08008e2c <__retarget_lock_acquire_recursive>:
 8008e2c:	4770      	bx	lr

08008e2e <__retarget_lock_release_recursive>:
 8008e2e:	4770      	bx	lr

08008e30 <_init>:
 8008e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e32:	bf00      	nop
 8008e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e36:	bc08      	pop	{r3}
 8008e38:	469e      	mov	lr, r3
 8008e3a:	4770      	bx	lr

08008e3c <_fini>:
 8008e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e3e:	bf00      	nop
 8008e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e42:	bc08      	pop	{r3}
 8008e44:	469e      	mov	lr, r3
 8008e46:	4770      	bx	lr
