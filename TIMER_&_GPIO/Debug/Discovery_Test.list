
Discovery_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086ec  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08008874  08008874  00018874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008890  08008890  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08008890  08008890  00018890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008898  08008898  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008898  08008898  00018898  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800889c  0800889c  0001889c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080088a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000858  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200008e8  200008e8  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e9b7  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f22  00000000  00000000  0003ea77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001660  00000000  00000000  000429a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000014e0  00000000  00000000  00044000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002495c  00000000  00000000  000454e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c6a8  00000000  00000000  00069e3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3bda  00000000  00000000  000864e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0015a0be  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000610c  00000000  00000000  0015a114  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800885c 	.word	0x0800885c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	0800885c 	.word	0x0800885c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f000 fcd8 	bl	8000e78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f810 	bl	80004ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 f996 	bl	80007fc <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d0:	f000 f876 	bl	80005c0 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004d4:	f000 f8a2 	bl	800061c <MX_I2S3_Init>
  MX_SPI1_Init();
 80004d8:	f000 f8d0 	bl	800067c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004dc:	f007 fdac 	bl	8008038 <MX_USB_HOST_Init>
  MX_TIM4_Init();
 80004e0:	f000 f902 	bl	80006e8 <MX_TIM4_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80004e4:	f007 fdce 	bl	8008084 <MX_USB_HOST_Process>
 80004e8:	e7fc      	b.n	80004e4 <main+0x24>
	...

080004ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b094      	sub	sp, #80	; 0x50
 80004f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f2:	f107 0320 	add.w	r3, r7, #32
 80004f6:	2230      	movs	r2, #48	; 0x30
 80004f8:	2100      	movs	r1, #0
 80004fa:	4618      	mov	r0, r3
 80004fc:	f008 f8de 	bl	80086bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000500:	f107 030c 	add.w	r3, r7, #12
 8000504:	2200      	movs	r2, #0
 8000506:	601a      	str	r2, [r3, #0]
 8000508:	605a      	str	r2, [r3, #4]
 800050a:	609a      	str	r2, [r3, #8]
 800050c:	60da      	str	r2, [r3, #12]
 800050e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000510:	2300      	movs	r3, #0
 8000512:	60bb      	str	r3, [r7, #8]
 8000514:	4b28      	ldr	r3, [pc, #160]	; (80005b8 <SystemClock_Config+0xcc>)
 8000516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000518:	4a27      	ldr	r2, [pc, #156]	; (80005b8 <SystemClock_Config+0xcc>)
 800051a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800051e:	6413      	str	r3, [r2, #64]	; 0x40
 8000520:	4b25      	ldr	r3, [pc, #148]	; (80005b8 <SystemClock_Config+0xcc>)
 8000522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000524:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000528:	60bb      	str	r3, [r7, #8]
 800052a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800052c:	2300      	movs	r3, #0
 800052e:	607b      	str	r3, [r7, #4]
 8000530:	4b22      	ldr	r3, [pc, #136]	; (80005bc <SystemClock_Config+0xd0>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a21      	ldr	r2, [pc, #132]	; (80005bc <SystemClock_Config+0xd0>)
 8000536:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800053a:	6013      	str	r3, [r2, #0]
 800053c:	4b1f      	ldr	r3, [pc, #124]	; (80005bc <SystemClock_Config+0xd0>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000544:	607b      	str	r3, [r7, #4]
 8000546:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000548:	2301      	movs	r3, #1
 800054a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800054c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000550:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000552:	2302      	movs	r3, #2
 8000554:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000556:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800055a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800055c:	2308      	movs	r3, #8
 800055e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000560:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000564:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000566:	2302      	movs	r3, #2
 8000568:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800056a:	2307      	movs	r3, #7
 800056c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800056e:	f107 0320 	add.w	r3, r7, #32
 8000572:	4618      	mov	r0, r3
 8000574:	f003 fb32 	bl	8003bdc <HAL_RCC_OscConfig>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800057e:	f000 fa3b 	bl	80009f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000582:	230f      	movs	r3, #15
 8000584:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000586:	2302      	movs	r3, #2
 8000588:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800058a:	2300      	movs	r3, #0
 800058c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800058e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000592:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000594:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000598:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800059a:	f107 030c 	add.w	r3, r7, #12
 800059e:	2105      	movs	r1, #5
 80005a0:	4618      	mov	r0, r3
 80005a2:	f003 fd93 	bl	80040cc <HAL_RCC_ClockConfig>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005ac:	f000 fa24 	bl	80009f8 <Error_Handler>
  }
}
 80005b0:	bf00      	nop
 80005b2:	3750      	adds	r7, #80	; 0x50
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	40023800 	.word	0x40023800
 80005bc:	40007000 	.word	0x40007000

080005c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005c4:	4b12      	ldr	r3, [pc, #72]	; (8000610 <MX_I2C1_Init+0x50>)
 80005c6:	4a13      	ldr	r2, [pc, #76]	; (8000614 <MX_I2C1_Init+0x54>)
 80005c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005ca:	4b11      	ldr	r3, [pc, #68]	; (8000610 <MX_I2C1_Init+0x50>)
 80005cc:	4a12      	ldr	r2, [pc, #72]	; (8000618 <MX_I2C1_Init+0x58>)
 80005ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005d0:	4b0f      	ldr	r3, [pc, #60]	; (8000610 <MX_I2C1_Init+0x50>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005d6:	4b0e      	ldr	r3, [pc, #56]	; (8000610 <MX_I2C1_Init+0x50>)
 80005d8:	2200      	movs	r2, #0
 80005da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005dc:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <MX_I2C1_Init+0x50>)
 80005de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005e4:	4b0a      	ldr	r3, [pc, #40]	; (8000610 <MX_I2C1_Init+0x50>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005ea:	4b09      	ldr	r3, [pc, #36]	; (8000610 <MX_I2C1_Init+0x50>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005f0:	4b07      	ldr	r3, [pc, #28]	; (8000610 <MX_I2C1_Init+0x50>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005f6:	4b06      	ldr	r3, [pc, #24]	; (8000610 <MX_I2C1_Init+0x50>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005fc:	4804      	ldr	r0, [pc, #16]	; (8000610 <MX_I2C1_Init+0x50>)
 80005fe:	f002 fd09 	bl	8003014 <HAL_I2C_Init>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000608:	f000 f9f6 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800060c:	bf00      	nop
 800060e:	bd80      	pop	{r7, pc}
 8000610:	20000104 	.word	0x20000104
 8000614:	40005400 	.word	0x40005400
 8000618:	000186a0 	.word	0x000186a0

0800061c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000620:	4b13      	ldr	r3, [pc, #76]	; (8000670 <MX_I2S3_Init+0x54>)
 8000622:	4a14      	ldr	r2, [pc, #80]	; (8000674 <MX_I2S3_Init+0x58>)
 8000624:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000626:	4b12      	ldr	r3, [pc, #72]	; (8000670 <MX_I2S3_Init+0x54>)
 8000628:	f44f 7200 	mov.w	r2, #512	; 0x200
 800062c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800062e:	4b10      	ldr	r3, [pc, #64]	; (8000670 <MX_I2S3_Init+0x54>)
 8000630:	2200      	movs	r2, #0
 8000632:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000634:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <MX_I2S3_Init+0x54>)
 8000636:	2200      	movs	r2, #0
 8000638:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800063a:	4b0d      	ldr	r3, [pc, #52]	; (8000670 <MX_I2S3_Init+0x54>)
 800063c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000640:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000642:	4b0b      	ldr	r3, [pc, #44]	; (8000670 <MX_I2S3_Init+0x54>)
 8000644:	4a0c      	ldr	r2, [pc, #48]	; (8000678 <MX_I2S3_Init+0x5c>)
 8000646:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000648:	4b09      	ldr	r3, [pc, #36]	; (8000670 <MX_I2S3_Init+0x54>)
 800064a:	2200      	movs	r2, #0
 800064c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800064e:	4b08      	ldr	r3, [pc, #32]	; (8000670 <MX_I2S3_Init+0x54>)
 8000650:	2200      	movs	r2, #0
 8000652:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000654:	4b06      	ldr	r3, [pc, #24]	; (8000670 <MX_I2S3_Init+0x54>)
 8000656:	2200      	movs	r2, #0
 8000658:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800065a:	4805      	ldr	r0, [pc, #20]	; (8000670 <MX_I2S3_Init+0x54>)
 800065c:	f002 fe1e 	bl	800329c <HAL_I2S_Init>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000666:	f000 f9c7 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	200001b0 	.word	0x200001b0
 8000674:	40003c00 	.word	0x40003c00
 8000678:	00017700 	.word	0x00017700

0800067c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000680:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <MX_SPI1_Init+0x64>)
 8000682:	4a18      	ldr	r2, [pc, #96]	; (80006e4 <MX_SPI1_Init+0x68>)
 8000684:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000686:	4b16      	ldr	r3, [pc, #88]	; (80006e0 <MX_SPI1_Init+0x64>)
 8000688:	f44f 7282 	mov.w	r2, #260	; 0x104
 800068c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800068e:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <MX_SPI1_Init+0x64>)
 8000690:	2200      	movs	r2, #0
 8000692:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <MX_SPI1_Init+0x64>)
 8000696:	2200      	movs	r2, #0
 8000698:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800069a:	4b11      	ldr	r3, [pc, #68]	; (80006e0 <MX_SPI1_Init+0x64>)
 800069c:	2200      	movs	r2, #0
 800069e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <MX_SPI1_Init+0x64>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006a6:	4b0e      	ldr	r3, [pc, #56]	; (80006e0 <MX_SPI1_Init+0x64>)
 80006a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006ac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006ae:	4b0c      	ldr	r3, [pc, #48]	; (80006e0 <MX_SPI1_Init+0x64>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006b4:	4b0a      	ldr	r3, [pc, #40]	; (80006e0 <MX_SPI1_Init+0x64>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006ba:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <MX_SPI1_Init+0x64>)
 80006bc:	2200      	movs	r2, #0
 80006be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006c0:	4b07      	ldr	r3, [pc, #28]	; (80006e0 <MX_SPI1_Init+0x64>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006c6:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <MX_SPI1_Init+0x64>)
 80006c8:	220a      	movs	r2, #10
 80006ca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006cc:	4804      	ldr	r0, [pc, #16]	; (80006e0 <MX_SPI1_Init+0x64>)
 80006ce:	f004 f825 	bl	800471c <HAL_SPI_Init>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006d8:	f000 f98e 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006dc:	bf00      	nop
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	20000158 	.word	0x20000158
 80006e4:	40013000 	.word	0x40013000

080006e8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b08e      	sub	sp, #56	; 0x38
 80006ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	605a      	str	r2, [r3, #4]
 80006f8:	609a      	str	r2, [r3, #8]
 80006fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006fc:	f107 0320 	add.w	r3, r7, #32
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000706:	1d3b      	adds	r3, r7, #4
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
 800070e:	609a      	str	r2, [r3, #8]
 8000710:	60da      	str	r2, [r3, #12]
 8000712:	611a      	str	r2, [r3, #16]
 8000714:	615a      	str	r2, [r3, #20]
 8000716:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000718:	4b36      	ldr	r3, [pc, #216]	; (80007f4 <MX_TIM4_Init+0x10c>)
 800071a:	4a37      	ldr	r2, [pc, #220]	; (80007f8 <MX_TIM4_Init+0x110>)
 800071c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800071e:	4b35      	ldr	r3, [pc, #212]	; (80007f4 <MX_TIM4_Init+0x10c>)
 8000720:	2200      	movs	r2, #0
 8000722:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000724:	4b33      	ldr	r3, [pc, #204]	; (80007f4 <MX_TIM4_Init+0x10c>)
 8000726:	2200      	movs	r2, #0
 8000728:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1;
 800072a:	4b32      	ldr	r3, [pc, #200]	; (80007f4 <MX_TIM4_Init+0x10c>)
 800072c:	2201      	movs	r2, #1
 800072e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000730:	4b30      	ldr	r3, [pc, #192]	; (80007f4 <MX_TIM4_Init+0x10c>)
 8000732:	2200      	movs	r2, #0
 8000734:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000736:	4b2f      	ldr	r3, [pc, #188]	; (80007f4 <MX_TIM4_Init+0x10c>)
 8000738:	2200      	movs	r2, #0
 800073a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800073c:	482d      	ldr	r0, [pc, #180]	; (80007f4 <MX_TIM4_Init+0x10c>)
 800073e:	f004 f876 	bl	800482e <HAL_TIM_Base_Init>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8000748:	f000 f956 	bl	80009f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800074c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000750:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000752:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000756:	4619      	mov	r1, r3
 8000758:	4826      	ldr	r0, [pc, #152]	; (80007f4 <MX_TIM4_Init+0x10c>)
 800075a:	f004 f96d 	bl	8004a38 <HAL_TIM_ConfigClockSource>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8000764:	f000 f948 	bl	80009f8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8000768:	4822      	ldr	r0, [pc, #136]	; (80007f4 <MX_TIM4_Init+0x10c>)
 800076a:	f004 f8af 	bl	80048cc <HAL_TIM_OC_Init>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8000774:	f000 f940 	bl	80009f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000778:	2300      	movs	r3, #0
 800077a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800077c:	2300      	movs	r3, #0
 800077e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000780:	f107 0320 	add.w	r3, r7, #32
 8000784:	4619      	mov	r1, r3
 8000786:	481b      	ldr	r0, [pc, #108]	; (80007f4 <MX_TIM4_Init+0x10c>)
 8000788:	f004 fd2e 	bl	80051e8 <HAL_TIMEx_MasterConfigSynchronization>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8000792:	f000 f931 	bl	80009f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000796:	2330      	movs	r3, #48	; 0x30
 8000798:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800079a:	2300      	movs	r3, #0
 800079c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800079e:	2300      	movs	r3, #0
 80007a0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007a2:	2300      	movs	r3, #0
 80007a4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007a6:	1d3b      	adds	r3, r7, #4
 80007a8:	2200      	movs	r2, #0
 80007aa:	4619      	mov	r1, r3
 80007ac:	4811      	ldr	r0, [pc, #68]	; (80007f4 <MX_TIM4_Init+0x10c>)
 80007ae:	f004 f8e7 	bl	8004980 <HAL_TIM_OC_ConfigChannel>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 80007b8:	f000 f91e 	bl	80009f8 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim4, TIM_CHANNEL_1);
 80007bc:	4b0d      	ldr	r3, [pc, #52]	; (80007f4 <MX_TIM4_Init+0x10c>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	699a      	ldr	r2, [r3, #24]
 80007c2:	4b0c      	ldr	r3, [pc, #48]	; (80007f4 <MX_TIM4_Init+0x10c>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	f042 0208 	orr.w	r2, r2, #8
 80007ca:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM4_Init 2 */
  TIM_CCxChannelCmd(TIM4, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80007cc:	2201      	movs	r2, #1
 80007ce:	2100      	movs	r1, #0
 80007d0:	4809      	ldr	r0, [pc, #36]	; (80007f8 <MX_TIM4_Init+0x110>)
 80007d2:	f004 fce3 	bl	800519c <TIM_CCxChannelCmd>
  __HAL_TIM_ENABLE(&htim4);
 80007d6:	4b07      	ldr	r3, [pc, #28]	; (80007f4 <MX_TIM4_Init+0x10c>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	681a      	ldr	r2, [r3, #0]
 80007dc:	4b05      	ldr	r3, [pc, #20]	; (80007f4 <MX_TIM4_Init+0x10c>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	f042 0201 	orr.w	r2, r2, #1
 80007e4:	601a      	str	r2, [r3, #0]

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80007e6:	4803      	ldr	r0, [pc, #12]	; (80007f4 <MX_TIM4_Init+0x10c>)
 80007e8:	f000 fa66 	bl	8000cb8 <HAL_TIM_MspPostInit>

}
 80007ec:	bf00      	nop
 80007ee:	3738      	adds	r7, #56	; 0x38
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	200000bc 	.word	0x200000bc
 80007f8:	40000800 	.word	0x40000800

080007fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b08c      	sub	sp, #48	; 0x30
 8000800:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000802:	f107 031c 	add.w	r3, r7, #28
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]
 800080e:	60da      	str	r2, [r3, #12]
 8000810:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	61bb      	str	r3, [r7, #24]
 8000816:	4b72      	ldr	r3, [pc, #456]	; (80009e0 <MX_GPIO_Init+0x1e4>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a71      	ldr	r2, [pc, #452]	; (80009e0 <MX_GPIO_Init+0x1e4>)
 800081c:	f043 0310 	orr.w	r3, r3, #16
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b6f      	ldr	r3, [pc, #444]	; (80009e0 <MX_GPIO_Init+0x1e4>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0310 	and.w	r3, r3, #16
 800082a:	61bb      	str	r3, [r7, #24]
 800082c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	617b      	str	r3, [r7, #20]
 8000832:	4b6b      	ldr	r3, [pc, #428]	; (80009e0 <MX_GPIO_Init+0x1e4>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a6a      	ldr	r2, [pc, #424]	; (80009e0 <MX_GPIO_Init+0x1e4>)
 8000838:	f043 0304 	orr.w	r3, r3, #4
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b68      	ldr	r3, [pc, #416]	; (80009e0 <MX_GPIO_Init+0x1e4>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0304 	and.w	r3, r3, #4
 8000846:	617b      	str	r3, [r7, #20]
 8000848:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	613b      	str	r3, [r7, #16]
 800084e:	4b64      	ldr	r3, [pc, #400]	; (80009e0 <MX_GPIO_Init+0x1e4>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a63      	ldr	r2, [pc, #396]	; (80009e0 <MX_GPIO_Init+0x1e4>)
 8000854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
 800085a:	4b61      	ldr	r3, [pc, #388]	; (80009e0 <MX_GPIO_Init+0x1e4>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000862:	613b      	str	r3, [r7, #16]
 8000864:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	60fb      	str	r3, [r7, #12]
 800086a:	4b5d      	ldr	r3, [pc, #372]	; (80009e0 <MX_GPIO_Init+0x1e4>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	4a5c      	ldr	r2, [pc, #368]	; (80009e0 <MX_GPIO_Init+0x1e4>)
 8000870:	f043 0301 	orr.w	r3, r3, #1
 8000874:	6313      	str	r3, [r2, #48]	; 0x30
 8000876:	4b5a      	ldr	r3, [pc, #360]	; (80009e0 <MX_GPIO_Init+0x1e4>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	60bb      	str	r3, [r7, #8]
 8000886:	4b56      	ldr	r3, [pc, #344]	; (80009e0 <MX_GPIO_Init+0x1e4>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	4a55      	ldr	r2, [pc, #340]	; (80009e0 <MX_GPIO_Init+0x1e4>)
 800088c:	f043 0302 	orr.w	r3, r3, #2
 8000890:	6313      	str	r3, [r2, #48]	; 0x30
 8000892:	4b53      	ldr	r3, [pc, #332]	; (80009e0 <MX_GPIO_Init+0x1e4>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	f003 0302 	and.w	r3, r3, #2
 800089a:	60bb      	str	r3, [r7, #8]
 800089c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	607b      	str	r3, [r7, #4]
 80008a2:	4b4f      	ldr	r3, [pc, #316]	; (80009e0 <MX_GPIO_Init+0x1e4>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	4a4e      	ldr	r2, [pc, #312]	; (80009e0 <MX_GPIO_Init+0x1e4>)
 80008a8:	f043 0308 	orr.w	r3, r3, #8
 80008ac:	6313      	str	r3, [r2, #48]	; 0x30
 80008ae:	4b4c      	ldr	r3, [pc, #304]	; (80009e0 <MX_GPIO_Init+0x1e4>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	f003 0308 	and.w	r3, r3, #8
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008ba:	2200      	movs	r2, #0
 80008bc:	2108      	movs	r1, #8
 80008be:	4849      	ldr	r0, [pc, #292]	; (80009e4 <MX_GPIO_Init+0x1e8>)
 80008c0:	f000 fe1e 	bl	8001500 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008c4:	2201      	movs	r2, #1
 80008c6:	2101      	movs	r1, #1
 80008c8:	4847      	ldr	r0, [pc, #284]	; (80009e8 <MX_GPIO_Init+0x1ec>)
 80008ca:	f000 fe19 	bl	8001500 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD3_Pin|LD5_Pin|LD6_Pin|Audio_RST_Pin, GPIO_PIN_RESET);
 80008ce:	2200      	movs	r2, #0
 80008d0:	f24e 0110 	movw	r1, #57360	; 0xe010
 80008d4:	4845      	ldr	r0, [pc, #276]	; (80009ec <MX_GPIO_Init+0x1f0>)
 80008d6:	f000 fe13 	bl	8001500 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008da:	2308      	movs	r3, #8
 80008dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008de:	2301      	movs	r3, #1
 80008e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e6:	2300      	movs	r3, #0
 80008e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	4619      	mov	r1, r3
 80008f0:	483c      	ldr	r0, [pc, #240]	; (80009e4 <MX_GPIO_Init+0x1e8>)
 80008f2:	f000 fc69 	bl	80011c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008f6:	2301      	movs	r3, #1
 80008f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fa:	2301      	movs	r3, #1
 80008fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000902:	2300      	movs	r3, #0
 8000904:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000906:	f107 031c 	add.w	r3, r7, #28
 800090a:	4619      	mov	r1, r3
 800090c:	4836      	ldr	r0, [pc, #216]	; (80009e8 <MX_GPIO_Init+0x1ec>)
 800090e:	f000 fc5b 	bl	80011c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000912:	2308      	movs	r3, #8
 8000914:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000916:	2302      	movs	r3, #2
 8000918:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091e:	2300      	movs	r3, #0
 8000920:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000922:	2305      	movs	r3, #5
 8000924:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000926:	f107 031c 	add.w	r3, r7, #28
 800092a:	4619      	mov	r1, r3
 800092c:	482e      	ldr	r0, [pc, #184]	; (80009e8 <MX_GPIO_Init+0x1ec>)
 800092e:	f000 fc4b 	bl	80011c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000932:	2301      	movs	r3, #1
 8000934:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000936:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800093a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000940:	f107 031c 	add.w	r3, r7, #28
 8000944:	4619      	mov	r1, r3
 8000946:	482a      	ldr	r0, [pc, #168]	; (80009f0 <MX_GPIO_Init+0x1f4>)
 8000948:	f000 fc3e 	bl	80011c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800094c:	2304      	movs	r3, #4
 800094e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000950:	2300      	movs	r3, #0
 8000952:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000958:	f107 031c 	add.w	r3, r7, #28
 800095c:	4619      	mov	r1, r3
 800095e:	4825      	ldr	r0, [pc, #148]	; (80009f4 <MX_GPIO_Init+0x1f8>)
 8000960:	f000 fc32 	bl	80011c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000964:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000968:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096a:	2302      	movs	r3, #2
 800096c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000972:	2300      	movs	r3, #0
 8000974:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000976:	2305      	movs	r3, #5
 8000978:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800097a:	f107 031c 	add.w	r3, r7, #28
 800097e:	4619      	mov	r1, r3
 8000980:	481c      	ldr	r0, [pc, #112]	; (80009f4 <MX_GPIO_Init+0x1f8>)
 8000982:	f000 fc21 	bl	80011c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD5_Pin LD6_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD5_Pin|LD6_Pin|Audio_RST_Pin;
 8000986:	f24e 0310 	movw	r3, #57360	; 0xe010
 800098a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098c:	2301      	movs	r3, #1
 800098e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000994:	2300      	movs	r3, #0
 8000996:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000998:	f107 031c 	add.w	r3, r7, #28
 800099c:	4619      	mov	r1, r3
 800099e:	4813      	ldr	r0, [pc, #76]	; (80009ec <MX_GPIO_Init+0x1f0>)
 80009a0:	f000 fc12 	bl	80011c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009a4:	2320      	movs	r3, #32
 80009a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a8:	2300      	movs	r3, #0
 80009aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009b0:	f107 031c 	add.w	r3, r7, #28
 80009b4:	4619      	mov	r1, r3
 80009b6:	480d      	ldr	r0, [pc, #52]	; (80009ec <MX_GPIO_Init+0x1f0>)
 80009b8:	f000 fc06 	bl	80011c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009bc:	2302      	movs	r3, #2
 80009be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009c0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009ca:	f107 031c 	add.w	r3, r7, #28
 80009ce:	4619      	mov	r1, r3
 80009d0:	4804      	ldr	r0, [pc, #16]	; (80009e4 <MX_GPIO_Init+0x1e8>)
 80009d2:	f000 fbf9 	bl	80011c8 <HAL_GPIO_Init>

}
 80009d6:	bf00      	nop
 80009d8:	3730      	adds	r7, #48	; 0x30
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40023800 	.word	0x40023800
 80009e4:	40021000 	.word	0x40021000
 80009e8:	40020800 	.word	0x40020800
 80009ec:	40020c00 	.word	0x40020c00
 80009f0:	40020000 	.word	0x40020000
 80009f4:	40020400 	.word	0x40020400

080009f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009fc:	b672      	cpsid	i
}
 80009fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a00:	e7fe      	b.n	8000a00 <Error_Handler+0x8>
	...

08000a04 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	607b      	str	r3, [r7, #4]
 8000a0e:	4b10      	ldr	r3, [pc, #64]	; (8000a50 <HAL_MspInit+0x4c>)
 8000a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a12:	4a0f      	ldr	r2, [pc, #60]	; (8000a50 <HAL_MspInit+0x4c>)
 8000a14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a18:	6453      	str	r3, [r2, #68]	; 0x44
 8000a1a:	4b0d      	ldr	r3, [pc, #52]	; (8000a50 <HAL_MspInit+0x4c>)
 8000a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a22:	607b      	str	r3, [r7, #4]
 8000a24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	603b      	str	r3, [r7, #0]
 8000a2a:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <HAL_MspInit+0x4c>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2e:	4a08      	ldr	r2, [pc, #32]	; (8000a50 <HAL_MspInit+0x4c>)
 8000a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a34:	6413      	str	r3, [r2, #64]	; 0x40
 8000a36:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <HAL_MspInit+0x4c>)
 8000a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a3e:	603b      	str	r3, [r7, #0]
 8000a40:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a42:	2007      	movs	r0, #7
 8000a44:	f000 fb7e 	bl	8001144 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a48:	bf00      	nop
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	40023800 	.word	0x40023800

08000a54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08a      	sub	sp, #40	; 0x28
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a19      	ldr	r2, [pc, #100]	; (8000ad8 <HAL_I2C_MspInit+0x84>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d12c      	bne.n	8000ad0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	613b      	str	r3, [r7, #16]
 8000a7a:	4b18      	ldr	r3, [pc, #96]	; (8000adc <HAL_I2C_MspInit+0x88>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a17      	ldr	r2, [pc, #92]	; (8000adc <HAL_I2C_MspInit+0x88>)
 8000a80:	f043 0302 	orr.w	r3, r3, #2
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b15      	ldr	r3, [pc, #84]	; (8000adc <HAL_I2C_MspInit+0x88>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0302 	and.w	r3, r3, #2
 8000a8e:	613b      	str	r3, [r7, #16]
 8000a90:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a92:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a98:	2312      	movs	r3, #18
 8000a9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000aa4:	2304      	movs	r3, #4
 8000aa6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	4619      	mov	r1, r3
 8000aae:	480c      	ldr	r0, [pc, #48]	; (8000ae0 <HAL_I2C_MspInit+0x8c>)
 8000ab0:	f000 fb8a 	bl	80011c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	4b08      	ldr	r3, [pc, #32]	; (8000adc <HAL_I2C_MspInit+0x88>)
 8000aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abc:	4a07      	ldr	r2, [pc, #28]	; (8000adc <HAL_I2C_MspInit+0x88>)
 8000abe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ac2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac4:	4b05      	ldr	r3, [pc, #20]	; (8000adc <HAL_I2C_MspInit+0x88>)
 8000ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000acc:	60fb      	str	r3, [r7, #12]
 8000ace:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ad0:	bf00      	nop
 8000ad2:	3728      	adds	r7, #40	; 0x28
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40005400 	.word	0x40005400
 8000adc:	40023800 	.word	0x40023800
 8000ae0:	40020400 	.word	0x40020400

08000ae4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b08e      	sub	sp, #56	; 0x38
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	605a      	str	r2, [r3, #4]
 8000af6:	609a      	str	r2, [r3, #8]
 8000af8:	60da      	str	r2, [r3, #12]
 8000afa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000afc:	f107 0314 	add.w	r3, r7, #20
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a31      	ldr	r2, [pc, #196]	; (8000bd4 <HAL_I2S_MspInit+0xf0>)
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d15a      	bne.n	8000bca <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b14:	2301      	movs	r3, #1
 8000b16:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000b18:	23c0      	movs	r3, #192	; 0xc0
 8000b1a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b20:	f107 0314 	add.w	r3, r7, #20
 8000b24:	4618      	mov	r0, r3
 8000b26:	f003 fcb9 	bl	800449c <HAL_RCCEx_PeriphCLKConfig>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000b30:	f7ff ff62 	bl	80009f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b34:	2300      	movs	r3, #0
 8000b36:	613b      	str	r3, [r7, #16]
 8000b38:	4b27      	ldr	r3, [pc, #156]	; (8000bd8 <HAL_I2S_MspInit+0xf4>)
 8000b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3c:	4a26      	ldr	r2, [pc, #152]	; (8000bd8 <HAL_I2S_MspInit+0xf4>)
 8000b3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b42:	6413      	str	r3, [r2, #64]	; 0x40
 8000b44:	4b24      	ldr	r3, [pc, #144]	; (8000bd8 <HAL_I2S_MspInit+0xf4>)
 8000b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b4c:	613b      	str	r3, [r7, #16]
 8000b4e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b50:	2300      	movs	r3, #0
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	4b20      	ldr	r3, [pc, #128]	; (8000bd8 <HAL_I2S_MspInit+0xf4>)
 8000b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b58:	4a1f      	ldr	r2, [pc, #124]	; (8000bd8 <HAL_I2S_MspInit+0xf4>)
 8000b5a:	f043 0301 	orr.w	r3, r3, #1
 8000b5e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b60:	4b1d      	ldr	r3, [pc, #116]	; (8000bd8 <HAL_I2S_MspInit+0xf4>)
 8000b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b64:	f003 0301 	and.w	r3, r3, #1
 8000b68:	60fb      	str	r3, [r7, #12]
 8000b6a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	60bb      	str	r3, [r7, #8]
 8000b70:	4b19      	ldr	r3, [pc, #100]	; (8000bd8 <HAL_I2S_MspInit+0xf4>)
 8000b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b74:	4a18      	ldr	r2, [pc, #96]	; (8000bd8 <HAL_I2S_MspInit+0xf4>)
 8000b76:	f043 0304 	orr.w	r3, r3, #4
 8000b7a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7c:	4b16      	ldr	r3, [pc, #88]	; (8000bd8 <HAL_I2S_MspInit+0xf4>)
 8000b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b80:	f003 0304 	and.w	r3, r3, #4
 8000b84:	60bb      	str	r3, [r7, #8]
 8000b86:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b88:	2310      	movs	r3, #16
 8000b8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b94:	2300      	movs	r3, #0
 8000b96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b98:	2306      	movs	r3, #6
 8000b9a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000b9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	480e      	ldr	r0, [pc, #56]	; (8000bdc <HAL_I2S_MspInit+0xf8>)
 8000ba4:	f000 fb10 	bl	80011c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000ba8:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000bac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bba:	2306      	movs	r3, #6
 8000bbc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4806      	ldr	r0, [pc, #24]	; (8000be0 <HAL_I2S_MspInit+0xfc>)
 8000bc6:	f000 faff 	bl	80011c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000bca:	bf00      	nop
 8000bcc:	3738      	adds	r7, #56	; 0x38
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	40003c00 	.word	0x40003c00
 8000bd8:	40023800 	.word	0x40023800
 8000bdc:	40020000 	.word	0x40020000
 8000be0:	40020800 	.word	0x40020800

08000be4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	; 0x28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a19      	ldr	r2, [pc, #100]	; (8000c68 <HAL_SPI_MspInit+0x84>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d12b      	bne.n	8000c5e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	613b      	str	r3, [r7, #16]
 8000c0a:	4b18      	ldr	r3, [pc, #96]	; (8000c6c <HAL_SPI_MspInit+0x88>)
 8000c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0e:	4a17      	ldr	r2, [pc, #92]	; (8000c6c <HAL_SPI_MspInit+0x88>)
 8000c10:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c14:	6453      	str	r3, [r2, #68]	; 0x44
 8000c16:	4b15      	ldr	r3, [pc, #84]	; (8000c6c <HAL_SPI_MspInit+0x88>)
 8000c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c1e:	613b      	str	r3, [r7, #16]
 8000c20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	60fb      	str	r3, [r7, #12]
 8000c26:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <HAL_SPI_MspInit+0x88>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	4a10      	ldr	r2, [pc, #64]	; (8000c6c <HAL_SPI_MspInit+0x88>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	6313      	str	r3, [r2, #48]	; 0x30
 8000c32:	4b0e      	ldr	r3, [pc, #56]	; (8000c6c <HAL_SPI_MspInit+0x88>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	f003 0301 	and.w	r3, r3, #1
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c3e:	23e0      	movs	r3, #224	; 0xe0
 8000c40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c42:	2302      	movs	r3, #2
 8000c44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c4e:	2305      	movs	r3, #5
 8000c50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c52:	f107 0314 	add.w	r3, r7, #20
 8000c56:	4619      	mov	r1, r3
 8000c58:	4805      	ldr	r0, [pc, #20]	; (8000c70 <HAL_SPI_MspInit+0x8c>)
 8000c5a:	f000 fab5 	bl	80011c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c5e:	bf00      	nop
 8000c60:	3728      	adds	r7, #40	; 0x28
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40013000 	.word	0x40013000
 8000c6c:	40023800 	.word	0x40023800
 8000c70:	40020000 	.word	0x40020000

08000c74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a0b      	ldr	r2, [pc, #44]	; (8000cb0 <HAL_TIM_Base_MspInit+0x3c>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d10d      	bne.n	8000ca2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	60fb      	str	r3, [r7, #12]
 8000c8a:	4b0a      	ldr	r3, [pc, #40]	; (8000cb4 <HAL_TIM_Base_MspInit+0x40>)
 8000c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8e:	4a09      	ldr	r2, [pc, #36]	; (8000cb4 <HAL_TIM_Base_MspInit+0x40>)
 8000c90:	f043 0304 	orr.w	r3, r3, #4
 8000c94:	6413      	str	r3, [r2, #64]	; 0x40
 8000c96:	4b07      	ldr	r3, [pc, #28]	; (8000cb4 <HAL_TIM_Base_MspInit+0x40>)
 8000c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9a:	f003 0304 	and.w	r3, r3, #4
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000ca2:	bf00      	nop
 8000ca4:	3714      	adds	r7, #20
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	40000800 	.word	0x40000800
 8000cb4:	40023800 	.word	0x40023800

08000cb8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b088      	sub	sp, #32
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc0:	f107 030c 	add.w	r3, r7, #12
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	60da      	str	r2, [r3, #12]
 8000cce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a12      	ldr	r2, [pc, #72]	; (8000d20 <HAL_TIM_MspPostInit+0x68>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d11e      	bne.n	8000d18 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60bb      	str	r3, [r7, #8]
 8000cde:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <HAL_TIM_MspPostInit+0x6c>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	4a10      	ldr	r2, [pc, #64]	; (8000d24 <HAL_TIM_MspPostInit+0x6c>)
 8000ce4:	f043 0308 	orr.w	r3, r3, #8
 8000ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cea:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <HAL_TIM_MspPostInit+0x6c>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	f003 0308 	and.w	r3, r3, #8
 8000cf2:	60bb      	str	r3, [r7, #8]
 8000cf4:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000cf6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cfa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d04:	2300      	movs	r3, #0
 8000d06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d0c:	f107 030c 	add.w	r3, r7, #12
 8000d10:	4619      	mov	r1, r3
 8000d12:	4805      	ldr	r0, [pc, #20]	; (8000d28 <HAL_TIM_MspPostInit+0x70>)
 8000d14:	f000 fa58 	bl	80011c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000d18:	bf00      	nop
 8000d1a:	3720      	adds	r7, #32
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	40000800 	.word	0x40000800
 8000d24:	40023800 	.word	0x40023800
 8000d28:	40020c00 	.word	0x40020c00

08000d2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d30:	e7fe      	b.n	8000d30 <NMI_Handler+0x4>

08000d32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d36:	e7fe      	b.n	8000d36 <HardFault_Handler+0x4>

08000d38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d3c:	e7fe      	b.n	8000d3c <MemManage_Handler+0x4>

08000d3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d42:	e7fe      	b.n	8000d42 <BusFault_Handler+0x4>

08000d44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d48:	e7fe      	b.n	8000d48 <UsageFault_Handler+0x4>

08000d4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr

08000d58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr

08000d66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr

08000d74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d78:	f000 f8d0 	bl	8000f1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d7c:	bf00      	nop
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000d84:	4802      	ldr	r0, [pc, #8]	; (8000d90 <OTG_FS_IRQHandler+0x10>)
 8000d86:	f000 fe3f 	bl	8001a08 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	200005d4 	.word	0x200005d4

08000d94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b086      	sub	sp, #24
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d9c:	4a14      	ldr	r2, [pc, #80]	; (8000df0 <_sbrk+0x5c>)
 8000d9e:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <_sbrk+0x60>)
 8000da0:	1ad3      	subs	r3, r2, r3
 8000da2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000da8:	4b13      	ldr	r3, [pc, #76]	; (8000df8 <_sbrk+0x64>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d102      	bne.n	8000db6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000db0:	4b11      	ldr	r3, [pc, #68]	; (8000df8 <_sbrk+0x64>)
 8000db2:	4a12      	ldr	r2, [pc, #72]	; (8000dfc <_sbrk+0x68>)
 8000db4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000db6:	4b10      	ldr	r3, [pc, #64]	; (8000df8 <_sbrk+0x64>)
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4413      	add	r3, r2
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	d207      	bcs.n	8000dd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dc4:	f007 fc40 	bl	8008648 <__errno>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	220c      	movs	r2, #12
 8000dcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dce:	f04f 33ff 	mov.w	r3, #4294967295
 8000dd2:	e009      	b.n	8000de8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dd4:	4b08      	ldr	r3, [pc, #32]	; (8000df8 <_sbrk+0x64>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dda:	4b07      	ldr	r3, [pc, #28]	; (8000df8 <_sbrk+0x64>)
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4413      	add	r3, r2
 8000de2:	4a05      	ldr	r2, [pc, #20]	; (8000df8 <_sbrk+0x64>)
 8000de4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000de6:	68fb      	ldr	r3, [r7, #12]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3718      	adds	r7, #24
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	20020000 	.word	0x20020000
 8000df4:	00000400 	.word	0x00000400
 8000df8:	200000ac 	.word	0x200000ac
 8000dfc:	200008e8 	.word	0x200008e8

08000e00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e04:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <SystemInit+0x20>)
 8000e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e0a:	4a05      	ldr	r2, [pc, #20]	; (8000e20 <SystemInit+0x20>)
 8000e0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	e000ed00 	.word	0xe000ed00

08000e24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e28:	480d      	ldr	r0, [pc, #52]	; (8000e60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e2a:	490e      	ldr	r1, [pc, #56]	; (8000e64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e2c:	4a0e      	ldr	r2, [pc, #56]	; (8000e68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e30:	e002      	b.n	8000e38 <LoopCopyDataInit>

08000e32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e36:	3304      	adds	r3, #4

08000e38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e3c:	d3f9      	bcc.n	8000e32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e3e:	4a0b      	ldr	r2, [pc, #44]	; (8000e6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e40:	4c0b      	ldr	r4, [pc, #44]	; (8000e70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e44:	e001      	b.n	8000e4a <LoopFillZerobss>

08000e46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e48:	3204      	adds	r2, #4

08000e4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e4c:	d3fb      	bcc.n	8000e46 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e4e:	f7ff ffd7 	bl	8000e00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e52:	f007 fbff 	bl	8008654 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e56:	f7ff fb33 	bl	80004c0 <main>
  bx  lr    
 8000e5a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e64:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000e68:	080088a0 	.word	0x080088a0
  ldr r2, =_sbss
 8000e6c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000e70:	200008e8 	.word	0x200008e8

08000e74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e74:	e7fe      	b.n	8000e74 <ADC_IRQHandler>
	...

08000e78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e7c:	4b0e      	ldr	r3, [pc, #56]	; (8000eb8 <HAL_Init+0x40>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a0d      	ldr	r2, [pc, #52]	; (8000eb8 <HAL_Init+0x40>)
 8000e82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e88:	4b0b      	ldr	r3, [pc, #44]	; (8000eb8 <HAL_Init+0x40>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a0a      	ldr	r2, [pc, #40]	; (8000eb8 <HAL_Init+0x40>)
 8000e8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e94:	4b08      	ldr	r3, [pc, #32]	; (8000eb8 <HAL_Init+0x40>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a07      	ldr	r2, [pc, #28]	; (8000eb8 <HAL_Init+0x40>)
 8000e9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ea0:	2003      	movs	r0, #3
 8000ea2:	f000 f94f 	bl	8001144 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ea6:	2000      	movs	r0, #0
 8000ea8:	f000 f808 	bl	8000ebc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eac:	f7ff fdaa 	bl	8000a04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eb0:	2300      	movs	r3, #0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40023c00 	.word	0x40023c00

08000ebc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ec4:	4b12      	ldr	r3, [pc, #72]	; (8000f10 <HAL_InitTick+0x54>)
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	4b12      	ldr	r3, [pc, #72]	; (8000f14 <HAL_InitTick+0x58>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	4619      	mov	r1, r3
 8000ece:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ed2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eda:	4618      	mov	r0, r3
 8000edc:	f000 f967 	bl	80011ae <HAL_SYSTICK_Config>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e00e      	b.n	8000f08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2b0f      	cmp	r3, #15
 8000eee:	d80a      	bhi.n	8000f06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	6879      	ldr	r1, [r7, #4]
 8000ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef8:	f000 f92f 	bl	800115a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000efc:	4a06      	ldr	r2, [pc, #24]	; (8000f18 <HAL_InitTick+0x5c>)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f02:	2300      	movs	r3, #0
 8000f04:	e000      	b.n	8000f08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	20000000 	.word	0x20000000
 8000f14:	20000008 	.word	0x20000008
 8000f18:	20000004 	.word	0x20000004

08000f1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f20:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <HAL_IncTick+0x20>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	461a      	mov	r2, r3
 8000f26:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <HAL_IncTick+0x24>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	4a04      	ldr	r2, [pc, #16]	; (8000f40 <HAL_IncTick+0x24>)
 8000f2e:	6013      	str	r3, [r2, #0]
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	20000008 	.word	0x20000008
 8000f40:	200001f8 	.word	0x200001f8

08000f44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  return uwTick;
 8000f48:	4b03      	ldr	r3, [pc, #12]	; (8000f58 <HAL_GetTick+0x14>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	200001f8 	.word	0x200001f8

08000f5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f64:	f7ff ffee 	bl	8000f44 <HAL_GetTick>
 8000f68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f74:	d005      	beq.n	8000f82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f76:	4b0a      	ldr	r3, [pc, #40]	; (8000fa0 <HAL_Delay+0x44>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	4413      	add	r3, r2
 8000f80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f82:	bf00      	nop
 8000f84:	f7ff ffde 	bl	8000f44 <HAL_GetTick>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	68fa      	ldr	r2, [r7, #12]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d8f7      	bhi.n	8000f84 <HAL_Delay+0x28>
  {
  }
}
 8000f94:	bf00      	nop
 8000f96:	bf00      	nop
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	20000008 	.word	0x20000008

08000fa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b085      	sub	sp, #20
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f003 0307 	and.w	r3, r3, #7
 8000fb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fb4:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fba:	68ba      	ldr	r2, [r7, #8]
 8000fbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fd6:	4a04      	ldr	r2, [pc, #16]	; (8000fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	60d3      	str	r3, [r2, #12]
}
 8000fdc:	bf00      	nop
 8000fde:	3714      	adds	r7, #20
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	e000ed00 	.word	0xe000ed00

08000fec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ff0:	4b04      	ldr	r3, [pc, #16]	; (8001004 <__NVIC_GetPriorityGrouping+0x18>)
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	0a1b      	lsrs	r3, r3, #8
 8000ff6:	f003 0307 	and.w	r3, r3, #7
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001016:	2b00      	cmp	r3, #0
 8001018:	db0b      	blt.n	8001032 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800101a:	79fb      	ldrb	r3, [r7, #7]
 800101c:	f003 021f 	and.w	r2, r3, #31
 8001020:	4907      	ldr	r1, [pc, #28]	; (8001040 <__NVIC_EnableIRQ+0x38>)
 8001022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001026:	095b      	lsrs	r3, r3, #5
 8001028:	2001      	movs	r0, #1
 800102a:	fa00 f202 	lsl.w	r2, r0, r2
 800102e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001032:	bf00      	nop
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	e000e100 	.word	0xe000e100

08001044 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	6039      	str	r1, [r7, #0]
 800104e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001054:	2b00      	cmp	r3, #0
 8001056:	db0a      	blt.n	800106e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	b2da      	uxtb	r2, r3
 800105c:	490c      	ldr	r1, [pc, #48]	; (8001090 <__NVIC_SetPriority+0x4c>)
 800105e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001062:	0112      	lsls	r2, r2, #4
 8001064:	b2d2      	uxtb	r2, r2
 8001066:	440b      	add	r3, r1
 8001068:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800106c:	e00a      	b.n	8001084 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	b2da      	uxtb	r2, r3
 8001072:	4908      	ldr	r1, [pc, #32]	; (8001094 <__NVIC_SetPriority+0x50>)
 8001074:	79fb      	ldrb	r3, [r7, #7]
 8001076:	f003 030f 	and.w	r3, r3, #15
 800107a:	3b04      	subs	r3, #4
 800107c:	0112      	lsls	r2, r2, #4
 800107e:	b2d2      	uxtb	r2, r2
 8001080:	440b      	add	r3, r1
 8001082:	761a      	strb	r2, [r3, #24]
}
 8001084:	bf00      	nop
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	e000e100 	.word	0xe000e100
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001098:	b480      	push	{r7}
 800109a:	b089      	sub	sp, #36	; 0x24
 800109c:	af00      	add	r7, sp, #0
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	f003 0307 	and.w	r3, r3, #7
 80010aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	f1c3 0307 	rsb	r3, r3, #7
 80010b2:	2b04      	cmp	r3, #4
 80010b4:	bf28      	it	cs
 80010b6:	2304      	movcs	r3, #4
 80010b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	3304      	adds	r3, #4
 80010be:	2b06      	cmp	r3, #6
 80010c0:	d902      	bls.n	80010c8 <NVIC_EncodePriority+0x30>
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	3b03      	subs	r3, #3
 80010c6:	e000      	b.n	80010ca <NVIC_EncodePriority+0x32>
 80010c8:	2300      	movs	r3, #0
 80010ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010cc:	f04f 32ff 	mov.w	r2, #4294967295
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	43da      	mvns	r2, r3
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	401a      	ands	r2, r3
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010e0:	f04f 31ff 	mov.w	r1, #4294967295
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	fa01 f303 	lsl.w	r3, r1, r3
 80010ea:	43d9      	mvns	r1, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f0:	4313      	orrs	r3, r2
         );
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3724      	adds	r7, #36	; 0x24
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
	...

08001100 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	3b01      	subs	r3, #1
 800110c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001110:	d301      	bcc.n	8001116 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001112:	2301      	movs	r3, #1
 8001114:	e00f      	b.n	8001136 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001116:	4a0a      	ldr	r2, [pc, #40]	; (8001140 <SysTick_Config+0x40>)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	3b01      	subs	r3, #1
 800111c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800111e:	210f      	movs	r1, #15
 8001120:	f04f 30ff 	mov.w	r0, #4294967295
 8001124:	f7ff ff8e 	bl	8001044 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001128:	4b05      	ldr	r3, [pc, #20]	; (8001140 <SysTick_Config+0x40>)
 800112a:	2200      	movs	r2, #0
 800112c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800112e:	4b04      	ldr	r3, [pc, #16]	; (8001140 <SysTick_Config+0x40>)
 8001130:	2207      	movs	r2, #7
 8001132:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001134:	2300      	movs	r3, #0
}
 8001136:	4618      	mov	r0, r3
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	e000e010 	.word	0xe000e010

08001144 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f7ff ff29 	bl	8000fa4 <__NVIC_SetPriorityGrouping>
}
 8001152:	bf00      	nop
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800115a:	b580      	push	{r7, lr}
 800115c:	b086      	sub	sp, #24
 800115e:	af00      	add	r7, sp, #0
 8001160:	4603      	mov	r3, r0
 8001162:	60b9      	str	r1, [r7, #8]
 8001164:	607a      	str	r2, [r7, #4]
 8001166:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001168:	2300      	movs	r3, #0
 800116a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800116c:	f7ff ff3e 	bl	8000fec <__NVIC_GetPriorityGrouping>
 8001170:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001172:	687a      	ldr	r2, [r7, #4]
 8001174:	68b9      	ldr	r1, [r7, #8]
 8001176:	6978      	ldr	r0, [r7, #20]
 8001178:	f7ff ff8e 	bl	8001098 <NVIC_EncodePriority>
 800117c:	4602      	mov	r2, r0
 800117e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001182:	4611      	mov	r1, r2
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff ff5d 	bl	8001044 <__NVIC_SetPriority>
}
 800118a:	bf00      	nop
 800118c:	3718      	adds	r7, #24
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001192:	b580      	push	{r7, lr}
 8001194:	b082      	sub	sp, #8
 8001196:	af00      	add	r7, sp, #0
 8001198:	4603      	mov	r3, r0
 800119a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800119c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff ff31 	bl	8001008 <__NVIC_EnableIRQ>
}
 80011a6:	bf00      	nop
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b082      	sub	sp, #8
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f7ff ffa2 	bl	8001100 <SysTick_Config>
 80011bc:	4603      	mov	r3, r0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
	...

080011c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b089      	sub	sp, #36	; 0x24
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011d2:	2300      	movs	r3, #0
 80011d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011d6:	2300      	movs	r3, #0
 80011d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011da:	2300      	movs	r3, #0
 80011dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011de:	2300      	movs	r3, #0
 80011e0:	61fb      	str	r3, [r7, #28]
 80011e2:	e16b      	b.n	80014bc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011e4:	2201      	movs	r2, #1
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	697a      	ldr	r2, [r7, #20]
 80011f4:	4013      	ands	r3, r2
 80011f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011f8:	693a      	ldr	r2, [r7, #16]
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	f040 815a 	bne.w	80014b6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f003 0303 	and.w	r3, r3, #3
 800120a:	2b01      	cmp	r3, #1
 800120c:	d005      	beq.n	800121a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001216:	2b02      	cmp	r3, #2
 8001218:	d130      	bne.n	800127c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	2203      	movs	r2, #3
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	43db      	mvns	r3, r3
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	4013      	ands	r3, r2
 8001230:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	68da      	ldr	r2, [r3, #12]
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	4313      	orrs	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001250:	2201      	movs	r2, #1
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	43db      	mvns	r3, r3
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	4013      	ands	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	091b      	lsrs	r3, r3, #4
 8001266:	f003 0201 	and.w	r2, r3, #1
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4313      	orrs	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f003 0303 	and.w	r3, r3, #3
 8001284:	2b03      	cmp	r3, #3
 8001286:	d017      	beq.n	80012b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	2203      	movs	r2, #3
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	43db      	mvns	r3, r3
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	4013      	ands	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	689a      	ldr	r2, [r3, #8]
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f003 0303 	and.w	r3, r3, #3
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d123      	bne.n	800130c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	08da      	lsrs	r2, r3, #3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	3208      	adds	r2, #8
 80012cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	f003 0307 	and.w	r3, r3, #7
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	220f      	movs	r2, #15
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	43db      	mvns	r3, r3
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	4013      	ands	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	691a      	ldr	r2, [r3, #16]
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	f003 0307 	and.w	r3, r3, #7
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	08da      	lsrs	r2, r3, #3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	3208      	adds	r2, #8
 8001306:	69b9      	ldr	r1, [r7, #24]
 8001308:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	2203      	movs	r2, #3
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	43db      	mvns	r3, r3
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	4013      	ands	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f003 0203 	and.w	r2, r3, #3
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	4313      	orrs	r3, r2
 8001338:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001348:	2b00      	cmp	r3, #0
 800134a:	f000 80b4 	beq.w	80014b6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	60fb      	str	r3, [r7, #12]
 8001352:	4b60      	ldr	r3, [pc, #384]	; (80014d4 <HAL_GPIO_Init+0x30c>)
 8001354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001356:	4a5f      	ldr	r2, [pc, #380]	; (80014d4 <HAL_GPIO_Init+0x30c>)
 8001358:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800135c:	6453      	str	r3, [r2, #68]	; 0x44
 800135e:	4b5d      	ldr	r3, [pc, #372]	; (80014d4 <HAL_GPIO_Init+0x30c>)
 8001360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001362:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800136a:	4a5b      	ldr	r2, [pc, #364]	; (80014d8 <HAL_GPIO_Init+0x310>)
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	089b      	lsrs	r3, r3, #2
 8001370:	3302      	adds	r3, #2
 8001372:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001376:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	f003 0303 	and.w	r3, r3, #3
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	220f      	movs	r2, #15
 8001382:	fa02 f303 	lsl.w	r3, r2, r3
 8001386:	43db      	mvns	r3, r3
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	4013      	ands	r3, r2
 800138c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a52      	ldr	r2, [pc, #328]	; (80014dc <HAL_GPIO_Init+0x314>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d02b      	beq.n	80013ee <HAL_GPIO_Init+0x226>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a51      	ldr	r2, [pc, #324]	; (80014e0 <HAL_GPIO_Init+0x318>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d025      	beq.n	80013ea <HAL_GPIO_Init+0x222>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a50      	ldr	r2, [pc, #320]	; (80014e4 <HAL_GPIO_Init+0x31c>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d01f      	beq.n	80013e6 <HAL_GPIO_Init+0x21e>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a4f      	ldr	r2, [pc, #316]	; (80014e8 <HAL_GPIO_Init+0x320>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d019      	beq.n	80013e2 <HAL_GPIO_Init+0x21a>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a4e      	ldr	r2, [pc, #312]	; (80014ec <HAL_GPIO_Init+0x324>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d013      	beq.n	80013de <HAL_GPIO_Init+0x216>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a4d      	ldr	r2, [pc, #308]	; (80014f0 <HAL_GPIO_Init+0x328>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d00d      	beq.n	80013da <HAL_GPIO_Init+0x212>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a4c      	ldr	r2, [pc, #304]	; (80014f4 <HAL_GPIO_Init+0x32c>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d007      	beq.n	80013d6 <HAL_GPIO_Init+0x20e>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a4b      	ldr	r2, [pc, #300]	; (80014f8 <HAL_GPIO_Init+0x330>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d101      	bne.n	80013d2 <HAL_GPIO_Init+0x20a>
 80013ce:	2307      	movs	r3, #7
 80013d0:	e00e      	b.n	80013f0 <HAL_GPIO_Init+0x228>
 80013d2:	2308      	movs	r3, #8
 80013d4:	e00c      	b.n	80013f0 <HAL_GPIO_Init+0x228>
 80013d6:	2306      	movs	r3, #6
 80013d8:	e00a      	b.n	80013f0 <HAL_GPIO_Init+0x228>
 80013da:	2305      	movs	r3, #5
 80013dc:	e008      	b.n	80013f0 <HAL_GPIO_Init+0x228>
 80013de:	2304      	movs	r3, #4
 80013e0:	e006      	b.n	80013f0 <HAL_GPIO_Init+0x228>
 80013e2:	2303      	movs	r3, #3
 80013e4:	e004      	b.n	80013f0 <HAL_GPIO_Init+0x228>
 80013e6:	2302      	movs	r3, #2
 80013e8:	e002      	b.n	80013f0 <HAL_GPIO_Init+0x228>
 80013ea:	2301      	movs	r3, #1
 80013ec:	e000      	b.n	80013f0 <HAL_GPIO_Init+0x228>
 80013ee:	2300      	movs	r3, #0
 80013f0:	69fa      	ldr	r2, [r7, #28]
 80013f2:	f002 0203 	and.w	r2, r2, #3
 80013f6:	0092      	lsls	r2, r2, #2
 80013f8:	4093      	lsls	r3, r2
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001400:	4935      	ldr	r1, [pc, #212]	; (80014d8 <HAL_GPIO_Init+0x310>)
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	089b      	lsrs	r3, r3, #2
 8001406:	3302      	adds	r3, #2
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800140e:	4b3b      	ldr	r3, [pc, #236]	; (80014fc <HAL_GPIO_Init+0x334>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	43db      	mvns	r3, r3
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	4013      	ands	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d003      	beq.n	8001432 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	4313      	orrs	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001432:	4a32      	ldr	r2, [pc, #200]	; (80014fc <HAL_GPIO_Init+0x334>)
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001438:	4b30      	ldr	r3, [pc, #192]	; (80014fc <HAL_GPIO_Init+0x334>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	43db      	mvns	r3, r3
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	4013      	ands	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001450:	2b00      	cmp	r3, #0
 8001452:	d003      	beq.n	800145c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	4313      	orrs	r3, r2
 800145a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800145c:	4a27      	ldr	r2, [pc, #156]	; (80014fc <HAL_GPIO_Init+0x334>)
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001462:	4b26      	ldr	r3, [pc, #152]	; (80014fc <HAL_GPIO_Init+0x334>)
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	43db      	mvns	r3, r3
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	4013      	ands	r3, r2
 8001470:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d003      	beq.n	8001486 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	4313      	orrs	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001486:	4a1d      	ldr	r2, [pc, #116]	; (80014fc <HAL_GPIO_Init+0x334>)
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800148c:	4b1b      	ldr	r3, [pc, #108]	; (80014fc <HAL_GPIO_Init+0x334>)
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	43db      	mvns	r3, r3
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	4013      	ands	r3, r2
 800149a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d003      	beq.n	80014b0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014b0:	4a12      	ldr	r2, [pc, #72]	; (80014fc <HAL_GPIO_Init+0x334>)
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	3301      	adds	r3, #1
 80014ba:	61fb      	str	r3, [r7, #28]
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	2b0f      	cmp	r3, #15
 80014c0:	f67f ae90 	bls.w	80011e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014c4:	bf00      	nop
 80014c6:	bf00      	nop
 80014c8:	3724      	adds	r7, #36	; 0x24
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	40023800 	.word	0x40023800
 80014d8:	40013800 	.word	0x40013800
 80014dc:	40020000 	.word	0x40020000
 80014e0:	40020400 	.word	0x40020400
 80014e4:	40020800 	.word	0x40020800
 80014e8:	40020c00 	.word	0x40020c00
 80014ec:	40021000 	.word	0x40021000
 80014f0:	40021400 	.word	0x40021400
 80014f4:	40021800 	.word	0x40021800
 80014f8:	40021c00 	.word	0x40021c00
 80014fc:	40013c00 	.word	0x40013c00

08001500 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	460b      	mov	r3, r1
 800150a:	807b      	strh	r3, [r7, #2]
 800150c:	4613      	mov	r3, r2
 800150e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001510:	787b      	ldrb	r3, [r7, #1]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d003      	beq.n	800151e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001516:	887a      	ldrh	r2, [r7, #2]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800151c:	e003      	b.n	8001526 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800151e:	887b      	ldrh	r3, [r7, #2]
 8001520:	041a      	lsls	r2, r3, #16
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	619a      	str	r2, [r3, #24]
}
 8001526:	bf00      	nop
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr

08001532 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001532:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001534:	b08f      	sub	sp, #60	; 0x3c
 8001536:	af0a      	add	r7, sp, #40	; 0x28
 8001538:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d101      	bne.n	8001544 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	e054      	b.n	80015ee <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001550:	b2db      	uxtb	r3, r3
 8001552:	2b00      	cmp	r3, #0
 8001554:	d106      	bne.n	8001564 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2200      	movs	r2, #0
 800155a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f006 fdc8 	bl	80080f4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2203      	movs	r2, #3
 8001568:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001574:	2b00      	cmp	r3, #0
 8001576:	d102      	bne.n	800157e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2200      	movs	r2, #0
 800157c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4618      	mov	r0, r3
 8001584:	f003 ff1e 	bl	80053c4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	603b      	str	r3, [r7, #0]
 800158e:	687e      	ldr	r6, [r7, #4]
 8001590:	466d      	mov	r5, sp
 8001592:	f106 0410 	add.w	r4, r6, #16
 8001596:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001598:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800159a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800159c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800159e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015a2:	e885 0003 	stmia.w	r5, {r0, r1}
 80015a6:	1d33      	adds	r3, r6, #4
 80015a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015aa:	6838      	ldr	r0, [r7, #0]
 80015ac:	f003 fe98 	bl	80052e0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2101      	movs	r1, #1
 80015b6:	4618      	mov	r0, r3
 80015b8:	f003 ff15 	bl	80053e6 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	603b      	str	r3, [r7, #0]
 80015c2:	687e      	ldr	r6, [r7, #4]
 80015c4:	466d      	mov	r5, sp
 80015c6:	f106 0410 	add.w	r4, r6, #16
 80015ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015d6:	e885 0003 	stmia.w	r5, {r0, r1}
 80015da:	1d33      	adds	r3, r6, #4
 80015dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015de:	6838      	ldr	r0, [r7, #0]
 80015e0:	f004 f87c 	bl	80056dc <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2201      	movs	r2, #1
 80015e8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3714      	adds	r7, #20
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080015f6 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80015f6:	b590      	push	{r4, r7, lr}
 80015f8:	b089      	sub	sp, #36	; 0x24
 80015fa:	af04      	add	r7, sp, #16
 80015fc:	6078      	str	r0, [r7, #4]
 80015fe:	4608      	mov	r0, r1
 8001600:	4611      	mov	r1, r2
 8001602:	461a      	mov	r2, r3
 8001604:	4603      	mov	r3, r0
 8001606:	70fb      	strb	r3, [r7, #3]
 8001608:	460b      	mov	r3, r1
 800160a:	70bb      	strb	r3, [r7, #2]
 800160c:	4613      	mov	r3, r2
 800160e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001616:	2b01      	cmp	r3, #1
 8001618:	d101      	bne.n	800161e <HAL_HCD_HC_Init+0x28>
 800161a:	2302      	movs	r3, #2
 800161c:	e076      	b.n	800170c <HAL_HCD_HC_Init+0x116>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2201      	movs	r2, #1
 8001622:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001626:	78fb      	ldrb	r3, [r7, #3]
 8001628:	687a      	ldr	r2, [r7, #4]
 800162a:	212c      	movs	r1, #44	; 0x2c
 800162c:	fb01 f303 	mul.w	r3, r1, r3
 8001630:	4413      	add	r3, r2
 8001632:	333d      	adds	r3, #61	; 0x3d
 8001634:	2200      	movs	r2, #0
 8001636:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001638:	78fb      	ldrb	r3, [r7, #3]
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	212c      	movs	r1, #44	; 0x2c
 800163e:	fb01 f303 	mul.w	r3, r1, r3
 8001642:	4413      	add	r3, r2
 8001644:	3338      	adds	r3, #56	; 0x38
 8001646:	787a      	ldrb	r2, [r7, #1]
 8001648:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800164a:	78fb      	ldrb	r3, [r7, #3]
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	212c      	movs	r1, #44	; 0x2c
 8001650:	fb01 f303 	mul.w	r3, r1, r3
 8001654:	4413      	add	r3, r2
 8001656:	3340      	adds	r3, #64	; 0x40
 8001658:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800165a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800165c:	78fb      	ldrb	r3, [r7, #3]
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	212c      	movs	r1, #44	; 0x2c
 8001662:	fb01 f303 	mul.w	r3, r1, r3
 8001666:	4413      	add	r3, r2
 8001668:	3339      	adds	r3, #57	; 0x39
 800166a:	78fa      	ldrb	r2, [r7, #3]
 800166c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800166e:	78fb      	ldrb	r3, [r7, #3]
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	212c      	movs	r1, #44	; 0x2c
 8001674:	fb01 f303 	mul.w	r3, r1, r3
 8001678:	4413      	add	r3, r2
 800167a:	333f      	adds	r3, #63	; 0x3f
 800167c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001680:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001682:	78fb      	ldrb	r3, [r7, #3]
 8001684:	78ba      	ldrb	r2, [r7, #2]
 8001686:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800168a:	b2d0      	uxtb	r0, r2
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	212c      	movs	r1, #44	; 0x2c
 8001690:	fb01 f303 	mul.w	r3, r1, r3
 8001694:	4413      	add	r3, r2
 8001696:	333a      	adds	r3, #58	; 0x3a
 8001698:	4602      	mov	r2, r0
 800169a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800169c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	da09      	bge.n	80016b8 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80016a4:	78fb      	ldrb	r3, [r7, #3]
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	212c      	movs	r1, #44	; 0x2c
 80016aa:	fb01 f303 	mul.w	r3, r1, r3
 80016ae:	4413      	add	r3, r2
 80016b0:	333b      	adds	r3, #59	; 0x3b
 80016b2:	2201      	movs	r2, #1
 80016b4:	701a      	strb	r2, [r3, #0]
 80016b6:	e008      	b.n	80016ca <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80016b8:	78fb      	ldrb	r3, [r7, #3]
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	212c      	movs	r1, #44	; 0x2c
 80016be:	fb01 f303 	mul.w	r3, r1, r3
 80016c2:	4413      	add	r3, r2
 80016c4:	333b      	adds	r3, #59	; 0x3b
 80016c6:	2200      	movs	r2, #0
 80016c8:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80016ca:	78fb      	ldrb	r3, [r7, #3]
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	212c      	movs	r1, #44	; 0x2c
 80016d0:	fb01 f303 	mul.w	r3, r1, r3
 80016d4:	4413      	add	r3, r2
 80016d6:	333c      	adds	r3, #60	; 0x3c
 80016d8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80016dc:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6818      	ldr	r0, [r3, #0]
 80016e2:	787c      	ldrb	r4, [r7, #1]
 80016e4:	78ba      	ldrb	r2, [r7, #2]
 80016e6:	78f9      	ldrb	r1, [r7, #3]
 80016e8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80016ea:	9302      	str	r3, [sp, #8]
 80016ec:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80016f0:	9301      	str	r3, [sp, #4]
 80016f2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80016f6:	9300      	str	r3, [sp, #0]
 80016f8:	4623      	mov	r3, r4
 80016fa:	f004 f969 	bl	80059d0 <USB_HC_Init>
 80016fe:	4603      	mov	r3, r0
 8001700:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2200      	movs	r2, #0
 8001706:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800170a:	7bfb      	ldrb	r3, [r7, #15]
}
 800170c:	4618      	mov	r0, r3
 800170e:	3714      	adds	r7, #20
 8001710:	46bd      	mov	sp, r7
 8001712:	bd90      	pop	{r4, r7, pc}

08001714 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	460b      	mov	r3, r1
 800171e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001720:	2300      	movs	r3, #0
 8001722:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800172a:	2b01      	cmp	r3, #1
 800172c:	d101      	bne.n	8001732 <HAL_HCD_HC_Halt+0x1e>
 800172e:	2302      	movs	r3, #2
 8001730:	e00f      	b.n	8001752 <HAL_HCD_HC_Halt+0x3e>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2201      	movs	r2, #1
 8001736:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	78fa      	ldrb	r2, [r7, #3]
 8001740:	4611      	mov	r1, r2
 8001742:	4618      	mov	r0, r3
 8001744:	f004 fba5 	bl	8005e92 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2200      	movs	r2, #0
 800174c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001750:	7bfb      	ldrb	r3, [r7, #15]
}
 8001752:	4618      	mov	r0, r3
 8001754:	3710      	adds	r7, #16
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
	...

0800175c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	4608      	mov	r0, r1
 8001766:	4611      	mov	r1, r2
 8001768:	461a      	mov	r2, r3
 800176a:	4603      	mov	r3, r0
 800176c:	70fb      	strb	r3, [r7, #3]
 800176e:	460b      	mov	r3, r1
 8001770:	70bb      	strb	r3, [r7, #2]
 8001772:	4613      	mov	r3, r2
 8001774:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001776:	78fb      	ldrb	r3, [r7, #3]
 8001778:	687a      	ldr	r2, [r7, #4]
 800177a:	212c      	movs	r1, #44	; 0x2c
 800177c:	fb01 f303 	mul.w	r3, r1, r3
 8001780:	4413      	add	r3, r2
 8001782:	333b      	adds	r3, #59	; 0x3b
 8001784:	78ba      	ldrb	r2, [r7, #2]
 8001786:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001788:	78fb      	ldrb	r3, [r7, #3]
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	212c      	movs	r1, #44	; 0x2c
 800178e:	fb01 f303 	mul.w	r3, r1, r3
 8001792:	4413      	add	r3, r2
 8001794:	333f      	adds	r3, #63	; 0x3f
 8001796:	787a      	ldrb	r2, [r7, #1]
 8001798:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800179a:	7c3b      	ldrb	r3, [r7, #16]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d112      	bne.n	80017c6 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80017a0:	78fb      	ldrb	r3, [r7, #3]
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	212c      	movs	r1, #44	; 0x2c
 80017a6:	fb01 f303 	mul.w	r3, r1, r3
 80017aa:	4413      	add	r3, r2
 80017ac:	3342      	adds	r3, #66	; 0x42
 80017ae:	2203      	movs	r2, #3
 80017b0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80017b2:	78fb      	ldrb	r3, [r7, #3]
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	212c      	movs	r1, #44	; 0x2c
 80017b8:	fb01 f303 	mul.w	r3, r1, r3
 80017bc:	4413      	add	r3, r2
 80017be:	333d      	adds	r3, #61	; 0x3d
 80017c0:	7f3a      	ldrb	r2, [r7, #28]
 80017c2:	701a      	strb	r2, [r3, #0]
 80017c4:	e008      	b.n	80017d8 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017c6:	78fb      	ldrb	r3, [r7, #3]
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	212c      	movs	r1, #44	; 0x2c
 80017cc:	fb01 f303 	mul.w	r3, r1, r3
 80017d0:	4413      	add	r3, r2
 80017d2:	3342      	adds	r3, #66	; 0x42
 80017d4:	2202      	movs	r2, #2
 80017d6:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80017d8:	787b      	ldrb	r3, [r7, #1]
 80017da:	2b03      	cmp	r3, #3
 80017dc:	f200 80c6 	bhi.w	800196c <HAL_HCD_HC_SubmitRequest+0x210>
 80017e0:	a201      	add	r2, pc, #4	; (adr r2, 80017e8 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80017e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017e6:	bf00      	nop
 80017e8:	080017f9 	.word	0x080017f9
 80017ec:	08001959 	.word	0x08001959
 80017f0:	0800185d 	.word	0x0800185d
 80017f4:	080018db 	.word	0x080018db
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80017f8:	7c3b      	ldrb	r3, [r7, #16]
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	f040 80b8 	bne.w	8001970 <HAL_HCD_HC_SubmitRequest+0x214>
 8001800:	78bb      	ldrb	r3, [r7, #2]
 8001802:	2b00      	cmp	r3, #0
 8001804:	f040 80b4 	bne.w	8001970 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001808:	8b3b      	ldrh	r3, [r7, #24]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d108      	bne.n	8001820 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800180e:	78fb      	ldrb	r3, [r7, #3]
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	212c      	movs	r1, #44	; 0x2c
 8001814:	fb01 f303 	mul.w	r3, r1, r3
 8001818:	4413      	add	r3, r2
 800181a:	3355      	adds	r3, #85	; 0x55
 800181c:	2201      	movs	r2, #1
 800181e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001820:	78fb      	ldrb	r3, [r7, #3]
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	212c      	movs	r1, #44	; 0x2c
 8001826:	fb01 f303 	mul.w	r3, r1, r3
 800182a:	4413      	add	r3, r2
 800182c:	3355      	adds	r3, #85	; 0x55
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d109      	bne.n	8001848 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001834:	78fb      	ldrb	r3, [r7, #3]
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	212c      	movs	r1, #44	; 0x2c
 800183a:	fb01 f303 	mul.w	r3, r1, r3
 800183e:	4413      	add	r3, r2
 8001840:	3342      	adds	r3, #66	; 0x42
 8001842:	2200      	movs	r2, #0
 8001844:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001846:	e093      	b.n	8001970 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001848:	78fb      	ldrb	r3, [r7, #3]
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	212c      	movs	r1, #44	; 0x2c
 800184e:	fb01 f303 	mul.w	r3, r1, r3
 8001852:	4413      	add	r3, r2
 8001854:	3342      	adds	r3, #66	; 0x42
 8001856:	2202      	movs	r2, #2
 8001858:	701a      	strb	r2, [r3, #0]
      break;
 800185a:	e089      	b.n	8001970 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800185c:	78bb      	ldrb	r3, [r7, #2]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d11d      	bne.n	800189e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001862:	78fb      	ldrb	r3, [r7, #3]
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	212c      	movs	r1, #44	; 0x2c
 8001868:	fb01 f303 	mul.w	r3, r1, r3
 800186c:	4413      	add	r3, r2
 800186e:	3355      	adds	r3, #85	; 0x55
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d109      	bne.n	800188a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001876:	78fb      	ldrb	r3, [r7, #3]
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	212c      	movs	r1, #44	; 0x2c
 800187c:	fb01 f303 	mul.w	r3, r1, r3
 8001880:	4413      	add	r3, r2
 8001882:	3342      	adds	r3, #66	; 0x42
 8001884:	2200      	movs	r2, #0
 8001886:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001888:	e073      	b.n	8001972 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800188a:	78fb      	ldrb	r3, [r7, #3]
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	212c      	movs	r1, #44	; 0x2c
 8001890:	fb01 f303 	mul.w	r3, r1, r3
 8001894:	4413      	add	r3, r2
 8001896:	3342      	adds	r3, #66	; 0x42
 8001898:	2202      	movs	r2, #2
 800189a:	701a      	strb	r2, [r3, #0]
      break;
 800189c:	e069      	b.n	8001972 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800189e:	78fb      	ldrb	r3, [r7, #3]
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	212c      	movs	r1, #44	; 0x2c
 80018a4:	fb01 f303 	mul.w	r3, r1, r3
 80018a8:	4413      	add	r3, r2
 80018aa:	3354      	adds	r3, #84	; 0x54
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d109      	bne.n	80018c6 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018b2:	78fb      	ldrb	r3, [r7, #3]
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	212c      	movs	r1, #44	; 0x2c
 80018b8:	fb01 f303 	mul.w	r3, r1, r3
 80018bc:	4413      	add	r3, r2
 80018be:	3342      	adds	r3, #66	; 0x42
 80018c0:	2200      	movs	r2, #0
 80018c2:	701a      	strb	r2, [r3, #0]
      break;
 80018c4:	e055      	b.n	8001972 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018c6:	78fb      	ldrb	r3, [r7, #3]
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	212c      	movs	r1, #44	; 0x2c
 80018cc:	fb01 f303 	mul.w	r3, r1, r3
 80018d0:	4413      	add	r3, r2
 80018d2:	3342      	adds	r3, #66	; 0x42
 80018d4:	2202      	movs	r2, #2
 80018d6:	701a      	strb	r2, [r3, #0]
      break;
 80018d8:	e04b      	b.n	8001972 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80018da:	78bb      	ldrb	r3, [r7, #2]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d11d      	bne.n	800191c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80018e0:	78fb      	ldrb	r3, [r7, #3]
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	212c      	movs	r1, #44	; 0x2c
 80018e6:	fb01 f303 	mul.w	r3, r1, r3
 80018ea:	4413      	add	r3, r2
 80018ec:	3355      	adds	r3, #85	; 0x55
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d109      	bne.n	8001908 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018f4:	78fb      	ldrb	r3, [r7, #3]
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	212c      	movs	r1, #44	; 0x2c
 80018fa:	fb01 f303 	mul.w	r3, r1, r3
 80018fe:	4413      	add	r3, r2
 8001900:	3342      	adds	r3, #66	; 0x42
 8001902:	2200      	movs	r2, #0
 8001904:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001906:	e034      	b.n	8001972 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001908:	78fb      	ldrb	r3, [r7, #3]
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	212c      	movs	r1, #44	; 0x2c
 800190e:	fb01 f303 	mul.w	r3, r1, r3
 8001912:	4413      	add	r3, r2
 8001914:	3342      	adds	r3, #66	; 0x42
 8001916:	2202      	movs	r2, #2
 8001918:	701a      	strb	r2, [r3, #0]
      break;
 800191a:	e02a      	b.n	8001972 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800191c:	78fb      	ldrb	r3, [r7, #3]
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	212c      	movs	r1, #44	; 0x2c
 8001922:	fb01 f303 	mul.w	r3, r1, r3
 8001926:	4413      	add	r3, r2
 8001928:	3354      	adds	r3, #84	; 0x54
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d109      	bne.n	8001944 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001930:	78fb      	ldrb	r3, [r7, #3]
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	212c      	movs	r1, #44	; 0x2c
 8001936:	fb01 f303 	mul.w	r3, r1, r3
 800193a:	4413      	add	r3, r2
 800193c:	3342      	adds	r3, #66	; 0x42
 800193e:	2200      	movs	r2, #0
 8001940:	701a      	strb	r2, [r3, #0]
      break;
 8001942:	e016      	b.n	8001972 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001944:	78fb      	ldrb	r3, [r7, #3]
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	212c      	movs	r1, #44	; 0x2c
 800194a:	fb01 f303 	mul.w	r3, r1, r3
 800194e:	4413      	add	r3, r2
 8001950:	3342      	adds	r3, #66	; 0x42
 8001952:	2202      	movs	r2, #2
 8001954:	701a      	strb	r2, [r3, #0]
      break;
 8001956:	e00c      	b.n	8001972 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001958:	78fb      	ldrb	r3, [r7, #3]
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	212c      	movs	r1, #44	; 0x2c
 800195e:	fb01 f303 	mul.w	r3, r1, r3
 8001962:	4413      	add	r3, r2
 8001964:	3342      	adds	r3, #66	; 0x42
 8001966:	2200      	movs	r2, #0
 8001968:	701a      	strb	r2, [r3, #0]
      break;
 800196a:	e002      	b.n	8001972 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 800196c:	bf00      	nop
 800196e:	e000      	b.n	8001972 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001970:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001972:	78fb      	ldrb	r3, [r7, #3]
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	212c      	movs	r1, #44	; 0x2c
 8001978:	fb01 f303 	mul.w	r3, r1, r3
 800197c:	4413      	add	r3, r2
 800197e:	3344      	adds	r3, #68	; 0x44
 8001980:	697a      	ldr	r2, [r7, #20]
 8001982:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001984:	78fb      	ldrb	r3, [r7, #3]
 8001986:	8b3a      	ldrh	r2, [r7, #24]
 8001988:	6879      	ldr	r1, [r7, #4]
 800198a:	202c      	movs	r0, #44	; 0x2c
 800198c:	fb00 f303 	mul.w	r3, r0, r3
 8001990:	440b      	add	r3, r1
 8001992:	334c      	adds	r3, #76	; 0x4c
 8001994:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001996:	78fb      	ldrb	r3, [r7, #3]
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	212c      	movs	r1, #44	; 0x2c
 800199c:	fb01 f303 	mul.w	r3, r1, r3
 80019a0:	4413      	add	r3, r2
 80019a2:	3360      	adds	r3, #96	; 0x60
 80019a4:	2200      	movs	r2, #0
 80019a6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80019a8:	78fb      	ldrb	r3, [r7, #3]
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	212c      	movs	r1, #44	; 0x2c
 80019ae:	fb01 f303 	mul.w	r3, r1, r3
 80019b2:	4413      	add	r3, r2
 80019b4:	3350      	adds	r3, #80	; 0x50
 80019b6:	2200      	movs	r2, #0
 80019b8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80019ba:	78fb      	ldrb	r3, [r7, #3]
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	212c      	movs	r1, #44	; 0x2c
 80019c0:	fb01 f303 	mul.w	r3, r1, r3
 80019c4:	4413      	add	r3, r2
 80019c6:	3339      	adds	r3, #57	; 0x39
 80019c8:	78fa      	ldrb	r2, [r7, #3]
 80019ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80019cc:	78fb      	ldrb	r3, [r7, #3]
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	212c      	movs	r1, #44	; 0x2c
 80019d2:	fb01 f303 	mul.w	r3, r1, r3
 80019d6:	4413      	add	r3, r2
 80019d8:	3361      	adds	r3, #97	; 0x61
 80019da:	2200      	movs	r2, #0
 80019dc:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6818      	ldr	r0, [r3, #0]
 80019e2:	78fb      	ldrb	r3, [r7, #3]
 80019e4:	222c      	movs	r2, #44	; 0x2c
 80019e6:	fb02 f303 	mul.w	r3, r2, r3
 80019ea:	3338      	adds	r3, #56	; 0x38
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	18d1      	adds	r1, r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	691b      	ldr	r3, [r3, #16]
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	461a      	mov	r2, r3
 80019f8:	f004 f8f8 	bl	8005bec <USB_HC_StartXfer>
 80019fc:	4603      	mov	r3, r0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop

08001a08 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f003 fe1b 	bl	800565a <USB_GetMode>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	f040 80f6 	bne.w	8001c18 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f003 fdff 	bl	8005634 <USB_ReadInterrupts>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	f000 80ec 	beq.w	8001c16 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f003 fdf6 	bl	8005634 <USB_ReadInterrupts>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a4e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a52:	d104      	bne.n	8001a5e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001a5c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f003 fde6 	bl	8005634 <USB_ReadInterrupts>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a72:	d104      	bne.n	8001a7e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001a7c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f003 fdd6 	bl	8005634 <USB_ReadInterrupts>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a8e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001a92:	d104      	bne.n	8001a9e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001a9c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f003 fdc6 	bl	8005634 <USB_ReadInterrupts>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d103      	bne.n	8001aba <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2202      	movs	r2, #2
 8001ab8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f003 fdb8 	bl	8005634 <USB_ReadInterrupts>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001aca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ace:	d11c      	bne.n	8001b0a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001ad8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d10f      	bne.n	8001b0a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001aea:	2110      	movs	r1, #16
 8001aec:	6938      	ldr	r0, [r7, #16]
 8001aee:	f003 fcc7 	bl	8005480 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001af2:	6938      	ldr	r0, [r7, #16]
 8001af4:	f003 fce8 	bl	80054c8 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2101      	movs	r1, #1
 8001afe:	4618      	mov	r0, r3
 8001b00:	f003 fea0 	bl	8005844 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f006 fb73 	bl	80081f0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f003 fd90 	bl	8005634 <USB_ReadInterrupts>
 8001b14:	4603      	mov	r3, r0
 8001b16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b1a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b1e:	d102      	bne.n	8001b26 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f001 fa03 	bl	8002f2c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f003 fd82 	bl	8005634 <USB_ReadInterrupts>
 8001b30:	4603      	mov	r3, r0
 8001b32:	f003 0308 	and.w	r3, r3, #8
 8001b36:	2b08      	cmp	r3, #8
 8001b38:	d106      	bne.n	8001b48 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f006 fb3c 	bl	80081b8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2208      	movs	r2, #8
 8001b46:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f003 fd71 	bl	8005634 <USB_ReadInterrupts>
 8001b52:	4603      	mov	r3, r0
 8001b54:	f003 0310 	and.w	r3, r3, #16
 8001b58:	2b10      	cmp	r3, #16
 8001b5a:	d101      	bne.n	8001b60 <HAL_HCD_IRQHandler+0x158>
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e000      	b.n	8001b62 <HAL_HCD_IRQHandler+0x15a>
 8001b60:	2300      	movs	r3, #0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d012      	beq.n	8001b8c <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	699a      	ldr	r2, [r3, #24]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f022 0210 	bic.w	r2, r2, #16
 8001b74:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f001 f906 	bl	8002d88 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	699a      	ldr	r2, [r3, #24]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f042 0210 	orr.w	r2, r2, #16
 8001b8a:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f003 fd4f 	bl	8005634 <USB_ReadInterrupts>
 8001b96:	4603      	mov	r3, r0
 8001b98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b9c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ba0:	d13a      	bne.n	8001c18 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f004 f962 	bl	8005e70 <USB_HC_ReadInterrupt>
 8001bac:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001bae:	2300      	movs	r3, #0
 8001bb0:	617b      	str	r3, [r7, #20]
 8001bb2:	e025      	b.n	8001c00 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	f003 030f 	and.w	r3, r3, #15
 8001bba:	68ba      	ldr	r2, [r7, #8]
 8001bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8001bc0:	f003 0301 	and.w	r3, r3, #1
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d018      	beq.n	8001bfa <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	015a      	lsls	r2, r3, #5
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	4413      	add	r3, r2
 8001bd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bde:	d106      	bne.n	8001bee <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	4619      	mov	r1, r3
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f000 f8ab 	bl	8001d42 <HCD_HC_IN_IRQHandler>
 8001bec:	e005      	b.n	8001bfa <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f000 fcc6 	bl	8002586 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	617b      	str	r3, [r7, #20]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	697a      	ldr	r2, [r7, #20]
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d3d4      	bcc.n	8001bb4 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c12:	615a      	str	r2, [r3, #20]
 8001c14:	e000      	b.n	8001c18 <HAL_HCD_IRQHandler+0x210>
      return;
 8001c16:	bf00      	nop
    }
  }
}
 8001c18:	3718      	adds	r7, #24
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b082      	sub	sp, #8
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d101      	bne.n	8001c34 <HAL_HCD_Start+0x16>
 8001c30:	2302      	movs	r3, #2
 8001c32:	e013      	b.n	8001c5c <HAL_HCD_Start+0x3e>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2101      	movs	r1, #1
 8001c42:	4618      	mov	r0, r3
 8001c44:	f003 fe62 	bl	800590c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f003 fba8 	bl	80053a2 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001c5a:	2300      	movs	r3, #0
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d101      	bne.n	8001c7a <HAL_HCD_Stop+0x16>
 8001c76:	2302      	movs	r3, #2
 8001c78:	e00d      	b.n	8001c96 <HAL_HCD_Stop+0x32>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f004 fa5c 	bl	8006144 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b082      	sub	sp, #8
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f003 fe04 	bl	80058b8 <USB_ResetPort>
 8001cb0:	4603      	mov	r3, r0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b083      	sub	sp, #12
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001cc6:	78fb      	ldrb	r3, [r7, #3]
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	212c      	movs	r1, #44	; 0x2c
 8001ccc:	fb01 f303 	mul.w	r3, r1, r3
 8001cd0:	4413      	add	r3, r2
 8001cd2:	3360      	adds	r3, #96	; 0x60
 8001cd4:	781b      	ldrb	r3, [r3, #0]
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr

08001ce2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	b083      	sub	sp, #12
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
 8001cea:	460b      	mov	r3, r1
 8001cec:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001cee:	78fb      	ldrb	r3, [r7, #3]
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	212c      	movs	r1, #44	; 0x2c
 8001cf4:	fb01 f303 	mul.w	r3, r1, r3
 8001cf8:	4413      	add	r3, r2
 8001cfa:	3350      	adds	r3, #80	; 0x50
 8001cfc:	681b      	ldr	r3, [r3, #0]
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr

08001d0a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b082      	sub	sp, #8
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f003 fe48 	bl	80059ac <USB_GetCurrentFrame>
 8001d1c:	4603      	mov	r3, r0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b082      	sub	sp, #8
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f003 fe23 	bl	800597e <USB_GetHostSpeed>
 8001d38:	4603      	mov	r3, r0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b086      	sub	sp, #24
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001d58:	78fb      	ldrb	r3, [r7, #3]
 8001d5a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	015a      	lsls	r2, r3, #5
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	4413      	add	r3, r2
 8001d64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f003 0304 	and.w	r3, r3, #4
 8001d6e:	2b04      	cmp	r3, #4
 8001d70:	d119      	bne.n	8001da6 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	015a      	lsls	r2, r3, #5
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	4413      	add	r3, r2
 8001d7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d7e:	461a      	mov	r2, r3
 8001d80:	2304      	movs	r3, #4
 8001d82:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	015a      	lsls	r2, r3, #5
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	68fa      	ldr	r2, [r7, #12]
 8001d94:	0151      	lsls	r1, r2, #5
 8001d96:	693a      	ldr	r2, [r7, #16]
 8001d98:	440a      	add	r2, r1
 8001d9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d9e:	f043 0302 	orr.w	r3, r3, #2
 8001da2:	60d3      	str	r3, [r2, #12]
 8001da4:	e101      	b.n	8001faa <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	015a      	lsls	r2, r3, #5
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	4413      	add	r3, r2
 8001dae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dbc:	d12b      	bne.n	8001e16 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	015a      	lsls	r2, r3, #5
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dca:	461a      	mov	r2, r3
 8001dcc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dd0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	212c      	movs	r1, #44	; 0x2c
 8001dd8:	fb01 f303 	mul.w	r3, r1, r3
 8001ddc:	4413      	add	r3, r2
 8001dde:	3361      	adds	r3, #97	; 0x61
 8001de0:	2207      	movs	r2, #7
 8001de2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	015a      	lsls	r2, r3, #5
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	4413      	add	r3, r2
 8001dec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	68fa      	ldr	r2, [r7, #12]
 8001df4:	0151      	lsls	r1, r2, #5
 8001df6:	693a      	ldr	r2, [r7, #16]
 8001df8:	440a      	add	r2, r1
 8001dfa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001dfe:	f043 0302 	orr.w	r3, r3, #2
 8001e02:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	68fa      	ldr	r2, [r7, #12]
 8001e0a:	b2d2      	uxtb	r2, r2
 8001e0c:	4611      	mov	r1, r2
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f004 f83f 	bl	8005e92 <USB_HC_Halt>
 8001e14:	e0c9      	b.n	8001faa <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	015a      	lsls	r2, r3, #5
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f003 0320 	and.w	r3, r3, #32
 8001e28:	2b20      	cmp	r3, #32
 8001e2a:	d109      	bne.n	8001e40 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	015a      	lsls	r2, r3, #5
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	4413      	add	r3, r2
 8001e34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e38:	461a      	mov	r2, r3
 8001e3a:	2320      	movs	r3, #32
 8001e3c:	6093      	str	r3, [r2, #8]
 8001e3e:	e0b4      	b.n	8001faa <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	015a      	lsls	r2, r3, #5
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	4413      	add	r3, r2
 8001e48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f003 0308 	and.w	r3, r3, #8
 8001e52:	2b08      	cmp	r3, #8
 8001e54:	d133      	bne.n	8001ebe <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	015a      	lsls	r2, r3, #5
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	68fa      	ldr	r2, [r7, #12]
 8001e66:	0151      	lsls	r1, r2, #5
 8001e68:	693a      	ldr	r2, [r7, #16]
 8001e6a:	440a      	add	r2, r1
 8001e6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e70:	f043 0302 	orr.w	r3, r3, #2
 8001e74:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	212c      	movs	r1, #44	; 0x2c
 8001e7c:	fb01 f303 	mul.w	r3, r1, r3
 8001e80:	4413      	add	r3, r2
 8001e82:	3361      	adds	r3, #97	; 0x61
 8001e84:	2205      	movs	r2, #5
 8001e86:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	015a      	lsls	r2, r3, #5
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	4413      	add	r3, r2
 8001e90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e94:	461a      	mov	r2, r3
 8001e96:	2310      	movs	r3, #16
 8001e98:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	015a      	lsls	r2, r3, #5
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	2308      	movs	r3, #8
 8001eaa:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	68fa      	ldr	r2, [r7, #12]
 8001eb2:	b2d2      	uxtb	r2, r2
 8001eb4:	4611      	mov	r1, r2
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f003 ffeb 	bl	8005e92 <USB_HC_Halt>
 8001ebc:	e075      	b.n	8001faa <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	015a      	lsls	r2, r3, #5
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ed0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ed4:	d134      	bne.n	8001f40 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	015a      	lsls	r2, r3, #5
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	4413      	add	r3, r2
 8001ede:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	68fa      	ldr	r2, [r7, #12]
 8001ee6:	0151      	lsls	r1, r2, #5
 8001ee8:	693a      	ldr	r2, [r7, #16]
 8001eea:	440a      	add	r2, r1
 8001eec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ef0:	f043 0302 	orr.w	r3, r3, #2
 8001ef4:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	212c      	movs	r1, #44	; 0x2c
 8001efc:	fb01 f303 	mul.w	r3, r1, r3
 8001f00:	4413      	add	r3, r2
 8001f02:	3361      	adds	r3, #97	; 0x61
 8001f04:	2208      	movs	r2, #8
 8001f06:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	015a      	lsls	r2, r3, #5
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	4413      	add	r3, r2
 8001f10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f14:	461a      	mov	r2, r3
 8001f16:	2310      	movs	r3, #16
 8001f18:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	015a      	lsls	r2, r3, #5
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	4413      	add	r3, r2
 8001f22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f26:	461a      	mov	r2, r3
 8001f28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f2c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	68fa      	ldr	r2, [r7, #12]
 8001f34:	b2d2      	uxtb	r2, r2
 8001f36:	4611      	mov	r1, r2
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f003 ffaa 	bl	8005e92 <USB_HC_Halt>
 8001f3e:	e034      	b.n	8001faa <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	015a      	lsls	r2, r3, #5
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	4413      	add	r3, r2
 8001f48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f52:	2b80      	cmp	r3, #128	; 0x80
 8001f54:	d129      	bne.n	8001faa <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	015a      	lsls	r2, r3, #5
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	68fa      	ldr	r2, [r7, #12]
 8001f66:	0151      	lsls	r1, r2, #5
 8001f68:	693a      	ldr	r2, [r7, #16]
 8001f6a:	440a      	add	r2, r1
 8001f6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f70:	f043 0302 	orr.w	r3, r3, #2
 8001f74:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	212c      	movs	r1, #44	; 0x2c
 8001f7c:	fb01 f303 	mul.w	r3, r1, r3
 8001f80:	4413      	add	r3, r2
 8001f82:	3361      	adds	r3, #97	; 0x61
 8001f84:	2206      	movs	r2, #6
 8001f86:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	68fa      	ldr	r2, [r7, #12]
 8001f8e:	b2d2      	uxtb	r2, r2
 8001f90:	4611      	mov	r1, r2
 8001f92:	4618      	mov	r0, r3
 8001f94:	f003 ff7d 	bl	8005e92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	015a      	lsls	r2, r3, #5
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	2380      	movs	r3, #128	; 0x80
 8001fa8:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	015a      	lsls	r2, r3, #5
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fc0:	d122      	bne.n	8002008 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	015a      	lsls	r2, r3, #5
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	4413      	add	r3, r2
 8001fca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	68fa      	ldr	r2, [r7, #12]
 8001fd2:	0151      	lsls	r1, r2, #5
 8001fd4:	693a      	ldr	r2, [r7, #16]
 8001fd6:	440a      	add	r2, r1
 8001fd8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fdc:	f043 0302 	orr.w	r3, r3, #2
 8001fe0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	68fa      	ldr	r2, [r7, #12]
 8001fe8:	b2d2      	uxtb	r2, r2
 8001fea:	4611      	mov	r1, r2
 8001fec:	4618      	mov	r0, r3
 8001fee:	f003 ff50 	bl	8005e92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	015a      	lsls	r2, r3, #5
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ffe:	461a      	mov	r2, r3
 8002000:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002004:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002006:	e2ba      	b.n	800257e <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	015a      	lsls	r2, r3, #5
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	4413      	add	r3, r2
 8002010:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	2b01      	cmp	r3, #1
 800201c:	f040 811b 	bne.w	8002256 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	691b      	ldr	r3, [r3, #16]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d019      	beq.n	800205c <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	212c      	movs	r1, #44	; 0x2c
 800202e:	fb01 f303 	mul.w	r3, r1, r3
 8002032:	4413      	add	r3, r2
 8002034:	3348      	adds	r3, #72	; 0x48
 8002036:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	0159      	lsls	r1, r3, #5
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	440b      	add	r3, r1
 8002040:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800204a:	1ad2      	subs	r2, r2, r3
 800204c:	6879      	ldr	r1, [r7, #4]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	202c      	movs	r0, #44	; 0x2c
 8002052:	fb00 f303 	mul.w	r3, r0, r3
 8002056:	440b      	add	r3, r1
 8002058:	3350      	adds	r3, #80	; 0x50
 800205a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	212c      	movs	r1, #44	; 0x2c
 8002062:	fb01 f303 	mul.w	r3, r1, r3
 8002066:	4413      	add	r3, r2
 8002068:	3361      	adds	r3, #97	; 0x61
 800206a:	2201      	movs	r2, #1
 800206c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	212c      	movs	r1, #44	; 0x2c
 8002074:	fb01 f303 	mul.w	r3, r1, r3
 8002078:	4413      	add	r3, r2
 800207a:	335c      	adds	r3, #92	; 0x5c
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	015a      	lsls	r2, r3, #5
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	4413      	add	r3, r2
 8002088:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800208c:	461a      	mov	r2, r3
 800208e:	2301      	movs	r3, #1
 8002090:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	212c      	movs	r1, #44	; 0x2c
 8002098:	fb01 f303 	mul.w	r3, r1, r3
 800209c:	4413      	add	r3, r2
 800209e:	333f      	adds	r3, #63	; 0x3f
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d009      	beq.n	80020ba <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	212c      	movs	r1, #44	; 0x2c
 80020ac:	fb01 f303 	mul.w	r3, r1, r3
 80020b0:	4413      	add	r3, r2
 80020b2:	333f      	adds	r3, #63	; 0x3f
 80020b4:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d121      	bne.n	80020fe <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	015a      	lsls	r2, r3, #5
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	4413      	add	r3, r2
 80020c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	68fa      	ldr	r2, [r7, #12]
 80020ca:	0151      	lsls	r1, r2, #5
 80020cc:	693a      	ldr	r2, [r7, #16]
 80020ce:	440a      	add	r2, r1
 80020d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020d4:	f043 0302 	orr.w	r3, r3, #2
 80020d8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	68fa      	ldr	r2, [r7, #12]
 80020e0:	b2d2      	uxtb	r2, r2
 80020e2:	4611      	mov	r1, r2
 80020e4:	4618      	mov	r0, r3
 80020e6:	f003 fed4 	bl	8005e92 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	015a      	lsls	r2, r3, #5
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	4413      	add	r3, r2
 80020f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020f6:	461a      	mov	r2, r3
 80020f8:	2310      	movs	r3, #16
 80020fa:	6093      	str	r3, [r2, #8]
 80020fc:	e066      	b.n	80021cc <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	212c      	movs	r1, #44	; 0x2c
 8002104:	fb01 f303 	mul.w	r3, r1, r3
 8002108:	4413      	add	r3, r2
 800210a:	333f      	adds	r3, #63	; 0x3f
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	2b03      	cmp	r3, #3
 8002110:	d127      	bne.n	8002162 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	015a      	lsls	r2, r3, #5
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	4413      	add	r3, r2
 800211a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	68fa      	ldr	r2, [r7, #12]
 8002122:	0151      	lsls	r1, r2, #5
 8002124:	693a      	ldr	r2, [r7, #16]
 8002126:	440a      	add	r2, r1
 8002128:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800212c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002130:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	212c      	movs	r1, #44	; 0x2c
 8002138:	fb01 f303 	mul.w	r3, r1, r3
 800213c:	4413      	add	r3, r2
 800213e:	3360      	adds	r3, #96	; 0x60
 8002140:	2201      	movs	r2, #1
 8002142:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	b2d9      	uxtb	r1, r3
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	202c      	movs	r0, #44	; 0x2c
 800214e:	fb00 f303 	mul.w	r3, r0, r3
 8002152:	4413      	add	r3, r2
 8002154:	3360      	adds	r3, #96	; 0x60
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	461a      	mov	r2, r3
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f006 f856 	bl	800820c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002160:	e034      	b.n	80021cc <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	212c      	movs	r1, #44	; 0x2c
 8002168:	fb01 f303 	mul.w	r3, r1, r3
 800216c:	4413      	add	r3, r2
 800216e:	333f      	adds	r3, #63	; 0x3f
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	2b01      	cmp	r3, #1
 8002174:	d12a      	bne.n	80021cc <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	212c      	movs	r1, #44	; 0x2c
 800217c:	fb01 f303 	mul.w	r3, r1, r3
 8002180:	4413      	add	r3, r2
 8002182:	3360      	adds	r3, #96	; 0x60
 8002184:	2201      	movs	r2, #1
 8002186:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	212c      	movs	r1, #44	; 0x2c
 800218e:	fb01 f303 	mul.w	r3, r1, r3
 8002192:	4413      	add	r3, r2
 8002194:	3354      	adds	r3, #84	; 0x54
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	f083 0301 	eor.w	r3, r3, #1
 800219c:	b2d8      	uxtb	r0, r3
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	212c      	movs	r1, #44	; 0x2c
 80021a4:	fb01 f303 	mul.w	r3, r1, r3
 80021a8:	4413      	add	r3, r2
 80021aa:	3354      	adds	r3, #84	; 0x54
 80021ac:	4602      	mov	r2, r0
 80021ae:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	b2d9      	uxtb	r1, r3
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	202c      	movs	r0, #44	; 0x2c
 80021ba:	fb00 f303 	mul.w	r3, r0, r3
 80021be:	4413      	add	r3, r2
 80021c0:	3360      	adds	r3, #96	; 0x60
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	461a      	mov	r2, r3
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f006 f820 	bl	800820c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	691b      	ldr	r3, [r3, #16]
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d12b      	bne.n	800222c <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	212c      	movs	r1, #44	; 0x2c
 80021da:	fb01 f303 	mul.w	r3, r1, r3
 80021de:	4413      	add	r3, r2
 80021e0:	3348      	adds	r3, #72	; 0x48
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	6879      	ldr	r1, [r7, #4]
 80021e6:	68fa      	ldr	r2, [r7, #12]
 80021e8:	202c      	movs	r0, #44	; 0x2c
 80021ea:	fb00 f202 	mul.w	r2, r0, r2
 80021ee:	440a      	add	r2, r1
 80021f0:	3240      	adds	r2, #64	; 0x40
 80021f2:	8812      	ldrh	r2, [r2, #0]
 80021f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80021f8:	f003 0301 	and.w	r3, r3, #1
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	f000 81be 	beq.w	800257e <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	212c      	movs	r1, #44	; 0x2c
 8002208:	fb01 f303 	mul.w	r3, r1, r3
 800220c:	4413      	add	r3, r2
 800220e:	3354      	adds	r3, #84	; 0x54
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	f083 0301 	eor.w	r3, r3, #1
 8002216:	b2d8      	uxtb	r0, r3
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	212c      	movs	r1, #44	; 0x2c
 800221e:	fb01 f303 	mul.w	r3, r1, r3
 8002222:	4413      	add	r3, r2
 8002224:	3354      	adds	r3, #84	; 0x54
 8002226:	4602      	mov	r2, r0
 8002228:	701a      	strb	r2, [r3, #0]
}
 800222a:	e1a8      	b.n	800257e <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	212c      	movs	r1, #44	; 0x2c
 8002232:	fb01 f303 	mul.w	r3, r1, r3
 8002236:	4413      	add	r3, r2
 8002238:	3354      	adds	r3, #84	; 0x54
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	f083 0301 	eor.w	r3, r3, #1
 8002240:	b2d8      	uxtb	r0, r3
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	212c      	movs	r1, #44	; 0x2c
 8002248:	fb01 f303 	mul.w	r3, r1, r3
 800224c:	4413      	add	r3, r2
 800224e:	3354      	adds	r3, #84	; 0x54
 8002250:	4602      	mov	r2, r0
 8002252:	701a      	strb	r2, [r3, #0]
}
 8002254:	e193      	b.n	800257e <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	015a      	lsls	r2, r3, #5
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	4413      	add	r3, r2
 800225e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f003 0302 	and.w	r3, r3, #2
 8002268:	2b02      	cmp	r3, #2
 800226a:	f040 8106 	bne.w	800247a <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	015a      	lsls	r2, r3, #5
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	4413      	add	r3, r2
 8002276:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	68fa      	ldr	r2, [r7, #12]
 800227e:	0151      	lsls	r1, r2, #5
 8002280:	693a      	ldr	r2, [r7, #16]
 8002282:	440a      	add	r2, r1
 8002284:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002288:	f023 0302 	bic.w	r3, r3, #2
 800228c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	212c      	movs	r1, #44	; 0x2c
 8002294:	fb01 f303 	mul.w	r3, r1, r3
 8002298:	4413      	add	r3, r2
 800229a:	3361      	adds	r3, #97	; 0x61
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d109      	bne.n	80022b6 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	212c      	movs	r1, #44	; 0x2c
 80022a8:	fb01 f303 	mul.w	r3, r1, r3
 80022ac:	4413      	add	r3, r2
 80022ae:	3360      	adds	r3, #96	; 0x60
 80022b0:	2201      	movs	r2, #1
 80022b2:	701a      	strb	r2, [r3, #0]
 80022b4:	e0c9      	b.n	800244a <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	212c      	movs	r1, #44	; 0x2c
 80022bc:	fb01 f303 	mul.w	r3, r1, r3
 80022c0:	4413      	add	r3, r2
 80022c2:	3361      	adds	r3, #97	; 0x61
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	2b05      	cmp	r3, #5
 80022c8:	d109      	bne.n	80022de <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	212c      	movs	r1, #44	; 0x2c
 80022d0:	fb01 f303 	mul.w	r3, r1, r3
 80022d4:	4413      	add	r3, r2
 80022d6:	3360      	adds	r3, #96	; 0x60
 80022d8:	2205      	movs	r2, #5
 80022da:	701a      	strb	r2, [r3, #0]
 80022dc:	e0b5      	b.n	800244a <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	212c      	movs	r1, #44	; 0x2c
 80022e4:	fb01 f303 	mul.w	r3, r1, r3
 80022e8:	4413      	add	r3, r2
 80022ea:	3361      	adds	r3, #97	; 0x61
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	2b06      	cmp	r3, #6
 80022f0:	d009      	beq.n	8002306 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	212c      	movs	r1, #44	; 0x2c
 80022f8:	fb01 f303 	mul.w	r3, r1, r3
 80022fc:	4413      	add	r3, r2
 80022fe:	3361      	adds	r3, #97	; 0x61
 8002300:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002302:	2b08      	cmp	r3, #8
 8002304:	d150      	bne.n	80023a8 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	212c      	movs	r1, #44	; 0x2c
 800230c:	fb01 f303 	mul.w	r3, r1, r3
 8002310:	4413      	add	r3, r2
 8002312:	335c      	adds	r3, #92	; 0x5c
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	1c5a      	adds	r2, r3, #1
 8002318:	6879      	ldr	r1, [r7, #4]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	202c      	movs	r0, #44	; 0x2c
 800231e:	fb00 f303 	mul.w	r3, r0, r3
 8002322:	440b      	add	r3, r1
 8002324:	335c      	adds	r3, #92	; 0x5c
 8002326:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	212c      	movs	r1, #44	; 0x2c
 800232e:	fb01 f303 	mul.w	r3, r1, r3
 8002332:	4413      	add	r3, r2
 8002334:	335c      	adds	r3, #92	; 0x5c
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2b02      	cmp	r3, #2
 800233a:	d912      	bls.n	8002362 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	212c      	movs	r1, #44	; 0x2c
 8002342:	fb01 f303 	mul.w	r3, r1, r3
 8002346:	4413      	add	r3, r2
 8002348:	335c      	adds	r3, #92	; 0x5c
 800234a:	2200      	movs	r2, #0
 800234c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	212c      	movs	r1, #44	; 0x2c
 8002354:	fb01 f303 	mul.w	r3, r1, r3
 8002358:	4413      	add	r3, r2
 800235a:	3360      	adds	r3, #96	; 0x60
 800235c:	2204      	movs	r2, #4
 800235e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002360:	e073      	b.n	800244a <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	212c      	movs	r1, #44	; 0x2c
 8002368:	fb01 f303 	mul.w	r3, r1, r3
 800236c:	4413      	add	r3, r2
 800236e:	3360      	adds	r3, #96	; 0x60
 8002370:	2202      	movs	r2, #2
 8002372:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	015a      	lsls	r2, r3, #5
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	4413      	add	r3, r2
 800237c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800238a:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002392:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	015a      	lsls	r2, r3, #5
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	4413      	add	r3, r2
 800239c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023a0:	461a      	mov	r2, r3
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80023a6:	e050      	b.n	800244a <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	212c      	movs	r1, #44	; 0x2c
 80023ae:	fb01 f303 	mul.w	r3, r1, r3
 80023b2:	4413      	add	r3, r2
 80023b4:	3361      	adds	r3, #97	; 0x61
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	2b03      	cmp	r3, #3
 80023ba:	d122      	bne.n	8002402 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	212c      	movs	r1, #44	; 0x2c
 80023c2:	fb01 f303 	mul.w	r3, r1, r3
 80023c6:	4413      	add	r3, r2
 80023c8:	3360      	adds	r3, #96	; 0x60
 80023ca:	2202      	movs	r2, #2
 80023cc:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	015a      	lsls	r2, r3, #5
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	4413      	add	r3, r2
 80023d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80023e4:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80023ec:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	015a      	lsls	r2, r3, #5
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	4413      	add	r3, r2
 80023f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023fa:	461a      	mov	r2, r3
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	6013      	str	r3, [r2, #0]
 8002400:	e023      	b.n	800244a <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	212c      	movs	r1, #44	; 0x2c
 8002408:	fb01 f303 	mul.w	r3, r1, r3
 800240c:	4413      	add	r3, r2
 800240e:	3361      	adds	r3, #97	; 0x61
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	2b07      	cmp	r3, #7
 8002414:	d119      	bne.n	800244a <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	212c      	movs	r1, #44	; 0x2c
 800241c:	fb01 f303 	mul.w	r3, r1, r3
 8002420:	4413      	add	r3, r2
 8002422:	335c      	adds	r3, #92	; 0x5c
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	1c5a      	adds	r2, r3, #1
 8002428:	6879      	ldr	r1, [r7, #4]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	202c      	movs	r0, #44	; 0x2c
 800242e:	fb00 f303 	mul.w	r3, r0, r3
 8002432:	440b      	add	r3, r1
 8002434:	335c      	adds	r3, #92	; 0x5c
 8002436:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	212c      	movs	r1, #44	; 0x2c
 800243e:	fb01 f303 	mul.w	r3, r1, r3
 8002442:	4413      	add	r3, r2
 8002444:	3360      	adds	r3, #96	; 0x60
 8002446:	2204      	movs	r2, #4
 8002448:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	015a      	lsls	r2, r3, #5
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	4413      	add	r3, r2
 8002452:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002456:	461a      	mov	r2, r3
 8002458:	2302      	movs	r3, #2
 800245a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	b2d9      	uxtb	r1, r3
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	202c      	movs	r0, #44	; 0x2c
 8002466:	fb00 f303 	mul.w	r3, r0, r3
 800246a:	4413      	add	r3, r2
 800246c:	3360      	adds	r3, #96	; 0x60
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	461a      	mov	r2, r3
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f005 feca 	bl	800820c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002478:	e081      	b.n	800257e <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	015a      	lsls	r2, r3, #5
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	4413      	add	r3, r2
 8002482:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f003 0310 	and.w	r3, r3, #16
 800248c:	2b10      	cmp	r3, #16
 800248e:	d176      	bne.n	800257e <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	212c      	movs	r1, #44	; 0x2c
 8002496:	fb01 f303 	mul.w	r3, r1, r3
 800249a:	4413      	add	r3, r2
 800249c:	333f      	adds	r3, #63	; 0x3f
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	2b03      	cmp	r3, #3
 80024a2:	d121      	bne.n	80024e8 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	212c      	movs	r1, #44	; 0x2c
 80024aa:	fb01 f303 	mul.w	r3, r1, r3
 80024ae:	4413      	add	r3, r2
 80024b0:	335c      	adds	r3, #92	; 0x5c
 80024b2:	2200      	movs	r2, #0
 80024b4:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	015a      	lsls	r2, r3, #5
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	4413      	add	r3, r2
 80024be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	68fa      	ldr	r2, [r7, #12]
 80024c6:	0151      	lsls	r1, r2, #5
 80024c8:	693a      	ldr	r2, [r7, #16]
 80024ca:	440a      	add	r2, r1
 80024cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024d0:	f043 0302 	orr.w	r3, r3, #2
 80024d4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68fa      	ldr	r2, [r7, #12]
 80024dc:	b2d2      	uxtb	r2, r2
 80024de:	4611      	mov	r1, r2
 80024e0:	4618      	mov	r0, r3
 80024e2:	f003 fcd6 	bl	8005e92 <USB_HC_Halt>
 80024e6:	e041      	b.n	800256c <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	212c      	movs	r1, #44	; 0x2c
 80024ee:	fb01 f303 	mul.w	r3, r1, r3
 80024f2:	4413      	add	r3, r2
 80024f4:	333f      	adds	r3, #63	; 0x3f
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d009      	beq.n	8002510 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	212c      	movs	r1, #44	; 0x2c
 8002502:	fb01 f303 	mul.w	r3, r1, r3
 8002506:	4413      	add	r3, r2
 8002508:	333f      	adds	r3, #63	; 0x3f
 800250a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800250c:	2b02      	cmp	r3, #2
 800250e:	d12d      	bne.n	800256c <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	212c      	movs	r1, #44	; 0x2c
 8002516:	fb01 f303 	mul.w	r3, r1, r3
 800251a:	4413      	add	r3, r2
 800251c:	335c      	adds	r3, #92	; 0x5c
 800251e:	2200      	movs	r2, #0
 8002520:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d120      	bne.n	800256c <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	212c      	movs	r1, #44	; 0x2c
 8002530:	fb01 f303 	mul.w	r3, r1, r3
 8002534:	4413      	add	r3, r2
 8002536:	3361      	adds	r3, #97	; 0x61
 8002538:	2203      	movs	r2, #3
 800253a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	015a      	lsls	r2, r3, #5
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	4413      	add	r3, r2
 8002544:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	68fa      	ldr	r2, [r7, #12]
 800254c:	0151      	lsls	r1, r2, #5
 800254e:	693a      	ldr	r2, [r7, #16]
 8002550:	440a      	add	r2, r1
 8002552:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002556:	f043 0302 	orr.w	r3, r3, #2
 800255a:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	68fa      	ldr	r2, [r7, #12]
 8002562:	b2d2      	uxtb	r2, r2
 8002564:	4611      	mov	r1, r2
 8002566:	4618      	mov	r0, r3
 8002568:	f003 fc93 	bl	8005e92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	015a      	lsls	r2, r3, #5
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	4413      	add	r3, r2
 8002574:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002578:	461a      	mov	r2, r3
 800257a:	2310      	movs	r3, #16
 800257c:	6093      	str	r3, [r2, #8]
}
 800257e:	bf00      	nop
 8002580:	3718      	adds	r7, #24
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b088      	sub	sp, #32
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
 800258e:	460b      	mov	r3, r1
 8002590:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800259c:	78fb      	ldrb	r3, [r7, #3]
 800259e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	015a      	lsls	r2, r3, #5
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	4413      	add	r3, r2
 80025a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f003 0304 	and.w	r3, r3, #4
 80025b2:	2b04      	cmp	r3, #4
 80025b4:	d119      	bne.n	80025ea <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	015a      	lsls	r2, r3, #5
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	4413      	add	r3, r2
 80025be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025c2:	461a      	mov	r2, r3
 80025c4:	2304      	movs	r3, #4
 80025c6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	015a      	lsls	r2, r3, #5
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	4413      	add	r3, r2
 80025d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	697a      	ldr	r2, [r7, #20]
 80025d8:	0151      	lsls	r1, r2, #5
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	440a      	add	r2, r1
 80025de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025e2:	f043 0302 	orr.w	r3, r3, #2
 80025e6:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80025e8:	e3ca      	b.n	8002d80 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	015a      	lsls	r2, r3, #5
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	4413      	add	r3, r2
 80025f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f003 0320 	and.w	r3, r3, #32
 80025fc:	2b20      	cmp	r3, #32
 80025fe:	d13e      	bne.n	800267e <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	015a      	lsls	r2, r3, #5
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	4413      	add	r3, r2
 8002608:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800260c:	461a      	mov	r2, r3
 800260e:	2320      	movs	r3, #32
 8002610:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	212c      	movs	r1, #44	; 0x2c
 8002618:	fb01 f303 	mul.w	r3, r1, r3
 800261c:	4413      	add	r3, r2
 800261e:	333d      	adds	r3, #61	; 0x3d
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	2b01      	cmp	r3, #1
 8002624:	f040 83ac 	bne.w	8002d80 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	212c      	movs	r1, #44	; 0x2c
 800262e:	fb01 f303 	mul.w	r3, r1, r3
 8002632:	4413      	add	r3, r2
 8002634:	333d      	adds	r3, #61	; 0x3d
 8002636:	2200      	movs	r2, #0
 8002638:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	212c      	movs	r1, #44	; 0x2c
 8002640:	fb01 f303 	mul.w	r3, r1, r3
 8002644:	4413      	add	r3, r2
 8002646:	3360      	adds	r3, #96	; 0x60
 8002648:	2202      	movs	r2, #2
 800264a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	015a      	lsls	r2, r3, #5
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	4413      	add	r3, r2
 8002654:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	697a      	ldr	r2, [r7, #20]
 800265c:	0151      	lsls	r1, r2, #5
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	440a      	add	r2, r1
 8002662:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002666:	f043 0302 	orr.w	r3, r3, #2
 800266a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	697a      	ldr	r2, [r7, #20]
 8002672:	b2d2      	uxtb	r2, r2
 8002674:	4611      	mov	r1, r2
 8002676:	4618      	mov	r0, r3
 8002678:	f003 fc0b 	bl	8005e92 <USB_HC_Halt>
}
 800267c:	e380      	b.n	8002d80 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	015a      	lsls	r2, r3, #5
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	4413      	add	r3, r2
 8002686:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002690:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002694:	d122      	bne.n	80026dc <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	015a      	lsls	r2, r3, #5
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	4413      	add	r3, r2
 800269e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	697a      	ldr	r2, [r7, #20]
 80026a6:	0151      	lsls	r1, r2, #5
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	440a      	add	r2, r1
 80026ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026b0:	f043 0302 	orr.w	r3, r3, #2
 80026b4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	697a      	ldr	r2, [r7, #20]
 80026bc:	b2d2      	uxtb	r2, r2
 80026be:	4611      	mov	r1, r2
 80026c0:	4618      	mov	r0, r3
 80026c2:	f003 fbe6 	bl	8005e92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	015a      	lsls	r2, r3, #5
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	4413      	add	r3, r2
 80026ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026d2:	461a      	mov	r2, r3
 80026d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026d8:	6093      	str	r3, [r2, #8]
}
 80026da:	e351      	b.n	8002d80 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	015a      	lsls	r2, r3, #5
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	4413      	add	r3, r2
 80026e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f003 0301 	and.w	r3, r3, #1
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d150      	bne.n	8002794 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	212c      	movs	r1, #44	; 0x2c
 80026f8:	fb01 f303 	mul.w	r3, r1, r3
 80026fc:	4413      	add	r3, r2
 80026fe:	335c      	adds	r3, #92	; 0x5c
 8002700:	2200      	movs	r2, #0
 8002702:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	015a      	lsls	r2, r3, #5
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	4413      	add	r3, r2
 800270c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002716:	2b40      	cmp	r3, #64	; 0x40
 8002718:	d111      	bne.n	800273e <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	212c      	movs	r1, #44	; 0x2c
 8002720:	fb01 f303 	mul.w	r3, r1, r3
 8002724:	4413      	add	r3, r2
 8002726:	333d      	adds	r3, #61	; 0x3d
 8002728:	2201      	movs	r2, #1
 800272a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	015a      	lsls	r2, r3, #5
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	4413      	add	r3, r2
 8002734:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002738:	461a      	mov	r2, r3
 800273a:	2340      	movs	r3, #64	; 0x40
 800273c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	015a      	lsls	r2, r3, #5
 8002742:	69bb      	ldr	r3, [r7, #24]
 8002744:	4413      	add	r3, r2
 8002746:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	697a      	ldr	r2, [r7, #20]
 800274e:	0151      	lsls	r1, r2, #5
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	440a      	add	r2, r1
 8002754:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002758:	f043 0302 	orr.w	r3, r3, #2
 800275c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	697a      	ldr	r2, [r7, #20]
 8002764:	b2d2      	uxtb	r2, r2
 8002766:	4611      	mov	r1, r2
 8002768:	4618      	mov	r0, r3
 800276a:	f003 fb92 	bl	8005e92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	015a      	lsls	r2, r3, #5
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	4413      	add	r3, r2
 8002776:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800277a:	461a      	mov	r2, r3
 800277c:	2301      	movs	r3, #1
 800277e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	212c      	movs	r1, #44	; 0x2c
 8002786:	fb01 f303 	mul.w	r3, r1, r3
 800278a:	4413      	add	r3, r2
 800278c:	3361      	adds	r3, #97	; 0x61
 800278e:	2201      	movs	r2, #1
 8002790:	701a      	strb	r2, [r3, #0]
}
 8002792:	e2f5      	b.n	8002d80 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	015a      	lsls	r2, r3, #5
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	4413      	add	r3, r2
 800279c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027a6:	2b40      	cmp	r3, #64	; 0x40
 80027a8:	d13c      	bne.n	8002824 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	212c      	movs	r1, #44	; 0x2c
 80027b0:	fb01 f303 	mul.w	r3, r1, r3
 80027b4:	4413      	add	r3, r2
 80027b6:	3361      	adds	r3, #97	; 0x61
 80027b8:	2204      	movs	r2, #4
 80027ba:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	212c      	movs	r1, #44	; 0x2c
 80027c2:	fb01 f303 	mul.w	r3, r1, r3
 80027c6:	4413      	add	r3, r2
 80027c8:	333d      	adds	r3, #61	; 0x3d
 80027ca:	2201      	movs	r2, #1
 80027cc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	212c      	movs	r1, #44	; 0x2c
 80027d4:	fb01 f303 	mul.w	r3, r1, r3
 80027d8:	4413      	add	r3, r2
 80027da:	335c      	adds	r3, #92	; 0x5c
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	015a      	lsls	r2, r3, #5
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	4413      	add	r3, r2
 80027e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	697a      	ldr	r2, [r7, #20]
 80027f0:	0151      	lsls	r1, r2, #5
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	440a      	add	r2, r1
 80027f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027fa:	f043 0302 	orr.w	r3, r3, #2
 80027fe:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	697a      	ldr	r2, [r7, #20]
 8002806:	b2d2      	uxtb	r2, r2
 8002808:	4611      	mov	r1, r2
 800280a:	4618      	mov	r0, r3
 800280c:	f003 fb41 	bl	8005e92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	015a      	lsls	r2, r3, #5
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	4413      	add	r3, r2
 8002818:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800281c:	461a      	mov	r2, r3
 800281e:	2340      	movs	r3, #64	; 0x40
 8002820:	6093      	str	r3, [r2, #8]
}
 8002822:	e2ad      	b.n	8002d80 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	015a      	lsls	r2, r3, #5
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	4413      	add	r3, r2
 800282c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f003 0308 	and.w	r3, r3, #8
 8002836:	2b08      	cmp	r3, #8
 8002838:	d12a      	bne.n	8002890 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	015a      	lsls	r2, r3, #5
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	4413      	add	r3, r2
 8002842:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002846:	461a      	mov	r2, r3
 8002848:	2308      	movs	r3, #8
 800284a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	015a      	lsls	r2, r3, #5
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	4413      	add	r3, r2
 8002854:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	697a      	ldr	r2, [r7, #20]
 800285c:	0151      	lsls	r1, r2, #5
 800285e:	69ba      	ldr	r2, [r7, #24]
 8002860:	440a      	add	r2, r1
 8002862:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002866:	f043 0302 	orr.w	r3, r3, #2
 800286a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	697a      	ldr	r2, [r7, #20]
 8002872:	b2d2      	uxtb	r2, r2
 8002874:	4611      	mov	r1, r2
 8002876:	4618      	mov	r0, r3
 8002878:	f003 fb0b 	bl	8005e92 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	212c      	movs	r1, #44	; 0x2c
 8002882:	fb01 f303 	mul.w	r3, r1, r3
 8002886:	4413      	add	r3, r2
 8002888:	3361      	adds	r3, #97	; 0x61
 800288a:	2205      	movs	r2, #5
 800288c:	701a      	strb	r2, [r3, #0]
}
 800288e:	e277      	b.n	8002d80 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	015a      	lsls	r2, r3, #5
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	4413      	add	r3, r2
 8002898:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f003 0310 	and.w	r3, r3, #16
 80028a2:	2b10      	cmp	r3, #16
 80028a4:	d150      	bne.n	8002948 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	212c      	movs	r1, #44	; 0x2c
 80028ac:	fb01 f303 	mul.w	r3, r1, r3
 80028b0:	4413      	add	r3, r2
 80028b2:	335c      	adds	r3, #92	; 0x5c
 80028b4:	2200      	movs	r2, #0
 80028b6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	212c      	movs	r1, #44	; 0x2c
 80028be:	fb01 f303 	mul.w	r3, r1, r3
 80028c2:	4413      	add	r3, r2
 80028c4:	3361      	adds	r3, #97	; 0x61
 80028c6:	2203      	movs	r2, #3
 80028c8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	212c      	movs	r1, #44	; 0x2c
 80028d0:	fb01 f303 	mul.w	r3, r1, r3
 80028d4:	4413      	add	r3, r2
 80028d6:	333d      	adds	r3, #61	; 0x3d
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d112      	bne.n	8002904 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	212c      	movs	r1, #44	; 0x2c
 80028e4:	fb01 f303 	mul.w	r3, r1, r3
 80028e8:	4413      	add	r3, r2
 80028ea:	333c      	adds	r3, #60	; 0x3c
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d108      	bne.n	8002904 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	212c      	movs	r1, #44	; 0x2c
 80028f8:	fb01 f303 	mul.w	r3, r1, r3
 80028fc:	4413      	add	r3, r2
 80028fe:	333d      	adds	r3, #61	; 0x3d
 8002900:	2201      	movs	r2, #1
 8002902:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	015a      	lsls	r2, r3, #5
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	4413      	add	r3, r2
 800290c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	697a      	ldr	r2, [r7, #20]
 8002914:	0151      	lsls	r1, r2, #5
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	440a      	add	r2, r1
 800291a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800291e:	f043 0302 	orr.w	r3, r3, #2
 8002922:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	697a      	ldr	r2, [r7, #20]
 800292a:	b2d2      	uxtb	r2, r2
 800292c:	4611      	mov	r1, r2
 800292e:	4618      	mov	r0, r3
 8002930:	f003 faaf 	bl	8005e92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	015a      	lsls	r2, r3, #5
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	4413      	add	r3, r2
 800293c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002940:	461a      	mov	r2, r3
 8002942:	2310      	movs	r3, #16
 8002944:	6093      	str	r3, [r2, #8]
}
 8002946:	e21b      	b.n	8002d80 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	015a      	lsls	r2, r3, #5
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	4413      	add	r3, r2
 8002950:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800295a:	2b80      	cmp	r3, #128	; 0x80
 800295c:	d174      	bne.n	8002a48 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d121      	bne.n	80029aa <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	212c      	movs	r1, #44	; 0x2c
 800296c:	fb01 f303 	mul.w	r3, r1, r3
 8002970:	4413      	add	r3, r2
 8002972:	3361      	adds	r3, #97	; 0x61
 8002974:	2206      	movs	r2, #6
 8002976:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	015a      	lsls	r2, r3, #5
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	4413      	add	r3, r2
 8002980:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	697a      	ldr	r2, [r7, #20]
 8002988:	0151      	lsls	r1, r2, #5
 800298a:	69ba      	ldr	r2, [r7, #24]
 800298c:	440a      	add	r2, r1
 800298e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002992:	f043 0302 	orr.w	r3, r3, #2
 8002996:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	697a      	ldr	r2, [r7, #20]
 800299e:	b2d2      	uxtb	r2, r2
 80029a0:	4611      	mov	r1, r2
 80029a2:	4618      	mov	r0, r3
 80029a4:	f003 fa75 	bl	8005e92 <USB_HC_Halt>
 80029a8:	e044      	b.n	8002a34 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	212c      	movs	r1, #44	; 0x2c
 80029b0:	fb01 f303 	mul.w	r3, r1, r3
 80029b4:	4413      	add	r3, r2
 80029b6:	335c      	adds	r3, #92	; 0x5c
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	1c5a      	adds	r2, r3, #1
 80029bc:	6879      	ldr	r1, [r7, #4]
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	202c      	movs	r0, #44	; 0x2c
 80029c2:	fb00 f303 	mul.w	r3, r0, r3
 80029c6:	440b      	add	r3, r1
 80029c8:	335c      	adds	r3, #92	; 0x5c
 80029ca:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	212c      	movs	r1, #44	; 0x2c
 80029d2:	fb01 f303 	mul.w	r3, r1, r3
 80029d6:	4413      	add	r3, r2
 80029d8:	335c      	adds	r3, #92	; 0x5c
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d920      	bls.n	8002a22 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	212c      	movs	r1, #44	; 0x2c
 80029e6:	fb01 f303 	mul.w	r3, r1, r3
 80029ea:	4413      	add	r3, r2
 80029ec:	335c      	adds	r3, #92	; 0x5c
 80029ee:	2200      	movs	r2, #0
 80029f0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	212c      	movs	r1, #44	; 0x2c
 80029f8:	fb01 f303 	mul.w	r3, r1, r3
 80029fc:	4413      	add	r3, r2
 80029fe:	3360      	adds	r3, #96	; 0x60
 8002a00:	2204      	movs	r2, #4
 8002a02:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	b2d9      	uxtb	r1, r3
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	202c      	movs	r0, #44	; 0x2c
 8002a0e:	fb00 f303 	mul.w	r3, r0, r3
 8002a12:	4413      	add	r3, r2
 8002a14:	3360      	adds	r3, #96	; 0x60
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	461a      	mov	r2, r3
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f005 fbf6 	bl	800820c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002a20:	e008      	b.n	8002a34 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	212c      	movs	r1, #44	; 0x2c
 8002a28:	fb01 f303 	mul.w	r3, r1, r3
 8002a2c:	4413      	add	r3, r2
 8002a2e:	3360      	adds	r3, #96	; 0x60
 8002a30:	2202      	movs	r2, #2
 8002a32:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	015a      	lsls	r2, r3, #5
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a40:	461a      	mov	r2, r3
 8002a42:	2380      	movs	r3, #128	; 0x80
 8002a44:	6093      	str	r3, [r2, #8]
}
 8002a46:	e19b      	b.n	8002d80 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	015a      	lsls	r2, r3, #5
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	4413      	add	r3, r2
 8002a50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a5e:	d134      	bne.n	8002aca <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	015a      	lsls	r2, r3, #5
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	4413      	add	r3, r2
 8002a68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	697a      	ldr	r2, [r7, #20]
 8002a70:	0151      	lsls	r1, r2, #5
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	440a      	add	r2, r1
 8002a76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a7a:	f043 0302 	orr.w	r3, r3, #2
 8002a7e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	697a      	ldr	r2, [r7, #20]
 8002a86:	b2d2      	uxtb	r2, r2
 8002a88:	4611      	mov	r1, r2
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f003 fa01 	bl	8005e92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	015a      	lsls	r2, r3, #5
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	4413      	add	r3, r2
 8002a98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	2310      	movs	r3, #16
 8002aa0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	015a      	lsls	r2, r3, #5
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	4413      	add	r3, r2
 8002aaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aae:	461a      	mov	r2, r3
 8002ab0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ab4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	212c      	movs	r1, #44	; 0x2c
 8002abc:	fb01 f303 	mul.w	r3, r1, r3
 8002ac0:	4413      	add	r3, r2
 8002ac2:	3361      	adds	r3, #97	; 0x61
 8002ac4:	2208      	movs	r2, #8
 8002ac6:	701a      	strb	r2, [r3, #0]
}
 8002ac8:	e15a      	b.n	8002d80 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	015a      	lsls	r2, r3, #5
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	f003 0302 	and.w	r3, r3, #2
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	f040 814f 	bne.w	8002d80 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	015a      	lsls	r2, r3, #5
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	4413      	add	r3, r2
 8002aea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	697a      	ldr	r2, [r7, #20]
 8002af2:	0151      	lsls	r1, r2, #5
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	440a      	add	r2, r1
 8002af8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002afc:	f023 0302 	bic.w	r3, r3, #2
 8002b00:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	212c      	movs	r1, #44	; 0x2c
 8002b08:	fb01 f303 	mul.w	r3, r1, r3
 8002b0c:	4413      	add	r3, r2
 8002b0e:	3361      	adds	r3, #97	; 0x61
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d17d      	bne.n	8002c12 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	212c      	movs	r1, #44	; 0x2c
 8002b1c:	fb01 f303 	mul.w	r3, r1, r3
 8002b20:	4413      	add	r3, r2
 8002b22:	3360      	adds	r3, #96	; 0x60
 8002b24:	2201      	movs	r2, #1
 8002b26:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	212c      	movs	r1, #44	; 0x2c
 8002b2e:	fb01 f303 	mul.w	r3, r1, r3
 8002b32:	4413      	add	r3, r2
 8002b34:	333f      	adds	r3, #63	; 0x3f
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d00a      	beq.n	8002b52 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	212c      	movs	r1, #44	; 0x2c
 8002b42:	fb01 f303 	mul.w	r3, r1, r3
 8002b46:	4413      	add	r3, r2
 8002b48:	333f      	adds	r3, #63	; 0x3f
 8002b4a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002b4c:	2b03      	cmp	r3, #3
 8002b4e:	f040 8100 	bne.w	8002d52 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d113      	bne.n	8002b82 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	212c      	movs	r1, #44	; 0x2c
 8002b60:	fb01 f303 	mul.w	r3, r1, r3
 8002b64:	4413      	add	r3, r2
 8002b66:	3355      	adds	r3, #85	; 0x55
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	f083 0301 	eor.w	r3, r3, #1
 8002b6e:	b2d8      	uxtb	r0, r3
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	212c      	movs	r1, #44	; 0x2c
 8002b76:	fb01 f303 	mul.w	r3, r1, r3
 8002b7a:	4413      	add	r3, r2
 8002b7c:	3355      	adds	r3, #85	; 0x55
 8002b7e:	4602      	mov	r2, r0
 8002b80:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	f040 80e3 	bne.w	8002d52 <HCD_HC_OUT_IRQHandler+0x7cc>
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	212c      	movs	r1, #44	; 0x2c
 8002b92:	fb01 f303 	mul.w	r3, r1, r3
 8002b96:	4413      	add	r3, r2
 8002b98:	334c      	adds	r3, #76	; 0x4c
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	f000 80d8 	beq.w	8002d52 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	212c      	movs	r1, #44	; 0x2c
 8002ba8:	fb01 f303 	mul.w	r3, r1, r3
 8002bac:	4413      	add	r3, r2
 8002bae:	334c      	adds	r3, #76	; 0x4c
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	6879      	ldr	r1, [r7, #4]
 8002bb4:	697a      	ldr	r2, [r7, #20]
 8002bb6:	202c      	movs	r0, #44	; 0x2c
 8002bb8:	fb00 f202 	mul.w	r2, r0, r2
 8002bbc:	440a      	add	r2, r1
 8002bbe:	3240      	adds	r2, #64	; 0x40
 8002bc0:	8812      	ldrh	r2, [r2, #0]
 8002bc2:	4413      	add	r3, r2
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	6879      	ldr	r1, [r7, #4]
 8002bc8:	697a      	ldr	r2, [r7, #20]
 8002bca:	202c      	movs	r0, #44	; 0x2c
 8002bcc:	fb00 f202 	mul.w	r2, r0, r2
 8002bd0:	440a      	add	r2, r1
 8002bd2:	3240      	adds	r2, #64	; 0x40
 8002bd4:	8812      	ldrh	r2, [r2, #0]
 8002bd6:	fbb3 f3f2 	udiv	r3, r3, r2
 8002bda:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	f000 80b5 	beq.w	8002d52 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	212c      	movs	r1, #44	; 0x2c
 8002bee:	fb01 f303 	mul.w	r3, r1, r3
 8002bf2:	4413      	add	r3, r2
 8002bf4:	3355      	adds	r3, #85	; 0x55
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	f083 0301 	eor.w	r3, r3, #1
 8002bfc:	b2d8      	uxtb	r0, r3
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	212c      	movs	r1, #44	; 0x2c
 8002c04:	fb01 f303 	mul.w	r3, r1, r3
 8002c08:	4413      	add	r3, r2
 8002c0a:	3355      	adds	r3, #85	; 0x55
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	701a      	strb	r2, [r3, #0]
 8002c10:	e09f      	b.n	8002d52 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	212c      	movs	r1, #44	; 0x2c
 8002c18:	fb01 f303 	mul.w	r3, r1, r3
 8002c1c:	4413      	add	r3, r2
 8002c1e:	3361      	adds	r3, #97	; 0x61
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	2b03      	cmp	r3, #3
 8002c24:	d109      	bne.n	8002c3a <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	212c      	movs	r1, #44	; 0x2c
 8002c2c:	fb01 f303 	mul.w	r3, r1, r3
 8002c30:	4413      	add	r3, r2
 8002c32:	3360      	adds	r3, #96	; 0x60
 8002c34:	2202      	movs	r2, #2
 8002c36:	701a      	strb	r2, [r3, #0]
 8002c38:	e08b      	b.n	8002d52 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	212c      	movs	r1, #44	; 0x2c
 8002c40:	fb01 f303 	mul.w	r3, r1, r3
 8002c44:	4413      	add	r3, r2
 8002c46:	3361      	adds	r3, #97	; 0x61
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	2b04      	cmp	r3, #4
 8002c4c:	d109      	bne.n	8002c62 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	212c      	movs	r1, #44	; 0x2c
 8002c54:	fb01 f303 	mul.w	r3, r1, r3
 8002c58:	4413      	add	r3, r2
 8002c5a:	3360      	adds	r3, #96	; 0x60
 8002c5c:	2202      	movs	r2, #2
 8002c5e:	701a      	strb	r2, [r3, #0]
 8002c60:	e077      	b.n	8002d52 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	212c      	movs	r1, #44	; 0x2c
 8002c68:	fb01 f303 	mul.w	r3, r1, r3
 8002c6c:	4413      	add	r3, r2
 8002c6e:	3361      	adds	r3, #97	; 0x61
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	2b05      	cmp	r3, #5
 8002c74:	d109      	bne.n	8002c8a <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	212c      	movs	r1, #44	; 0x2c
 8002c7c:	fb01 f303 	mul.w	r3, r1, r3
 8002c80:	4413      	add	r3, r2
 8002c82:	3360      	adds	r3, #96	; 0x60
 8002c84:	2205      	movs	r2, #5
 8002c86:	701a      	strb	r2, [r3, #0]
 8002c88:	e063      	b.n	8002d52 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	212c      	movs	r1, #44	; 0x2c
 8002c90:	fb01 f303 	mul.w	r3, r1, r3
 8002c94:	4413      	add	r3, r2
 8002c96:	3361      	adds	r3, #97	; 0x61
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	2b06      	cmp	r3, #6
 8002c9c:	d009      	beq.n	8002cb2 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	212c      	movs	r1, #44	; 0x2c
 8002ca4:	fb01 f303 	mul.w	r3, r1, r3
 8002ca8:	4413      	add	r3, r2
 8002caa:	3361      	adds	r3, #97	; 0x61
 8002cac:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002cae:	2b08      	cmp	r3, #8
 8002cb0:	d14f      	bne.n	8002d52 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	212c      	movs	r1, #44	; 0x2c
 8002cb8:	fb01 f303 	mul.w	r3, r1, r3
 8002cbc:	4413      	add	r3, r2
 8002cbe:	335c      	adds	r3, #92	; 0x5c
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	1c5a      	adds	r2, r3, #1
 8002cc4:	6879      	ldr	r1, [r7, #4]
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	202c      	movs	r0, #44	; 0x2c
 8002cca:	fb00 f303 	mul.w	r3, r0, r3
 8002cce:	440b      	add	r3, r1
 8002cd0:	335c      	adds	r3, #92	; 0x5c
 8002cd2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	212c      	movs	r1, #44	; 0x2c
 8002cda:	fb01 f303 	mul.w	r3, r1, r3
 8002cde:	4413      	add	r3, r2
 8002ce0:	335c      	adds	r3, #92	; 0x5c
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d912      	bls.n	8002d0e <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	212c      	movs	r1, #44	; 0x2c
 8002cee:	fb01 f303 	mul.w	r3, r1, r3
 8002cf2:	4413      	add	r3, r2
 8002cf4:	335c      	adds	r3, #92	; 0x5c
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	212c      	movs	r1, #44	; 0x2c
 8002d00:	fb01 f303 	mul.w	r3, r1, r3
 8002d04:	4413      	add	r3, r2
 8002d06:	3360      	adds	r3, #96	; 0x60
 8002d08:	2204      	movs	r2, #4
 8002d0a:	701a      	strb	r2, [r3, #0]
 8002d0c:	e021      	b.n	8002d52 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	212c      	movs	r1, #44	; 0x2c
 8002d14:	fb01 f303 	mul.w	r3, r1, r3
 8002d18:	4413      	add	r3, r2
 8002d1a:	3360      	adds	r3, #96	; 0x60
 8002d1c:	2202      	movs	r2, #2
 8002d1e:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	015a      	lsls	r2, r3, #5
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	4413      	add	r3, r2
 8002d28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d36:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d3e:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	015a      	lsls	r2, r3, #5
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	4413      	add	r3, r2
 8002d48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	015a      	lsls	r2, r3, #5
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	4413      	add	r3, r2
 8002d5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d5e:	461a      	mov	r2, r3
 8002d60:	2302      	movs	r3, #2
 8002d62:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	b2d9      	uxtb	r1, r3
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	202c      	movs	r0, #44	; 0x2c
 8002d6e:	fb00 f303 	mul.w	r3, r0, r3
 8002d72:	4413      	add	r3, r2
 8002d74:	3360      	adds	r3, #96	; 0x60
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	461a      	mov	r2, r3
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f005 fa46 	bl	800820c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002d80:	bf00      	nop
 8002d82:	3720      	adds	r7, #32
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b08a      	sub	sp, #40	; 0x28
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d98:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	6a1b      	ldr	r3, [r3, #32]
 8002da0:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	f003 030f 	and.w	r3, r3, #15
 8002da8:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	0c5b      	lsrs	r3, r3, #17
 8002dae:	f003 030f 	and.w	r3, r3, #15
 8002db2:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	091b      	lsrs	r3, r3, #4
 8002db8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002dbc:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d004      	beq.n	8002dce <HCD_RXQLVL_IRQHandler+0x46>
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	2b05      	cmp	r3, #5
 8002dc8:	f000 80a9 	beq.w	8002f1e <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002dcc:	e0aa      	b.n	8002f24 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	f000 80a6 	beq.w	8002f22 <HCD_RXQLVL_IRQHandler+0x19a>
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	212c      	movs	r1, #44	; 0x2c
 8002ddc:	fb01 f303 	mul.w	r3, r1, r3
 8002de0:	4413      	add	r3, r2
 8002de2:	3344      	adds	r3, #68	; 0x44
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	f000 809b 	beq.w	8002f22 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	212c      	movs	r1, #44	; 0x2c
 8002df2:	fb01 f303 	mul.w	r3, r1, r3
 8002df6:	4413      	add	r3, r2
 8002df8:	3350      	adds	r3, #80	; 0x50
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	441a      	add	r2, r3
 8002e00:	6879      	ldr	r1, [r7, #4]
 8002e02:	69bb      	ldr	r3, [r7, #24]
 8002e04:	202c      	movs	r0, #44	; 0x2c
 8002e06:	fb00 f303 	mul.w	r3, r0, r3
 8002e0a:	440b      	add	r3, r1
 8002e0c:	334c      	adds	r3, #76	; 0x4c
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d87a      	bhi.n	8002f0a <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6818      	ldr	r0, [r3, #0]
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	212c      	movs	r1, #44	; 0x2c
 8002e1e:	fb01 f303 	mul.w	r3, r1, r3
 8002e22:	4413      	add	r3, r2
 8002e24:	3344      	adds	r3, #68	; 0x44
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	693a      	ldr	r2, [r7, #16]
 8002e2a:	b292      	uxth	r2, r2
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	f002 fba9 	bl	8005584 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	212c      	movs	r1, #44	; 0x2c
 8002e38:	fb01 f303 	mul.w	r3, r1, r3
 8002e3c:	4413      	add	r3, r2
 8002e3e:	3344      	adds	r3, #68	; 0x44
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	441a      	add	r2, r3
 8002e46:	6879      	ldr	r1, [r7, #4]
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	202c      	movs	r0, #44	; 0x2c
 8002e4c:	fb00 f303 	mul.w	r3, r0, r3
 8002e50:	440b      	add	r3, r1
 8002e52:	3344      	adds	r3, #68	; 0x44
 8002e54:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	212c      	movs	r1, #44	; 0x2c
 8002e5c:	fb01 f303 	mul.w	r3, r1, r3
 8002e60:	4413      	add	r3, r2
 8002e62:	3350      	adds	r3, #80	; 0x50
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	441a      	add	r2, r3
 8002e6a:	6879      	ldr	r1, [r7, #4]
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	202c      	movs	r0, #44	; 0x2c
 8002e70:	fb00 f303 	mul.w	r3, r0, r3
 8002e74:	440b      	add	r3, r1
 8002e76:	3350      	adds	r3, #80	; 0x50
 8002e78:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	015a      	lsls	r2, r3, #5
 8002e7e:	6a3b      	ldr	r3, [r7, #32]
 8002e80:	4413      	add	r3, r2
 8002e82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e86:	691b      	ldr	r3, [r3, #16]
 8002e88:	0cdb      	lsrs	r3, r3, #19
 8002e8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e8e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	212c      	movs	r1, #44	; 0x2c
 8002e96:	fb01 f303 	mul.w	r3, r1, r3
 8002e9a:	4413      	add	r3, r2
 8002e9c:	3340      	adds	r3, #64	; 0x40
 8002e9e:	881b      	ldrh	r3, [r3, #0]
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d13c      	bne.n	8002f22 <HCD_RXQLVL_IRQHandler+0x19a>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d039      	beq.n	8002f22 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	015a      	lsls	r2, r3, #5
 8002eb2:	6a3b      	ldr	r3, [r7, #32]
 8002eb4:	4413      	add	r3, r2
 8002eb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ec4:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ecc:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	015a      	lsls	r2, r3, #5
 8002ed2:	6a3b      	ldr	r3, [r7, #32]
 8002ed4:	4413      	add	r3, r2
 8002ed6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eda:	461a      	mov	r2, r3
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	212c      	movs	r1, #44	; 0x2c
 8002ee6:	fb01 f303 	mul.w	r3, r1, r3
 8002eea:	4413      	add	r3, r2
 8002eec:	3354      	adds	r3, #84	; 0x54
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	f083 0301 	eor.w	r3, r3, #1
 8002ef4:	b2d8      	uxtb	r0, r3
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	212c      	movs	r1, #44	; 0x2c
 8002efc:	fb01 f303 	mul.w	r3, r1, r3
 8002f00:	4413      	add	r3, r2
 8002f02:	3354      	adds	r3, #84	; 0x54
 8002f04:	4602      	mov	r2, r0
 8002f06:	701a      	strb	r2, [r3, #0]
      break;
 8002f08:	e00b      	b.n	8002f22 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	212c      	movs	r1, #44	; 0x2c
 8002f10:	fb01 f303 	mul.w	r3, r1, r3
 8002f14:	4413      	add	r3, r2
 8002f16:	3360      	adds	r3, #96	; 0x60
 8002f18:	2204      	movs	r2, #4
 8002f1a:	701a      	strb	r2, [r3, #0]
      break;
 8002f1c:	e001      	b.n	8002f22 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002f1e:	bf00      	nop
 8002f20:	e000      	b.n	8002f24 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002f22:	bf00      	nop
  }
}
 8002f24:	bf00      	nop
 8002f26:	3728      	adds	r7, #40	; 0x28
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b086      	sub	sp, #24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002f58:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d10b      	bne.n	8002f7c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f003 0301 	and.w	r3, r3, #1
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d102      	bne.n	8002f74 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f005 f930 	bl	80081d4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	f043 0302 	orr.w	r3, r3, #2
 8002f7a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f003 0308 	and.w	r3, r3, #8
 8002f82:	2b08      	cmp	r3, #8
 8002f84:	d132      	bne.n	8002fec <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	f043 0308 	orr.w	r3, r3, #8
 8002f8c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f003 0304 	and.w	r3, r3, #4
 8002f94:	2b04      	cmp	r3, #4
 8002f96:	d126      	bne.n	8002fe6 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d113      	bne.n	8002fc8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002fa6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002faa:	d106      	bne.n	8002fba <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2102      	movs	r1, #2
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f002 fc46 	bl	8005844 <USB_InitFSLSPClkSel>
 8002fb8:	e011      	b.n	8002fde <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2101      	movs	r1, #1
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f002 fc3f 	bl	8005844 <USB_InitFSLSPClkSel>
 8002fc6:	e00a      	b.n	8002fde <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d106      	bne.n	8002fde <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002fdc:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f005 f922 	bl	8008228 <HAL_HCD_PortEnabled_Callback>
 8002fe4:	e002      	b.n	8002fec <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f005 f92c 	bl	8008244 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f003 0320 	and.w	r3, r3, #32
 8002ff2:	2b20      	cmp	r3, #32
 8002ff4:	d103      	bne.n	8002ffe <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	f043 0320 	orr.w	r3, r3, #32
 8002ffc:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003004:	461a      	mov	r2, r3
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	6013      	str	r3, [r2, #0]
}
 800300a:	bf00      	nop
 800300c:	3718      	adds	r7, #24
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
	...

08003014 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d101      	bne.n	8003026 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e12b      	b.n	800327e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800302c:	b2db      	uxtb	r3, r3
 800302e:	2b00      	cmp	r3, #0
 8003030:	d106      	bne.n	8003040 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f7fd fd0a 	bl	8000a54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2224      	movs	r2, #36	; 0x24
 8003044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f022 0201 	bic.w	r2, r2, #1
 8003056:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003066:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003076:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003078:	f001 f9fc 	bl	8004474 <HAL_RCC_GetPCLK1Freq>
 800307c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	4a81      	ldr	r2, [pc, #516]	; (8003288 <HAL_I2C_Init+0x274>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d807      	bhi.n	8003098 <HAL_I2C_Init+0x84>
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	4a80      	ldr	r2, [pc, #512]	; (800328c <HAL_I2C_Init+0x278>)
 800308c:	4293      	cmp	r3, r2
 800308e:	bf94      	ite	ls
 8003090:	2301      	movls	r3, #1
 8003092:	2300      	movhi	r3, #0
 8003094:	b2db      	uxtb	r3, r3
 8003096:	e006      	b.n	80030a6 <HAL_I2C_Init+0x92>
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	4a7d      	ldr	r2, [pc, #500]	; (8003290 <HAL_I2C_Init+0x27c>)
 800309c:	4293      	cmp	r3, r2
 800309e:	bf94      	ite	ls
 80030a0:	2301      	movls	r3, #1
 80030a2:	2300      	movhi	r3, #0
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d001      	beq.n	80030ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e0e7      	b.n	800327e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	4a78      	ldr	r2, [pc, #480]	; (8003294 <HAL_I2C_Init+0x280>)
 80030b2:	fba2 2303 	umull	r2, r3, r2, r3
 80030b6:	0c9b      	lsrs	r3, r3, #18
 80030b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	68ba      	ldr	r2, [r7, #8]
 80030ca:	430a      	orrs	r2, r1
 80030cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	6a1b      	ldr	r3, [r3, #32]
 80030d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	4a6a      	ldr	r2, [pc, #424]	; (8003288 <HAL_I2C_Init+0x274>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d802      	bhi.n	80030e8 <HAL_I2C_Init+0xd4>
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	3301      	adds	r3, #1
 80030e6:	e009      	b.n	80030fc <HAL_I2C_Init+0xe8>
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80030ee:	fb02 f303 	mul.w	r3, r2, r3
 80030f2:	4a69      	ldr	r2, [pc, #420]	; (8003298 <HAL_I2C_Init+0x284>)
 80030f4:	fba2 2303 	umull	r2, r3, r2, r3
 80030f8:	099b      	lsrs	r3, r3, #6
 80030fa:	3301      	adds	r3, #1
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	6812      	ldr	r2, [r2, #0]
 8003100:	430b      	orrs	r3, r1
 8003102:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	69db      	ldr	r3, [r3, #28]
 800310a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800310e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	495c      	ldr	r1, [pc, #368]	; (8003288 <HAL_I2C_Init+0x274>)
 8003118:	428b      	cmp	r3, r1
 800311a:	d819      	bhi.n	8003150 <HAL_I2C_Init+0x13c>
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	1e59      	subs	r1, r3, #1
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	005b      	lsls	r3, r3, #1
 8003126:	fbb1 f3f3 	udiv	r3, r1, r3
 800312a:	1c59      	adds	r1, r3, #1
 800312c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003130:	400b      	ands	r3, r1
 8003132:	2b00      	cmp	r3, #0
 8003134:	d00a      	beq.n	800314c <HAL_I2C_Init+0x138>
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	1e59      	subs	r1, r3, #1
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	005b      	lsls	r3, r3, #1
 8003140:	fbb1 f3f3 	udiv	r3, r1, r3
 8003144:	3301      	adds	r3, #1
 8003146:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800314a:	e051      	b.n	80031f0 <HAL_I2C_Init+0x1dc>
 800314c:	2304      	movs	r3, #4
 800314e:	e04f      	b.n	80031f0 <HAL_I2C_Init+0x1dc>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d111      	bne.n	800317c <HAL_I2C_Init+0x168>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	1e58      	subs	r0, r3, #1
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6859      	ldr	r1, [r3, #4]
 8003160:	460b      	mov	r3, r1
 8003162:	005b      	lsls	r3, r3, #1
 8003164:	440b      	add	r3, r1
 8003166:	fbb0 f3f3 	udiv	r3, r0, r3
 800316a:	3301      	adds	r3, #1
 800316c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003170:	2b00      	cmp	r3, #0
 8003172:	bf0c      	ite	eq
 8003174:	2301      	moveq	r3, #1
 8003176:	2300      	movne	r3, #0
 8003178:	b2db      	uxtb	r3, r3
 800317a:	e012      	b.n	80031a2 <HAL_I2C_Init+0x18e>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	1e58      	subs	r0, r3, #1
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6859      	ldr	r1, [r3, #4]
 8003184:	460b      	mov	r3, r1
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	440b      	add	r3, r1
 800318a:	0099      	lsls	r1, r3, #2
 800318c:	440b      	add	r3, r1
 800318e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003192:	3301      	adds	r3, #1
 8003194:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003198:	2b00      	cmp	r3, #0
 800319a:	bf0c      	ite	eq
 800319c:	2301      	moveq	r3, #1
 800319e:	2300      	movne	r3, #0
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d001      	beq.n	80031aa <HAL_I2C_Init+0x196>
 80031a6:	2301      	movs	r3, #1
 80031a8:	e022      	b.n	80031f0 <HAL_I2C_Init+0x1dc>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d10e      	bne.n	80031d0 <HAL_I2C_Init+0x1bc>
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	1e58      	subs	r0, r3, #1
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6859      	ldr	r1, [r3, #4]
 80031ba:	460b      	mov	r3, r1
 80031bc:	005b      	lsls	r3, r3, #1
 80031be:	440b      	add	r3, r1
 80031c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80031c4:	3301      	adds	r3, #1
 80031c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031ce:	e00f      	b.n	80031f0 <HAL_I2C_Init+0x1dc>
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	1e58      	subs	r0, r3, #1
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6859      	ldr	r1, [r3, #4]
 80031d8:	460b      	mov	r3, r1
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	440b      	add	r3, r1
 80031de:	0099      	lsls	r1, r3, #2
 80031e0:	440b      	add	r3, r1
 80031e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80031e6:	3301      	adds	r3, #1
 80031e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031f0:	6879      	ldr	r1, [r7, #4]
 80031f2:	6809      	ldr	r1, [r1, #0]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	69da      	ldr	r2, [r3, #28]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a1b      	ldr	r3, [r3, #32]
 800320a:	431a      	orrs	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	430a      	orrs	r2, r1
 8003212:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800321e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	6911      	ldr	r1, [r2, #16]
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	68d2      	ldr	r2, [r2, #12]
 800322a:	4311      	orrs	r1, r2
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	6812      	ldr	r2, [r2, #0]
 8003230:	430b      	orrs	r3, r1
 8003232:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	695a      	ldr	r2, [r3, #20]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	431a      	orrs	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	430a      	orrs	r2, r1
 800324e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f042 0201 	orr.w	r2, r2, #1
 800325e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2220      	movs	r2, #32
 800326a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3710      	adds	r7, #16
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	000186a0 	.word	0x000186a0
 800328c:	001e847f 	.word	0x001e847f
 8003290:	003d08ff 	.word	0x003d08ff
 8003294:	431bde83 	.word	0x431bde83
 8003298:	10624dd3 	.word	0x10624dd3

0800329c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b088      	sub	sp, #32
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d101      	bne.n	80032ae <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e128      	b.n	8003500 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d109      	bne.n	80032ce <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a90      	ldr	r2, [pc, #576]	; (8003508 <HAL_I2S_Init+0x26c>)
 80032c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f7fd fc0b 	bl	8000ae4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2202      	movs	r2, #2
 80032d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	69db      	ldr	r3, [r3, #28]
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	6812      	ldr	r2, [r2, #0]
 80032e0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80032e4:	f023 030f 	bic.w	r3, r3, #15
 80032e8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2202      	movs	r2, #2
 80032f0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d060      	beq.n	80033bc <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d102      	bne.n	8003308 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003302:	2310      	movs	r3, #16
 8003304:	617b      	str	r3, [r7, #20]
 8003306:	e001      	b.n	800330c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003308:	2320      	movs	r3, #32
 800330a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	2b20      	cmp	r3, #32
 8003312:	d802      	bhi.n	800331a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	005b      	lsls	r3, r3, #1
 8003318:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800331a:	2001      	movs	r0, #1
 800331c:	f001 f9a0 	bl	8004660 <HAL_RCCEx_GetPeriphCLKFreq>
 8003320:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800332a:	d125      	bne.n	8003378 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d010      	beq.n	8003356 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	fbb2 f2f3 	udiv	r2, r2, r3
 800333e:	4613      	mov	r3, r2
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	4413      	add	r3, r2
 8003344:	005b      	lsls	r3, r3, #1
 8003346:	461a      	mov	r2, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	695b      	ldr	r3, [r3, #20]
 800334c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003350:	3305      	adds	r3, #5
 8003352:	613b      	str	r3, [r7, #16]
 8003354:	e01f      	b.n	8003396 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	00db      	lsls	r3, r3, #3
 800335a:	68fa      	ldr	r2, [r7, #12]
 800335c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003360:	4613      	mov	r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	4413      	add	r3, r2
 8003366:	005b      	lsls	r3, r3, #1
 8003368:	461a      	mov	r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	695b      	ldr	r3, [r3, #20]
 800336e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003372:	3305      	adds	r3, #5
 8003374:	613b      	str	r3, [r7, #16]
 8003376:	e00e      	b.n	8003396 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003378:	68fa      	ldr	r2, [r7, #12]
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003380:	4613      	mov	r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	4413      	add	r3, r2
 8003386:	005b      	lsls	r3, r3, #1
 8003388:	461a      	mov	r2, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	695b      	ldr	r3, [r3, #20]
 800338e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003392:	3305      	adds	r3, #5
 8003394:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	4a5c      	ldr	r2, [pc, #368]	; (800350c <HAL_I2S_Init+0x270>)
 800339a:	fba2 2303 	umull	r2, r3, r2, r3
 800339e:	08db      	lsrs	r3, r3, #3
 80033a0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	f003 0301 	and.w	r3, r3, #1
 80033a8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80033aa:	693a      	ldr	r2, [r7, #16]
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	085b      	lsrs	r3, r3, #1
 80033b2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	021b      	lsls	r3, r3, #8
 80033b8:	61bb      	str	r3, [r7, #24]
 80033ba:	e003      	b.n	80033c4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80033bc:	2302      	movs	r3, #2
 80033be:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80033c0:	2300      	movs	r3, #0
 80033c2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d902      	bls.n	80033d0 <HAL_I2S_Init+0x134>
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	2bff      	cmp	r3, #255	; 0xff
 80033ce:	d907      	bls.n	80033e0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d4:	f043 0210 	orr.w	r2, r3, #16
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e08f      	b.n	8003500 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	691a      	ldr	r2, [r3, #16]
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	ea42 0103 	orr.w	r1, r2, r3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	69fa      	ldr	r2, [r7, #28]
 80033f0:	430a      	orrs	r2, r1
 80033f2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	69db      	ldr	r3, [r3, #28]
 80033fa:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80033fe:	f023 030f 	bic.w	r3, r3, #15
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	6851      	ldr	r1, [r2, #4]
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	6892      	ldr	r2, [r2, #8]
 800340a:	4311      	orrs	r1, r2
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	68d2      	ldr	r2, [r2, #12]
 8003410:	4311      	orrs	r1, r2
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	6992      	ldr	r2, [r2, #24]
 8003416:	430a      	orrs	r2, r1
 8003418:	431a      	orrs	r2, r3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003422:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6a1b      	ldr	r3, [r3, #32]
 8003428:	2b01      	cmp	r3, #1
 800342a:	d161      	bne.n	80034f0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a38      	ldr	r2, [pc, #224]	; (8003510 <HAL_I2S_Init+0x274>)
 8003430:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a37      	ldr	r2, [pc, #220]	; (8003514 <HAL_I2S_Init+0x278>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d101      	bne.n	8003440 <HAL_I2S_Init+0x1a4>
 800343c:	4b36      	ldr	r3, [pc, #216]	; (8003518 <HAL_I2S_Init+0x27c>)
 800343e:	e001      	b.n	8003444 <HAL_I2S_Init+0x1a8>
 8003440:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003444:	69db      	ldr	r3, [r3, #28]
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	6812      	ldr	r2, [r2, #0]
 800344a:	4932      	ldr	r1, [pc, #200]	; (8003514 <HAL_I2S_Init+0x278>)
 800344c:	428a      	cmp	r2, r1
 800344e:	d101      	bne.n	8003454 <HAL_I2S_Init+0x1b8>
 8003450:	4a31      	ldr	r2, [pc, #196]	; (8003518 <HAL_I2S_Init+0x27c>)
 8003452:	e001      	b.n	8003458 <HAL_I2S_Init+0x1bc>
 8003454:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003458:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800345c:	f023 030f 	bic.w	r3, r3, #15
 8003460:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a2b      	ldr	r2, [pc, #172]	; (8003514 <HAL_I2S_Init+0x278>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d101      	bne.n	8003470 <HAL_I2S_Init+0x1d4>
 800346c:	4b2a      	ldr	r3, [pc, #168]	; (8003518 <HAL_I2S_Init+0x27c>)
 800346e:	e001      	b.n	8003474 <HAL_I2S_Init+0x1d8>
 8003470:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003474:	2202      	movs	r2, #2
 8003476:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a25      	ldr	r2, [pc, #148]	; (8003514 <HAL_I2S_Init+0x278>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d101      	bne.n	8003486 <HAL_I2S_Init+0x1ea>
 8003482:	4b25      	ldr	r3, [pc, #148]	; (8003518 <HAL_I2S_Init+0x27c>)
 8003484:	e001      	b.n	800348a <HAL_I2S_Init+0x1ee>
 8003486:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800348a:	69db      	ldr	r3, [r3, #28]
 800348c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003496:	d003      	beq.n	80034a0 <HAL_I2S_Init+0x204>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d103      	bne.n	80034a8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80034a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034a4:	613b      	str	r3, [r7, #16]
 80034a6:	e001      	b.n	80034ac <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80034a8:	2300      	movs	r3, #0
 80034aa:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80034b6:	4313      	orrs	r3, r2
 80034b8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80034c0:	4313      	orrs	r3, r2
 80034c2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	699b      	ldr	r3, [r3, #24]
 80034c8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80034ca:	4313      	orrs	r3, r2
 80034cc:	b29a      	uxth	r2, r3
 80034ce:	897b      	ldrh	r3, [r7, #10]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80034d8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a0d      	ldr	r2, [pc, #52]	; (8003514 <HAL_I2S_Init+0x278>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d101      	bne.n	80034e8 <HAL_I2S_Init+0x24c>
 80034e4:	4b0c      	ldr	r3, [pc, #48]	; (8003518 <HAL_I2S_Init+0x27c>)
 80034e6:	e001      	b.n	80034ec <HAL_I2S_Init+0x250>
 80034e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034ec:	897a      	ldrh	r2, [r7, #10]
 80034ee:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2201      	movs	r2, #1
 80034fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80034fe:	2300      	movs	r3, #0
}
 8003500:	4618      	mov	r0, r3
 8003502:	3720      	adds	r7, #32
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	08003613 	.word	0x08003613
 800350c:	cccccccd 	.word	0xcccccccd
 8003510:	08003729 	.word	0x08003729
 8003514:	40003800 	.word	0x40003800
 8003518:	40003400 	.word	0x40003400

0800351c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003524:	bf00      	nop
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003538:	bf00      	nop
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800354c:	bf00      	nop
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003564:	881a      	ldrh	r2, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003570:	1c9a      	adds	r2, r3, #2
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800357a:	b29b      	uxth	r3, r3
 800357c:	3b01      	subs	r3, #1
 800357e:	b29a      	uxth	r2, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003588:	b29b      	uxth	r3, r3
 800358a:	2b00      	cmp	r3, #0
 800358c:	d10e      	bne.n	80035ac <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	685a      	ldr	r2, [r3, #4]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800359c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2201      	movs	r2, #1
 80035a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f7ff ffb8 	bl	800351c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80035ac:	bf00      	nop
 80035ae:	3708      	adds	r7, #8
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	68da      	ldr	r2, [r3, #12]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c6:	b292      	uxth	r2, r2
 80035c8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ce:	1c9a      	adds	r2, r3, #2
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80035d8:	b29b      	uxth	r3, r3
 80035da:	3b01      	subs	r3, #1
 80035dc:	b29a      	uxth	r2, r3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d10e      	bne.n	800360a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	685a      	ldr	r2, [r3, #4]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035fa:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f7ff ff93 	bl	8003530 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800360a:	bf00      	nop
 800360c:	3708      	adds	r7, #8
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}

08003612 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003612:	b580      	push	{r7, lr}
 8003614:	b086      	sub	sp, #24
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003628:	b2db      	uxtb	r3, r3
 800362a:	2b04      	cmp	r3, #4
 800362c:	d13a      	bne.n	80036a4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	f003 0301 	and.w	r3, r3, #1
 8003634:	2b01      	cmp	r3, #1
 8003636:	d109      	bne.n	800364c <I2S_IRQHandler+0x3a>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003642:	2b40      	cmp	r3, #64	; 0x40
 8003644:	d102      	bne.n	800364c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f7ff ffb4 	bl	80035b4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003652:	2b40      	cmp	r3, #64	; 0x40
 8003654:	d126      	bne.n	80036a4 <I2S_IRQHandler+0x92>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f003 0320 	and.w	r3, r3, #32
 8003660:	2b20      	cmp	r3, #32
 8003662:	d11f      	bne.n	80036a4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	685a      	ldr	r2, [r3, #4]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003672:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003674:	2300      	movs	r3, #0
 8003676:	613b      	str	r3, [r7, #16]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	613b      	str	r3, [r7, #16]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	613b      	str	r3, [r7, #16]
 8003688:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2201      	movs	r2, #1
 800368e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003696:	f043 0202 	orr.w	r2, r3, #2
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f7ff ff50 	bl	8003544 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	2b03      	cmp	r3, #3
 80036ae:	d136      	bne.n	800371e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	f003 0302 	and.w	r3, r3, #2
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d109      	bne.n	80036ce <I2S_IRQHandler+0xbc>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036c4:	2b80      	cmp	r3, #128	; 0x80
 80036c6:	d102      	bne.n	80036ce <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f7ff ff45 	bl	8003558 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	f003 0308 	and.w	r3, r3, #8
 80036d4:	2b08      	cmp	r3, #8
 80036d6:	d122      	bne.n	800371e <I2S_IRQHandler+0x10c>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f003 0320 	and.w	r3, r3, #32
 80036e2:	2b20      	cmp	r3, #32
 80036e4:	d11b      	bne.n	800371e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	685a      	ldr	r2, [r3, #4]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036f4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80036f6:	2300      	movs	r3, #0
 80036f8:	60fb      	str	r3, [r7, #12]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	60fb      	str	r3, [r7, #12]
 8003702:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003710:	f043 0204 	orr.w	r2, r3, #4
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f7ff ff13 	bl	8003544 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800371e:	bf00      	nop
 8003720:	3718      	adds	r7, #24
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
	...

08003728 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b088      	sub	sp, #32
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4aa2      	ldr	r2, [pc, #648]	; (80039c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d101      	bne.n	8003746 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003742:	4ba2      	ldr	r3, [pc, #648]	; (80039cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003744:	e001      	b.n	800374a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003746:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a9b      	ldr	r2, [pc, #620]	; (80039c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d101      	bne.n	8003764 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003760:	4b9a      	ldr	r3, [pc, #616]	; (80039cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003762:	e001      	b.n	8003768 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003764:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003774:	d004      	beq.n	8003780 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	2b00      	cmp	r3, #0
 800377c:	f040 8099 	bne.w	80038b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	f003 0302 	and.w	r3, r3, #2
 8003786:	2b02      	cmp	r3, #2
 8003788:	d107      	bne.n	800379a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003790:	2b00      	cmp	r3, #0
 8003792:	d002      	beq.n	800379a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f000 f925 	bl	80039e4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	f003 0301 	and.w	r3, r3, #1
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d107      	bne.n	80037b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d002      	beq.n	80037b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 f9c8 	bl	8003b44 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ba:	2b40      	cmp	r3, #64	; 0x40
 80037bc:	d13a      	bne.n	8003834 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	f003 0320 	and.w	r3, r3, #32
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d035      	beq.n	8003834 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a7e      	ldr	r2, [pc, #504]	; (80039c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d101      	bne.n	80037d6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80037d2:	4b7e      	ldr	r3, [pc, #504]	; (80039cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80037d4:	e001      	b.n	80037da <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80037d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037da:	685a      	ldr	r2, [r3, #4]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4979      	ldr	r1, [pc, #484]	; (80039c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80037e2:	428b      	cmp	r3, r1
 80037e4:	d101      	bne.n	80037ea <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80037e6:	4b79      	ldr	r3, [pc, #484]	; (80039cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80037e8:	e001      	b.n	80037ee <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80037ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037ee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037f2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	685a      	ldr	r2, [r3, #4]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003802:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003804:	2300      	movs	r3, #0
 8003806:	60fb      	str	r3, [r7, #12]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	60fb      	str	r3, [r7, #12]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	60fb      	str	r3, [r7, #12]
 8003818:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2201      	movs	r2, #1
 800381e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003826:	f043 0202 	orr.w	r2, r3, #2
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f7ff fe88 	bl	8003544 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	f003 0308 	and.w	r3, r3, #8
 800383a:	2b08      	cmp	r3, #8
 800383c:	f040 80be 	bne.w	80039bc <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	f003 0320 	and.w	r3, r3, #32
 8003846:	2b00      	cmp	r3, #0
 8003848:	f000 80b8 	beq.w	80039bc <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	685a      	ldr	r2, [r3, #4]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800385a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a59      	ldr	r2, [pc, #356]	; (80039c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d101      	bne.n	800386a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003866:	4b59      	ldr	r3, [pc, #356]	; (80039cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003868:	e001      	b.n	800386e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800386a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800386e:	685a      	ldr	r2, [r3, #4]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4954      	ldr	r1, [pc, #336]	; (80039c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003876:	428b      	cmp	r3, r1
 8003878:	d101      	bne.n	800387e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800387a:	4b54      	ldr	r3, [pc, #336]	; (80039cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800387c:	e001      	b.n	8003882 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800387e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003882:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003886:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003888:	2300      	movs	r3, #0
 800388a:	60bb      	str	r3, [r7, #8]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	60bb      	str	r3, [r7, #8]
 8003894:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2201      	movs	r2, #1
 800389a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a2:	f043 0204 	orr.w	r2, r3, #4
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f7ff fe4a 	bl	8003544 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80038b0:	e084      	b.n	80039bc <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	f003 0302 	and.w	r3, r3, #2
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d107      	bne.n	80038cc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d002      	beq.n	80038cc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 f8be 	bl	8003a48 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	f003 0301 	and.w	r3, r3, #1
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d107      	bne.n	80038e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d002      	beq.n	80038e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f000 f8fd 	bl	8003ae0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ec:	2b40      	cmp	r3, #64	; 0x40
 80038ee:	d12f      	bne.n	8003950 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	f003 0320 	and.w	r3, r3, #32
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d02a      	beq.n	8003950 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	685a      	ldr	r2, [r3, #4]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003908:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a2e      	ldr	r2, [pc, #184]	; (80039c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d101      	bne.n	8003918 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003914:	4b2d      	ldr	r3, [pc, #180]	; (80039cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003916:	e001      	b.n	800391c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003918:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800391c:	685a      	ldr	r2, [r3, #4]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4929      	ldr	r1, [pc, #164]	; (80039c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003924:	428b      	cmp	r3, r1
 8003926:	d101      	bne.n	800392c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003928:	4b28      	ldr	r3, [pc, #160]	; (80039cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800392a:	e001      	b.n	8003930 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800392c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003930:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003934:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2201      	movs	r2, #1
 800393a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003942:	f043 0202 	orr.w	r2, r3, #2
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f7ff fdfa 	bl	8003544 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	f003 0308 	and.w	r3, r3, #8
 8003956:	2b08      	cmp	r3, #8
 8003958:	d131      	bne.n	80039be <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	f003 0320 	and.w	r3, r3, #32
 8003960:	2b00      	cmp	r3, #0
 8003962:	d02c      	beq.n	80039be <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a17      	ldr	r2, [pc, #92]	; (80039c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d101      	bne.n	8003972 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800396e:	4b17      	ldr	r3, [pc, #92]	; (80039cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003970:	e001      	b.n	8003976 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003972:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003976:	685a      	ldr	r2, [r3, #4]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4912      	ldr	r1, [pc, #72]	; (80039c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800397e:	428b      	cmp	r3, r1
 8003980:	d101      	bne.n	8003986 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003982:	4b12      	ldr	r3, [pc, #72]	; (80039cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003984:	e001      	b.n	800398a <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8003986:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800398a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800398e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	685a      	ldr	r2, [r3, #4]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800399e:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ac:	f043 0204 	orr.w	r2, r3, #4
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f7ff fdc5 	bl	8003544 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80039ba:	e000      	b.n	80039be <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80039bc:	bf00      	nop
}
 80039be:	bf00      	nop
 80039c0:	3720      	adds	r7, #32
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	40003800 	.word	0x40003800
 80039cc:	40003400 	.word	0x40003400

080039d0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80039d8:	bf00      	nop
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f0:	1c99      	adds	r1, r3, #2
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	6251      	str	r1, [r2, #36]	; 0x24
 80039f6:	881a      	ldrh	r2, [r3, #0]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	3b01      	subs	r3, #1
 8003a06:	b29a      	uxth	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d113      	bne.n	8003a3e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	685a      	ldr	r2, [r3, #4]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a24:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d106      	bne.n	8003a3e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f7ff ffc9 	bl	80039d0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a3e:	bf00      	nop
 8003a40:	3708      	adds	r7, #8
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
	...

08003a48 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a54:	1c99      	adds	r1, r3, #2
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	6251      	str	r1, [r2, #36]	; 0x24
 8003a5a:	8819      	ldrh	r1, [r3, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a1d      	ldr	r2, [pc, #116]	; (8003ad8 <I2SEx_TxISR_I2SExt+0x90>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d101      	bne.n	8003a6a <I2SEx_TxISR_I2SExt+0x22>
 8003a66:	4b1d      	ldr	r3, [pc, #116]	; (8003adc <I2SEx_TxISR_I2SExt+0x94>)
 8003a68:	e001      	b.n	8003a6e <I2SEx_TxISR_I2SExt+0x26>
 8003a6a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a6e:	460a      	mov	r2, r1
 8003a70:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	3b01      	subs	r3, #1
 8003a7a:	b29a      	uxth	r2, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d121      	bne.n	8003ace <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a12      	ldr	r2, [pc, #72]	; (8003ad8 <I2SEx_TxISR_I2SExt+0x90>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d101      	bne.n	8003a98 <I2SEx_TxISR_I2SExt+0x50>
 8003a94:	4b11      	ldr	r3, [pc, #68]	; (8003adc <I2SEx_TxISR_I2SExt+0x94>)
 8003a96:	e001      	b.n	8003a9c <I2SEx_TxISR_I2SExt+0x54>
 8003a98:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a9c:	685a      	ldr	r2, [r3, #4]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	490d      	ldr	r1, [pc, #52]	; (8003ad8 <I2SEx_TxISR_I2SExt+0x90>)
 8003aa4:	428b      	cmp	r3, r1
 8003aa6:	d101      	bne.n	8003aac <I2SEx_TxISR_I2SExt+0x64>
 8003aa8:	4b0c      	ldr	r3, [pc, #48]	; (8003adc <I2SEx_TxISR_I2SExt+0x94>)
 8003aaa:	e001      	b.n	8003ab0 <I2SEx_TxISR_I2SExt+0x68>
 8003aac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ab0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ab4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d106      	bne.n	8003ace <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f7ff ff81 	bl	80039d0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ace:	bf00      	nop
 8003ad0:	3708      	adds	r7, #8
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	40003800 	.word	0x40003800
 8003adc:	40003400 	.word	0x40003400

08003ae0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	68d8      	ldr	r0, [r3, #12]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af2:	1c99      	adds	r1, r3, #2
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003af8:	b282      	uxth	r2, r0
 8003afa:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	3b01      	subs	r3, #1
 8003b04:	b29a      	uxth	r2, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d113      	bne.n	8003b3c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	685a      	ldr	r2, [r3, #4]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b22:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d106      	bne.n	8003b3c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2201      	movs	r2, #1
 8003b32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f7ff ff4a 	bl	80039d0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b3c:	bf00      	nop
 8003b3e:	3708      	adds	r7, #8
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a20      	ldr	r2, [pc, #128]	; (8003bd4 <I2SEx_RxISR_I2SExt+0x90>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d101      	bne.n	8003b5a <I2SEx_RxISR_I2SExt+0x16>
 8003b56:	4b20      	ldr	r3, [pc, #128]	; (8003bd8 <I2SEx_RxISR_I2SExt+0x94>)
 8003b58:	e001      	b.n	8003b5e <I2SEx_RxISR_I2SExt+0x1a>
 8003b5a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b5e:	68d8      	ldr	r0, [r3, #12]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b64:	1c99      	adds	r1, r3, #2
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003b6a:	b282      	uxth	r2, r0
 8003b6c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	3b01      	subs	r3, #1
 8003b76:	b29a      	uxth	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d121      	bne.n	8003bca <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a12      	ldr	r2, [pc, #72]	; (8003bd4 <I2SEx_RxISR_I2SExt+0x90>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d101      	bne.n	8003b94 <I2SEx_RxISR_I2SExt+0x50>
 8003b90:	4b11      	ldr	r3, [pc, #68]	; (8003bd8 <I2SEx_RxISR_I2SExt+0x94>)
 8003b92:	e001      	b.n	8003b98 <I2SEx_RxISR_I2SExt+0x54>
 8003b94:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b98:	685a      	ldr	r2, [r3, #4]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	490d      	ldr	r1, [pc, #52]	; (8003bd4 <I2SEx_RxISR_I2SExt+0x90>)
 8003ba0:	428b      	cmp	r3, r1
 8003ba2:	d101      	bne.n	8003ba8 <I2SEx_RxISR_I2SExt+0x64>
 8003ba4:	4b0c      	ldr	r3, [pc, #48]	; (8003bd8 <I2SEx_RxISR_I2SExt+0x94>)
 8003ba6:	e001      	b.n	8003bac <I2SEx_RxISR_I2SExt+0x68>
 8003ba8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bac:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003bb0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d106      	bne.n	8003bca <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f7ff ff03 	bl	80039d0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003bca:	bf00      	nop
 8003bcc:	3708      	adds	r7, #8
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	40003800 	.word	0x40003800
 8003bd8:	40003400 	.word	0x40003400

08003bdc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b086      	sub	sp, #24
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d101      	bne.n	8003bee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e264      	b.n	80040b8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0301 	and.w	r3, r3, #1
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d075      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bfa:	4ba3      	ldr	r3, [pc, #652]	; (8003e88 <HAL_RCC_OscConfig+0x2ac>)
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	f003 030c 	and.w	r3, r3, #12
 8003c02:	2b04      	cmp	r3, #4
 8003c04:	d00c      	beq.n	8003c20 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c06:	4ba0      	ldr	r3, [pc, #640]	; (8003e88 <HAL_RCC_OscConfig+0x2ac>)
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c0e:	2b08      	cmp	r3, #8
 8003c10:	d112      	bne.n	8003c38 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c12:	4b9d      	ldr	r3, [pc, #628]	; (8003e88 <HAL_RCC_OscConfig+0x2ac>)
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c1e:	d10b      	bne.n	8003c38 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c20:	4b99      	ldr	r3, [pc, #612]	; (8003e88 <HAL_RCC_OscConfig+0x2ac>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d05b      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x108>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d157      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e23f      	b.n	80040b8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c40:	d106      	bne.n	8003c50 <HAL_RCC_OscConfig+0x74>
 8003c42:	4b91      	ldr	r3, [pc, #580]	; (8003e88 <HAL_RCC_OscConfig+0x2ac>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a90      	ldr	r2, [pc, #576]	; (8003e88 <HAL_RCC_OscConfig+0x2ac>)
 8003c48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c4c:	6013      	str	r3, [r2, #0]
 8003c4e:	e01d      	b.n	8003c8c <HAL_RCC_OscConfig+0xb0>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c58:	d10c      	bne.n	8003c74 <HAL_RCC_OscConfig+0x98>
 8003c5a:	4b8b      	ldr	r3, [pc, #556]	; (8003e88 <HAL_RCC_OscConfig+0x2ac>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a8a      	ldr	r2, [pc, #552]	; (8003e88 <HAL_RCC_OscConfig+0x2ac>)
 8003c60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c64:	6013      	str	r3, [r2, #0]
 8003c66:	4b88      	ldr	r3, [pc, #544]	; (8003e88 <HAL_RCC_OscConfig+0x2ac>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a87      	ldr	r2, [pc, #540]	; (8003e88 <HAL_RCC_OscConfig+0x2ac>)
 8003c6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c70:	6013      	str	r3, [r2, #0]
 8003c72:	e00b      	b.n	8003c8c <HAL_RCC_OscConfig+0xb0>
 8003c74:	4b84      	ldr	r3, [pc, #528]	; (8003e88 <HAL_RCC_OscConfig+0x2ac>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a83      	ldr	r2, [pc, #524]	; (8003e88 <HAL_RCC_OscConfig+0x2ac>)
 8003c7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c7e:	6013      	str	r3, [r2, #0]
 8003c80:	4b81      	ldr	r3, [pc, #516]	; (8003e88 <HAL_RCC_OscConfig+0x2ac>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a80      	ldr	r2, [pc, #512]	; (8003e88 <HAL_RCC_OscConfig+0x2ac>)
 8003c86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d013      	beq.n	8003cbc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c94:	f7fd f956 	bl	8000f44 <HAL_GetTick>
 8003c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c9a:	e008      	b.n	8003cae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c9c:	f7fd f952 	bl	8000f44 <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	2b64      	cmp	r3, #100	; 0x64
 8003ca8:	d901      	bls.n	8003cae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e204      	b.n	80040b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cae:	4b76      	ldr	r3, [pc, #472]	; (8003e88 <HAL_RCC_OscConfig+0x2ac>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d0f0      	beq.n	8003c9c <HAL_RCC_OscConfig+0xc0>
 8003cba:	e014      	b.n	8003ce6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cbc:	f7fd f942 	bl	8000f44 <HAL_GetTick>
 8003cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cc2:	e008      	b.n	8003cd6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cc4:	f7fd f93e 	bl	8000f44 <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	2b64      	cmp	r3, #100	; 0x64
 8003cd0:	d901      	bls.n	8003cd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e1f0      	b.n	80040b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cd6:	4b6c      	ldr	r3, [pc, #432]	; (8003e88 <HAL_RCC_OscConfig+0x2ac>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1f0      	bne.n	8003cc4 <HAL_RCC_OscConfig+0xe8>
 8003ce2:	e000      	b.n	8003ce6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ce4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0302 	and.w	r3, r3, #2
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d063      	beq.n	8003dba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cf2:	4b65      	ldr	r3, [pc, #404]	; (8003e88 <HAL_RCC_OscConfig+0x2ac>)
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	f003 030c 	and.w	r3, r3, #12
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00b      	beq.n	8003d16 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cfe:	4b62      	ldr	r3, [pc, #392]	; (8003e88 <HAL_RCC_OscConfig+0x2ac>)
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d06:	2b08      	cmp	r3, #8
 8003d08:	d11c      	bne.n	8003d44 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d0a:	4b5f      	ldr	r3, [pc, #380]	; (8003e88 <HAL_RCC_OscConfig+0x2ac>)
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d116      	bne.n	8003d44 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d16:	4b5c      	ldr	r3, [pc, #368]	; (8003e88 <HAL_RCC_OscConfig+0x2ac>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0302 	and.w	r3, r3, #2
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d005      	beq.n	8003d2e <HAL_RCC_OscConfig+0x152>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d001      	beq.n	8003d2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e1c4      	b.n	80040b8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d2e:	4b56      	ldr	r3, [pc, #344]	; (8003e88 <HAL_RCC_OscConfig+0x2ac>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	00db      	lsls	r3, r3, #3
 8003d3c:	4952      	ldr	r1, [pc, #328]	; (8003e88 <HAL_RCC_OscConfig+0x2ac>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d42:	e03a      	b.n	8003dba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d020      	beq.n	8003d8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d4c:	4b4f      	ldr	r3, [pc, #316]	; (8003e8c <HAL_RCC_OscConfig+0x2b0>)
 8003d4e:	2201      	movs	r2, #1
 8003d50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d52:	f7fd f8f7 	bl	8000f44 <HAL_GetTick>
 8003d56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d58:	e008      	b.n	8003d6c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d5a:	f7fd f8f3 	bl	8000f44 <HAL_GetTick>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	d901      	bls.n	8003d6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	e1a5      	b.n	80040b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d6c:	4b46      	ldr	r3, [pc, #280]	; (8003e88 <HAL_RCC_OscConfig+0x2ac>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0302 	and.w	r3, r3, #2
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d0f0      	beq.n	8003d5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d78:	4b43      	ldr	r3, [pc, #268]	; (8003e88 <HAL_RCC_OscConfig+0x2ac>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	691b      	ldr	r3, [r3, #16]
 8003d84:	00db      	lsls	r3, r3, #3
 8003d86:	4940      	ldr	r1, [pc, #256]	; (8003e88 <HAL_RCC_OscConfig+0x2ac>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	600b      	str	r3, [r1, #0]
 8003d8c:	e015      	b.n	8003dba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d8e:	4b3f      	ldr	r3, [pc, #252]	; (8003e8c <HAL_RCC_OscConfig+0x2b0>)
 8003d90:	2200      	movs	r2, #0
 8003d92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d94:	f7fd f8d6 	bl	8000f44 <HAL_GetTick>
 8003d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d9a:	e008      	b.n	8003dae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d9c:	f7fd f8d2 	bl	8000f44 <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d901      	bls.n	8003dae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e184      	b.n	80040b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dae:	4b36      	ldr	r3, [pc, #216]	; (8003e88 <HAL_RCC_OscConfig+0x2ac>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0302 	and.w	r3, r3, #2
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d1f0      	bne.n	8003d9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0308 	and.w	r3, r3, #8
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d030      	beq.n	8003e28 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	695b      	ldr	r3, [r3, #20]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d016      	beq.n	8003dfc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dce:	4b30      	ldr	r3, [pc, #192]	; (8003e90 <HAL_RCC_OscConfig+0x2b4>)
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dd4:	f7fd f8b6 	bl	8000f44 <HAL_GetTick>
 8003dd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dda:	e008      	b.n	8003dee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ddc:	f7fd f8b2 	bl	8000f44 <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d901      	bls.n	8003dee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e164      	b.n	80040b8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dee:	4b26      	ldr	r3, [pc, #152]	; (8003e88 <HAL_RCC_OscConfig+0x2ac>)
 8003df0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003df2:	f003 0302 	and.w	r3, r3, #2
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d0f0      	beq.n	8003ddc <HAL_RCC_OscConfig+0x200>
 8003dfa:	e015      	b.n	8003e28 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dfc:	4b24      	ldr	r3, [pc, #144]	; (8003e90 <HAL_RCC_OscConfig+0x2b4>)
 8003dfe:	2200      	movs	r2, #0
 8003e00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e02:	f7fd f89f 	bl	8000f44 <HAL_GetTick>
 8003e06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e08:	e008      	b.n	8003e1c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e0a:	f7fd f89b 	bl	8000f44 <HAL_GetTick>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d901      	bls.n	8003e1c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003e18:	2303      	movs	r3, #3
 8003e1a:	e14d      	b.n	80040b8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e1c:	4b1a      	ldr	r3, [pc, #104]	; (8003e88 <HAL_RCC_OscConfig+0x2ac>)
 8003e1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e20:	f003 0302 	and.w	r3, r3, #2
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d1f0      	bne.n	8003e0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0304 	and.w	r3, r3, #4
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	f000 80a0 	beq.w	8003f76 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e36:	2300      	movs	r3, #0
 8003e38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e3a:	4b13      	ldr	r3, [pc, #76]	; (8003e88 <HAL_RCC_OscConfig+0x2ac>)
 8003e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d10f      	bne.n	8003e66 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e46:	2300      	movs	r3, #0
 8003e48:	60bb      	str	r3, [r7, #8]
 8003e4a:	4b0f      	ldr	r3, [pc, #60]	; (8003e88 <HAL_RCC_OscConfig+0x2ac>)
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4e:	4a0e      	ldr	r2, [pc, #56]	; (8003e88 <HAL_RCC_OscConfig+0x2ac>)
 8003e50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e54:	6413      	str	r3, [r2, #64]	; 0x40
 8003e56:	4b0c      	ldr	r3, [pc, #48]	; (8003e88 <HAL_RCC_OscConfig+0x2ac>)
 8003e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e5e:	60bb      	str	r3, [r7, #8]
 8003e60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e62:	2301      	movs	r3, #1
 8003e64:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e66:	4b0b      	ldr	r3, [pc, #44]	; (8003e94 <HAL_RCC_OscConfig+0x2b8>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d121      	bne.n	8003eb6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e72:	4b08      	ldr	r3, [pc, #32]	; (8003e94 <HAL_RCC_OscConfig+0x2b8>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a07      	ldr	r2, [pc, #28]	; (8003e94 <HAL_RCC_OscConfig+0x2b8>)
 8003e78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e7e:	f7fd f861 	bl	8000f44 <HAL_GetTick>
 8003e82:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e84:	e011      	b.n	8003eaa <HAL_RCC_OscConfig+0x2ce>
 8003e86:	bf00      	nop
 8003e88:	40023800 	.word	0x40023800
 8003e8c:	42470000 	.word	0x42470000
 8003e90:	42470e80 	.word	0x42470e80
 8003e94:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e98:	f7fd f854 	bl	8000f44 <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d901      	bls.n	8003eaa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e106      	b.n	80040b8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eaa:	4b85      	ldr	r3, [pc, #532]	; (80040c0 <HAL_RCC_OscConfig+0x4e4>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d0f0      	beq.n	8003e98 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d106      	bne.n	8003ecc <HAL_RCC_OscConfig+0x2f0>
 8003ebe:	4b81      	ldr	r3, [pc, #516]	; (80040c4 <HAL_RCC_OscConfig+0x4e8>)
 8003ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec2:	4a80      	ldr	r2, [pc, #512]	; (80040c4 <HAL_RCC_OscConfig+0x4e8>)
 8003ec4:	f043 0301 	orr.w	r3, r3, #1
 8003ec8:	6713      	str	r3, [r2, #112]	; 0x70
 8003eca:	e01c      	b.n	8003f06 <HAL_RCC_OscConfig+0x32a>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	2b05      	cmp	r3, #5
 8003ed2:	d10c      	bne.n	8003eee <HAL_RCC_OscConfig+0x312>
 8003ed4:	4b7b      	ldr	r3, [pc, #492]	; (80040c4 <HAL_RCC_OscConfig+0x4e8>)
 8003ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed8:	4a7a      	ldr	r2, [pc, #488]	; (80040c4 <HAL_RCC_OscConfig+0x4e8>)
 8003eda:	f043 0304 	orr.w	r3, r3, #4
 8003ede:	6713      	str	r3, [r2, #112]	; 0x70
 8003ee0:	4b78      	ldr	r3, [pc, #480]	; (80040c4 <HAL_RCC_OscConfig+0x4e8>)
 8003ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee4:	4a77      	ldr	r2, [pc, #476]	; (80040c4 <HAL_RCC_OscConfig+0x4e8>)
 8003ee6:	f043 0301 	orr.w	r3, r3, #1
 8003eea:	6713      	str	r3, [r2, #112]	; 0x70
 8003eec:	e00b      	b.n	8003f06 <HAL_RCC_OscConfig+0x32a>
 8003eee:	4b75      	ldr	r3, [pc, #468]	; (80040c4 <HAL_RCC_OscConfig+0x4e8>)
 8003ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef2:	4a74      	ldr	r2, [pc, #464]	; (80040c4 <HAL_RCC_OscConfig+0x4e8>)
 8003ef4:	f023 0301 	bic.w	r3, r3, #1
 8003ef8:	6713      	str	r3, [r2, #112]	; 0x70
 8003efa:	4b72      	ldr	r3, [pc, #456]	; (80040c4 <HAL_RCC_OscConfig+0x4e8>)
 8003efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003efe:	4a71      	ldr	r2, [pc, #452]	; (80040c4 <HAL_RCC_OscConfig+0x4e8>)
 8003f00:	f023 0304 	bic.w	r3, r3, #4
 8003f04:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d015      	beq.n	8003f3a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f0e:	f7fd f819 	bl	8000f44 <HAL_GetTick>
 8003f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f14:	e00a      	b.n	8003f2c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f16:	f7fd f815 	bl	8000f44 <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d901      	bls.n	8003f2c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e0c5      	b.n	80040b8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f2c:	4b65      	ldr	r3, [pc, #404]	; (80040c4 <HAL_RCC_OscConfig+0x4e8>)
 8003f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f30:	f003 0302 	and.w	r3, r3, #2
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d0ee      	beq.n	8003f16 <HAL_RCC_OscConfig+0x33a>
 8003f38:	e014      	b.n	8003f64 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f3a:	f7fd f803 	bl	8000f44 <HAL_GetTick>
 8003f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f40:	e00a      	b.n	8003f58 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f42:	f7fc ffff 	bl	8000f44 <HAL_GetTick>
 8003f46:	4602      	mov	r2, r0
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d901      	bls.n	8003f58 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003f54:	2303      	movs	r3, #3
 8003f56:	e0af      	b.n	80040b8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f58:	4b5a      	ldr	r3, [pc, #360]	; (80040c4 <HAL_RCC_OscConfig+0x4e8>)
 8003f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f5c:	f003 0302 	and.w	r3, r3, #2
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d1ee      	bne.n	8003f42 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f64:	7dfb      	ldrb	r3, [r7, #23]
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d105      	bne.n	8003f76 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f6a:	4b56      	ldr	r3, [pc, #344]	; (80040c4 <HAL_RCC_OscConfig+0x4e8>)
 8003f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6e:	4a55      	ldr	r2, [pc, #340]	; (80040c4 <HAL_RCC_OscConfig+0x4e8>)
 8003f70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f74:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	699b      	ldr	r3, [r3, #24]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	f000 809b 	beq.w	80040b6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f80:	4b50      	ldr	r3, [pc, #320]	; (80040c4 <HAL_RCC_OscConfig+0x4e8>)
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	f003 030c 	and.w	r3, r3, #12
 8003f88:	2b08      	cmp	r3, #8
 8003f8a:	d05c      	beq.n	8004046 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	699b      	ldr	r3, [r3, #24]
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	d141      	bne.n	8004018 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f94:	4b4c      	ldr	r3, [pc, #304]	; (80040c8 <HAL_RCC_OscConfig+0x4ec>)
 8003f96:	2200      	movs	r2, #0
 8003f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f9a:	f7fc ffd3 	bl	8000f44 <HAL_GetTick>
 8003f9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fa0:	e008      	b.n	8003fb4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fa2:	f7fc ffcf 	bl	8000f44 <HAL_GetTick>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d901      	bls.n	8003fb4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	e081      	b.n	80040b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fb4:	4b43      	ldr	r3, [pc, #268]	; (80040c4 <HAL_RCC_OscConfig+0x4e8>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d1f0      	bne.n	8003fa2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	69da      	ldr	r2, [r3, #28]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a1b      	ldr	r3, [r3, #32]
 8003fc8:	431a      	orrs	r2, r3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fce:	019b      	lsls	r3, r3, #6
 8003fd0:	431a      	orrs	r2, r3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd6:	085b      	lsrs	r3, r3, #1
 8003fd8:	3b01      	subs	r3, #1
 8003fda:	041b      	lsls	r3, r3, #16
 8003fdc:	431a      	orrs	r2, r3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe2:	061b      	lsls	r3, r3, #24
 8003fe4:	4937      	ldr	r1, [pc, #220]	; (80040c4 <HAL_RCC_OscConfig+0x4e8>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fea:	4b37      	ldr	r3, [pc, #220]	; (80040c8 <HAL_RCC_OscConfig+0x4ec>)
 8003fec:	2201      	movs	r2, #1
 8003fee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ff0:	f7fc ffa8 	bl	8000f44 <HAL_GetTick>
 8003ff4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ff6:	e008      	b.n	800400a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ff8:	f7fc ffa4 	bl	8000f44 <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	2b02      	cmp	r3, #2
 8004004:	d901      	bls.n	800400a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e056      	b.n	80040b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800400a:	4b2e      	ldr	r3, [pc, #184]	; (80040c4 <HAL_RCC_OscConfig+0x4e8>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d0f0      	beq.n	8003ff8 <HAL_RCC_OscConfig+0x41c>
 8004016:	e04e      	b.n	80040b6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004018:	4b2b      	ldr	r3, [pc, #172]	; (80040c8 <HAL_RCC_OscConfig+0x4ec>)
 800401a:	2200      	movs	r2, #0
 800401c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800401e:	f7fc ff91 	bl	8000f44 <HAL_GetTick>
 8004022:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004024:	e008      	b.n	8004038 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004026:	f7fc ff8d 	bl	8000f44 <HAL_GetTick>
 800402a:	4602      	mov	r2, r0
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	2b02      	cmp	r3, #2
 8004032:	d901      	bls.n	8004038 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004034:	2303      	movs	r3, #3
 8004036:	e03f      	b.n	80040b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004038:	4b22      	ldr	r3, [pc, #136]	; (80040c4 <HAL_RCC_OscConfig+0x4e8>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d1f0      	bne.n	8004026 <HAL_RCC_OscConfig+0x44a>
 8004044:	e037      	b.n	80040b6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	699b      	ldr	r3, [r3, #24]
 800404a:	2b01      	cmp	r3, #1
 800404c:	d101      	bne.n	8004052 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e032      	b.n	80040b8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004052:	4b1c      	ldr	r3, [pc, #112]	; (80040c4 <HAL_RCC_OscConfig+0x4e8>)
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	699b      	ldr	r3, [r3, #24]
 800405c:	2b01      	cmp	r3, #1
 800405e:	d028      	beq.n	80040b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800406a:	429a      	cmp	r2, r3
 800406c:	d121      	bne.n	80040b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004078:	429a      	cmp	r2, r3
 800407a:	d11a      	bne.n	80040b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800407c:	68fa      	ldr	r2, [r7, #12]
 800407e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004082:	4013      	ands	r3, r2
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004088:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800408a:	4293      	cmp	r3, r2
 800408c:	d111      	bne.n	80040b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004098:	085b      	lsrs	r3, r3, #1
 800409a:	3b01      	subs	r3, #1
 800409c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800409e:	429a      	cmp	r2, r3
 80040a0:	d107      	bne.n	80040b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ac:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d001      	beq.n	80040b6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e000      	b.n	80040b8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80040b6:	2300      	movs	r3, #0
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3718      	adds	r7, #24
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	40007000 	.word	0x40007000
 80040c4:	40023800 	.word	0x40023800
 80040c8:	42470060 	.word	0x42470060

080040cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d101      	bne.n	80040e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e0cc      	b.n	800427a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040e0:	4b68      	ldr	r3, [pc, #416]	; (8004284 <HAL_RCC_ClockConfig+0x1b8>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0307 	and.w	r3, r3, #7
 80040e8:	683a      	ldr	r2, [r7, #0]
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d90c      	bls.n	8004108 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ee:	4b65      	ldr	r3, [pc, #404]	; (8004284 <HAL_RCC_ClockConfig+0x1b8>)
 80040f0:	683a      	ldr	r2, [r7, #0]
 80040f2:	b2d2      	uxtb	r2, r2
 80040f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040f6:	4b63      	ldr	r3, [pc, #396]	; (8004284 <HAL_RCC_ClockConfig+0x1b8>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0307 	and.w	r3, r3, #7
 80040fe:	683a      	ldr	r2, [r7, #0]
 8004100:	429a      	cmp	r2, r3
 8004102:	d001      	beq.n	8004108 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e0b8      	b.n	800427a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0302 	and.w	r3, r3, #2
 8004110:	2b00      	cmp	r3, #0
 8004112:	d020      	beq.n	8004156 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0304 	and.w	r3, r3, #4
 800411c:	2b00      	cmp	r3, #0
 800411e:	d005      	beq.n	800412c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004120:	4b59      	ldr	r3, [pc, #356]	; (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	4a58      	ldr	r2, [pc, #352]	; (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 8004126:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800412a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0308 	and.w	r3, r3, #8
 8004134:	2b00      	cmp	r3, #0
 8004136:	d005      	beq.n	8004144 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004138:	4b53      	ldr	r3, [pc, #332]	; (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	4a52      	ldr	r2, [pc, #328]	; (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 800413e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004142:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004144:	4b50      	ldr	r3, [pc, #320]	; (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	494d      	ldr	r1, [pc, #308]	; (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 8004152:	4313      	orrs	r3, r2
 8004154:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0301 	and.w	r3, r3, #1
 800415e:	2b00      	cmp	r3, #0
 8004160:	d044      	beq.n	80041ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	2b01      	cmp	r3, #1
 8004168:	d107      	bne.n	800417a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800416a:	4b47      	ldr	r3, [pc, #284]	; (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d119      	bne.n	80041aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e07f      	b.n	800427a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	2b02      	cmp	r3, #2
 8004180:	d003      	beq.n	800418a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004186:	2b03      	cmp	r3, #3
 8004188:	d107      	bne.n	800419a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800418a:	4b3f      	ldr	r3, [pc, #252]	; (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d109      	bne.n	80041aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e06f      	b.n	800427a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800419a:	4b3b      	ldr	r3, [pc, #236]	; (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0302 	and.w	r3, r3, #2
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d101      	bne.n	80041aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e067      	b.n	800427a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041aa:	4b37      	ldr	r3, [pc, #220]	; (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	f023 0203 	bic.w	r2, r3, #3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	4934      	ldr	r1, [pc, #208]	; (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041bc:	f7fc fec2 	bl	8000f44 <HAL_GetTick>
 80041c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041c2:	e00a      	b.n	80041da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041c4:	f7fc febe 	bl	8000f44 <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d901      	bls.n	80041da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e04f      	b.n	800427a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041da:	4b2b      	ldr	r3, [pc, #172]	; (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	f003 020c 	and.w	r2, r3, #12
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d1eb      	bne.n	80041c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041ec:	4b25      	ldr	r3, [pc, #148]	; (8004284 <HAL_RCC_ClockConfig+0x1b8>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0307 	and.w	r3, r3, #7
 80041f4:	683a      	ldr	r2, [r7, #0]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d20c      	bcs.n	8004214 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041fa:	4b22      	ldr	r3, [pc, #136]	; (8004284 <HAL_RCC_ClockConfig+0x1b8>)
 80041fc:	683a      	ldr	r2, [r7, #0]
 80041fe:	b2d2      	uxtb	r2, r2
 8004200:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004202:	4b20      	ldr	r3, [pc, #128]	; (8004284 <HAL_RCC_ClockConfig+0x1b8>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0307 	and.w	r3, r3, #7
 800420a:	683a      	ldr	r2, [r7, #0]
 800420c:	429a      	cmp	r2, r3
 800420e:	d001      	beq.n	8004214 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e032      	b.n	800427a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0304 	and.w	r3, r3, #4
 800421c:	2b00      	cmp	r3, #0
 800421e:	d008      	beq.n	8004232 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004220:	4b19      	ldr	r3, [pc, #100]	; (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	4916      	ldr	r1, [pc, #88]	; (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 800422e:	4313      	orrs	r3, r2
 8004230:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0308 	and.w	r3, r3, #8
 800423a:	2b00      	cmp	r3, #0
 800423c:	d009      	beq.n	8004252 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800423e:	4b12      	ldr	r3, [pc, #72]	; (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	00db      	lsls	r3, r3, #3
 800424c:	490e      	ldr	r1, [pc, #56]	; (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 800424e:	4313      	orrs	r3, r2
 8004250:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004252:	f000 f821 	bl	8004298 <HAL_RCC_GetSysClockFreq>
 8004256:	4602      	mov	r2, r0
 8004258:	4b0b      	ldr	r3, [pc, #44]	; (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	091b      	lsrs	r3, r3, #4
 800425e:	f003 030f 	and.w	r3, r3, #15
 8004262:	490a      	ldr	r1, [pc, #40]	; (800428c <HAL_RCC_ClockConfig+0x1c0>)
 8004264:	5ccb      	ldrb	r3, [r1, r3]
 8004266:	fa22 f303 	lsr.w	r3, r2, r3
 800426a:	4a09      	ldr	r2, [pc, #36]	; (8004290 <HAL_RCC_ClockConfig+0x1c4>)
 800426c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800426e:	4b09      	ldr	r3, [pc, #36]	; (8004294 <HAL_RCC_ClockConfig+0x1c8>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4618      	mov	r0, r3
 8004274:	f7fc fe22 	bl	8000ebc <HAL_InitTick>

  return HAL_OK;
 8004278:	2300      	movs	r3, #0
}
 800427a:	4618      	mov	r0, r3
 800427c:	3710      	adds	r7, #16
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	40023c00 	.word	0x40023c00
 8004288:	40023800 	.word	0x40023800
 800428c:	08008878 	.word	0x08008878
 8004290:	20000000 	.word	0x20000000
 8004294:	20000004 	.word	0x20000004

08004298 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004298:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800429c:	b084      	sub	sp, #16
 800429e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80042a0:	2300      	movs	r3, #0
 80042a2:	607b      	str	r3, [r7, #4]
 80042a4:	2300      	movs	r3, #0
 80042a6:	60fb      	str	r3, [r7, #12]
 80042a8:	2300      	movs	r3, #0
 80042aa:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80042ac:	2300      	movs	r3, #0
 80042ae:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042b0:	4b67      	ldr	r3, [pc, #412]	; (8004450 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	f003 030c 	and.w	r3, r3, #12
 80042b8:	2b08      	cmp	r3, #8
 80042ba:	d00d      	beq.n	80042d8 <HAL_RCC_GetSysClockFreq+0x40>
 80042bc:	2b08      	cmp	r3, #8
 80042be:	f200 80bd 	bhi.w	800443c <HAL_RCC_GetSysClockFreq+0x1a4>
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d002      	beq.n	80042cc <HAL_RCC_GetSysClockFreq+0x34>
 80042c6:	2b04      	cmp	r3, #4
 80042c8:	d003      	beq.n	80042d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80042ca:	e0b7      	b.n	800443c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042cc:	4b61      	ldr	r3, [pc, #388]	; (8004454 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80042ce:	60bb      	str	r3, [r7, #8]
       break;
 80042d0:	e0b7      	b.n	8004442 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042d2:	4b61      	ldr	r3, [pc, #388]	; (8004458 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80042d4:	60bb      	str	r3, [r7, #8]
      break;
 80042d6:	e0b4      	b.n	8004442 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042d8:	4b5d      	ldr	r3, [pc, #372]	; (8004450 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042e0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042e2:	4b5b      	ldr	r3, [pc, #364]	; (8004450 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d04d      	beq.n	800438a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042ee:	4b58      	ldr	r3, [pc, #352]	; (8004450 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	099b      	lsrs	r3, r3, #6
 80042f4:	461a      	mov	r2, r3
 80042f6:	f04f 0300 	mov.w	r3, #0
 80042fa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80042fe:	f04f 0100 	mov.w	r1, #0
 8004302:	ea02 0800 	and.w	r8, r2, r0
 8004306:	ea03 0901 	and.w	r9, r3, r1
 800430a:	4640      	mov	r0, r8
 800430c:	4649      	mov	r1, r9
 800430e:	f04f 0200 	mov.w	r2, #0
 8004312:	f04f 0300 	mov.w	r3, #0
 8004316:	014b      	lsls	r3, r1, #5
 8004318:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800431c:	0142      	lsls	r2, r0, #5
 800431e:	4610      	mov	r0, r2
 8004320:	4619      	mov	r1, r3
 8004322:	ebb0 0008 	subs.w	r0, r0, r8
 8004326:	eb61 0109 	sbc.w	r1, r1, r9
 800432a:	f04f 0200 	mov.w	r2, #0
 800432e:	f04f 0300 	mov.w	r3, #0
 8004332:	018b      	lsls	r3, r1, #6
 8004334:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004338:	0182      	lsls	r2, r0, #6
 800433a:	1a12      	subs	r2, r2, r0
 800433c:	eb63 0301 	sbc.w	r3, r3, r1
 8004340:	f04f 0000 	mov.w	r0, #0
 8004344:	f04f 0100 	mov.w	r1, #0
 8004348:	00d9      	lsls	r1, r3, #3
 800434a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800434e:	00d0      	lsls	r0, r2, #3
 8004350:	4602      	mov	r2, r0
 8004352:	460b      	mov	r3, r1
 8004354:	eb12 0208 	adds.w	r2, r2, r8
 8004358:	eb43 0309 	adc.w	r3, r3, r9
 800435c:	f04f 0000 	mov.w	r0, #0
 8004360:	f04f 0100 	mov.w	r1, #0
 8004364:	0259      	lsls	r1, r3, #9
 8004366:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800436a:	0250      	lsls	r0, r2, #9
 800436c:	4602      	mov	r2, r0
 800436e:	460b      	mov	r3, r1
 8004370:	4610      	mov	r0, r2
 8004372:	4619      	mov	r1, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	461a      	mov	r2, r3
 8004378:	f04f 0300 	mov.w	r3, #0
 800437c:	f7fb ff24 	bl	80001c8 <__aeabi_uldivmod>
 8004380:	4602      	mov	r2, r0
 8004382:	460b      	mov	r3, r1
 8004384:	4613      	mov	r3, r2
 8004386:	60fb      	str	r3, [r7, #12]
 8004388:	e04a      	b.n	8004420 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800438a:	4b31      	ldr	r3, [pc, #196]	; (8004450 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	099b      	lsrs	r3, r3, #6
 8004390:	461a      	mov	r2, r3
 8004392:	f04f 0300 	mov.w	r3, #0
 8004396:	f240 10ff 	movw	r0, #511	; 0x1ff
 800439a:	f04f 0100 	mov.w	r1, #0
 800439e:	ea02 0400 	and.w	r4, r2, r0
 80043a2:	ea03 0501 	and.w	r5, r3, r1
 80043a6:	4620      	mov	r0, r4
 80043a8:	4629      	mov	r1, r5
 80043aa:	f04f 0200 	mov.w	r2, #0
 80043ae:	f04f 0300 	mov.w	r3, #0
 80043b2:	014b      	lsls	r3, r1, #5
 80043b4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80043b8:	0142      	lsls	r2, r0, #5
 80043ba:	4610      	mov	r0, r2
 80043bc:	4619      	mov	r1, r3
 80043be:	1b00      	subs	r0, r0, r4
 80043c0:	eb61 0105 	sbc.w	r1, r1, r5
 80043c4:	f04f 0200 	mov.w	r2, #0
 80043c8:	f04f 0300 	mov.w	r3, #0
 80043cc:	018b      	lsls	r3, r1, #6
 80043ce:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80043d2:	0182      	lsls	r2, r0, #6
 80043d4:	1a12      	subs	r2, r2, r0
 80043d6:	eb63 0301 	sbc.w	r3, r3, r1
 80043da:	f04f 0000 	mov.w	r0, #0
 80043de:	f04f 0100 	mov.w	r1, #0
 80043e2:	00d9      	lsls	r1, r3, #3
 80043e4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80043e8:	00d0      	lsls	r0, r2, #3
 80043ea:	4602      	mov	r2, r0
 80043ec:	460b      	mov	r3, r1
 80043ee:	1912      	adds	r2, r2, r4
 80043f0:	eb45 0303 	adc.w	r3, r5, r3
 80043f4:	f04f 0000 	mov.w	r0, #0
 80043f8:	f04f 0100 	mov.w	r1, #0
 80043fc:	0299      	lsls	r1, r3, #10
 80043fe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004402:	0290      	lsls	r0, r2, #10
 8004404:	4602      	mov	r2, r0
 8004406:	460b      	mov	r3, r1
 8004408:	4610      	mov	r0, r2
 800440a:	4619      	mov	r1, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	461a      	mov	r2, r3
 8004410:	f04f 0300 	mov.w	r3, #0
 8004414:	f7fb fed8 	bl	80001c8 <__aeabi_uldivmod>
 8004418:	4602      	mov	r2, r0
 800441a:	460b      	mov	r3, r1
 800441c:	4613      	mov	r3, r2
 800441e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004420:	4b0b      	ldr	r3, [pc, #44]	; (8004450 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	0c1b      	lsrs	r3, r3, #16
 8004426:	f003 0303 	and.w	r3, r3, #3
 800442a:	3301      	adds	r3, #1
 800442c:	005b      	lsls	r3, r3, #1
 800442e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004430:	68fa      	ldr	r2, [r7, #12]
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	fbb2 f3f3 	udiv	r3, r2, r3
 8004438:	60bb      	str	r3, [r7, #8]
      break;
 800443a:	e002      	b.n	8004442 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800443c:	4b05      	ldr	r3, [pc, #20]	; (8004454 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800443e:	60bb      	str	r3, [r7, #8]
      break;
 8004440:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004442:	68bb      	ldr	r3, [r7, #8]
}
 8004444:	4618      	mov	r0, r3
 8004446:	3710      	adds	r7, #16
 8004448:	46bd      	mov	sp, r7
 800444a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800444e:	bf00      	nop
 8004450:	40023800 	.word	0x40023800
 8004454:	00f42400 	.word	0x00f42400
 8004458:	007a1200 	.word	0x007a1200

0800445c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800445c:	b480      	push	{r7}
 800445e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004460:	4b03      	ldr	r3, [pc, #12]	; (8004470 <HAL_RCC_GetHCLKFreq+0x14>)
 8004462:	681b      	ldr	r3, [r3, #0]
}
 8004464:	4618      	mov	r0, r3
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr
 800446e:	bf00      	nop
 8004470:	20000000 	.word	0x20000000

08004474 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004478:	f7ff fff0 	bl	800445c <HAL_RCC_GetHCLKFreq>
 800447c:	4602      	mov	r2, r0
 800447e:	4b05      	ldr	r3, [pc, #20]	; (8004494 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	0a9b      	lsrs	r3, r3, #10
 8004484:	f003 0307 	and.w	r3, r3, #7
 8004488:	4903      	ldr	r1, [pc, #12]	; (8004498 <HAL_RCC_GetPCLK1Freq+0x24>)
 800448a:	5ccb      	ldrb	r3, [r1, r3]
 800448c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004490:	4618      	mov	r0, r3
 8004492:	bd80      	pop	{r7, pc}
 8004494:	40023800 	.word	0x40023800
 8004498:	08008888 	.word	0x08008888

0800449c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b086      	sub	sp, #24
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044a4:	2300      	movs	r3, #0
 80044a6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80044a8:	2300      	movs	r3, #0
 80044aa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 0301 	and.w	r3, r3, #1
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d105      	bne.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d035      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80044c4:	4b62      	ldr	r3, [pc, #392]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80044c6:	2200      	movs	r2, #0
 80044c8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80044ca:	f7fc fd3b 	bl	8000f44 <HAL_GetTick>
 80044ce:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80044d0:	e008      	b.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80044d2:	f7fc fd37 	bl	8000f44 <HAL_GetTick>
 80044d6:	4602      	mov	r2, r0
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	1ad3      	subs	r3, r2, r3
 80044dc:	2b02      	cmp	r3, #2
 80044de:	d901      	bls.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044e0:	2303      	movs	r3, #3
 80044e2:	e0b0      	b.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80044e4:	4b5b      	ldr	r3, [pc, #364]	; (8004654 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d1f0      	bne.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	019a      	lsls	r2, r3, #6
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	071b      	lsls	r3, r3, #28
 80044fc:	4955      	ldr	r1, [pc, #340]	; (8004654 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044fe:	4313      	orrs	r3, r2
 8004500:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004504:	4b52      	ldr	r3, [pc, #328]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004506:	2201      	movs	r2, #1
 8004508:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800450a:	f7fc fd1b 	bl	8000f44 <HAL_GetTick>
 800450e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004510:	e008      	b.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004512:	f7fc fd17 	bl	8000f44 <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	2b02      	cmp	r3, #2
 800451e:	d901      	bls.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004520:	2303      	movs	r3, #3
 8004522:	e090      	b.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004524:	4b4b      	ldr	r3, [pc, #300]	; (8004654 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d0f0      	beq.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 0302 	and.w	r3, r3, #2
 8004538:	2b00      	cmp	r3, #0
 800453a:	f000 8083 	beq.w	8004644 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800453e:	2300      	movs	r3, #0
 8004540:	60fb      	str	r3, [r7, #12]
 8004542:	4b44      	ldr	r3, [pc, #272]	; (8004654 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004546:	4a43      	ldr	r2, [pc, #268]	; (8004654 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004548:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800454c:	6413      	str	r3, [r2, #64]	; 0x40
 800454e:	4b41      	ldr	r3, [pc, #260]	; (8004654 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004556:	60fb      	str	r3, [r7, #12]
 8004558:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800455a:	4b3f      	ldr	r3, [pc, #252]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a3e      	ldr	r2, [pc, #248]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004560:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004564:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004566:	f7fc fced 	bl	8000f44 <HAL_GetTick>
 800456a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800456c:	e008      	b.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800456e:	f7fc fce9 	bl	8000f44 <HAL_GetTick>
 8004572:	4602      	mov	r2, r0
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	2b02      	cmp	r3, #2
 800457a:	d901      	bls.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800457c:	2303      	movs	r3, #3
 800457e:	e062      	b.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004580:	4b35      	ldr	r3, [pc, #212]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004588:	2b00      	cmp	r3, #0
 800458a:	d0f0      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800458c:	4b31      	ldr	r3, [pc, #196]	; (8004654 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800458e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004590:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004594:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d02f      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x160>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045a4:	693a      	ldr	r2, [r7, #16]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d028      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80045aa:	4b2a      	ldr	r3, [pc, #168]	; (8004654 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045b2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80045b4:	4b29      	ldr	r3, [pc, #164]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80045b6:	2201      	movs	r2, #1
 80045b8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80045ba:	4b28      	ldr	r3, [pc, #160]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80045bc:	2200      	movs	r2, #0
 80045be:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80045c0:	4a24      	ldr	r2, [pc, #144]	; (8004654 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80045c6:	4b23      	ldr	r3, [pc, #140]	; (8004654 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ca:	f003 0301 	and.w	r3, r3, #1
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d114      	bne.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80045d2:	f7fc fcb7 	bl	8000f44 <HAL_GetTick>
 80045d6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045d8:	e00a      	b.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045da:	f7fc fcb3 	bl	8000f44 <HAL_GetTick>
 80045de:	4602      	mov	r2, r0
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d901      	bls.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80045ec:	2303      	movs	r3, #3
 80045ee:	e02a      	b.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045f0:	4b18      	ldr	r3, [pc, #96]	; (8004654 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045f4:	f003 0302 	and.w	r3, r3, #2
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d0ee      	beq.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004604:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004608:	d10d      	bne.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800460a:	4b12      	ldr	r3, [pc, #72]	; (8004654 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800461a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800461e:	490d      	ldr	r1, [pc, #52]	; (8004654 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004620:	4313      	orrs	r3, r2
 8004622:	608b      	str	r3, [r1, #8]
 8004624:	e005      	b.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004626:	4b0b      	ldr	r3, [pc, #44]	; (8004654 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	4a0a      	ldr	r2, [pc, #40]	; (8004654 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800462c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004630:	6093      	str	r3, [r2, #8]
 8004632:	4b08      	ldr	r3, [pc, #32]	; (8004654 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004634:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800463e:	4905      	ldr	r1, [pc, #20]	; (8004654 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004640:	4313      	orrs	r3, r2
 8004642:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	3718      	adds	r7, #24
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	42470068 	.word	0x42470068
 8004654:	40023800 	.word	0x40023800
 8004658:	40007000 	.word	0x40007000
 800465c:	42470e40 	.word	0x42470e40

08004660 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004660:	b480      	push	{r7}
 8004662:	b087      	sub	sp, #28
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004668:	2300      	movs	r3, #0
 800466a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800466c:	2300      	movs	r3, #0
 800466e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004670:	2300      	movs	r3, #0
 8004672:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004674:	2300      	movs	r3, #0
 8004676:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2b01      	cmp	r3, #1
 800467c:	d13e      	bne.n	80046fc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800467e:	4b23      	ldr	r3, [pc, #140]	; (800470c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004686:	60fb      	str	r3, [r7, #12]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d005      	beq.n	800469a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2b01      	cmp	r3, #1
 8004692:	d12f      	bne.n	80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004694:	4b1e      	ldr	r3, [pc, #120]	; (8004710 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004696:	617b      	str	r3, [r7, #20]
          break;
 8004698:	e02f      	b.n	80046fa <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800469a:	4b1c      	ldr	r3, [pc, #112]	; (800470c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046a6:	d108      	bne.n	80046ba <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80046a8:	4b18      	ldr	r3, [pc, #96]	; (800470c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046b0:	4a18      	ldr	r2, [pc, #96]	; (8004714 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80046b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80046b6:	613b      	str	r3, [r7, #16]
 80046b8:	e007      	b.n	80046ca <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80046ba:	4b14      	ldr	r3, [pc, #80]	; (800470c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046c2:	4a15      	ldr	r2, [pc, #84]	; (8004718 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80046c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046c8:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80046ca:	4b10      	ldr	r3, [pc, #64]	; (800470c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80046cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046d0:	099b      	lsrs	r3, r3, #6
 80046d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	fb02 f303 	mul.w	r3, r2, r3
 80046dc:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80046de:	4b0b      	ldr	r3, [pc, #44]	; (800470c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80046e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046e4:	0f1b      	lsrs	r3, r3, #28
 80046e6:	f003 0307 	and.w	r3, r3, #7
 80046ea:	68ba      	ldr	r2, [r7, #8]
 80046ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80046f0:	617b      	str	r3, [r7, #20]
          break;
 80046f2:	e002      	b.n	80046fa <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80046f4:	2300      	movs	r3, #0
 80046f6:	617b      	str	r3, [r7, #20]
          break;
 80046f8:	bf00      	nop
        }
      }
      break;
 80046fa:	bf00      	nop
    }
  }
  return frequency;
 80046fc:	697b      	ldr	r3, [r7, #20]
}
 80046fe:	4618      	mov	r0, r3
 8004700:	371c      	adds	r7, #28
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr
 800470a:	bf00      	nop
 800470c:	40023800 	.word	0x40023800
 8004710:	00bb8000 	.word	0x00bb8000
 8004714:	007a1200 	.word	0x007a1200
 8004718:	00f42400 	.word	0x00f42400

0800471c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b082      	sub	sp, #8
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d101      	bne.n	800472e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e07b      	b.n	8004826 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004732:	2b00      	cmp	r3, #0
 8004734:	d108      	bne.n	8004748 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800473e:	d009      	beq.n	8004754 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	61da      	str	r2, [r3, #28]
 8004746:	e005      	b.n	8004754 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004760:	b2db      	uxtb	r3, r3
 8004762:	2b00      	cmp	r3, #0
 8004764:	d106      	bne.n	8004774 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f7fc fa38 	bl	8000be4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2202      	movs	r2, #2
 8004778:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800478a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800479c:	431a      	orrs	r2, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047a6:	431a      	orrs	r2, r3
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	691b      	ldr	r3, [r3, #16]
 80047ac:	f003 0302 	and.w	r3, r3, #2
 80047b0:	431a      	orrs	r2, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	695b      	ldr	r3, [r3, #20]
 80047b6:	f003 0301 	and.w	r3, r3, #1
 80047ba:	431a      	orrs	r2, r3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	699b      	ldr	r3, [r3, #24]
 80047c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047c4:	431a      	orrs	r2, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	69db      	ldr	r3, [r3, #28]
 80047ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047ce:	431a      	orrs	r2, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6a1b      	ldr	r3, [r3, #32]
 80047d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047d8:	ea42 0103 	orr.w	r1, r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	430a      	orrs	r2, r1
 80047ea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	699b      	ldr	r3, [r3, #24]
 80047f0:	0c1b      	lsrs	r3, r3, #16
 80047f2:	f003 0104 	and.w	r1, r3, #4
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fa:	f003 0210 	and.w	r2, r3, #16
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	430a      	orrs	r2, r1
 8004804:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	69da      	ldr	r2, [r3, #28]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004814:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004824:	2300      	movs	r3, #0
}
 8004826:	4618      	mov	r0, r3
 8004828:	3708      	adds	r7, #8
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}

0800482e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800482e:	b580      	push	{r7, lr}
 8004830:	b082      	sub	sp, #8
 8004832:	af00      	add	r7, sp, #0
 8004834:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d101      	bne.n	8004840 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e041      	b.n	80048c4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004846:	b2db      	uxtb	r3, r3
 8004848:	2b00      	cmp	r3, #0
 800484a:	d106      	bne.n	800485a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f7fc fa0d 	bl	8000c74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2202      	movs	r2, #2
 800485e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	3304      	adds	r3, #4
 800486a:	4619      	mov	r1, r3
 800486c:	4610      	mov	r0, r2
 800486e:	f000 f9ab 	bl	8004bc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2201      	movs	r2, #1
 8004876:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2201      	movs	r2, #1
 800487e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2201      	movs	r2, #1
 8004886:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2201      	movs	r2, #1
 800488e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2201      	movs	r2, #1
 8004896:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2201      	movs	r2, #1
 800489e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2201      	movs	r2, #1
 80048a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2201      	movs	r2, #1
 80048ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2201      	movs	r2, #1
 80048b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2201      	movs	r2, #1
 80048be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048c2:	2300      	movs	r3, #0
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3708      	adds	r7, #8
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}

080048cc <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b082      	sub	sp, #8
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d101      	bne.n	80048de <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e041      	b.n	8004962 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d106      	bne.n	80048f8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 f839 	bl	800496a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2202      	movs	r2, #2
 80048fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	3304      	adds	r3, #4
 8004908:	4619      	mov	r1, r3
 800490a:	4610      	mov	r0, r2
 800490c:	f000 f95c 	bl	8004bc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004960:	2300      	movs	r3, #0
}
 8004962:	4618      	mov	r0, r3
 8004964:	3708      	adds	r7, #8
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}

0800496a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800496a:	b480      	push	{r7}
 800496c:	b083      	sub	sp, #12
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004972:	bf00      	nop
 8004974:	370c      	adds	r7, #12
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
	...

08004980 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b086      	sub	sp, #24
 8004984:	af00      	add	r7, sp, #0
 8004986:	60f8      	str	r0, [r7, #12]
 8004988:	60b9      	str	r1, [r7, #8]
 800498a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800498c:	2300      	movs	r3, #0
 800498e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004996:	2b01      	cmp	r3, #1
 8004998:	d101      	bne.n	800499e <HAL_TIM_OC_ConfigChannel+0x1e>
 800499a:	2302      	movs	r3, #2
 800499c:	e048      	b.n	8004a30 <HAL_TIM_OC_ConfigChannel+0xb0>
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2201      	movs	r2, #1
 80049a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2b0c      	cmp	r3, #12
 80049aa:	d839      	bhi.n	8004a20 <HAL_TIM_OC_ConfigChannel+0xa0>
 80049ac:	a201      	add	r2, pc, #4	; (adr r2, 80049b4 <HAL_TIM_OC_ConfigChannel+0x34>)
 80049ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049b2:	bf00      	nop
 80049b4:	080049e9 	.word	0x080049e9
 80049b8:	08004a21 	.word	0x08004a21
 80049bc:	08004a21 	.word	0x08004a21
 80049c0:	08004a21 	.word	0x08004a21
 80049c4:	080049f7 	.word	0x080049f7
 80049c8:	08004a21 	.word	0x08004a21
 80049cc:	08004a21 	.word	0x08004a21
 80049d0:	08004a21 	.word	0x08004a21
 80049d4:	08004a05 	.word	0x08004a05
 80049d8:	08004a21 	.word	0x08004a21
 80049dc:	08004a21 	.word	0x08004a21
 80049e0:	08004a21 	.word	0x08004a21
 80049e4:	08004a13 	.word	0x08004a13
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	68b9      	ldr	r1, [r7, #8]
 80049ee:	4618      	mov	r0, r3
 80049f0:	f000 f98a 	bl	8004d08 <TIM_OC1_SetConfig>
      break;
 80049f4:	e017      	b.n	8004a26 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	68b9      	ldr	r1, [r7, #8]
 80049fc:	4618      	mov	r0, r3
 80049fe:	f000 f9f3 	bl	8004de8 <TIM_OC2_SetConfig>
      break;
 8004a02:	e010      	b.n	8004a26 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	68b9      	ldr	r1, [r7, #8]
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f000 fa62 	bl	8004ed4 <TIM_OC3_SetConfig>
      break;
 8004a10:	e009      	b.n	8004a26 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68b9      	ldr	r1, [r7, #8]
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f000 facf 	bl	8004fbc <TIM_OC4_SetConfig>
      break;
 8004a1e:	e002      	b.n	8004a26 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	75fb      	strb	r3, [r7, #23]
      break;
 8004a24:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3718      	adds	r7, #24
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a42:	2300      	movs	r3, #0
 8004a44:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d101      	bne.n	8004a54 <HAL_TIM_ConfigClockSource+0x1c>
 8004a50:	2302      	movs	r3, #2
 8004a52:	e0b4      	b.n	8004bbe <HAL_TIM_ConfigClockSource+0x186>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2202      	movs	r2, #2
 8004a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004a72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a7a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68ba      	ldr	r2, [r7, #8]
 8004a82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a8c:	d03e      	beq.n	8004b0c <HAL_TIM_ConfigClockSource+0xd4>
 8004a8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a92:	f200 8087 	bhi.w	8004ba4 <HAL_TIM_ConfigClockSource+0x16c>
 8004a96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a9a:	f000 8086 	beq.w	8004baa <HAL_TIM_ConfigClockSource+0x172>
 8004a9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aa2:	d87f      	bhi.n	8004ba4 <HAL_TIM_ConfigClockSource+0x16c>
 8004aa4:	2b70      	cmp	r3, #112	; 0x70
 8004aa6:	d01a      	beq.n	8004ade <HAL_TIM_ConfigClockSource+0xa6>
 8004aa8:	2b70      	cmp	r3, #112	; 0x70
 8004aaa:	d87b      	bhi.n	8004ba4 <HAL_TIM_ConfigClockSource+0x16c>
 8004aac:	2b60      	cmp	r3, #96	; 0x60
 8004aae:	d050      	beq.n	8004b52 <HAL_TIM_ConfigClockSource+0x11a>
 8004ab0:	2b60      	cmp	r3, #96	; 0x60
 8004ab2:	d877      	bhi.n	8004ba4 <HAL_TIM_ConfigClockSource+0x16c>
 8004ab4:	2b50      	cmp	r3, #80	; 0x50
 8004ab6:	d03c      	beq.n	8004b32 <HAL_TIM_ConfigClockSource+0xfa>
 8004ab8:	2b50      	cmp	r3, #80	; 0x50
 8004aba:	d873      	bhi.n	8004ba4 <HAL_TIM_ConfigClockSource+0x16c>
 8004abc:	2b40      	cmp	r3, #64	; 0x40
 8004abe:	d058      	beq.n	8004b72 <HAL_TIM_ConfigClockSource+0x13a>
 8004ac0:	2b40      	cmp	r3, #64	; 0x40
 8004ac2:	d86f      	bhi.n	8004ba4 <HAL_TIM_ConfigClockSource+0x16c>
 8004ac4:	2b30      	cmp	r3, #48	; 0x30
 8004ac6:	d064      	beq.n	8004b92 <HAL_TIM_ConfigClockSource+0x15a>
 8004ac8:	2b30      	cmp	r3, #48	; 0x30
 8004aca:	d86b      	bhi.n	8004ba4 <HAL_TIM_ConfigClockSource+0x16c>
 8004acc:	2b20      	cmp	r3, #32
 8004ace:	d060      	beq.n	8004b92 <HAL_TIM_ConfigClockSource+0x15a>
 8004ad0:	2b20      	cmp	r3, #32
 8004ad2:	d867      	bhi.n	8004ba4 <HAL_TIM_ConfigClockSource+0x16c>
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d05c      	beq.n	8004b92 <HAL_TIM_ConfigClockSource+0x15a>
 8004ad8:	2b10      	cmp	r3, #16
 8004ada:	d05a      	beq.n	8004b92 <HAL_TIM_ConfigClockSource+0x15a>
 8004adc:	e062      	b.n	8004ba4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6818      	ldr	r0, [r3, #0]
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	6899      	ldr	r1, [r3, #8]
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	685a      	ldr	r2, [r3, #4]
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	f000 fb35 	bl	800515c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004b00:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68ba      	ldr	r2, [r7, #8]
 8004b08:	609a      	str	r2, [r3, #8]
      break;
 8004b0a:	e04f      	b.n	8004bac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6818      	ldr	r0, [r3, #0]
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	6899      	ldr	r1, [r3, #8]
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	685a      	ldr	r2, [r3, #4]
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	f000 fb1e 	bl	800515c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	689a      	ldr	r2, [r3, #8]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b2e:	609a      	str	r2, [r3, #8]
      break;
 8004b30:	e03c      	b.n	8004bac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6818      	ldr	r0, [r3, #0]
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	6859      	ldr	r1, [r3, #4]
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	461a      	mov	r2, r3
 8004b40:	f000 fa92 	bl	8005068 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2150      	movs	r1, #80	; 0x50
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f000 faeb 	bl	8005126 <TIM_ITRx_SetConfig>
      break;
 8004b50:	e02c      	b.n	8004bac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6818      	ldr	r0, [r3, #0]
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	6859      	ldr	r1, [r3, #4]
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	461a      	mov	r2, r3
 8004b60:	f000 fab1 	bl	80050c6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2160      	movs	r1, #96	; 0x60
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f000 fadb 	bl	8005126 <TIM_ITRx_SetConfig>
      break;
 8004b70:	e01c      	b.n	8004bac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6818      	ldr	r0, [r3, #0]
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	6859      	ldr	r1, [r3, #4]
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	461a      	mov	r2, r3
 8004b80:	f000 fa72 	bl	8005068 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	2140      	movs	r1, #64	; 0x40
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f000 facb 	bl	8005126 <TIM_ITRx_SetConfig>
      break;
 8004b90:	e00c      	b.n	8004bac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	4610      	mov	r0, r2
 8004b9e:	f000 fac2 	bl	8005126 <TIM_ITRx_SetConfig>
      break;
 8004ba2:	e003      	b.n	8004bac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	73fb      	strb	r3, [r7, #15]
      break;
 8004ba8:	e000      	b.n	8004bac <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004baa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3710      	adds	r7, #16
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
	...

08004bc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b085      	sub	sp, #20
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	4a40      	ldr	r2, [pc, #256]	; (8004cdc <TIM_Base_SetConfig+0x114>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d013      	beq.n	8004c08 <TIM_Base_SetConfig+0x40>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004be6:	d00f      	beq.n	8004c08 <TIM_Base_SetConfig+0x40>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	4a3d      	ldr	r2, [pc, #244]	; (8004ce0 <TIM_Base_SetConfig+0x118>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d00b      	beq.n	8004c08 <TIM_Base_SetConfig+0x40>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	4a3c      	ldr	r2, [pc, #240]	; (8004ce4 <TIM_Base_SetConfig+0x11c>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d007      	beq.n	8004c08 <TIM_Base_SetConfig+0x40>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	4a3b      	ldr	r2, [pc, #236]	; (8004ce8 <TIM_Base_SetConfig+0x120>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d003      	beq.n	8004c08 <TIM_Base_SetConfig+0x40>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	4a3a      	ldr	r2, [pc, #232]	; (8004cec <TIM_Base_SetConfig+0x124>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d108      	bne.n	8004c1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	68fa      	ldr	r2, [r7, #12]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a2f      	ldr	r2, [pc, #188]	; (8004cdc <TIM_Base_SetConfig+0x114>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d02b      	beq.n	8004c7a <TIM_Base_SetConfig+0xb2>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c28:	d027      	beq.n	8004c7a <TIM_Base_SetConfig+0xb2>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4a2c      	ldr	r2, [pc, #176]	; (8004ce0 <TIM_Base_SetConfig+0x118>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d023      	beq.n	8004c7a <TIM_Base_SetConfig+0xb2>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4a2b      	ldr	r2, [pc, #172]	; (8004ce4 <TIM_Base_SetConfig+0x11c>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d01f      	beq.n	8004c7a <TIM_Base_SetConfig+0xb2>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4a2a      	ldr	r2, [pc, #168]	; (8004ce8 <TIM_Base_SetConfig+0x120>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d01b      	beq.n	8004c7a <TIM_Base_SetConfig+0xb2>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4a29      	ldr	r2, [pc, #164]	; (8004cec <TIM_Base_SetConfig+0x124>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d017      	beq.n	8004c7a <TIM_Base_SetConfig+0xb2>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	4a28      	ldr	r2, [pc, #160]	; (8004cf0 <TIM_Base_SetConfig+0x128>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d013      	beq.n	8004c7a <TIM_Base_SetConfig+0xb2>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a27      	ldr	r2, [pc, #156]	; (8004cf4 <TIM_Base_SetConfig+0x12c>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d00f      	beq.n	8004c7a <TIM_Base_SetConfig+0xb2>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a26      	ldr	r2, [pc, #152]	; (8004cf8 <TIM_Base_SetConfig+0x130>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d00b      	beq.n	8004c7a <TIM_Base_SetConfig+0xb2>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a25      	ldr	r2, [pc, #148]	; (8004cfc <TIM_Base_SetConfig+0x134>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d007      	beq.n	8004c7a <TIM_Base_SetConfig+0xb2>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4a24      	ldr	r2, [pc, #144]	; (8004d00 <TIM_Base_SetConfig+0x138>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d003      	beq.n	8004c7a <TIM_Base_SetConfig+0xb2>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4a23      	ldr	r2, [pc, #140]	; (8004d04 <TIM_Base_SetConfig+0x13c>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d108      	bne.n	8004c8c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	68fa      	ldr	r2, [r7, #12]
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	695b      	ldr	r3, [r3, #20]
 8004c96:	4313      	orrs	r3, r2
 8004c98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	68fa      	ldr	r2, [r7, #12]
 8004c9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	689a      	ldr	r2, [r3, #8]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	4a0a      	ldr	r2, [pc, #40]	; (8004cdc <TIM_Base_SetConfig+0x114>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d003      	beq.n	8004cc0 <TIM_Base_SetConfig+0xf8>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	4a0c      	ldr	r2, [pc, #48]	; (8004cec <TIM_Base_SetConfig+0x124>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d103      	bne.n	8004cc8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	691a      	ldr	r2, [r3, #16]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	615a      	str	r2, [r3, #20]
}
 8004cce:	bf00      	nop
 8004cd0:	3714      	adds	r7, #20
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr
 8004cda:	bf00      	nop
 8004cdc:	40010000 	.word	0x40010000
 8004ce0:	40000400 	.word	0x40000400
 8004ce4:	40000800 	.word	0x40000800
 8004ce8:	40000c00 	.word	0x40000c00
 8004cec:	40010400 	.word	0x40010400
 8004cf0:	40014000 	.word	0x40014000
 8004cf4:	40014400 	.word	0x40014400
 8004cf8:	40014800 	.word	0x40014800
 8004cfc:	40001800 	.word	0x40001800
 8004d00:	40001c00 	.word	0x40001c00
 8004d04:	40002000 	.word	0x40002000

08004d08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b087      	sub	sp, #28
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6a1b      	ldr	r3, [r3, #32]
 8004d16:	f023 0201 	bic.w	r2, r3, #1
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a1b      	ldr	r3, [r3, #32]
 8004d22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	699b      	ldr	r3, [r3, #24]
 8004d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f023 0303 	bic.w	r3, r3, #3
 8004d3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	68fa      	ldr	r2, [r7, #12]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	f023 0302 	bic.w	r3, r3, #2
 8004d50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	697a      	ldr	r2, [r7, #20]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	4a20      	ldr	r2, [pc, #128]	; (8004de0 <TIM_OC1_SetConfig+0xd8>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d003      	beq.n	8004d6c <TIM_OC1_SetConfig+0x64>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	4a1f      	ldr	r2, [pc, #124]	; (8004de4 <TIM_OC1_SetConfig+0xdc>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d10c      	bne.n	8004d86 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	f023 0308 	bic.w	r3, r3, #8
 8004d72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	697a      	ldr	r2, [r7, #20]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	f023 0304 	bic.w	r3, r3, #4
 8004d84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a15      	ldr	r2, [pc, #84]	; (8004de0 <TIM_OC1_SetConfig+0xd8>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d003      	beq.n	8004d96 <TIM_OC1_SetConfig+0x8e>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a14      	ldr	r2, [pc, #80]	; (8004de4 <TIM_OC1_SetConfig+0xdc>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d111      	bne.n	8004dba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004da4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	695b      	ldr	r3, [r3, #20]
 8004daa:	693a      	ldr	r2, [r7, #16]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	699b      	ldr	r3, [r3, #24]
 8004db4:	693a      	ldr	r2, [r7, #16]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	693a      	ldr	r2, [r7, #16]
 8004dbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	68fa      	ldr	r2, [r7, #12]
 8004dc4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	685a      	ldr	r2, [r3, #4]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	697a      	ldr	r2, [r7, #20]
 8004dd2:	621a      	str	r2, [r3, #32]
}
 8004dd4:	bf00      	nop
 8004dd6:	371c      	adds	r7, #28
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr
 8004de0:	40010000 	.word	0x40010000
 8004de4:	40010400 	.word	0x40010400

08004de8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b087      	sub	sp, #28
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6a1b      	ldr	r3, [r3, #32]
 8004df6:	f023 0210 	bic.w	r2, r3, #16
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a1b      	ldr	r3, [r3, #32]
 8004e02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	699b      	ldr	r3, [r3, #24]
 8004e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	021b      	lsls	r3, r3, #8
 8004e26:	68fa      	ldr	r2, [r7, #12]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	f023 0320 	bic.w	r3, r3, #32
 8004e32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	011b      	lsls	r3, r3, #4
 8004e3a:	697a      	ldr	r2, [r7, #20]
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	4a22      	ldr	r2, [pc, #136]	; (8004ecc <TIM_OC2_SetConfig+0xe4>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d003      	beq.n	8004e50 <TIM_OC2_SetConfig+0x68>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4a21      	ldr	r2, [pc, #132]	; (8004ed0 <TIM_OC2_SetConfig+0xe8>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d10d      	bne.n	8004e6c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	011b      	lsls	r3, r3, #4
 8004e5e:	697a      	ldr	r2, [r7, #20]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e6a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	4a17      	ldr	r2, [pc, #92]	; (8004ecc <TIM_OC2_SetConfig+0xe4>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d003      	beq.n	8004e7c <TIM_OC2_SetConfig+0x94>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	4a16      	ldr	r2, [pc, #88]	; (8004ed0 <TIM_OC2_SetConfig+0xe8>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d113      	bne.n	8004ea4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	695b      	ldr	r3, [r3, #20]
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	693a      	ldr	r2, [r7, #16]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	699b      	ldr	r3, [r3, #24]
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	693a      	ldr	r2, [r7, #16]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	693a      	ldr	r2, [r7, #16]
 8004ea8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	68fa      	ldr	r2, [r7, #12]
 8004eae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	685a      	ldr	r2, [r3, #4]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	697a      	ldr	r2, [r7, #20]
 8004ebc:	621a      	str	r2, [r3, #32]
}
 8004ebe:	bf00      	nop
 8004ec0:	371c      	adds	r7, #28
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr
 8004eca:	bf00      	nop
 8004ecc:	40010000 	.word	0x40010000
 8004ed0:	40010400 	.word	0x40010400

08004ed4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b087      	sub	sp, #28
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a1b      	ldr	r3, [r3, #32]
 8004ee2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a1b      	ldr	r3, [r3, #32]
 8004eee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	69db      	ldr	r3, [r3, #28]
 8004efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f023 0303 	bic.w	r3, r3, #3
 8004f0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	68fa      	ldr	r2, [r7, #12]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	021b      	lsls	r3, r3, #8
 8004f24:	697a      	ldr	r2, [r7, #20]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4a21      	ldr	r2, [pc, #132]	; (8004fb4 <TIM_OC3_SetConfig+0xe0>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d003      	beq.n	8004f3a <TIM_OC3_SetConfig+0x66>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a20      	ldr	r2, [pc, #128]	; (8004fb8 <TIM_OC3_SetConfig+0xe4>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d10d      	bne.n	8004f56 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	021b      	lsls	r3, r3, #8
 8004f48:	697a      	ldr	r2, [r7, #20]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4a16      	ldr	r2, [pc, #88]	; (8004fb4 <TIM_OC3_SetConfig+0xe0>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d003      	beq.n	8004f66 <TIM_OC3_SetConfig+0x92>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4a15      	ldr	r2, [pc, #84]	; (8004fb8 <TIM_OC3_SetConfig+0xe4>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d113      	bne.n	8004f8e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	695b      	ldr	r3, [r3, #20]
 8004f7a:	011b      	lsls	r3, r3, #4
 8004f7c:	693a      	ldr	r2, [r7, #16]
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	699b      	ldr	r3, [r3, #24]
 8004f86:	011b      	lsls	r3, r3, #4
 8004f88:	693a      	ldr	r2, [r7, #16]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	693a      	ldr	r2, [r7, #16]
 8004f92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	68fa      	ldr	r2, [r7, #12]
 8004f98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	685a      	ldr	r2, [r3, #4]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	697a      	ldr	r2, [r7, #20]
 8004fa6:	621a      	str	r2, [r3, #32]
}
 8004fa8:	bf00      	nop
 8004faa:	371c      	adds	r7, #28
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr
 8004fb4:	40010000 	.word	0x40010000
 8004fb8:	40010400 	.word	0x40010400

08004fbc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b087      	sub	sp, #28
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a1b      	ldr	r3, [r3, #32]
 8004fca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6a1b      	ldr	r3, [r3, #32]
 8004fd6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	69db      	ldr	r3, [r3, #28]
 8004fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ff2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	021b      	lsls	r3, r3, #8
 8004ffa:	68fa      	ldr	r2, [r7, #12]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005006:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	031b      	lsls	r3, r3, #12
 800500e:	693a      	ldr	r2, [r7, #16]
 8005010:	4313      	orrs	r3, r2
 8005012:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a12      	ldr	r2, [pc, #72]	; (8005060 <TIM_OC4_SetConfig+0xa4>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d003      	beq.n	8005024 <TIM_OC4_SetConfig+0x68>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a11      	ldr	r2, [pc, #68]	; (8005064 <TIM_OC4_SetConfig+0xa8>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d109      	bne.n	8005038 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800502a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	695b      	ldr	r3, [r3, #20]
 8005030:	019b      	lsls	r3, r3, #6
 8005032:	697a      	ldr	r2, [r7, #20]
 8005034:	4313      	orrs	r3, r2
 8005036:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	697a      	ldr	r2, [r7, #20]
 800503c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	68fa      	ldr	r2, [r7, #12]
 8005042:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	685a      	ldr	r2, [r3, #4]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	693a      	ldr	r2, [r7, #16]
 8005050:	621a      	str	r2, [r3, #32]
}
 8005052:	bf00      	nop
 8005054:	371c      	adds	r7, #28
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr
 800505e:	bf00      	nop
 8005060:	40010000 	.word	0x40010000
 8005064:	40010400 	.word	0x40010400

08005068 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005068:	b480      	push	{r7}
 800506a:	b087      	sub	sp, #28
 800506c:	af00      	add	r7, sp, #0
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	60b9      	str	r1, [r7, #8]
 8005072:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6a1b      	ldr	r3, [r3, #32]
 8005078:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	6a1b      	ldr	r3, [r3, #32]
 800507e:	f023 0201 	bic.w	r2, r3, #1
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	699b      	ldr	r3, [r3, #24]
 800508a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005092:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	011b      	lsls	r3, r3, #4
 8005098:	693a      	ldr	r2, [r7, #16]
 800509a:	4313      	orrs	r3, r2
 800509c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	f023 030a 	bic.w	r3, r3, #10
 80050a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050a6:	697a      	ldr	r2, [r7, #20]
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	693a      	ldr	r2, [r7, #16]
 80050b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	697a      	ldr	r2, [r7, #20]
 80050b8:	621a      	str	r2, [r3, #32]
}
 80050ba:	bf00      	nop
 80050bc:	371c      	adds	r7, #28
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr

080050c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050c6:	b480      	push	{r7}
 80050c8:	b087      	sub	sp, #28
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	60f8      	str	r0, [r7, #12]
 80050ce:	60b9      	str	r1, [r7, #8]
 80050d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	6a1b      	ldr	r3, [r3, #32]
 80050d6:	f023 0210 	bic.w	r2, r3, #16
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	699b      	ldr	r3, [r3, #24]
 80050e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6a1b      	ldr	r3, [r3, #32]
 80050e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	031b      	lsls	r3, r3, #12
 80050f6:	697a      	ldr	r2, [r7, #20]
 80050f8:	4313      	orrs	r3, r2
 80050fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005102:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	011b      	lsls	r3, r3, #4
 8005108:	693a      	ldr	r2, [r7, #16]
 800510a:	4313      	orrs	r3, r2
 800510c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	697a      	ldr	r2, [r7, #20]
 8005112:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	693a      	ldr	r2, [r7, #16]
 8005118:	621a      	str	r2, [r3, #32]
}
 800511a:	bf00      	nop
 800511c:	371c      	adds	r7, #28
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr

08005126 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005126:	b480      	push	{r7}
 8005128:	b085      	sub	sp, #20
 800512a:	af00      	add	r7, sp, #0
 800512c:	6078      	str	r0, [r7, #4]
 800512e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800513c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800513e:	683a      	ldr	r2, [r7, #0]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	4313      	orrs	r3, r2
 8005144:	f043 0307 	orr.w	r3, r3, #7
 8005148:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	68fa      	ldr	r2, [r7, #12]
 800514e:	609a      	str	r2, [r3, #8]
}
 8005150:	bf00      	nop
 8005152:	3714      	adds	r7, #20
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr

0800515c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800515c:	b480      	push	{r7}
 800515e:	b087      	sub	sp, #28
 8005160:	af00      	add	r7, sp, #0
 8005162:	60f8      	str	r0, [r7, #12]
 8005164:	60b9      	str	r1, [r7, #8]
 8005166:	607a      	str	r2, [r7, #4]
 8005168:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005176:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	021a      	lsls	r2, r3, #8
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	431a      	orrs	r2, r3
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	4313      	orrs	r3, r2
 8005184:	697a      	ldr	r2, [r7, #20]
 8005186:	4313      	orrs	r3, r2
 8005188:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	697a      	ldr	r2, [r7, #20]
 800518e:	609a      	str	r2, [r3, #8]
}
 8005190:	bf00      	nop
 8005192:	371c      	adds	r7, #28
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr

0800519c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800519c:	b480      	push	{r7}
 800519e:	b087      	sub	sp, #28
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	60f8      	str	r0, [r7, #12]
 80051a4:	60b9      	str	r1, [r7, #8]
 80051a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	f003 031f 	and.w	r3, r3, #31
 80051ae:	2201      	movs	r2, #1
 80051b0:	fa02 f303 	lsl.w	r3, r2, r3
 80051b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6a1a      	ldr	r2, [r3, #32]
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	43db      	mvns	r3, r3
 80051be:	401a      	ands	r2, r3
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6a1a      	ldr	r2, [r3, #32]
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	f003 031f 	and.w	r3, r3, #31
 80051ce:	6879      	ldr	r1, [r7, #4]
 80051d0:	fa01 f303 	lsl.w	r3, r1, r3
 80051d4:	431a      	orrs	r2, r3
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	621a      	str	r2, [r3, #32]
}
 80051da:	bf00      	nop
 80051dc:	371c      	adds	r7, #28
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr
	...

080051e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b085      	sub	sp, #20
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d101      	bne.n	8005200 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051fc:	2302      	movs	r3, #2
 80051fe:	e05a      	b.n	80052b6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2202      	movs	r2, #2
 800520c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005226:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	68fa      	ldr	r2, [r7, #12]
 800522e:	4313      	orrs	r3, r2
 8005230:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68fa      	ldr	r2, [r7, #12]
 8005238:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a21      	ldr	r2, [pc, #132]	; (80052c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d022      	beq.n	800528a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800524c:	d01d      	beq.n	800528a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a1d      	ldr	r2, [pc, #116]	; (80052c8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d018      	beq.n	800528a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a1b      	ldr	r2, [pc, #108]	; (80052cc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d013      	beq.n	800528a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a1a      	ldr	r2, [pc, #104]	; (80052d0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d00e      	beq.n	800528a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a18      	ldr	r2, [pc, #96]	; (80052d4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d009      	beq.n	800528a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a17      	ldr	r2, [pc, #92]	; (80052d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d004      	beq.n	800528a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a15      	ldr	r2, [pc, #84]	; (80052dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d10c      	bne.n	80052a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005290:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	68ba      	ldr	r2, [r7, #8]
 8005298:	4313      	orrs	r3, r2
 800529a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	68ba      	ldr	r2, [r7, #8]
 80052a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3714      	adds	r7, #20
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr
 80052c2:	bf00      	nop
 80052c4:	40010000 	.word	0x40010000
 80052c8:	40000400 	.word	0x40000400
 80052cc:	40000800 	.word	0x40000800
 80052d0:	40000c00 	.word	0x40000c00
 80052d4:	40010400 	.word	0x40010400
 80052d8:	40014000 	.word	0x40014000
 80052dc:	40001800 	.word	0x40001800

080052e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80052e0:	b084      	sub	sp, #16
 80052e2:	b580      	push	{r7, lr}
 80052e4:	b084      	sub	sp, #16
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	6078      	str	r0, [r7, #4]
 80052ea:	f107 001c 	add.w	r0, r7, #28
 80052ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80052f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d122      	bne.n	800533e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800530c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005320:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005322:	2b01      	cmp	r3, #1
 8005324:	d105      	bne.n	8005332 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 f9a0 	bl	8005678 <USB_CoreReset>
 8005338:	4603      	mov	r3, r0
 800533a:	73fb      	strb	r3, [r7, #15]
 800533c:	e01a      	b.n	8005374 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	68db      	ldr	r3, [r3, #12]
 8005342:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 f994 	bl	8005678 <USB_CoreReset>
 8005350:	4603      	mov	r3, r0
 8005352:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005354:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005356:	2b00      	cmp	r3, #0
 8005358:	d106      	bne.n	8005368 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800535e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	639a      	str	r2, [r3, #56]	; 0x38
 8005366:	e005      	b.n	8005374 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800536c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005376:	2b01      	cmp	r3, #1
 8005378:	d10b      	bne.n	8005392 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	f043 0206 	orr.w	r2, r3, #6
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	f043 0220 	orr.w	r2, r3, #32
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005392:	7bfb      	ldrb	r3, [r7, #15]
}
 8005394:	4618      	mov	r0, r3
 8005396:	3710      	adds	r7, #16
 8005398:	46bd      	mov	sp, r7
 800539a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800539e:	b004      	add	sp, #16
 80053a0:	4770      	bx	lr

080053a2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80053a2:	b480      	push	{r7}
 80053a4:	b083      	sub	sp, #12
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	f043 0201 	orr.w	r2, r3, #1
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80053b6:	2300      	movs	r3, #0
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	370c      	adds	r7, #12
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr

080053c4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b083      	sub	sp, #12
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	f023 0201 	bic.w	r2, r3, #1
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80053d8:	2300      	movs	r3, #0
}
 80053da:	4618      	mov	r0, r3
 80053dc:	370c      	adds	r7, #12
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr

080053e6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80053e6:	b580      	push	{r7, lr}
 80053e8:	b084      	sub	sp, #16
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	6078      	str	r0, [r7, #4]
 80053ee:	460b      	mov	r3, r1
 80053f0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80053f2:	2300      	movs	r3, #0
 80053f4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005402:	78fb      	ldrb	r3, [r7, #3]
 8005404:	2b01      	cmp	r3, #1
 8005406:	d115      	bne.n	8005434 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005414:	2001      	movs	r0, #1
 8005416:	f7fb fda1 	bl	8000f5c <HAL_Delay>
      ms++;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	3301      	adds	r3, #1
 800541e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f000 f91a 	bl	800565a <USB_GetMode>
 8005426:	4603      	mov	r3, r0
 8005428:	2b01      	cmp	r3, #1
 800542a:	d01e      	beq.n	800546a <USB_SetCurrentMode+0x84>
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2b31      	cmp	r3, #49	; 0x31
 8005430:	d9f0      	bls.n	8005414 <USB_SetCurrentMode+0x2e>
 8005432:	e01a      	b.n	800546a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005434:	78fb      	ldrb	r3, [r7, #3]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d115      	bne.n	8005466 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	68db      	ldr	r3, [r3, #12]
 800543e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005446:	2001      	movs	r0, #1
 8005448:	f7fb fd88 	bl	8000f5c <HAL_Delay>
      ms++;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	3301      	adds	r3, #1
 8005450:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f000 f901 	bl	800565a <USB_GetMode>
 8005458:	4603      	mov	r3, r0
 800545a:	2b00      	cmp	r3, #0
 800545c:	d005      	beq.n	800546a <USB_SetCurrentMode+0x84>
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2b31      	cmp	r3, #49	; 0x31
 8005462:	d9f0      	bls.n	8005446 <USB_SetCurrentMode+0x60>
 8005464:	e001      	b.n	800546a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	e005      	b.n	8005476 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2b32      	cmp	r3, #50	; 0x32
 800546e:	d101      	bne.n	8005474 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	e000      	b.n	8005476 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005474:	2300      	movs	r3, #0
}
 8005476:	4618      	mov	r0, r3
 8005478:	3710      	adds	r7, #16
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
	...

08005480 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005480:	b480      	push	{r7}
 8005482:	b085      	sub	sp, #20
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800548a:	2300      	movs	r3, #0
 800548c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	019b      	lsls	r3, r3, #6
 8005492:	f043 0220 	orr.w	r2, r3, #32
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	3301      	adds	r3, #1
 800549e:	60fb      	str	r3, [r7, #12]
 80054a0:	4a08      	ldr	r2, [pc, #32]	; (80054c4 <USB_FlushTxFifo+0x44>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d901      	bls.n	80054aa <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80054a6:	2303      	movs	r3, #3
 80054a8:	e006      	b.n	80054b8 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	f003 0320 	and.w	r3, r3, #32
 80054b2:	2b20      	cmp	r3, #32
 80054b4:	d0f1      	beq.n	800549a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80054b6:	2300      	movs	r3, #0
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3714      	adds	r7, #20
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr
 80054c4:	00030d40 	.word	0x00030d40

080054c8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b085      	sub	sp, #20
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80054d0:	2300      	movs	r3, #0
 80054d2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2210      	movs	r2, #16
 80054d8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	3301      	adds	r3, #1
 80054de:	60fb      	str	r3, [r7, #12]
 80054e0:	4a08      	ldr	r2, [pc, #32]	; (8005504 <USB_FlushRxFifo+0x3c>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d901      	bls.n	80054ea <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80054e6:	2303      	movs	r3, #3
 80054e8:	e006      	b.n	80054f8 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	691b      	ldr	r3, [r3, #16]
 80054ee:	f003 0310 	and.w	r3, r3, #16
 80054f2:	2b10      	cmp	r3, #16
 80054f4:	d0f1      	beq.n	80054da <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80054f6:	2300      	movs	r3, #0
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3714      	adds	r7, #20
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr
 8005504:	00030d40 	.word	0x00030d40

08005508 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005508:	b480      	push	{r7}
 800550a:	b089      	sub	sp, #36	; 0x24
 800550c:	af00      	add	r7, sp, #0
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	60b9      	str	r1, [r7, #8]
 8005512:	4611      	mov	r1, r2
 8005514:	461a      	mov	r2, r3
 8005516:	460b      	mov	r3, r1
 8005518:	71fb      	strb	r3, [r7, #7]
 800551a:	4613      	mov	r3, r2
 800551c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005526:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800552a:	2b00      	cmp	r3, #0
 800552c:	d123      	bne.n	8005576 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800552e:	88bb      	ldrh	r3, [r7, #4]
 8005530:	3303      	adds	r3, #3
 8005532:	089b      	lsrs	r3, r3, #2
 8005534:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005536:	2300      	movs	r3, #0
 8005538:	61bb      	str	r3, [r7, #24]
 800553a:	e018      	b.n	800556e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800553c:	79fb      	ldrb	r3, [r7, #7]
 800553e:	031a      	lsls	r2, r3, #12
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	4413      	add	r3, r2
 8005544:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005548:	461a      	mov	r2, r3
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	3301      	adds	r3, #1
 8005554:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005556:	69fb      	ldr	r3, [r7, #28]
 8005558:	3301      	adds	r3, #1
 800555a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800555c:	69fb      	ldr	r3, [r7, #28]
 800555e:	3301      	adds	r3, #1
 8005560:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005562:	69fb      	ldr	r3, [r7, #28]
 8005564:	3301      	adds	r3, #1
 8005566:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005568:	69bb      	ldr	r3, [r7, #24]
 800556a:	3301      	adds	r3, #1
 800556c:	61bb      	str	r3, [r7, #24]
 800556e:	69ba      	ldr	r2, [r7, #24]
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	429a      	cmp	r2, r3
 8005574:	d3e2      	bcc.n	800553c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005576:	2300      	movs	r3, #0
}
 8005578:	4618      	mov	r0, r3
 800557a:	3724      	adds	r7, #36	; 0x24
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr

08005584 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005584:	b480      	push	{r7}
 8005586:	b08b      	sub	sp, #44	; 0x2c
 8005588:	af00      	add	r7, sp, #0
 800558a:	60f8      	str	r0, [r7, #12]
 800558c:	60b9      	str	r1, [r7, #8]
 800558e:	4613      	mov	r3, r2
 8005590:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800559a:	88fb      	ldrh	r3, [r7, #6]
 800559c:	089b      	lsrs	r3, r3, #2
 800559e:	b29b      	uxth	r3, r3
 80055a0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80055a2:	88fb      	ldrh	r3, [r7, #6]
 80055a4:	f003 0303 	and.w	r3, r3, #3
 80055a8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80055aa:	2300      	movs	r3, #0
 80055ac:	623b      	str	r3, [r7, #32]
 80055ae:	e014      	b.n	80055da <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80055b0:	69bb      	ldr	r3, [r7, #24]
 80055b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ba:	601a      	str	r2, [r3, #0]
    pDest++;
 80055bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055be:	3301      	adds	r3, #1
 80055c0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80055c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c4:	3301      	adds	r3, #1
 80055c6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80055c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ca:	3301      	adds	r3, #1
 80055cc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80055ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d0:	3301      	adds	r3, #1
 80055d2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80055d4:	6a3b      	ldr	r3, [r7, #32]
 80055d6:	3301      	adds	r3, #1
 80055d8:	623b      	str	r3, [r7, #32]
 80055da:	6a3a      	ldr	r2, [r7, #32]
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	429a      	cmp	r2, r3
 80055e0:	d3e6      	bcc.n	80055b0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80055e2:	8bfb      	ldrh	r3, [r7, #30]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d01e      	beq.n	8005626 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80055e8:	2300      	movs	r3, #0
 80055ea:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80055ec:	69bb      	ldr	r3, [r7, #24]
 80055ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055f2:	461a      	mov	r2, r3
 80055f4:	f107 0310 	add.w	r3, r7, #16
 80055f8:	6812      	ldr	r2, [r2, #0]
 80055fa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80055fc:	693a      	ldr	r2, [r7, #16]
 80055fe:	6a3b      	ldr	r3, [r7, #32]
 8005600:	b2db      	uxtb	r3, r3
 8005602:	00db      	lsls	r3, r3, #3
 8005604:	fa22 f303 	lsr.w	r3, r2, r3
 8005608:	b2da      	uxtb	r2, r3
 800560a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560c:	701a      	strb	r2, [r3, #0]
      i++;
 800560e:	6a3b      	ldr	r3, [r7, #32]
 8005610:	3301      	adds	r3, #1
 8005612:	623b      	str	r3, [r7, #32]
      pDest++;
 8005614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005616:	3301      	adds	r3, #1
 8005618:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800561a:	8bfb      	ldrh	r3, [r7, #30]
 800561c:	3b01      	subs	r3, #1
 800561e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005620:	8bfb      	ldrh	r3, [r7, #30]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d1ea      	bne.n	80055fc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005628:	4618      	mov	r0, r3
 800562a:	372c      	adds	r7, #44	; 0x2c
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr

08005634 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005634:	b480      	push	{r7}
 8005636:	b085      	sub	sp, #20
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	695b      	ldr	r3, [r3, #20]
 8005640:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	699b      	ldr	r3, [r3, #24]
 8005646:	68fa      	ldr	r2, [r7, #12]
 8005648:	4013      	ands	r3, r2
 800564a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800564c:	68fb      	ldr	r3, [r7, #12]
}
 800564e:	4618      	mov	r0, r3
 8005650:	3714      	adds	r7, #20
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr

0800565a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800565a:	b480      	push	{r7}
 800565c:	b083      	sub	sp, #12
 800565e:	af00      	add	r7, sp, #0
 8005660:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	695b      	ldr	r3, [r3, #20]
 8005666:	f003 0301 	and.w	r3, r3, #1
}
 800566a:	4618      	mov	r0, r3
 800566c:	370c      	adds	r7, #12
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr
	...

08005678 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005678:	b480      	push	{r7}
 800567a:	b085      	sub	sp, #20
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005680:	2300      	movs	r3, #0
 8005682:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	3301      	adds	r3, #1
 8005688:	60fb      	str	r3, [r7, #12]
 800568a:	4a13      	ldr	r2, [pc, #76]	; (80056d8 <USB_CoreReset+0x60>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d901      	bls.n	8005694 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005690:	2303      	movs	r3, #3
 8005692:	e01a      	b.n	80056ca <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	691b      	ldr	r3, [r3, #16]
 8005698:	2b00      	cmp	r3, #0
 800569a:	daf3      	bge.n	8005684 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800569c:	2300      	movs	r3, #0
 800569e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	691b      	ldr	r3, [r3, #16]
 80056a4:	f043 0201 	orr.w	r2, r3, #1
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	3301      	adds	r3, #1
 80056b0:	60fb      	str	r3, [r7, #12]
 80056b2:	4a09      	ldr	r2, [pc, #36]	; (80056d8 <USB_CoreReset+0x60>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d901      	bls.n	80056bc <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80056b8:	2303      	movs	r3, #3
 80056ba:	e006      	b.n	80056ca <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	691b      	ldr	r3, [r3, #16]
 80056c0:	f003 0301 	and.w	r3, r3, #1
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d0f1      	beq.n	80056ac <USB_CoreReset+0x34>

  return HAL_OK;
 80056c8:	2300      	movs	r3, #0
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3714      	adds	r7, #20
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr
 80056d6:	bf00      	nop
 80056d8:	00030d40 	.word	0x00030d40

080056dc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80056dc:	b084      	sub	sp, #16
 80056de:	b580      	push	{r7, lr}
 80056e0:	b084      	sub	sp, #16
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	6078      	str	r0, [r7, #4]
 80056e6:	f107 001c 	add.w	r0, r7, #28
 80056ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80056f8:	461a      	mov	r2, r3
 80056fa:	2300      	movs	r3, #0
 80056fc:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005702:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800570e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800571a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800572a:	2b00      	cmp	r3, #0
 800572c:	d018      	beq.n	8005760 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800572e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005730:	2b01      	cmp	r3, #1
 8005732:	d10a      	bne.n	800574a <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	68ba      	ldr	r2, [r7, #8]
 800573e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005742:	f043 0304 	orr.w	r3, r3, #4
 8005746:	6013      	str	r3, [r2, #0]
 8005748:	e014      	b.n	8005774 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	68ba      	ldr	r2, [r7, #8]
 8005754:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005758:	f023 0304 	bic.w	r3, r3, #4
 800575c:	6013      	str	r3, [r2, #0]
 800575e:	e009      	b.n	8005774 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	68ba      	ldr	r2, [r7, #8]
 800576a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800576e:	f023 0304 	bic.w	r3, r3, #4
 8005772:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8005774:	2110      	movs	r1, #16
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f7ff fe82 	bl	8005480 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f7ff fea3 	bl	80054c8 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005782:	2300      	movs	r3, #0
 8005784:	60fb      	str	r3, [r7, #12]
 8005786:	e015      	b.n	80057b4 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	015a      	lsls	r2, r3, #5
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	4413      	add	r3, r2
 8005790:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005794:	461a      	mov	r2, r3
 8005796:	f04f 33ff 	mov.w	r3, #4294967295
 800579a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	015a      	lsls	r2, r3, #5
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	4413      	add	r3, r2
 80057a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057a8:	461a      	mov	r2, r3
 80057aa:	2300      	movs	r3, #0
 80057ac:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	3301      	adds	r3, #1
 80057b2:	60fb      	str	r3, [r7, #12]
 80057b4:	6a3b      	ldr	r3, [r7, #32]
 80057b6:	68fa      	ldr	r2, [r7, #12]
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d3e5      	bcc.n	8005788 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f04f 32ff 	mov.w	r2, #4294967295
 80057c8:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d00b      	beq.n	80057ee <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057dc:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4a13      	ldr	r2, [pc, #76]	; (8005830 <USB_HostInit+0x154>)
 80057e2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a13      	ldr	r2, [pc, #76]	; (8005834 <USB_HostInit+0x158>)
 80057e8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80057ec:	e009      	b.n	8005802 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2280      	movs	r2, #128	; 0x80
 80057f2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	4a10      	ldr	r2, [pc, #64]	; (8005838 <USB_HostInit+0x15c>)
 80057f8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a0f      	ldr	r2, [pc, #60]	; (800583c <USB_HostInit+0x160>)
 80057fe:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005804:	2b00      	cmp	r3, #0
 8005806:	d105      	bne.n	8005814 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	699b      	ldr	r3, [r3, #24]
 800580c:	f043 0210 	orr.w	r2, r3, #16
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	699a      	ldr	r2, [r3, #24]
 8005818:	4b09      	ldr	r3, [pc, #36]	; (8005840 <USB_HostInit+0x164>)
 800581a:	4313      	orrs	r3, r2
 800581c:	687a      	ldr	r2, [r7, #4]
 800581e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8005820:	2300      	movs	r3, #0
}
 8005822:	4618      	mov	r0, r3
 8005824:	3710      	adds	r7, #16
 8005826:	46bd      	mov	sp, r7
 8005828:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800582c:	b004      	add	sp, #16
 800582e:	4770      	bx	lr
 8005830:	01000200 	.word	0x01000200
 8005834:	00e00300 	.word	0x00e00300
 8005838:	00600080 	.word	0x00600080
 800583c:	004000e0 	.word	0x004000e0
 8005840:	a3200008 	.word	0xa3200008

08005844 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005844:	b480      	push	{r7}
 8005846:	b085      	sub	sp, #20
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	460b      	mov	r3, r1
 800584e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	68fa      	ldr	r2, [r7, #12]
 800585e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005862:	f023 0303 	bic.w	r3, r3, #3
 8005866:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	78fb      	ldrb	r3, [r7, #3]
 8005872:	f003 0303 	and.w	r3, r3, #3
 8005876:	68f9      	ldr	r1, [r7, #12]
 8005878:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800587c:	4313      	orrs	r3, r2
 800587e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005880:	78fb      	ldrb	r3, [r7, #3]
 8005882:	2b01      	cmp	r3, #1
 8005884:	d107      	bne.n	8005896 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800588c:	461a      	mov	r2, r3
 800588e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005892:	6053      	str	r3, [r2, #4]
 8005894:	e009      	b.n	80058aa <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005896:	78fb      	ldrb	r3, [r7, #3]
 8005898:	2b02      	cmp	r3, #2
 800589a:	d106      	bne.n	80058aa <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058a2:	461a      	mov	r2, r3
 80058a4:	f241 7370 	movw	r3, #6000	; 0x1770
 80058a8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80058aa:	2300      	movs	r3, #0
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3714      	adds	r7, #20
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr

080058b8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b084      	sub	sp, #16
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80058c4:	2300      	movs	r3, #0
 80058c6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80058d8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	68fa      	ldr	r2, [r7, #12]
 80058de:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80058e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058e6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80058e8:	2064      	movs	r0, #100	; 0x64
 80058ea:	f7fb fb37 	bl	8000f5c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80058f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058fa:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80058fc:	200a      	movs	r0, #10
 80058fe:	f7fb fb2d 	bl	8000f5c <HAL_Delay>

  return HAL_OK;
 8005902:	2300      	movs	r3, #0
}
 8005904:	4618      	mov	r0, r3
 8005906:	3710      	adds	r7, #16
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}

0800590c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800590c:	b480      	push	{r7}
 800590e:	b085      	sub	sp, #20
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	460b      	mov	r3, r1
 8005916:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800591c:	2300      	movs	r3, #0
 800591e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005930:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005938:	2b00      	cmp	r3, #0
 800593a:	d109      	bne.n	8005950 <USB_DriveVbus+0x44>
 800593c:	78fb      	ldrb	r3, [r7, #3]
 800593e:	2b01      	cmp	r3, #1
 8005940:	d106      	bne.n	8005950 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	68fa      	ldr	r2, [r7, #12]
 8005946:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800594a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800594e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005956:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800595a:	d109      	bne.n	8005970 <USB_DriveVbus+0x64>
 800595c:	78fb      	ldrb	r3, [r7, #3]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d106      	bne.n	8005970 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	68fa      	ldr	r2, [r7, #12]
 8005966:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800596a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800596e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005970:	2300      	movs	r3, #0
}
 8005972:	4618      	mov	r0, r3
 8005974:	3714      	adds	r7, #20
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr

0800597e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800597e:	b480      	push	{r7}
 8005980:	b085      	sub	sp, #20
 8005982:	af00      	add	r7, sp, #0
 8005984:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800598a:	2300      	movs	r3, #0
 800598c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	0c5b      	lsrs	r3, r3, #17
 800599c:	f003 0303 	and.w	r3, r3, #3
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3714      	adds	r7, #20
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr

080059ac <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b085      	sub	sp, #20
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	b29b      	uxth	r3, r3
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3714      	adds	r7, #20
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr
	...

080059d0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b088      	sub	sp, #32
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	4608      	mov	r0, r1
 80059da:	4611      	mov	r1, r2
 80059dc:	461a      	mov	r2, r3
 80059de:	4603      	mov	r3, r0
 80059e0:	70fb      	strb	r3, [r7, #3]
 80059e2:	460b      	mov	r3, r1
 80059e4:	70bb      	strb	r3, [r7, #2]
 80059e6:	4613      	mov	r3, r2
 80059e8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80059ea:	2300      	movs	r3, #0
 80059ec:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80059f2:	78fb      	ldrb	r3, [r7, #3]
 80059f4:	015a      	lsls	r2, r3, #5
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	4413      	add	r3, r2
 80059fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059fe:	461a      	mov	r2, r3
 8005a00:	f04f 33ff 	mov.w	r3, #4294967295
 8005a04:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005a06:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005a0a:	2b03      	cmp	r3, #3
 8005a0c:	d87e      	bhi.n	8005b0c <USB_HC_Init+0x13c>
 8005a0e:	a201      	add	r2, pc, #4	; (adr r2, 8005a14 <USB_HC_Init+0x44>)
 8005a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a14:	08005a25 	.word	0x08005a25
 8005a18:	08005acf 	.word	0x08005acf
 8005a1c:	08005a25 	.word	0x08005a25
 8005a20:	08005a91 	.word	0x08005a91
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005a24:	78fb      	ldrb	r3, [r7, #3]
 8005a26:	015a      	lsls	r2, r3, #5
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	4413      	add	r3, r2
 8005a2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a30:	461a      	mov	r2, r3
 8005a32:	f240 439d 	movw	r3, #1181	; 0x49d
 8005a36:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005a38:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	da10      	bge.n	8005a62 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005a40:	78fb      	ldrb	r3, [r7, #3]
 8005a42:	015a      	lsls	r2, r3, #5
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	4413      	add	r3, r2
 8005a48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	78fa      	ldrb	r2, [r7, #3]
 8005a50:	0151      	lsls	r1, r2, #5
 8005a52:	693a      	ldr	r2, [r7, #16]
 8005a54:	440a      	add	r2, r1
 8005a56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a5e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005a60:	e057      	b.n	8005b12 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d051      	beq.n	8005b12 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005a6e:	78fb      	ldrb	r3, [r7, #3]
 8005a70:	015a      	lsls	r2, r3, #5
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	4413      	add	r3, r2
 8005a76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	78fa      	ldrb	r2, [r7, #3]
 8005a7e:	0151      	lsls	r1, r2, #5
 8005a80:	693a      	ldr	r2, [r7, #16]
 8005a82:	440a      	add	r2, r1
 8005a84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a88:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005a8c:	60d3      	str	r3, [r2, #12]
      break;
 8005a8e:	e040      	b.n	8005b12 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005a90:	78fb      	ldrb	r3, [r7, #3]
 8005a92:	015a      	lsls	r2, r3, #5
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	4413      	add	r3, r2
 8005a98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a9c:	461a      	mov	r2, r3
 8005a9e:	f240 639d 	movw	r3, #1693	; 0x69d
 8005aa2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005aa4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	da34      	bge.n	8005b16 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005aac:	78fb      	ldrb	r3, [r7, #3]
 8005aae:	015a      	lsls	r2, r3, #5
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	4413      	add	r3, r2
 8005ab4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ab8:	68db      	ldr	r3, [r3, #12]
 8005aba:	78fa      	ldrb	r2, [r7, #3]
 8005abc:	0151      	lsls	r1, r2, #5
 8005abe:	693a      	ldr	r2, [r7, #16]
 8005ac0:	440a      	add	r2, r1
 8005ac2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ac6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005aca:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005acc:	e023      	b.n	8005b16 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005ace:	78fb      	ldrb	r3, [r7, #3]
 8005ad0:	015a      	lsls	r2, r3, #5
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	4413      	add	r3, r2
 8005ad6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ada:	461a      	mov	r2, r3
 8005adc:	f240 2325 	movw	r3, #549	; 0x225
 8005ae0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005ae2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	da17      	bge.n	8005b1a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005aea:	78fb      	ldrb	r3, [r7, #3]
 8005aec:	015a      	lsls	r2, r3, #5
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	4413      	add	r3, r2
 8005af2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	78fa      	ldrb	r2, [r7, #3]
 8005afa:	0151      	lsls	r1, r2, #5
 8005afc:	693a      	ldr	r2, [r7, #16]
 8005afe:	440a      	add	r2, r1
 8005b00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b04:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005b08:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005b0a:	e006      	b.n	8005b1a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	77fb      	strb	r3, [r7, #31]
      break;
 8005b10:	e004      	b.n	8005b1c <USB_HC_Init+0x14c>
      break;
 8005b12:	bf00      	nop
 8005b14:	e002      	b.n	8005b1c <USB_HC_Init+0x14c>
      break;
 8005b16:	bf00      	nop
 8005b18:	e000      	b.n	8005b1c <USB_HC_Init+0x14c>
      break;
 8005b1a:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b22:	699a      	ldr	r2, [r3, #24]
 8005b24:	78fb      	ldrb	r3, [r7, #3]
 8005b26:	f003 030f 	and.w	r3, r3, #15
 8005b2a:	2101      	movs	r1, #1
 8005b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8005b30:	6939      	ldr	r1, [r7, #16]
 8005b32:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005b36:	4313      	orrs	r3, r2
 8005b38:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	699b      	ldr	r3, [r3, #24]
 8005b3e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005b46:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	da03      	bge.n	8005b56 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005b4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b52:	61bb      	str	r3, [r7, #24]
 8005b54:	e001      	b.n	8005b5a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8005b56:	2300      	movs	r3, #0
 8005b58:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f7ff ff0f 	bl	800597e <USB_GetHostSpeed>
 8005b60:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005b62:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005b66:	2b02      	cmp	r3, #2
 8005b68:	d106      	bne.n	8005b78 <USB_HC_Init+0x1a8>
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2b02      	cmp	r3, #2
 8005b6e:	d003      	beq.n	8005b78 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005b70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005b74:	617b      	str	r3, [r7, #20]
 8005b76:	e001      	b.n	8005b7c <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005b7c:	787b      	ldrb	r3, [r7, #1]
 8005b7e:	059b      	lsls	r3, r3, #22
 8005b80:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005b84:	78bb      	ldrb	r3, [r7, #2]
 8005b86:	02db      	lsls	r3, r3, #11
 8005b88:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005b8c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005b8e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005b92:	049b      	lsls	r3, r3, #18
 8005b94:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005b98:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005b9a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005b9c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005ba0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005ba2:	69bb      	ldr	r3, [r7, #24]
 8005ba4:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005ba6:	78fb      	ldrb	r3, [r7, #3]
 8005ba8:	0159      	lsls	r1, r3, #5
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	440b      	add	r3, r1
 8005bae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bb2:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005bb8:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8005bba:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005bbe:	2b03      	cmp	r3, #3
 8005bc0:	d10f      	bne.n	8005be2 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8005bc2:	78fb      	ldrb	r3, [r7, #3]
 8005bc4:	015a      	lsls	r2, r3, #5
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	4413      	add	r3, r2
 8005bca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	78fa      	ldrb	r2, [r7, #3]
 8005bd2:	0151      	lsls	r1, r2, #5
 8005bd4:	693a      	ldr	r2, [r7, #16]
 8005bd6:	440a      	add	r2, r1
 8005bd8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bdc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005be0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005be2:	7ffb      	ldrb	r3, [r7, #31]
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3720      	adds	r7, #32
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}

08005bec <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b08c      	sub	sp, #48	; 0x30
 8005bf0:	af02      	add	r7, sp, #8
 8005bf2:	60f8      	str	r0, [r7, #12]
 8005bf4:	60b9      	str	r1, [r7, #8]
 8005bf6:	4613      	mov	r3, r2
 8005bf8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	785b      	ldrb	r3, [r3, #1]
 8005c02:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005c04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c08:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d02d      	beq.n	8005c72 <USB_HC_StartXfer+0x86>
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	791b      	ldrb	r3, [r3, #4]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d129      	bne.n	8005c72 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005c1e:	79fb      	ldrb	r3, [r7, #7]
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d117      	bne.n	8005c54 <USB_HC_StartXfer+0x68>
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	79db      	ldrb	r3, [r3, #7]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d003      	beq.n	8005c34 <USB_HC_StartXfer+0x48>
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	79db      	ldrb	r3, [r3, #7]
 8005c30:	2b02      	cmp	r3, #2
 8005c32:	d10f      	bne.n	8005c54 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005c34:	69fb      	ldr	r3, [r7, #28]
 8005c36:	015a      	lsls	r2, r3, #5
 8005c38:	6a3b      	ldr	r3, [r7, #32]
 8005c3a:	4413      	add	r3, r2
 8005c3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c40:	68db      	ldr	r3, [r3, #12]
 8005c42:	69fa      	ldr	r2, [r7, #28]
 8005c44:	0151      	lsls	r1, r2, #5
 8005c46:	6a3a      	ldr	r2, [r7, #32]
 8005c48:	440a      	add	r2, r1
 8005c4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c52:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005c54:	79fb      	ldrb	r3, [r7, #7]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d10b      	bne.n	8005c72 <USB_HC_StartXfer+0x86>
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	795b      	ldrb	r3, [r3, #5]
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d107      	bne.n	8005c72 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	785b      	ldrb	r3, [r3, #1]
 8005c66:	4619      	mov	r1, r3
 8005c68:	68f8      	ldr	r0, [r7, #12]
 8005c6a:	f000 fa2f 	bl	80060cc <USB_DoPing>
      return HAL_OK;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	e0f8      	b.n	8005e64 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	695b      	ldr	r3, [r3, #20]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d018      	beq.n	8005cac <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	695b      	ldr	r3, [r3, #20]
 8005c7e:	68ba      	ldr	r2, [r7, #8]
 8005c80:	8912      	ldrh	r2, [r2, #8]
 8005c82:	4413      	add	r3, r2
 8005c84:	3b01      	subs	r3, #1
 8005c86:	68ba      	ldr	r2, [r7, #8]
 8005c88:	8912      	ldrh	r2, [r2, #8]
 8005c8a:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c8e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005c90:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005c92:	8b7b      	ldrh	r3, [r7, #26]
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d90b      	bls.n	8005cb0 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005c98:	8b7b      	ldrh	r3, [r7, #26]
 8005c9a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005c9c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005c9e:	68ba      	ldr	r2, [r7, #8]
 8005ca0:	8912      	ldrh	r2, [r2, #8]
 8005ca2:	fb02 f203 	mul.w	r2, r2, r3
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	611a      	str	r2, [r3, #16]
 8005caa:	e001      	b.n	8005cb0 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005cac:	2301      	movs	r3, #1
 8005cae:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	78db      	ldrb	r3, [r3, #3]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d007      	beq.n	8005cc8 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005cb8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005cba:	68ba      	ldr	r2, [r7, #8]
 8005cbc:	8912      	ldrh	r2, [r2, #8]
 8005cbe:	fb02 f203 	mul.w	r2, r2, r3
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	611a      	str	r2, [r3, #16]
 8005cc6:	e003      	b.n	8005cd0 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	695a      	ldr	r2, [r3, #20]
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	691b      	ldr	r3, [r3, #16]
 8005cd4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005cd8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005cda:	04d9      	lsls	r1, r3, #19
 8005cdc:	4b63      	ldr	r3, [pc, #396]	; (8005e6c <USB_HC_StartXfer+0x280>)
 8005cde:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005ce0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	7a9b      	ldrb	r3, [r3, #10]
 8005ce6:	075b      	lsls	r3, r3, #29
 8005ce8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005cec:	69f9      	ldr	r1, [r7, #28]
 8005cee:	0148      	lsls	r0, r1, #5
 8005cf0:	6a39      	ldr	r1, [r7, #32]
 8005cf2:	4401      	add	r1, r0
 8005cf4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005cf8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005cfa:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005cfc:	79fb      	ldrb	r3, [r7, #7]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d009      	beq.n	8005d16 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	68d9      	ldr	r1, [r3, #12]
 8005d06:	69fb      	ldr	r3, [r7, #28]
 8005d08:	015a      	lsls	r2, r3, #5
 8005d0a:	6a3b      	ldr	r3, [r7, #32]
 8005d0c:	4413      	add	r3, r2
 8005d0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d12:	460a      	mov	r2, r1
 8005d14:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005d16:	6a3b      	ldr	r3, [r7, #32]
 8005d18:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	f003 0301 	and.w	r3, r3, #1
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	bf0c      	ite	eq
 8005d26:	2301      	moveq	r3, #1
 8005d28:	2300      	movne	r3, #0
 8005d2a:	b2db      	uxtb	r3, r3
 8005d2c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005d2e:	69fb      	ldr	r3, [r7, #28]
 8005d30:	015a      	lsls	r2, r3, #5
 8005d32:	6a3b      	ldr	r3, [r7, #32]
 8005d34:	4413      	add	r3, r2
 8005d36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	69fa      	ldr	r2, [r7, #28]
 8005d3e:	0151      	lsls	r1, r2, #5
 8005d40:	6a3a      	ldr	r2, [r7, #32]
 8005d42:	440a      	add	r2, r1
 8005d44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d48:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005d4c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005d4e:	69fb      	ldr	r3, [r7, #28]
 8005d50:	015a      	lsls	r2, r3, #5
 8005d52:	6a3b      	ldr	r3, [r7, #32]
 8005d54:	4413      	add	r3, r2
 8005d56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	7e7b      	ldrb	r3, [r7, #25]
 8005d5e:	075b      	lsls	r3, r3, #29
 8005d60:	69f9      	ldr	r1, [r7, #28]
 8005d62:	0148      	lsls	r0, r1, #5
 8005d64:	6a39      	ldr	r1, [r7, #32]
 8005d66:	4401      	add	r1, r0
 8005d68:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005d70:	69fb      	ldr	r3, [r7, #28]
 8005d72:	015a      	lsls	r2, r3, #5
 8005d74:	6a3b      	ldr	r3, [r7, #32]
 8005d76:	4413      	add	r3, r2
 8005d78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005d86:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	78db      	ldrb	r3, [r3, #3]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d004      	beq.n	8005d9a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d96:	613b      	str	r3, [r7, #16]
 8005d98:	e003      	b.n	8005da2 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005da0:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005da8:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005daa:	69fb      	ldr	r3, [r7, #28]
 8005dac:	015a      	lsls	r2, r3, #5
 8005dae:	6a3b      	ldr	r3, [r7, #32]
 8005db0:	4413      	add	r3, r2
 8005db2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005db6:	461a      	mov	r2, r3
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005dbc:	79fb      	ldrb	r3, [r7, #7]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d001      	beq.n	8005dc6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	e04e      	b.n	8005e64 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	78db      	ldrb	r3, [r3, #3]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d149      	bne.n	8005e62 <USB_HC_StartXfer+0x276>
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	695b      	ldr	r3, [r3, #20]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d045      	beq.n	8005e62 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	79db      	ldrb	r3, [r3, #7]
 8005dda:	2b03      	cmp	r3, #3
 8005ddc:	d830      	bhi.n	8005e40 <USB_HC_StartXfer+0x254>
 8005dde:	a201      	add	r2, pc, #4	; (adr r2, 8005de4 <USB_HC_StartXfer+0x1f8>)
 8005de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005de4:	08005df5 	.word	0x08005df5
 8005de8:	08005e19 	.word	0x08005e19
 8005dec:	08005df5 	.word	0x08005df5
 8005df0:	08005e19 	.word	0x08005e19
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	695b      	ldr	r3, [r3, #20]
 8005df8:	3303      	adds	r3, #3
 8005dfa:	089b      	lsrs	r3, r3, #2
 8005dfc:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005dfe:	8afa      	ldrh	r2, [r7, #22]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d91c      	bls.n	8005e44 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	699b      	ldr	r3, [r3, #24]
 8005e0e:	f043 0220 	orr.w	r2, r3, #32
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	619a      	str	r2, [r3, #24]
        }
        break;
 8005e16:	e015      	b.n	8005e44 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	695b      	ldr	r3, [r3, #20]
 8005e1c:	3303      	adds	r3, #3
 8005e1e:	089b      	lsrs	r3, r3, #2
 8005e20:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005e22:	8afa      	ldrh	r2, [r7, #22]
 8005e24:	6a3b      	ldr	r3, [r7, #32]
 8005e26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e2a:	691b      	ldr	r3, [r3, #16]
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d90a      	bls.n	8005e48 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	699b      	ldr	r3, [r3, #24]
 8005e36:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	619a      	str	r2, [r3, #24]
        }
        break;
 8005e3e:	e003      	b.n	8005e48 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005e40:	bf00      	nop
 8005e42:	e002      	b.n	8005e4a <USB_HC_StartXfer+0x25e>
        break;
 8005e44:	bf00      	nop
 8005e46:	e000      	b.n	8005e4a <USB_HC_StartXfer+0x25e>
        break;
 8005e48:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	68d9      	ldr	r1, [r3, #12]
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	785a      	ldrb	r2, [r3, #1]
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	695b      	ldr	r3, [r3, #20]
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	2000      	movs	r0, #0
 8005e5a:	9000      	str	r0, [sp, #0]
 8005e5c:	68f8      	ldr	r0, [r7, #12]
 8005e5e:	f7ff fb53 	bl	8005508 <USB_WritePacket>
  }

  return HAL_OK;
 8005e62:	2300      	movs	r3, #0
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3728      	adds	r7, #40	; 0x28
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}
 8005e6c:	1ff80000 	.word	0x1ff80000

08005e70 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b085      	sub	sp, #20
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e82:	695b      	ldr	r3, [r3, #20]
 8005e84:	b29b      	uxth	r3, r3
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3714      	adds	r7, #20
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr

08005e92 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005e92:	b480      	push	{r7}
 8005e94:	b089      	sub	sp, #36	; 0x24
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	6078      	str	r0, [r7, #4]
 8005e9a:	460b      	mov	r3, r1
 8005e9c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8005ea2:	78fb      	ldrb	r3, [r7, #3]
 8005ea4:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	015a      	lsls	r2, r3, #5
 8005eae:	69bb      	ldr	r3, [r7, #24]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	0c9b      	lsrs	r3, r3, #18
 8005eba:	f003 0303 	and.w	r3, r3, #3
 8005ebe:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	015a      	lsls	r2, r3, #5
 8005ec4:	69bb      	ldr	r3, [r7, #24]
 8005ec6:	4413      	add	r3, r2
 8005ec8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	0fdb      	lsrs	r3, r3, #31
 8005ed0:	f003 0301 	and.w	r3, r3, #1
 8005ed4:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	f003 0320 	and.w	r3, r3, #32
 8005ede:	2b20      	cmp	r3, #32
 8005ee0:	d104      	bne.n	8005eec <USB_HC_Halt+0x5a>
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d101      	bne.n	8005eec <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	e0e8      	b.n	80060be <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d002      	beq.n	8005ef8 <USB_HC_Halt+0x66>
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	2b02      	cmp	r3, #2
 8005ef6:	d173      	bne.n	8005fe0 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	015a      	lsls	r2, r3, #5
 8005efc:	69bb      	ldr	r3, [r7, #24]
 8005efe:	4413      	add	r3, r2
 8005f00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	697a      	ldr	r2, [r7, #20]
 8005f08:	0151      	lsls	r1, r2, #5
 8005f0a:	69ba      	ldr	r2, [r7, #24]
 8005f0c:	440a      	add	r2, r1
 8005f0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f12:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f16:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	f003 0320 	and.w	r3, r3, #32
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	f040 80cb 	bne.w	80060bc <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f2a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d143      	bne.n	8005fba <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	015a      	lsls	r2, r3, #5
 8005f36:	69bb      	ldr	r3, [r7, #24]
 8005f38:	4413      	add	r3, r2
 8005f3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	697a      	ldr	r2, [r7, #20]
 8005f42:	0151      	lsls	r1, r2, #5
 8005f44:	69ba      	ldr	r2, [r7, #24]
 8005f46:	440a      	add	r2, r1
 8005f48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f50:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	015a      	lsls	r2, r3, #5
 8005f56:	69bb      	ldr	r3, [r7, #24]
 8005f58:	4413      	add	r3, r2
 8005f5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	697a      	ldr	r2, [r7, #20]
 8005f62:	0151      	lsls	r1, r2, #5
 8005f64:	69ba      	ldr	r2, [r7, #24]
 8005f66:	440a      	add	r2, r1
 8005f68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f6c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f70:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	015a      	lsls	r2, r3, #5
 8005f76:	69bb      	ldr	r3, [r7, #24]
 8005f78:	4413      	add	r3, r2
 8005f7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	697a      	ldr	r2, [r7, #20]
 8005f82:	0151      	lsls	r1, r2, #5
 8005f84:	69ba      	ldr	r2, [r7, #24]
 8005f86:	440a      	add	r2, r1
 8005f88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f8c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005f90:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8005f92:	69fb      	ldr	r3, [r7, #28]
 8005f94:	3301      	adds	r3, #1
 8005f96:	61fb      	str	r3, [r7, #28]
 8005f98:	69fb      	ldr	r3, [r7, #28]
 8005f9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f9e:	d81d      	bhi.n	8005fdc <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	015a      	lsls	r2, r3, #5
 8005fa4:	69bb      	ldr	r3, [r7, #24]
 8005fa6:	4413      	add	r3, r2
 8005fa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fb6:	d0ec      	beq.n	8005f92 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005fb8:	e080      	b.n	80060bc <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	015a      	lsls	r2, r3, #5
 8005fbe:	69bb      	ldr	r3, [r7, #24]
 8005fc0:	4413      	add	r3, r2
 8005fc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	697a      	ldr	r2, [r7, #20]
 8005fca:	0151      	lsls	r1, r2, #5
 8005fcc:	69ba      	ldr	r2, [r7, #24]
 8005fce:	440a      	add	r2, r1
 8005fd0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fd4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005fd8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005fda:	e06f      	b.n	80060bc <USB_HC_Halt+0x22a>
            break;
 8005fdc:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005fde:	e06d      	b.n	80060bc <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	015a      	lsls	r2, r3, #5
 8005fe4:	69bb      	ldr	r3, [r7, #24]
 8005fe6:	4413      	add	r3, r2
 8005fe8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	697a      	ldr	r2, [r7, #20]
 8005ff0:	0151      	lsls	r1, r2, #5
 8005ff2:	69ba      	ldr	r2, [r7, #24]
 8005ff4:	440a      	add	r2, r1
 8005ff6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ffa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ffe:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006000:	69bb      	ldr	r3, [r7, #24]
 8006002:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006006:	691b      	ldr	r3, [r3, #16]
 8006008:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800600c:	2b00      	cmp	r3, #0
 800600e:	d143      	bne.n	8006098 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	015a      	lsls	r2, r3, #5
 8006014:	69bb      	ldr	r3, [r7, #24]
 8006016:	4413      	add	r3, r2
 8006018:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	697a      	ldr	r2, [r7, #20]
 8006020:	0151      	lsls	r1, r2, #5
 8006022:	69ba      	ldr	r2, [r7, #24]
 8006024:	440a      	add	r2, r1
 8006026:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800602a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800602e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	015a      	lsls	r2, r3, #5
 8006034:	69bb      	ldr	r3, [r7, #24]
 8006036:	4413      	add	r3, r2
 8006038:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	697a      	ldr	r2, [r7, #20]
 8006040:	0151      	lsls	r1, r2, #5
 8006042:	69ba      	ldr	r2, [r7, #24]
 8006044:	440a      	add	r2, r1
 8006046:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800604a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800604e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	015a      	lsls	r2, r3, #5
 8006054:	69bb      	ldr	r3, [r7, #24]
 8006056:	4413      	add	r3, r2
 8006058:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	697a      	ldr	r2, [r7, #20]
 8006060:	0151      	lsls	r1, r2, #5
 8006062:	69ba      	ldr	r2, [r7, #24]
 8006064:	440a      	add	r2, r1
 8006066:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800606a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800606e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006070:	69fb      	ldr	r3, [r7, #28]
 8006072:	3301      	adds	r3, #1
 8006074:	61fb      	str	r3, [r7, #28]
 8006076:	69fb      	ldr	r3, [r7, #28]
 8006078:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800607c:	d81d      	bhi.n	80060ba <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	015a      	lsls	r2, r3, #5
 8006082:	69bb      	ldr	r3, [r7, #24]
 8006084:	4413      	add	r3, r2
 8006086:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006090:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006094:	d0ec      	beq.n	8006070 <USB_HC_Halt+0x1de>
 8006096:	e011      	b.n	80060bc <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	015a      	lsls	r2, r3, #5
 800609c:	69bb      	ldr	r3, [r7, #24]
 800609e:	4413      	add	r3, r2
 80060a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	697a      	ldr	r2, [r7, #20]
 80060a8:	0151      	lsls	r1, r2, #5
 80060aa:	69ba      	ldr	r2, [r7, #24]
 80060ac:	440a      	add	r2, r1
 80060ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80060b6:	6013      	str	r3, [r2, #0]
 80060b8:	e000      	b.n	80060bc <USB_HC_Halt+0x22a>
          break;
 80060ba:	bf00      	nop
    }
  }

  return HAL_OK;
 80060bc:	2300      	movs	r3, #0
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3724      	adds	r7, #36	; 0x24
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr
	...

080060cc <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b087      	sub	sp, #28
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	460b      	mov	r3, r1
 80060d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80060dc:	78fb      	ldrb	r3, [r7, #3]
 80060de:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80060e0:	2301      	movs	r3, #1
 80060e2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	04da      	lsls	r2, r3, #19
 80060e8:	4b15      	ldr	r3, [pc, #84]	; (8006140 <USB_DoPing+0x74>)
 80060ea:	4013      	ands	r3, r2
 80060ec:	693a      	ldr	r2, [r7, #16]
 80060ee:	0151      	lsls	r1, r2, #5
 80060f0:	697a      	ldr	r2, [r7, #20]
 80060f2:	440a      	add	r2, r1
 80060f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80060fc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	015a      	lsls	r2, r3, #5
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	4413      	add	r3, r2
 8006106:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006114:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800611c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	015a      	lsls	r2, r3, #5
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	4413      	add	r3, r2
 8006126:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800612a:	461a      	mov	r2, r3
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006130:	2300      	movs	r3, #0
}
 8006132:	4618      	mov	r0, r3
 8006134:	371c      	adds	r7, #28
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr
 800613e:	bf00      	nop
 8006140:	1ff80000 	.word	0x1ff80000

08006144 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b086      	sub	sp, #24
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006150:	2300      	movs	r3, #0
 8006152:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f7ff f935 	bl	80053c4 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800615a:	2110      	movs	r1, #16
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f7ff f98f 	bl	8005480 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f7ff f9b0 	bl	80054c8 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006168:	2300      	movs	r3, #0
 800616a:	613b      	str	r3, [r7, #16]
 800616c:	e01f      	b.n	80061ae <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	015a      	lsls	r2, r3, #5
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	4413      	add	r3, r2
 8006176:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006184:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800618c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006194:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	015a      	lsls	r2, r3, #5
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	4413      	add	r3, r2
 800619e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061a2:	461a      	mov	r2, r3
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	3301      	adds	r3, #1
 80061ac:	613b      	str	r3, [r7, #16]
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	2b0f      	cmp	r3, #15
 80061b2:	d9dc      	bls.n	800616e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80061b4:	2300      	movs	r3, #0
 80061b6:	613b      	str	r3, [r7, #16]
 80061b8:	e034      	b.n	8006224 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	015a      	lsls	r2, r3, #5
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	4413      	add	r3, r2
 80061c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80061d0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80061d8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80061e0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	015a      	lsls	r2, r3, #5
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	4413      	add	r3, r2
 80061ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061ee:	461a      	mov	r2, r3
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	3301      	adds	r3, #1
 80061f8:	617b      	str	r3, [r7, #20]
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006200:	d80c      	bhi.n	800621c <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	015a      	lsls	r2, r3, #5
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	4413      	add	r3, r2
 800620a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006214:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006218:	d0ec      	beq.n	80061f4 <USB_StopHost+0xb0>
 800621a:	e000      	b.n	800621e <USB_StopHost+0xda>
        break;
 800621c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	3301      	adds	r3, #1
 8006222:	613b      	str	r3, [r7, #16]
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	2b0f      	cmp	r3, #15
 8006228:	d9c7      	bls.n	80061ba <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006230:	461a      	mov	r2, r3
 8006232:	f04f 33ff 	mov.w	r3, #4294967295
 8006236:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f04f 32ff 	mov.w	r2, #4294967295
 800623e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f7ff f8ae 	bl	80053a2 <USB_EnableGlobalInt>

  return HAL_OK;
 8006246:	2300      	movs	r3, #0
}
 8006248:	4618      	mov	r0, r3
 800624a:	3718      	adds	r7, #24
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}

08006250 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006250:	b590      	push	{r4, r7, lr}
 8006252:	b089      	sub	sp, #36	; 0x24
 8006254:	af04      	add	r7, sp, #16
 8006256:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006258:	2301      	movs	r3, #1
 800625a:	2202      	movs	r2, #2
 800625c:	2102      	movs	r1, #2
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 fc66 	bl	8006b30 <USBH_FindInterface>
 8006264:	4603      	mov	r3, r0
 8006266:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006268:	7bfb      	ldrb	r3, [r7, #15]
 800626a:	2bff      	cmp	r3, #255	; 0xff
 800626c:	d002      	beq.n	8006274 <USBH_CDC_InterfaceInit+0x24>
 800626e:	7bfb      	ldrb	r3, [r7, #15]
 8006270:	2b01      	cmp	r3, #1
 8006272:	d901      	bls.n	8006278 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006274:	2302      	movs	r3, #2
 8006276:	e13d      	b.n	80064f4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006278:	7bfb      	ldrb	r3, [r7, #15]
 800627a:	4619      	mov	r1, r3
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f000 fc3b 	bl	8006af8 <USBH_SelectInterface>
 8006282:	4603      	mov	r3, r0
 8006284:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006286:	7bbb      	ldrb	r3, [r7, #14]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d001      	beq.n	8006290 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800628c:	2302      	movs	r3, #2
 800628e:	e131      	b.n	80064f4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006296:	2050      	movs	r0, #80	; 0x50
 8006298:	f002 fa00 	bl	800869c <malloc>
 800629c:	4603      	mov	r3, r0
 800629e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062a6:	69db      	ldr	r3, [r3, #28]
 80062a8:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d101      	bne.n	80062b4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80062b0:	2302      	movs	r3, #2
 80062b2:	e11f      	b.n	80064f4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80062b4:	2250      	movs	r2, #80	; 0x50
 80062b6:	2100      	movs	r1, #0
 80062b8:	68b8      	ldr	r0, [r7, #8]
 80062ba:	f002 f9ff 	bl	80086bc <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80062be:	7bfb      	ldrb	r3, [r7, #15]
 80062c0:	687a      	ldr	r2, [r7, #4]
 80062c2:	211a      	movs	r1, #26
 80062c4:	fb01 f303 	mul.w	r3, r1, r3
 80062c8:	4413      	add	r3, r2
 80062ca:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	b25b      	sxtb	r3, r3
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	da15      	bge.n	8006302 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80062d6:	7bfb      	ldrb	r3, [r7, #15]
 80062d8:	687a      	ldr	r2, [r7, #4]
 80062da:	211a      	movs	r1, #26
 80062dc:	fb01 f303 	mul.w	r3, r1, r3
 80062e0:	4413      	add	r3, r2
 80062e2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80062e6:	781a      	ldrb	r2, [r3, #0]
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80062ec:	7bfb      	ldrb	r3, [r7, #15]
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	211a      	movs	r1, #26
 80062f2:	fb01 f303 	mul.w	r3, r1, r3
 80062f6:	4413      	add	r3, r2
 80062f8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80062fc:	881a      	ldrh	r2, [r3, #0]
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	785b      	ldrb	r3, [r3, #1]
 8006306:	4619      	mov	r1, r3
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f001 fe32 	bl	8007f72 <USBH_AllocPipe>
 800630e:	4603      	mov	r3, r0
 8006310:	461a      	mov	r2, r3
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	7819      	ldrb	r1, [r3, #0]
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	7858      	ldrb	r0, [r3, #1]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800632a:	68ba      	ldr	r2, [r7, #8]
 800632c:	8952      	ldrh	r2, [r2, #10]
 800632e:	9202      	str	r2, [sp, #8]
 8006330:	2203      	movs	r2, #3
 8006332:	9201      	str	r2, [sp, #4]
 8006334:	9300      	str	r3, [sp, #0]
 8006336:	4623      	mov	r3, r4
 8006338:	4602      	mov	r2, r0
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f001 fdea 	bl	8007f14 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	781b      	ldrb	r3, [r3, #0]
 8006344:	2200      	movs	r2, #0
 8006346:	4619      	mov	r1, r3
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f002 f8f9 	bl	8008540 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800634e:	2300      	movs	r3, #0
 8006350:	2200      	movs	r2, #0
 8006352:	210a      	movs	r1, #10
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f000 fbeb 	bl	8006b30 <USBH_FindInterface>
 800635a:	4603      	mov	r3, r0
 800635c:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800635e:	7bfb      	ldrb	r3, [r7, #15]
 8006360:	2bff      	cmp	r3, #255	; 0xff
 8006362:	d002      	beq.n	800636a <USBH_CDC_InterfaceInit+0x11a>
 8006364:	7bfb      	ldrb	r3, [r7, #15]
 8006366:	2b01      	cmp	r3, #1
 8006368:	d901      	bls.n	800636e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800636a:	2302      	movs	r3, #2
 800636c:	e0c2      	b.n	80064f4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800636e:	7bfb      	ldrb	r3, [r7, #15]
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	211a      	movs	r1, #26
 8006374:	fb01 f303 	mul.w	r3, r1, r3
 8006378:	4413      	add	r3, r2
 800637a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800637e:	781b      	ldrb	r3, [r3, #0]
 8006380:	b25b      	sxtb	r3, r3
 8006382:	2b00      	cmp	r3, #0
 8006384:	da16      	bge.n	80063b4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006386:	7bfb      	ldrb	r3, [r7, #15]
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	211a      	movs	r1, #26
 800638c:	fb01 f303 	mul.w	r3, r1, r3
 8006390:	4413      	add	r3, r2
 8006392:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006396:	781a      	ldrb	r2, [r3, #0]
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800639c:	7bfb      	ldrb	r3, [r7, #15]
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	211a      	movs	r1, #26
 80063a2:	fb01 f303 	mul.w	r3, r1, r3
 80063a6:	4413      	add	r3, r2
 80063a8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80063ac:	881a      	ldrh	r2, [r3, #0]
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	835a      	strh	r2, [r3, #26]
 80063b2:	e015      	b.n	80063e0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80063b4:	7bfb      	ldrb	r3, [r7, #15]
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	211a      	movs	r1, #26
 80063ba:	fb01 f303 	mul.w	r3, r1, r3
 80063be:	4413      	add	r3, r2
 80063c0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80063c4:	781a      	ldrb	r2, [r3, #0]
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80063ca:	7bfb      	ldrb	r3, [r7, #15]
 80063cc:	687a      	ldr	r2, [r7, #4]
 80063ce:	211a      	movs	r1, #26
 80063d0:	fb01 f303 	mul.w	r3, r1, r3
 80063d4:	4413      	add	r3, r2
 80063d6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80063da:	881a      	ldrh	r2, [r3, #0]
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80063e0:	7bfb      	ldrb	r3, [r7, #15]
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	211a      	movs	r1, #26
 80063e6:	fb01 f303 	mul.w	r3, r1, r3
 80063ea:	4413      	add	r3, r2
 80063ec:	f203 3356 	addw	r3, r3, #854	; 0x356
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	b25b      	sxtb	r3, r3
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	da16      	bge.n	8006426 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80063f8:	7bfb      	ldrb	r3, [r7, #15]
 80063fa:	687a      	ldr	r2, [r7, #4]
 80063fc:	211a      	movs	r1, #26
 80063fe:	fb01 f303 	mul.w	r3, r1, r3
 8006402:	4413      	add	r3, r2
 8006404:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006408:	781a      	ldrb	r2, [r3, #0]
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800640e:	7bfb      	ldrb	r3, [r7, #15]
 8006410:	687a      	ldr	r2, [r7, #4]
 8006412:	211a      	movs	r1, #26
 8006414:	fb01 f303 	mul.w	r3, r1, r3
 8006418:	4413      	add	r3, r2
 800641a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800641e:	881a      	ldrh	r2, [r3, #0]
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	835a      	strh	r2, [r3, #26]
 8006424:	e015      	b.n	8006452 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006426:	7bfb      	ldrb	r3, [r7, #15]
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	211a      	movs	r1, #26
 800642c:	fb01 f303 	mul.w	r3, r1, r3
 8006430:	4413      	add	r3, r2
 8006432:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006436:	781a      	ldrb	r2, [r3, #0]
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800643c:	7bfb      	ldrb	r3, [r7, #15]
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	211a      	movs	r1, #26
 8006442:	fb01 f303 	mul.w	r3, r1, r3
 8006446:	4413      	add	r3, r2
 8006448:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800644c:	881a      	ldrh	r2, [r3, #0]
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	7b9b      	ldrb	r3, [r3, #14]
 8006456:	4619      	mov	r1, r3
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f001 fd8a 	bl	8007f72 <USBH_AllocPipe>
 800645e:	4603      	mov	r3, r0
 8006460:	461a      	mov	r2, r3
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	7bdb      	ldrb	r3, [r3, #15]
 800646a:	4619      	mov	r1, r3
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f001 fd80 	bl	8007f72 <USBH_AllocPipe>
 8006472:	4603      	mov	r3, r0
 8006474:	461a      	mov	r2, r3
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	7b59      	ldrb	r1, [r3, #13]
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	7b98      	ldrb	r0, [r3, #14]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800648e:	68ba      	ldr	r2, [r7, #8]
 8006490:	8b12      	ldrh	r2, [r2, #24]
 8006492:	9202      	str	r2, [sp, #8]
 8006494:	2202      	movs	r2, #2
 8006496:	9201      	str	r2, [sp, #4]
 8006498:	9300      	str	r3, [sp, #0]
 800649a:	4623      	mov	r3, r4
 800649c:	4602      	mov	r2, r0
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f001 fd38 	bl	8007f14 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	7b19      	ldrb	r1, [r3, #12]
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	7bd8      	ldrb	r0, [r3, #15]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80064b8:	68ba      	ldr	r2, [r7, #8]
 80064ba:	8b52      	ldrh	r2, [r2, #26]
 80064bc:	9202      	str	r2, [sp, #8]
 80064be:	2202      	movs	r2, #2
 80064c0:	9201      	str	r2, [sp, #4]
 80064c2:	9300      	str	r3, [sp, #0]
 80064c4:	4623      	mov	r3, r4
 80064c6:	4602      	mov	r2, r0
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f001 fd23 	bl	8007f14 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	2200      	movs	r2, #0
 80064d2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	7b5b      	ldrb	r3, [r3, #13]
 80064da:	2200      	movs	r2, #0
 80064dc:	4619      	mov	r1, r3
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f002 f82e 	bl	8008540 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	7b1b      	ldrb	r3, [r3, #12]
 80064e8:	2200      	movs	r2, #0
 80064ea:	4619      	mov	r1, r3
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f002 f827 	bl	8008540 <USBH_LL_SetToggle>

  return USBH_OK;
 80064f2:	2300      	movs	r3, #0
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3714      	adds	r7, #20
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd90      	pop	{r4, r7, pc}

080064fc <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b084      	sub	sp, #16
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800650a:	69db      	ldr	r3, [r3, #28]
 800650c:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d00e      	beq.n	8006534 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	4619      	mov	r1, r3
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f001 fd18 	bl	8007f52 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	781b      	ldrb	r3, [r3, #0]
 8006526:	4619      	mov	r1, r3
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f001 fd43 	bl	8007fb4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2200      	movs	r2, #0
 8006532:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	7b1b      	ldrb	r3, [r3, #12]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d00e      	beq.n	800655a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	7b1b      	ldrb	r3, [r3, #12]
 8006540:	4619      	mov	r1, r3
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f001 fd05 	bl	8007f52 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	7b1b      	ldrb	r3, [r3, #12]
 800654c:	4619      	mov	r1, r3
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f001 fd30 	bl	8007fb4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2200      	movs	r2, #0
 8006558:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	7b5b      	ldrb	r3, [r3, #13]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d00e      	beq.n	8006580 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	7b5b      	ldrb	r3, [r3, #13]
 8006566:	4619      	mov	r1, r3
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f001 fcf2 	bl	8007f52 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	7b5b      	ldrb	r3, [r3, #13]
 8006572:	4619      	mov	r1, r3
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f001 fd1d 	bl	8007fb4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2200      	movs	r2, #0
 800657e:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006586:	69db      	ldr	r3, [r3, #28]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d00b      	beq.n	80065a4 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006592:	69db      	ldr	r3, [r3, #28]
 8006594:	4618      	mov	r0, r3
 8006596:	f002 f889 	bl	80086ac <free>
    phost->pActiveClass->pData = 0U;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065a0:	2200      	movs	r2, #0
 80065a2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80065a4:	2300      	movs	r3, #0
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3710      	adds	r7, #16
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}

080065ae <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80065ae:	b580      	push	{r7, lr}
 80065b0:	b084      	sub	sp, #16
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065bc:	69db      	ldr	r3, [r3, #28]
 80065be:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	3340      	adds	r3, #64	; 0x40
 80065c4:	4619      	mov	r1, r3
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f000 f8b1 	bl	800672e <GetLineCoding>
 80065cc:	4603      	mov	r3, r0
 80065ce:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80065d0:	7afb      	ldrb	r3, [r7, #11]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d105      	bne.n	80065e2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80065dc:	2102      	movs	r1, #2
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80065e2:	7afb      	ldrb	r3, [r7, #11]
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3710      	adds	r7, #16
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}

080065ec <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b084      	sub	sp, #16
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80065f4:	2301      	movs	r3, #1
 80065f6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80065f8:	2300      	movs	r3, #0
 80065fa:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006602:	69db      	ldr	r3, [r3, #28]
 8006604:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800660c:	2b04      	cmp	r3, #4
 800660e:	d877      	bhi.n	8006700 <USBH_CDC_Process+0x114>
 8006610:	a201      	add	r2, pc, #4	; (adr r2, 8006618 <USBH_CDC_Process+0x2c>)
 8006612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006616:	bf00      	nop
 8006618:	0800662d 	.word	0x0800662d
 800661c:	08006633 	.word	0x08006633
 8006620:	08006663 	.word	0x08006663
 8006624:	080066d7 	.word	0x080066d7
 8006628:	080066e5 	.word	0x080066e5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800662c:	2300      	movs	r3, #0
 800662e:	73fb      	strb	r3, [r7, #15]
      break;
 8006630:	e06d      	b.n	800670e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006636:	4619      	mov	r1, r3
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f000 f897 	bl	800676c <SetLineCoding>
 800663e:	4603      	mov	r3, r0
 8006640:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006642:	7bbb      	ldrb	r3, [r7, #14]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d104      	bne.n	8006652 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	2202      	movs	r2, #2
 800664c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006650:	e058      	b.n	8006704 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006652:	7bbb      	ldrb	r3, [r7, #14]
 8006654:	2b01      	cmp	r3, #1
 8006656:	d055      	beq.n	8006704 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	2204      	movs	r2, #4
 800665c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006660:	e050      	b.n	8006704 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	3340      	adds	r3, #64	; 0x40
 8006666:	4619      	mov	r1, r3
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f000 f860 	bl	800672e <GetLineCoding>
 800666e:	4603      	mov	r3, r0
 8006670:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006672:	7bbb      	ldrb	r3, [r7, #14]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d126      	bne.n	80066c6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	2200      	movs	r2, #0
 800667c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800668a:	791b      	ldrb	r3, [r3, #4]
 800668c:	429a      	cmp	r2, r3
 800668e:	d13b      	bne.n	8006708 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800669a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800669c:	429a      	cmp	r2, r3
 800669e:	d133      	bne.n	8006708 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066aa:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80066ac:	429a      	cmp	r2, r3
 80066ae:	d12b      	bne.n	8006708 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066b8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d124      	bne.n	8006708 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f000 f958 	bl	8006974 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80066c4:	e020      	b.n	8006708 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80066c6:	7bbb      	ldrb	r3, [r7, #14]
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d01d      	beq.n	8006708 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	2204      	movs	r2, #4
 80066d0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80066d4:	e018      	b.n	8006708 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f000 f867 	bl	80067aa <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f000 f8da 	bl	8006896 <CDC_ProcessReception>
      break;
 80066e2:	e014      	b.n	800670e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80066e4:	2100      	movs	r1, #0
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 ffe3 	bl	80076b2 <USBH_ClrFeature>
 80066ec:	4603      	mov	r3, r0
 80066ee:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80066f0:	7bbb      	ldrb	r3, [r7, #14]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d10a      	bne.n	800670c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	2200      	movs	r2, #0
 80066fa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80066fe:	e005      	b.n	800670c <USBH_CDC_Process+0x120>

    default:
      break;
 8006700:	bf00      	nop
 8006702:	e004      	b.n	800670e <USBH_CDC_Process+0x122>
      break;
 8006704:	bf00      	nop
 8006706:	e002      	b.n	800670e <USBH_CDC_Process+0x122>
      break;
 8006708:	bf00      	nop
 800670a:	e000      	b.n	800670e <USBH_CDC_Process+0x122>
      break;
 800670c:	bf00      	nop

  }

  return status;
 800670e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006710:	4618      	mov	r0, r3
 8006712:	3710      	adds	r7, #16
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}

08006718 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006718:	b480      	push	{r7}
 800671a:	b083      	sub	sp, #12
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006720:	2300      	movs	r3, #0
}
 8006722:	4618      	mov	r0, r3
 8006724:	370c      	adds	r7, #12
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr

0800672e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800672e:	b580      	push	{r7, lr}
 8006730:	b082      	sub	sp, #8
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]
 8006736:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	22a1      	movs	r2, #161	; 0xa1
 800673c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2221      	movs	r2, #33	; 0x21
 8006742:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2200      	movs	r2, #0
 8006748:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2200      	movs	r2, #0
 800674e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2207      	movs	r2, #7
 8006754:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	2207      	movs	r2, #7
 800675a:	4619      	mov	r1, r3
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f001 f988 	bl	8007a72 <USBH_CtlReq>
 8006762:	4603      	mov	r3, r0
}
 8006764:	4618      	mov	r0, r3
 8006766:	3708      	adds	r7, #8
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}

0800676c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b082      	sub	sp, #8
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2221      	movs	r2, #33	; 0x21
 800677a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2220      	movs	r2, #32
 8006780:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2200      	movs	r2, #0
 8006786:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2207      	movs	r2, #7
 8006792:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	2207      	movs	r2, #7
 8006798:	4619      	mov	r1, r3
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f001 f969 	bl	8007a72 <USBH_CtlReq>
 80067a0:	4603      	mov	r3, r0
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3708      	adds	r7, #8
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}

080067aa <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80067aa:	b580      	push	{r7, lr}
 80067ac:	b086      	sub	sp, #24
 80067ae:	af02      	add	r7, sp, #8
 80067b0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80067b8:	69db      	ldr	r3, [r3, #28]
 80067ba:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80067bc:	2300      	movs	r3, #0
 80067be:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80067c6:	2b01      	cmp	r3, #1
 80067c8:	d002      	beq.n	80067d0 <CDC_ProcessTransmission+0x26>
 80067ca:	2b02      	cmp	r3, #2
 80067cc:	d023      	beq.n	8006816 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80067ce:	e05e      	b.n	800688e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d4:	68fa      	ldr	r2, [r7, #12]
 80067d6:	8b12      	ldrh	r2, [r2, #24]
 80067d8:	4293      	cmp	r3, r2
 80067da:	d90b      	bls.n	80067f4 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	69d9      	ldr	r1, [r3, #28]
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	8b1a      	ldrh	r2, [r3, #24]
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	7b5b      	ldrb	r3, [r3, #13]
 80067e8:	2001      	movs	r0, #1
 80067ea:	9000      	str	r0, [sp, #0]
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f001 fb4e 	bl	8007e8e <USBH_BulkSendData>
 80067f2:	e00b      	b.n	800680c <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 80067fc:	b29a      	uxth	r2, r3
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	7b5b      	ldrb	r3, [r3, #13]
 8006802:	2001      	movs	r0, #1
 8006804:	9000      	str	r0, [sp, #0]
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f001 fb41 	bl	8007e8e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2202      	movs	r2, #2
 8006810:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006814:	e03b      	b.n	800688e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	7b5b      	ldrb	r3, [r3, #13]
 800681a:	4619      	mov	r1, r3
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f001 fe65 	bl	80084ec <USBH_LL_GetURBState>
 8006822:	4603      	mov	r3, r0
 8006824:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006826:	7afb      	ldrb	r3, [r7, #11]
 8006828:	2b01      	cmp	r3, #1
 800682a:	d128      	bne.n	800687e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006830:	68fa      	ldr	r2, [r7, #12]
 8006832:	8b12      	ldrh	r2, [r2, #24]
 8006834:	4293      	cmp	r3, r2
 8006836:	d90e      	bls.n	8006856 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800683c:	68fa      	ldr	r2, [r7, #12]
 800683e:	8b12      	ldrh	r2, [r2, #24]
 8006840:	1a9a      	subs	r2, r3, r2
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	69db      	ldr	r3, [r3, #28]
 800684a:	68fa      	ldr	r2, [r7, #12]
 800684c:	8b12      	ldrh	r2, [r2, #24]
 800684e:	441a      	add	r2, r3
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	61da      	str	r2, [r3, #28]
 8006854:	e002      	b.n	800685c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2200      	movs	r2, #0
 800685a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006860:	2b00      	cmp	r3, #0
 8006862:	d004      	beq.n	800686e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2201      	movs	r2, #1
 8006868:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800686c:	e00e      	b.n	800688c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2200      	movs	r2, #0
 8006872:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f000 f868 	bl	800694c <USBH_CDC_TransmitCallback>
      break;
 800687c:	e006      	b.n	800688c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800687e:	7afb      	ldrb	r3, [r7, #11]
 8006880:	2b02      	cmp	r3, #2
 8006882:	d103      	bne.n	800688c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2201      	movs	r2, #1
 8006888:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800688c:	bf00      	nop
  }
}
 800688e:	bf00      	nop
 8006890:	3710      	adds	r7, #16
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}

08006896 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006896:	b580      	push	{r7, lr}
 8006898:	b086      	sub	sp, #24
 800689a:	af00      	add	r7, sp, #0
 800689c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068a4:	69db      	ldr	r3, [r3, #28]
 80068a6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80068a8:	2300      	movs	r3, #0
 80068aa:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80068b2:	2b03      	cmp	r3, #3
 80068b4:	d002      	beq.n	80068bc <CDC_ProcessReception+0x26>
 80068b6:	2b04      	cmp	r3, #4
 80068b8:	d00e      	beq.n	80068d8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80068ba:	e043      	b.n	8006944 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	6a19      	ldr	r1, [r3, #32]
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	8b5a      	ldrh	r2, [r3, #26]
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	7b1b      	ldrb	r3, [r3, #12]
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f001 fb05 	bl	8007ed8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	2204      	movs	r2, #4
 80068d2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80068d6:	e035      	b.n	8006944 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	7b1b      	ldrb	r3, [r3, #12]
 80068dc:	4619      	mov	r1, r3
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f001 fe04 	bl	80084ec <USBH_LL_GetURBState>
 80068e4:	4603      	mov	r3, r0
 80068e6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80068e8:	7cfb      	ldrb	r3, [r7, #19]
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	d129      	bne.n	8006942 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	7b1b      	ldrb	r3, [r3, #12]
 80068f2:	4619      	mov	r1, r3
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f001 fd67 	bl	80083c8 <USBH_LL_GetLastXferSize>
 80068fa:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006900:	68fa      	ldr	r2, [r7, #12]
 8006902:	429a      	cmp	r2, r3
 8006904:	d016      	beq.n	8006934 <CDC_ProcessReception+0x9e>
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	8b5b      	ldrh	r3, [r3, #26]
 800690a:	461a      	mov	r2, r3
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	4293      	cmp	r3, r2
 8006910:	d910      	bls.n	8006934 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	1ad2      	subs	r2, r2, r3
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	6a1a      	ldr	r2, [r3, #32]
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	441a      	add	r2, r3
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	2203      	movs	r2, #3
 800692e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006932:	e006      	b.n	8006942 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	2200      	movs	r2, #0
 8006938:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f000 f80f 	bl	8006960 <USBH_CDC_ReceiveCallback>
      break;
 8006942:	bf00      	nop
  }
}
 8006944:	bf00      	nop
 8006946:	3718      	adds	r7, #24
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800694c:	b480      	push	{r7}
 800694e:	b083      	sub	sp, #12
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006954:	bf00      	nop
 8006956:	370c      	adds	r7, #12
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr

08006960 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006960:	b480      	push	{r7}
 8006962:	b083      	sub	sp, #12
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006968:	bf00      	nop
 800696a:	370c      	adds	r7, #12
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr

08006974 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006974:	b480      	push	{r7}
 8006976:	b083      	sub	sp, #12
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800697c:	bf00      	nop
 800697e:	370c      	adds	r7, #12
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr

08006988 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b084      	sub	sp, #16
 800698c:	af00      	add	r7, sp, #0
 800698e:	60f8      	str	r0, [r7, #12]
 8006990:	60b9      	str	r1, [r7, #8]
 8006992:	4613      	mov	r3, r2
 8006994:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d101      	bne.n	80069a0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800699c:	2302      	movs	r3, #2
 800699e:	e029      	b.n	80069f4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	79fa      	ldrb	r2, [r7, #7]
 80069a4:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2200      	movs	r2, #0
 80069ac:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2200      	movs	r2, #0
 80069b4:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80069b8:	68f8      	ldr	r0, [r7, #12]
 80069ba:	f000 f81f 	bl	80069fc <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2200      	movs	r2, #0
 80069c2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2200      	movs	r2, #0
 80069ca:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2200      	movs	r2, #0
 80069d2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2200      	movs	r2, #0
 80069da:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d003      	beq.n	80069ec <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	68ba      	ldr	r2, [r7, #8]
 80069e8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80069ec:	68f8      	ldr	r0, [r7, #12]
 80069ee:	f001 fc37 	bl	8008260 <USBH_LL_Init>

  return USBH_OK;
 80069f2:	2300      	movs	r3, #0
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3710      	adds	r7, #16
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}

080069fc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b085      	sub	sp, #20
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006a04:	2300      	movs	r3, #0
 8006a06:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006a08:	2300      	movs	r3, #0
 8006a0a:	60fb      	str	r3, [r7, #12]
 8006a0c:	e009      	b.n	8006a22 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	33e0      	adds	r3, #224	; 0xe0
 8006a14:	009b      	lsls	r3, r3, #2
 8006a16:	4413      	add	r3, r2
 8006a18:	2200      	movs	r2, #0
 8006a1a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	3301      	adds	r3, #1
 8006a20:	60fb      	str	r3, [r7, #12]
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2b0e      	cmp	r3, #14
 8006a26:	d9f2      	bls.n	8006a0e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006a28:	2300      	movs	r3, #0
 8006a2a:	60fb      	str	r3, [r7, #12]
 8006a2c:	e009      	b.n	8006a42 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	4413      	add	r3, r2
 8006a34:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006a38:	2200      	movs	r2, #0
 8006a3a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	3301      	adds	r3, #1
 8006a40:	60fb      	str	r3, [r7, #12]
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a48:	d3f1      	bcc.n	8006a2e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2200      	movs	r2, #0
 8006a54:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2201      	movs	r2, #1
 8006a5a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2201      	movs	r2, #1
 8006a68:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2240      	movs	r2, #64	; 0x40
 8006a6e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2200      	movs	r2, #0
 8006a74:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2201      	movs	r2, #1
 8006a82:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2200      	movs	r2, #0
 8006a92:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006a96:	2300      	movs	r3, #0
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3714      	adds	r7, #20
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr

08006aa4 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b085      	sub	sp, #20
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d016      	beq.n	8006ae6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d10e      	bne.n	8006ae0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006ac8:	1c59      	adds	r1, r3, #1
 8006aca:	687a      	ldr	r2, [r7, #4]
 8006acc:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	33de      	adds	r3, #222	; 0xde
 8006ad4:	6839      	ldr	r1, [r7, #0]
 8006ad6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006ada:	2300      	movs	r3, #0
 8006adc:	73fb      	strb	r3, [r7, #15]
 8006ade:	e004      	b.n	8006aea <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006ae0:	2302      	movs	r3, #2
 8006ae2:	73fb      	strb	r3, [r7, #15]
 8006ae4:	e001      	b.n	8006aea <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006ae6:	2302      	movs	r3, #2
 8006ae8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3714      	adds	r7, #20
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr

08006af8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b085      	sub	sp, #20
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	460b      	mov	r3, r1
 8006b02:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006b04:	2300      	movs	r3, #0
 8006b06:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006b0e:	78fa      	ldrb	r2, [r7, #3]
 8006b10:	429a      	cmp	r2, r3
 8006b12:	d204      	bcs.n	8006b1e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	78fa      	ldrb	r2, [r7, #3]
 8006b18:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006b1c:	e001      	b.n	8006b22 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006b1e:	2302      	movs	r3, #2
 8006b20:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3714      	adds	r7, #20
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr

08006b30 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b087      	sub	sp, #28
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	4608      	mov	r0, r1
 8006b3a:	4611      	mov	r1, r2
 8006b3c:	461a      	mov	r2, r3
 8006b3e:	4603      	mov	r3, r0
 8006b40:	70fb      	strb	r3, [r7, #3]
 8006b42:	460b      	mov	r3, r1
 8006b44:	70bb      	strb	r3, [r7, #2]
 8006b46:	4613      	mov	r3, r2
 8006b48:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006b58:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006b5a:	e025      	b.n	8006ba8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006b5c:	7dfb      	ldrb	r3, [r7, #23]
 8006b5e:	221a      	movs	r2, #26
 8006b60:	fb02 f303 	mul.w	r3, r2, r3
 8006b64:	3308      	adds	r3, #8
 8006b66:	68fa      	ldr	r2, [r7, #12]
 8006b68:	4413      	add	r3, r2
 8006b6a:	3302      	adds	r3, #2
 8006b6c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	795b      	ldrb	r3, [r3, #5]
 8006b72:	78fa      	ldrb	r2, [r7, #3]
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d002      	beq.n	8006b7e <USBH_FindInterface+0x4e>
 8006b78:	78fb      	ldrb	r3, [r7, #3]
 8006b7a:	2bff      	cmp	r3, #255	; 0xff
 8006b7c:	d111      	bne.n	8006ba2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006b82:	78ba      	ldrb	r2, [r7, #2]
 8006b84:	429a      	cmp	r2, r3
 8006b86:	d002      	beq.n	8006b8e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006b88:	78bb      	ldrb	r3, [r7, #2]
 8006b8a:	2bff      	cmp	r3, #255	; 0xff
 8006b8c:	d109      	bne.n	8006ba2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006b92:	787a      	ldrb	r2, [r7, #1]
 8006b94:	429a      	cmp	r2, r3
 8006b96:	d002      	beq.n	8006b9e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006b98:	787b      	ldrb	r3, [r7, #1]
 8006b9a:	2bff      	cmp	r3, #255	; 0xff
 8006b9c:	d101      	bne.n	8006ba2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006b9e:	7dfb      	ldrb	r3, [r7, #23]
 8006ba0:	e006      	b.n	8006bb0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006ba2:	7dfb      	ldrb	r3, [r7, #23]
 8006ba4:	3301      	adds	r3, #1
 8006ba6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006ba8:	7dfb      	ldrb	r3, [r7, #23]
 8006baa:	2b01      	cmp	r3, #1
 8006bac:	d9d6      	bls.n	8006b5c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006bae:	23ff      	movs	r3, #255	; 0xff
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	371c      	adds	r7, #28
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr

08006bbc <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b082      	sub	sp, #8
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f001 fb87 	bl	80082d8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8006bca:	2101      	movs	r1, #1
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f001 fca0 	bl	8008512 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006bd2:	2300      	movs	r3, #0
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3708      	adds	r7, #8
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b088      	sub	sp, #32
 8006be0:	af04      	add	r7, sp, #16
 8006be2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006be4:	2302      	movs	r3, #2
 8006be6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006be8:	2300      	movs	r3, #0
 8006bea:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	d102      	bne.n	8006bfe <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2203      	movs	r2, #3
 8006bfc:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	781b      	ldrb	r3, [r3, #0]
 8006c02:	b2db      	uxtb	r3, r3
 8006c04:	2b0b      	cmp	r3, #11
 8006c06:	f200 81b3 	bhi.w	8006f70 <USBH_Process+0x394>
 8006c0a:	a201      	add	r2, pc, #4	; (adr r2, 8006c10 <USBH_Process+0x34>)
 8006c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c10:	08006c41 	.word	0x08006c41
 8006c14:	08006c73 	.word	0x08006c73
 8006c18:	08006cdb 	.word	0x08006cdb
 8006c1c:	08006f0b 	.word	0x08006f0b
 8006c20:	08006f71 	.word	0x08006f71
 8006c24:	08006d7f 	.word	0x08006d7f
 8006c28:	08006eb1 	.word	0x08006eb1
 8006c2c:	08006db5 	.word	0x08006db5
 8006c30:	08006dd5 	.word	0x08006dd5
 8006c34:	08006df5 	.word	0x08006df5
 8006c38:	08006e23 	.word	0x08006e23
 8006c3c:	08006ef3 	.word	0x08006ef3
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006c46:	b2db      	uxtb	r3, r3
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	f000 8193 	beq.w	8006f74 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2201      	movs	r2, #1
 8006c52:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006c54:	20c8      	movs	r0, #200	; 0xc8
 8006c56:	f001 fca3 	bl	80085a0 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f001 fb99 	bl	8008392 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2200      	movs	r2, #0
 8006c64:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006c70:	e180      	b.n	8006f74 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d107      	bne.n	8006c8c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2202      	movs	r2, #2
 8006c88:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006c8a:	e182      	b.n	8006f92 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006c92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006c96:	d914      	bls.n	8006cc2 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006c9e:	3301      	adds	r3, #1
 8006ca0:	b2da      	uxtb	r2, r3
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006cae:	2b03      	cmp	r3, #3
 8006cb0:	d903      	bls.n	8006cba <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	220d      	movs	r2, #13
 8006cb6:	701a      	strb	r2, [r3, #0]
      break;
 8006cb8:	e16b      	b.n	8006f92 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	701a      	strb	r2, [r3, #0]
      break;
 8006cc0:	e167      	b.n	8006f92 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006cc8:	f103 020a 	add.w	r2, r3, #10
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006cd2:	200a      	movs	r0, #10
 8006cd4:	f001 fc64 	bl	80085a0 <USBH_Delay>
      break;
 8006cd8:	e15b      	b.n	8006f92 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d005      	beq.n	8006cf0 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006cea:	2104      	movs	r1, #4
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006cf0:	2064      	movs	r0, #100	; 0x64
 8006cf2:	f001 fc55 	bl	80085a0 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f001 fb24 	bl	8008344 <USBH_LL_GetSpeed>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	461a      	mov	r2, r3
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2205      	movs	r2, #5
 8006d0a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006d0c:	2100      	movs	r1, #0
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f001 f92f 	bl	8007f72 <USBH_AllocPipe>
 8006d14:	4603      	mov	r3, r0
 8006d16:	461a      	mov	r2, r3
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006d1c:	2180      	movs	r1, #128	; 0x80
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f001 f927 	bl	8007f72 <USBH_AllocPipe>
 8006d24:	4603      	mov	r3, r0
 8006d26:	461a      	mov	r2, r3
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	7919      	ldrb	r1, [r3, #4]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006d3c:	687a      	ldr	r2, [r7, #4]
 8006d3e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006d40:	b292      	uxth	r2, r2
 8006d42:	9202      	str	r2, [sp, #8]
 8006d44:	2200      	movs	r2, #0
 8006d46:	9201      	str	r2, [sp, #4]
 8006d48:	9300      	str	r3, [sp, #0]
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	2280      	movs	r2, #128	; 0x80
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f001 f8e0 	bl	8007f14 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	7959      	ldrb	r1, [r3, #5]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006d64:	687a      	ldr	r2, [r7, #4]
 8006d66:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006d68:	b292      	uxth	r2, r2
 8006d6a:	9202      	str	r2, [sp, #8]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	9201      	str	r2, [sp, #4]
 8006d70:	9300      	str	r3, [sp, #0]
 8006d72:	4603      	mov	r3, r0
 8006d74:	2200      	movs	r2, #0
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f001 f8cc 	bl	8007f14 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006d7c:	e109      	b.n	8006f92 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 f90c 	bl	8006f9c <USBH_HandleEnum>
 8006d84:	4603      	mov	r3, r0
 8006d86:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006d88:	7bbb      	ldrb	r3, [r7, #14]
 8006d8a:	b2db      	uxtb	r3, r3
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	f040 80f3 	bne.w	8006f78 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2200      	movs	r2, #0
 8006d96:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d103      	bne.n	8006dac <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2208      	movs	r2, #8
 8006da8:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006daa:	e0e5      	b.n	8006f78 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2207      	movs	r2, #7
 8006db0:	701a      	strb	r2, [r3, #0]
      break;
 8006db2:	e0e1      	b.n	8006f78 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	f000 80de 	beq.w	8006f7c <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006dc6:	2101      	movs	r1, #1
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2208      	movs	r2, #8
 8006dd0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006dd2:	e0d3      	b.n	8006f7c <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	4619      	mov	r1, r3
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f000 fc20 	bl	8007624 <USBH_SetCfg>
 8006de4:	4603      	mov	r3, r0
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	f040 80ca 	bne.w	8006f80 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2209      	movs	r2, #9
 8006df0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006df2:	e0c5      	b.n	8006f80 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006dfa:	f003 0320 	and.w	r3, r3, #32
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d00b      	beq.n	8006e1a <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8006e02:	2101      	movs	r1, #1
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f000 fc30 	bl	800766a <USBH_SetFeature>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	f040 80b9 	bne.w	8006f84 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	220a      	movs	r2, #10
 8006e16:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006e18:	e0b4      	b.n	8006f84 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	220a      	movs	r2, #10
 8006e1e:	701a      	strb	r2, [r3, #0]
      break;
 8006e20:	e0b0      	b.n	8006f84 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	f000 80ad 	beq.w	8006f88 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2200      	movs	r2, #0
 8006e32:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006e36:	2300      	movs	r3, #0
 8006e38:	73fb      	strb	r3, [r7, #15]
 8006e3a:	e016      	b.n	8006e6a <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006e3c:	7bfa      	ldrb	r2, [r7, #15]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	32de      	adds	r2, #222	; 0xde
 8006e42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e46:	791a      	ldrb	r2, [r3, #4]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d108      	bne.n	8006e64 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006e52:	7bfa      	ldrb	r2, [r7, #15]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	32de      	adds	r2, #222	; 0xde
 8006e58:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006e62:	e005      	b.n	8006e70 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006e64:	7bfb      	ldrb	r3, [r7, #15]
 8006e66:	3301      	adds	r3, #1
 8006e68:	73fb      	strb	r3, [r7, #15]
 8006e6a:	7bfb      	ldrb	r3, [r7, #15]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d0e5      	beq.n	8006e3c <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d016      	beq.n	8006ea8 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	4798      	blx	r3
 8006e86:	4603      	mov	r3, r0
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d109      	bne.n	8006ea0 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2206      	movs	r2, #6
 8006e90:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006e98:	2103      	movs	r1, #3
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006e9e:	e073      	b.n	8006f88 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	220d      	movs	r2, #13
 8006ea4:	701a      	strb	r2, [r3, #0]
      break;
 8006ea6:	e06f      	b.n	8006f88 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	220d      	movs	r2, #13
 8006eac:	701a      	strb	r2, [r3, #0]
      break;
 8006eae:	e06b      	b.n	8006f88 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d017      	beq.n	8006eea <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ec0:	691b      	ldr	r3, [r3, #16]
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	4798      	blx	r3
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006eca:	7bbb      	ldrb	r3, [r7, #14]
 8006ecc:	b2db      	uxtb	r3, r3
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d103      	bne.n	8006eda <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	220b      	movs	r2, #11
 8006ed6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006ed8:	e058      	b.n	8006f8c <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8006eda:	7bbb      	ldrb	r3, [r7, #14]
 8006edc:	b2db      	uxtb	r3, r3
 8006ede:	2b02      	cmp	r3, #2
 8006ee0:	d154      	bne.n	8006f8c <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	220d      	movs	r2, #13
 8006ee6:	701a      	strb	r2, [r3, #0]
      break;
 8006ee8:	e050      	b.n	8006f8c <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	220d      	movs	r2, #13
 8006eee:	701a      	strb	r2, [r3, #0]
      break;
 8006ef0:	e04c      	b.n	8006f8c <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d049      	beq.n	8006f90 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f02:	695b      	ldr	r3, [r3, #20]
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	4798      	blx	r3
      }
      break;
 8006f08:	e042      	b.n	8006f90 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f7ff fd72 	bl	80069fc <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d009      	beq.n	8006f36 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f28:	68db      	ldr	r3, [r3, #12]
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2200      	movs	r2, #0
 8006f32:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d005      	beq.n	8006f4c <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006f46:	2105      	movs	r1, #5
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006f52:	b2db      	uxtb	r3, r3
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d107      	bne.n	8006f68 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f7ff fe2b 	bl	8006bbc <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006f66:	e014      	b.n	8006f92 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f001 f9b5 	bl	80082d8 <USBH_LL_Start>
      break;
 8006f6e:	e010      	b.n	8006f92 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8006f70:	bf00      	nop
 8006f72:	e00e      	b.n	8006f92 <USBH_Process+0x3b6>
      break;
 8006f74:	bf00      	nop
 8006f76:	e00c      	b.n	8006f92 <USBH_Process+0x3b6>
      break;
 8006f78:	bf00      	nop
 8006f7a:	e00a      	b.n	8006f92 <USBH_Process+0x3b6>
    break;
 8006f7c:	bf00      	nop
 8006f7e:	e008      	b.n	8006f92 <USBH_Process+0x3b6>
      break;
 8006f80:	bf00      	nop
 8006f82:	e006      	b.n	8006f92 <USBH_Process+0x3b6>
      break;
 8006f84:	bf00      	nop
 8006f86:	e004      	b.n	8006f92 <USBH_Process+0x3b6>
      break;
 8006f88:	bf00      	nop
 8006f8a:	e002      	b.n	8006f92 <USBH_Process+0x3b6>
      break;
 8006f8c:	bf00      	nop
 8006f8e:	e000      	b.n	8006f92 <USBH_Process+0x3b6>
      break;
 8006f90:	bf00      	nop
  }
  return USBH_OK;
 8006f92:	2300      	movs	r3, #0
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3710      	adds	r7, #16
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}

08006f9c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b088      	sub	sp, #32
 8006fa0:	af04      	add	r7, sp, #16
 8006fa2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	785b      	ldrb	r3, [r3, #1]
 8006fb0:	2b07      	cmp	r3, #7
 8006fb2:	f200 81c1 	bhi.w	8007338 <USBH_HandleEnum+0x39c>
 8006fb6:	a201      	add	r2, pc, #4	; (adr r2, 8006fbc <USBH_HandleEnum+0x20>)
 8006fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fbc:	08006fdd 	.word	0x08006fdd
 8006fc0:	0800709b 	.word	0x0800709b
 8006fc4:	08007105 	.word	0x08007105
 8006fc8:	08007193 	.word	0x08007193
 8006fcc:	080071fd 	.word	0x080071fd
 8006fd0:	0800726d 	.word	0x0800726d
 8006fd4:	080072b3 	.word	0x080072b3
 8006fd8:	080072f9 	.word	0x080072f9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006fdc:	2108      	movs	r1, #8
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f000 fa50 	bl	8007484 <USBH_Get_DevDesc>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006fe8:	7bbb      	ldrb	r3, [r7, #14]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d130      	bne.n	8007050 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	7919      	ldrb	r1, [r3, #4]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800700e:	687a      	ldr	r2, [r7, #4]
 8007010:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007012:	b292      	uxth	r2, r2
 8007014:	9202      	str	r2, [sp, #8]
 8007016:	2200      	movs	r2, #0
 8007018:	9201      	str	r2, [sp, #4]
 800701a:	9300      	str	r3, [sp, #0]
 800701c:	4603      	mov	r3, r0
 800701e:	2280      	movs	r2, #128	; 0x80
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f000 ff77 	bl	8007f14 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	7959      	ldrb	r1, [r3, #5]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007036:	687a      	ldr	r2, [r7, #4]
 8007038:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800703a:	b292      	uxth	r2, r2
 800703c:	9202      	str	r2, [sp, #8]
 800703e:	2200      	movs	r2, #0
 8007040:	9201      	str	r2, [sp, #4]
 8007042:	9300      	str	r3, [sp, #0]
 8007044:	4603      	mov	r3, r0
 8007046:	2200      	movs	r2, #0
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f000 ff63 	bl	8007f14 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800704e:	e175      	b.n	800733c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007050:	7bbb      	ldrb	r3, [r7, #14]
 8007052:	2b03      	cmp	r3, #3
 8007054:	f040 8172 	bne.w	800733c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800705e:	3301      	adds	r3, #1
 8007060:	b2da      	uxtb	r2, r3
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800706e:	2b03      	cmp	r3, #3
 8007070:	d903      	bls.n	800707a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	220d      	movs	r2, #13
 8007076:	701a      	strb	r2, [r3, #0]
      break;
 8007078:	e160      	b.n	800733c <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	795b      	ldrb	r3, [r3, #5]
 800707e:	4619      	mov	r1, r3
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f000 ff97 	bl	8007fb4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	791b      	ldrb	r3, [r3, #4]
 800708a:	4619      	mov	r1, r3
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f000 ff91 	bl	8007fb4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2200      	movs	r2, #0
 8007096:	701a      	strb	r2, [r3, #0]
      break;
 8007098:	e150      	b.n	800733c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800709a:	2112      	movs	r1, #18
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f000 f9f1 	bl	8007484 <USBH_Get_DevDesc>
 80070a2:	4603      	mov	r3, r0
 80070a4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80070a6:	7bbb      	ldrb	r3, [r7, #14]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d103      	bne.n	80070b4 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2202      	movs	r2, #2
 80070b0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80070b2:	e145      	b.n	8007340 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80070b4:	7bbb      	ldrb	r3, [r7, #14]
 80070b6:	2b03      	cmp	r3, #3
 80070b8:	f040 8142 	bne.w	8007340 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80070c2:	3301      	adds	r3, #1
 80070c4:	b2da      	uxtb	r2, r3
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80070d2:	2b03      	cmp	r3, #3
 80070d4:	d903      	bls.n	80070de <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	220d      	movs	r2, #13
 80070da:	701a      	strb	r2, [r3, #0]
      break;
 80070dc:	e130      	b.n	8007340 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	795b      	ldrb	r3, [r3, #5]
 80070e2:	4619      	mov	r1, r3
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f000 ff65 	bl	8007fb4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	791b      	ldrb	r3, [r3, #4]
 80070ee:	4619      	mov	r1, r3
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f000 ff5f 	bl	8007fb4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2200      	movs	r2, #0
 80070fa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2200      	movs	r2, #0
 8007100:	701a      	strb	r2, [r3, #0]
      break;
 8007102:	e11d      	b.n	8007340 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007104:	2101      	movs	r1, #1
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f000 fa68 	bl	80075dc <USBH_SetAddress>
 800710c:	4603      	mov	r3, r0
 800710e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007110:	7bbb      	ldrb	r3, [r7, #14]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d132      	bne.n	800717c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007116:	2002      	movs	r0, #2
 8007118:	f001 fa42 	bl	80085a0 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2201      	movs	r2, #1
 8007120:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2203      	movs	r2, #3
 8007128:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	7919      	ldrb	r1, [r3, #4]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800713a:	687a      	ldr	r2, [r7, #4]
 800713c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800713e:	b292      	uxth	r2, r2
 8007140:	9202      	str	r2, [sp, #8]
 8007142:	2200      	movs	r2, #0
 8007144:	9201      	str	r2, [sp, #4]
 8007146:	9300      	str	r3, [sp, #0]
 8007148:	4603      	mov	r3, r0
 800714a:	2280      	movs	r2, #128	; 0x80
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f000 fee1 	bl	8007f14 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	7959      	ldrb	r1, [r3, #5]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007162:	687a      	ldr	r2, [r7, #4]
 8007164:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007166:	b292      	uxth	r2, r2
 8007168:	9202      	str	r2, [sp, #8]
 800716a:	2200      	movs	r2, #0
 800716c:	9201      	str	r2, [sp, #4]
 800716e:	9300      	str	r3, [sp, #0]
 8007170:	4603      	mov	r3, r0
 8007172:	2200      	movs	r2, #0
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f000 fecd 	bl	8007f14 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800717a:	e0e3      	b.n	8007344 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800717c:	7bbb      	ldrb	r3, [r7, #14]
 800717e:	2b03      	cmp	r3, #3
 8007180:	f040 80e0 	bne.w	8007344 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	220d      	movs	r2, #13
 8007188:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2200      	movs	r2, #0
 800718e:	705a      	strb	r2, [r3, #1]
      break;
 8007190:	e0d8      	b.n	8007344 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007192:	2109      	movs	r1, #9
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f000 f99d 	bl	80074d4 <USBH_Get_CfgDesc>
 800719a:	4603      	mov	r3, r0
 800719c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800719e:	7bbb      	ldrb	r3, [r7, #14]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d103      	bne.n	80071ac <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2204      	movs	r2, #4
 80071a8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80071aa:	e0cd      	b.n	8007348 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80071ac:	7bbb      	ldrb	r3, [r7, #14]
 80071ae:	2b03      	cmp	r3, #3
 80071b0:	f040 80ca 	bne.w	8007348 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80071ba:	3301      	adds	r3, #1
 80071bc:	b2da      	uxtb	r2, r3
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80071ca:	2b03      	cmp	r3, #3
 80071cc:	d903      	bls.n	80071d6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	220d      	movs	r2, #13
 80071d2:	701a      	strb	r2, [r3, #0]
      break;
 80071d4:	e0b8      	b.n	8007348 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	795b      	ldrb	r3, [r3, #5]
 80071da:	4619      	mov	r1, r3
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f000 fee9 	bl	8007fb4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	791b      	ldrb	r3, [r3, #4]
 80071e6:	4619      	mov	r1, r3
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f000 fee3 	bl	8007fb4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2200      	movs	r2, #0
 80071f2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2200      	movs	r2, #0
 80071f8:	701a      	strb	r2, [r3, #0]
      break;
 80071fa:	e0a5      	b.n	8007348 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007202:	4619      	mov	r1, r3
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f000 f965 	bl	80074d4 <USBH_Get_CfgDesc>
 800720a:	4603      	mov	r3, r0
 800720c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800720e:	7bbb      	ldrb	r3, [r7, #14]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d103      	bne.n	800721c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2205      	movs	r2, #5
 8007218:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800721a:	e097      	b.n	800734c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800721c:	7bbb      	ldrb	r3, [r7, #14]
 800721e:	2b03      	cmp	r3, #3
 8007220:	f040 8094 	bne.w	800734c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800722a:	3301      	adds	r3, #1
 800722c:	b2da      	uxtb	r2, r3
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800723a:	2b03      	cmp	r3, #3
 800723c:	d903      	bls.n	8007246 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	220d      	movs	r2, #13
 8007242:	701a      	strb	r2, [r3, #0]
      break;
 8007244:	e082      	b.n	800734c <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	795b      	ldrb	r3, [r3, #5]
 800724a:	4619      	mov	r1, r3
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f000 feb1 	bl	8007fb4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	791b      	ldrb	r3, [r3, #4]
 8007256:	4619      	mov	r1, r3
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f000 feab 	bl	8007fb4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2200      	movs	r2, #0
 8007268:	701a      	strb	r2, [r3, #0]
      break;
 800726a:	e06f      	b.n	800734c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007272:	2b00      	cmp	r3, #0
 8007274:	d019      	beq.n	80072aa <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007282:	23ff      	movs	r3, #255	; 0xff
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f000 f949 	bl	800751c <USBH_Get_StringDesc>
 800728a:	4603      	mov	r3, r0
 800728c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800728e:	7bbb      	ldrb	r3, [r7, #14]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d103      	bne.n	800729c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2206      	movs	r2, #6
 8007298:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800729a:	e059      	b.n	8007350 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800729c:	7bbb      	ldrb	r3, [r7, #14]
 800729e:	2b03      	cmp	r3, #3
 80072a0:	d156      	bne.n	8007350 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2206      	movs	r2, #6
 80072a6:	705a      	strb	r2, [r3, #1]
      break;
 80072a8:	e052      	b.n	8007350 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2206      	movs	r2, #6
 80072ae:	705a      	strb	r2, [r3, #1]
      break;
 80072b0:	e04e      	b.n	8007350 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d019      	beq.n	80072f0 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80072c8:	23ff      	movs	r3, #255	; 0xff
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 f926 	bl	800751c <USBH_Get_StringDesc>
 80072d0:	4603      	mov	r3, r0
 80072d2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80072d4:	7bbb      	ldrb	r3, [r7, #14]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d103      	bne.n	80072e2 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2207      	movs	r2, #7
 80072de:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80072e0:	e038      	b.n	8007354 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80072e2:	7bbb      	ldrb	r3, [r7, #14]
 80072e4:	2b03      	cmp	r3, #3
 80072e6:	d135      	bne.n	8007354 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2207      	movs	r2, #7
 80072ec:	705a      	strb	r2, [r3, #1]
      break;
 80072ee:	e031      	b.n	8007354 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2207      	movs	r2, #7
 80072f4:	705a      	strb	r2, [r3, #1]
      break;
 80072f6:	e02d      	b.n	8007354 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d017      	beq.n	8007332 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800730e:	23ff      	movs	r3, #255	; 0xff
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f000 f903 	bl	800751c <USBH_Get_StringDesc>
 8007316:	4603      	mov	r3, r0
 8007318:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800731a:	7bbb      	ldrb	r3, [r7, #14]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d102      	bne.n	8007326 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007320:	2300      	movs	r3, #0
 8007322:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007324:	e018      	b.n	8007358 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007326:	7bbb      	ldrb	r3, [r7, #14]
 8007328:	2b03      	cmp	r3, #3
 800732a:	d115      	bne.n	8007358 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800732c:	2300      	movs	r3, #0
 800732e:	73fb      	strb	r3, [r7, #15]
      break;
 8007330:	e012      	b.n	8007358 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007332:	2300      	movs	r3, #0
 8007334:	73fb      	strb	r3, [r7, #15]
      break;
 8007336:	e00f      	b.n	8007358 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007338:	bf00      	nop
 800733a:	e00e      	b.n	800735a <USBH_HandleEnum+0x3be>
      break;
 800733c:	bf00      	nop
 800733e:	e00c      	b.n	800735a <USBH_HandleEnum+0x3be>
      break;
 8007340:	bf00      	nop
 8007342:	e00a      	b.n	800735a <USBH_HandleEnum+0x3be>
      break;
 8007344:	bf00      	nop
 8007346:	e008      	b.n	800735a <USBH_HandleEnum+0x3be>
      break;
 8007348:	bf00      	nop
 800734a:	e006      	b.n	800735a <USBH_HandleEnum+0x3be>
      break;
 800734c:	bf00      	nop
 800734e:	e004      	b.n	800735a <USBH_HandleEnum+0x3be>
      break;
 8007350:	bf00      	nop
 8007352:	e002      	b.n	800735a <USBH_HandleEnum+0x3be>
      break;
 8007354:	bf00      	nop
 8007356:	e000      	b.n	800735a <USBH_HandleEnum+0x3be>
      break;
 8007358:	bf00      	nop
  }
  return Status;
 800735a:	7bfb      	ldrb	r3, [r7, #15]
}
 800735c:	4618      	mov	r0, r3
 800735e:	3710      	adds	r7, #16
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}

08007364 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007364:	b480      	push	{r7}
 8007366:	b083      	sub	sp, #12
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	683a      	ldr	r2, [r7, #0]
 8007372:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007376:	bf00      	nop
 8007378:	370c      	adds	r7, #12
 800737a:	46bd      	mov	sp, r7
 800737c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007380:	4770      	bx	lr

08007382 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007382:	b580      	push	{r7, lr}
 8007384:	b082      	sub	sp, #8
 8007386:	af00      	add	r7, sp, #0
 8007388:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007390:	1c5a      	adds	r2, r3, #1
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f000 f804 	bl	80073a6 <USBH_HandleSof>
}
 800739e:	bf00      	nop
 80073a0:	3708      	adds	r7, #8
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}

080073a6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80073a6:	b580      	push	{r7, lr}
 80073a8:	b082      	sub	sp, #8
 80073aa:	af00      	add	r7, sp, #0
 80073ac:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	b2db      	uxtb	r3, r3
 80073b4:	2b0b      	cmp	r3, #11
 80073b6:	d10a      	bne.n	80073ce <USBH_HandleSof+0x28>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d005      	beq.n	80073ce <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073c8:	699b      	ldr	r3, [r3, #24]
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	4798      	blx	r3
  }
}
 80073ce:	bf00      	nop
 80073d0:	3708      	adds	r7, #8
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}

080073d6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80073d6:	b480      	push	{r7}
 80073d8:	b083      	sub	sp, #12
 80073da:	af00      	add	r7, sp, #0
 80073dc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2201      	movs	r2, #1
 80073e2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 80073e6:	bf00      	nop
}
 80073e8:	370c      	adds	r7, #12
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr

080073f2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80073f2:	b480      	push	{r7}
 80073f4:	b083      	sub	sp, #12
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2200      	movs	r2, #0
 80073fe:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007402:	bf00      	nop
}
 8007404:	370c      	adds	r7, #12
 8007406:	46bd      	mov	sp, r7
 8007408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740c:	4770      	bx	lr

0800740e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800740e:	b480      	push	{r7}
 8007410:	b083      	sub	sp, #12
 8007412:	af00      	add	r7, sp, #0
 8007414:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2201      	movs	r2, #1
 800741a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2200      	movs	r2, #0
 8007422:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2200      	movs	r2, #0
 800742a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800742e:	2300      	movs	r3, #0
}
 8007430:	4618      	mov	r0, r3
 8007432:	370c      	adds	r7, #12
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr

0800743c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b082      	sub	sp, #8
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2201      	movs	r2, #1
 8007448:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2200      	movs	r2, #0
 8007450:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2200      	movs	r2, #0
 8007458:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 ff56 	bl	800830e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	791b      	ldrb	r3, [r3, #4]
 8007466:	4619      	mov	r1, r3
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f000 fda3 	bl	8007fb4 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	795b      	ldrb	r3, [r3, #5]
 8007472:	4619      	mov	r1, r3
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f000 fd9d 	bl	8007fb4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800747a:	2300      	movs	r3, #0
}
 800747c:	4618      	mov	r0, r3
 800747e:	3708      	adds	r7, #8
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}

08007484 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b086      	sub	sp, #24
 8007488:	af02      	add	r7, sp, #8
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	460b      	mov	r3, r1
 800748e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007496:	78fb      	ldrb	r3, [r7, #3]
 8007498:	b29b      	uxth	r3, r3
 800749a:	9300      	str	r3, [sp, #0]
 800749c:	4613      	mov	r3, r2
 800749e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80074a2:	2100      	movs	r1, #0
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f000 f864 	bl	8007572 <USBH_GetDescriptor>
 80074aa:	4603      	mov	r3, r0
 80074ac:	73fb      	strb	r3, [r7, #15]
 80074ae:	7bfb      	ldrb	r3, [r7, #15]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d10a      	bne.n	80074ca <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f203 3026 	addw	r0, r3, #806	; 0x326
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80074c0:	78fa      	ldrb	r2, [r7, #3]
 80074c2:	b292      	uxth	r2, r2
 80074c4:	4619      	mov	r1, r3
 80074c6:	f000 f918 	bl	80076fa <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80074ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3710      	adds	r7, #16
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b086      	sub	sp, #24
 80074d8:	af02      	add	r7, sp, #8
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	460b      	mov	r3, r1
 80074de:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	331c      	adds	r3, #28
 80074e4:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80074e6:	887b      	ldrh	r3, [r7, #2]
 80074e8:	9300      	str	r3, [sp, #0]
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80074f0:	2100      	movs	r1, #0
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f000 f83d 	bl	8007572 <USBH_GetDescriptor>
 80074f8:	4603      	mov	r3, r0
 80074fa:	72fb      	strb	r3, [r7, #11]
 80074fc:	7afb      	ldrb	r3, [r7, #11]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d107      	bne.n	8007512 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007508:	887a      	ldrh	r2, [r7, #2]
 800750a:	68f9      	ldr	r1, [r7, #12]
 800750c:	4618      	mov	r0, r3
 800750e:	f000 f964 	bl	80077da <USBH_ParseCfgDesc>
  }

  return status;
 8007512:	7afb      	ldrb	r3, [r7, #11]
}
 8007514:	4618      	mov	r0, r3
 8007516:	3710      	adds	r7, #16
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}

0800751c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b088      	sub	sp, #32
 8007520:	af02      	add	r7, sp, #8
 8007522:	60f8      	str	r0, [r7, #12]
 8007524:	607a      	str	r2, [r7, #4]
 8007526:	461a      	mov	r2, r3
 8007528:	460b      	mov	r3, r1
 800752a:	72fb      	strb	r3, [r7, #11]
 800752c:	4613      	mov	r3, r2
 800752e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8007530:	7afb      	ldrb	r3, [r7, #11]
 8007532:	b29b      	uxth	r3, r3
 8007534:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007538:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007540:	893b      	ldrh	r3, [r7, #8]
 8007542:	9300      	str	r3, [sp, #0]
 8007544:	460b      	mov	r3, r1
 8007546:	2100      	movs	r1, #0
 8007548:	68f8      	ldr	r0, [r7, #12]
 800754a:	f000 f812 	bl	8007572 <USBH_GetDescriptor>
 800754e:	4603      	mov	r3, r0
 8007550:	75fb      	strb	r3, [r7, #23]
 8007552:	7dfb      	ldrb	r3, [r7, #23]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d107      	bne.n	8007568 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800755e:	893a      	ldrh	r2, [r7, #8]
 8007560:	6879      	ldr	r1, [r7, #4]
 8007562:	4618      	mov	r0, r3
 8007564:	f000 fa37 	bl	80079d6 <USBH_ParseStringDesc>
  }

  return status;
 8007568:	7dfb      	ldrb	r3, [r7, #23]
}
 800756a:	4618      	mov	r0, r3
 800756c:	3718      	adds	r7, #24
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}

08007572 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007572:	b580      	push	{r7, lr}
 8007574:	b084      	sub	sp, #16
 8007576:	af00      	add	r7, sp, #0
 8007578:	60f8      	str	r0, [r7, #12]
 800757a:	607b      	str	r3, [r7, #4]
 800757c:	460b      	mov	r3, r1
 800757e:	72fb      	strb	r3, [r7, #11]
 8007580:	4613      	mov	r3, r2
 8007582:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	789b      	ldrb	r3, [r3, #2]
 8007588:	2b01      	cmp	r3, #1
 800758a:	d11c      	bne.n	80075c6 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800758c:	7afb      	ldrb	r3, [r7, #11]
 800758e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007592:	b2da      	uxtb	r2, r3
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	2206      	movs	r2, #6
 800759c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	893a      	ldrh	r2, [r7, #8]
 80075a2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80075a4:	893b      	ldrh	r3, [r7, #8]
 80075a6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80075aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075ae:	d104      	bne.n	80075ba <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f240 4209 	movw	r2, #1033	; 0x409
 80075b6:	829a      	strh	r2, [r3, #20]
 80075b8:	e002      	b.n	80075c0 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	2200      	movs	r2, #0
 80075be:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	8b3a      	ldrh	r2, [r7, #24]
 80075c4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80075c6:	8b3b      	ldrh	r3, [r7, #24]
 80075c8:	461a      	mov	r2, r3
 80075ca:	6879      	ldr	r1, [r7, #4]
 80075cc:	68f8      	ldr	r0, [r7, #12]
 80075ce:	f000 fa50 	bl	8007a72 <USBH_CtlReq>
 80075d2:	4603      	mov	r3, r0
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3710      	adds	r7, #16
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}

080075dc <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b082      	sub	sp, #8
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	460b      	mov	r3, r1
 80075e6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	789b      	ldrb	r3, [r3, #2]
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	d10f      	bne.n	8007610 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2200      	movs	r2, #0
 80075f4:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2205      	movs	r2, #5
 80075fa:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80075fc:	78fb      	ldrb	r3, [r7, #3]
 80075fe:	b29a      	uxth	r2, r3
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2200      	movs	r2, #0
 8007608:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2200      	movs	r2, #0
 800760e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007610:	2200      	movs	r2, #0
 8007612:	2100      	movs	r1, #0
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f000 fa2c 	bl	8007a72 <USBH_CtlReq>
 800761a:	4603      	mov	r3, r0
}
 800761c:	4618      	mov	r0, r3
 800761e:	3708      	adds	r7, #8
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}

08007624 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b082      	sub	sp, #8
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
 800762c:	460b      	mov	r3, r1
 800762e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	789b      	ldrb	r3, [r3, #2]
 8007634:	2b01      	cmp	r3, #1
 8007636:	d10e      	bne.n	8007656 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2200      	movs	r2, #0
 800763c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2209      	movs	r2, #9
 8007642:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	887a      	ldrh	r2, [r7, #2]
 8007648:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2200      	movs	r2, #0
 800764e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2200      	movs	r2, #0
 8007654:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007656:	2200      	movs	r2, #0
 8007658:	2100      	movs	r1, #0
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f000 fa09 	bl	8007a72 <USBH_CtlReq>
 8007660:	4603      	mov	r3, r0
}
 8007662:	4618      	mov	r0, r3
 8007664:	3708      	adds	r7, #8
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}

0800766a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800766a:	b580      	push	{r7, lr}
 800766c:	b082      	sub	sp, #8
 800766e:	af00      	add	r7, sp, #0
 8007670:	6078      	str	r0, [r7, #4]
 8007672:	460b      	mov	r3, r1
 8007674:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	789b      	ldrb	r3, [r3, #2]
 800767a:	2b01      	cmp	r3, #1
 800767c:	d10f      	bne.n	800769e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2200      	movs	r2, #0
 8007682:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2203      	movs	r2, #3
 8007688:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800768a:	78fb      	ldrb	r3, [r7, #3]
 800768c:	b29a      	uxth	r2, r3
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2200      	movs	r2, #0
 8007696:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2200      	movs	r2, #0
 800769c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800769e:	2200      	movs	r2, #0
 80076a0:	2100      	movs	r1, #0
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f000 f9e5 	bl	8007a72 <USBH_CtlReq>
 80076a8:	4603      	mov	r3, r0
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3708      	adds	r7, #8
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}

080076b2 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80076b2:	b580      	push	{r7, lr}
 80076b4:	b082      	sub	sp, #8
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	6078      	str	r0, [r7, #4]
 80076ba:	460b      	mov	r3, r1
 80076bc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	789b      	ldrb	r3, [r3, #2]
 80076c2:	2b01      	cmp	r3, #1
 80076c4:	d10f      	bne.n	80076e6 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2202      	movs	r2, #2
 80076ca:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2201      	movs	r2, #1
 80076d0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2200      	movs	r2, #0
 80076d6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80076d8:	78fb      	ldrb	r3, [r7, #3]
 80076da:	b29a      	uxth	r2, r3
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2200      	movs	r2, #0
 80076e4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80076e6:	2200      	movs	r2, #0
 80076e8:	2100      	movs	r1, #0
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 f9c1 	bl	8007a72 <USBH_CtlReq>
 80076f0:	4603      	mov	r3, r0
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	3708      	adds	r7, #8
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}

080076fa <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80076fa:	b480      	push	{r7}
 80076fc:	b085      	sub	sp, #20
 80076fe:	af00      	add	r7, sp, #0
 8007700:	60f8      	str	r0, [r7, #12]
 8007702:	60b9      	str	r1, [r7, #8]
 8007704:	4613      	mov	r3, r2
 8007706:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	781a      	ldrb	r2, [r3, #0]
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	785a      	ldrb	r2, [r3, #1]
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	3302      	adds	r3, #2
 800771c:	781b      	ldrb	r3, [r3, #0]
 800771e:	b29a      	uxth	r2, r3
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	3303      	adds	r3, #3
 8007724:	781b      	ldrb	r3, [r3, #0]
 8007726:	b29b      	uxth	r3, r3
 8007728:	021b      	lsls	r3, r3, #8
 800772a:	b29b      	uxth	r3, r3
 800772c:	4313      	orrs	r3, r2
 800772e:	b29a      	uxth	r2, r3
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	791a      	ldrb	r2, [r3, #4]
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	795a      	ldrb	r2, [r3, #5]
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	799a      	ldrb	r2, [r3, #6]
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	79da      	ldrb	r2, [r3, #7]
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8007754:	88fb      	ldrh	r3, [r7, #6]
 8007756:	2b08      	cmp	r3, #8
 8007758:	d939      	bls.n	80077ce <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	3308      	adds	r3, #8
 800775e:	781b      	ldrb	r3, [r3, #0]
 8007760:	b29a      	uxth	r2, r3
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	3309      	adds	r3, #9
 8007766:	781b      	ldrb	r3, [r3, #0]
 8007768:	b29b      	uxth	r3, r3
 800776a:	021b      	lsls	r3, r3, #8
 800776c:	b29b      	uxth	r3, r3
 800776e:	4313      	orrs	r3, r2
 8007770:	b29a      	uxth	r2, r3
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	330a      	adds	r3, #10
 800777a:	781b      	ldrb	r3, [r3, #0]
 800777c:	b29a      	uxth	r2, r3
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	330b      	adds	r3, #11
 8007782:	781b      	ldrb	r3, [r3, #0]
 8007784:	b29b      	uxth	r3, r3
 8007786:	021b      	lsls	r3, r3, #8
 8007788:	b29b      	uxth	r3, r3
 800778a:	4313      	orrs	r3, r2
 800778c:	b29a      	uxth	r2, r3
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	330c      	adds	r3, #12
 8007796:	781b      	ldrb	r3, [r3, #0]
 8007798:	b29a      	uxth	r2, r3
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	330d      	adds	r3, #13
 800779e:	781b      	ldrb	r3, [r3, #0]
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	021b      	lsls	r3, r3, #8
 80077a4:	b29b      	uxth	r3, r3
 80077a6:	4313      	orrs	r3, r2
 80077a8:	b29a      	uxth	r2, r3
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	7b9a      	ldrb	r2, [r3, #14]
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	7bda      	ldrb	r2, [r3, #15]
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	7c1a      	ldrb	r2, [r3, #16]
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	7c5a      	ldrb	r2, [r3, #17]
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	745a      	strb	r2, [r3, #17]
  }
}
 80077ce:	bf00      	nop
 80077d0:	3714      	adds	r7, #20
 80077d2:	46bd      	mov	sp, r7
 80077d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d8:	4770      	bx	lr

080077da <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 80077da:	b580      	push	{r7, lr}
 80077dc:	b08a      	sub	sp, #40	; 0x28
 80077de:	af00      	add	r7, sp, #0
 80077e0:	60f8      	str	r0, [r7, #12]
 80077e2:	60b9      	str	r1, [r7, #8]
 80077e4:	4613      	mov	r3, r2
 80077e6:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80077ec:	2300      	movs	r3, #0
 80077ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 80077f2:	2300      	movs	r3, #0
 80077f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	781a      	ldrb	r2, [r3, #0]
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	785a      	ldrb	r2, [r3, #1]
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	3302      	adds	r3, #2
 8007810:	781b      	ldrb	r3, [r3, #0]
 8007812:	b29a      	uxth	r2, r3
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	3303      	adds	r3, #3
 8007818:	781b      	ldrb	r3, [r3, #0]
 800781a:	b29b      	uxth	r3, r3
 800781c:	021b      	lsls	r3, r3, #8
 800781e:	b29b      	uxth	r3, r3
 8007820:	4313      	orrs	r3, r2
 8007822:	b29a      	uxth	r2, r3
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	791a      	ldrb	r2, [r3, #4]
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	795a      	ldrb	r2, [r3, #5]
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	799a      	ldrb	r2, [r3, #6]
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	79da      	ldrb	r2, [r3, #7]
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	7a1a      	ldrb	r2, [r3, #8]
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007850:	88fb      	ldrh	r3, [r7, #6]
 8007852:	2b09      	cmp	r3, #9
 8007854:	d95f      	bls.n	8007916 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8007856:	2309      	movs	r3, #9
 8007858:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800785a:	2300      	movs	r3, #0
 800785c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800785e:	e051      	b.n	8007904 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007860:	f107 0316 	add.w	r3, r7, #22
 8007864:	4619      	mov	r1, r3
 8007866:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007868:	f000 f8e8 	bl	8007a3c <USBH_GetNextDesc>
 800786c:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800786e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007870:	785b      	ldrb	r3, [r3, #1]
 8007872:	2b04      	cmp	r3, #4
 8007874:	d146      	bne.n	8007904 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8007876:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800787a:	221a      	movs	r2, #26
 800787c:	fb02 f303 	mul.w	r3, r2, r3
 8007880:	3308      	adds	r3, #8
 8007882:	68fa      	ldr	r2, [r7, #12]
 8007884:	4413      	add	r3, r2
 8007886:	3302      	adds	r3, #2
 8007888:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800788a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800788c:	69f8      	ldr	r0, [r7, #28]
 800788e:	f000 f846 	bl	800791e <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007892:	2300      	movs	r3, #0
 8007894:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8007898:	2300      	movs	r3, #0
 800789a:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800789c:	e022      	b.n	80078e4 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800789e:	f107 0316 	add.w	r3, r7, #22
 80078a2:	4619      	mov	r1, r3
 80078a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80078a6:	f000 f8c9 	bl	8007a3c <USBH_GetNextDesc>
 80078aa:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80078ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ae:	785b      	ldrb	r3, [r3, #1]
 80078b0:	2b05      	cmp	r3, #5
 80078b2:	d117      	bne.n	80078e4 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80078b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80078b8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80078bc:	3201      	adds	r2, #1
 80078be:	00d2      	lsls	r2, r2, #3
 80078c0:	211a      	movs	r1, #26
 80078c2:	fb01 f303 	mul.w	r3, r1, r3
 80078c6:	4413      	add	r3, r2
 80078c8:	3308      	adds	r3, #8
 80078ca:	68fa      	ldr	r2, [r7, #12]
 80078cc:	4413      	add	r3, r2
 80078ce:	3304      	adds	r3, #4
 80078d0:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 80078d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80078d4:	69b8      	ldr	r0, [r7, #24]
 80078d6:	f000 f851 	bl	800797c <USBH_ParseEPDesc>
            ep_ix++;
 80078da:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80078de:	3301      	adds	r3, #1
 80078e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80078e4:	69fb      	ldr	r3, [r7, #28]
 80078e6:	791b      	ldrb	r3, [r3, #4]
 80078e8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d204      	bcs.n	80078fa <USBH_ParseCfgDesc+0x120>
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	885a      	ldrh	r2, [r3, #2]
 80078f4:	8afb      	ldrh	r3, [r7, #22]
 80078f6:	429a      	cmp	r2, r3
 80078f8:	d8d1      	bhi.n	800789e <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 80078fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80078fe:	3301      	adds	r3, #1
 8007900:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007904:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007908:	2b01      	cmp	r3, #1
 800790a:	d804      	bhi.n	8007916 <USBH_ParseCfgDesc+0x13c>
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	885a      	ldrh	r2, [r3, #2]
 8007910:	8afb      	ldrh	r3, [r7, #22]
 8007912:	429a      	cmp	r2, r3
 8007914:	d8a4      	bhi.n	8007860 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8007916:	bf00      	nop
 8007918:	3728      	adds	r7, #40	; 0x28
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}

0800791e <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800791e:	b480      	push	{r7}
 8007920:	b083      	sub	sp, #12
 8007922:	af00      	add	r7, sp, #0
 8007924:	6078      	str	r0, [r7, #4]
 8007926:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	781a      	ldrb	r2, [r3, #0]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	785a      	ldrb	r2, [r3, #1]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	789a      	ldrb	r2, [r3, #2]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	78da      	ldrb	r2, [r3, #3]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	791a      	ldrb	r2, [r3, #4]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	795a      	ldrb	r2, [r3, #5]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	799a      	ldrb	r2, [r3, #6]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	79da      	ldrb	r2, [r3, #7]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	7a1a      	ldrb	r2, [r3, #8]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	721a      	strb	r2, [r3, #8]
}
 8007970:	bf00      	nop
 8007972:	370c      	adds	r7, #12
 8007974:	46bd      	mov	sp, r7
 8007976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797a:	4770      	bx	lr

0800797c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800797c:	b480      	push	{r7}
 800797e:	b083      	sub	sp, #12
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	781a      	ldrb	r2, [r3, #0]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	785a      	ldrb	r2, [r3, #1]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	789a      	ldrb	r2, [r3, #2]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	78da      	ldrb	r2, [r3, #3]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	3304      	adds	r3, #4
 80079aa:	781b      	ldrb	r3, [r3, #0]
 80079ac:	b29a      	uxth	r2, r3
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	3305      	adds	r3, #5
 80079b2:	781b      	ldrb	r3, [r3, #0]
 80079b4:	b29b      	uxth	r3, r3
 80079b6:	021b      	lsls	r3, r3, #8
 80079b8:	b29b      	uxth	r3, r3
 80079ba:	4313      	orrs	r3, r2
 80079bc:	b29a      	uxth	r2, r3
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	799a      	ldrb	r2, [r3, #6]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	719a      	strb	r2, [r3, #6]
}
 80079ca:	bf00      	nop
 80079cc:	370c      	adds	r7, #12
 80079ce:	46bd      	mov	sp, r7
 80079d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d4:	4770      	bx	lr

080079d6 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80079d6:	b480      	push	{r7}
 80079d8:	b087      	sub	sp, #28
 80079da:	af00      	add	r7, sp, #0
 80079dc:	60f8      	str	r0, [r7, #12]
 80079de:	60b9      	str	r1, [r7, #8]
 80079e0:	4613      	mov	r3, r2
 80079e2:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	3301      	adds	r3, #1
 80079e8:	781b      	ldrb	r3, [r3, #0]
 80079ea:	2b03      	cmp	r3, #3
 80079ec:	d120      	bne.n	8007a30 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	781b      	ldrb	r3, [r3, #0]
 80079f2:	1e9a      	subs	r2, r3, #2
 80079f4:	88fb      	ldrh	r3, [r7, #6]
 80079f6:	4293      	cmp	r3, r2
 80079f8:	bf28      	it	cs
 80079fa:	4613      	movcs	r3, r2
 80079fc:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	3302      	adds	r3, #2
 8007a02:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007a04:	2300      	movs	r3, #0
 8007a06:	82fb      	strh	r3, [r7, #22]
 8007a08:	e00b      	b.n	8007a22 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007a0a:	8afb      	ldrh	r3, [r7, #22]
 8007a0c:	68fa      	ldr	r2, [r7, #12]
 8007a0e:	4413      	add	r3, r2
 8007a10:	781a      	ldrb	r2, [r3, #0]
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	3301      	adds	r3, #1
 8007a1a:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007a1c:	8afb      	ldrh	r3, [r7, #22]
 8007a1e:	3302      	adds	r3, #2
 8007a20:	82fb      	strh	r3, [r7, #22]
 8007a22:	8afa      	ldrh	r2, [r7, #22]
 8007a24:	8abb      	ldrh	r3, [r7, #20]
 8007a26:	429a      	cmp	r2, r3
 8007a28:	d3ef      	bcc.n	8007a0a <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	701a      	strb	r2, [r3, #0]
  }
}
 8007a30:	bf00      	nop
 8007a32:	371c      	adds	r7, #28
 8007a34:	46bd      	mov	sp, r7
 8007a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3a:	4770      	bx	lr

08007a3c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b085      	sub	sp, #20
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
 8007a44:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	881a      	ldrh	r2, [r3, #0]
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	781b      	ldrb	r3, [r3, #0]
 8007a4e:	b29b      	uxth	r3, r3
 8007a50:	4413      	add	r3, r2
 8007a52:	b29a      	uxth	r2, r3
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	781b      	ldrb	r3, [r3, #0]
 8007a5c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	4413      	add	r3, r2
 8007a62:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007a64:	68fb      	ldr	r3, [r7, #12]
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3714      	adds	r7, #20
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a70:	4770      	bx	lr

08007a72 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007a72:	b580      	push	{r7, lr}
 8007a74:	b086      	sub	sp, #24
 8007a76:	af00      	add	r7, sp, #0
 8007a78:	60f8      	str	r0, [r7, #12]
 8007a7a:	60b9      	str	r1, [r7, #8]
 8007a7c:	4613      	mov	r3, r2
 8007a7e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007a80:	2301      	movs	r3, #1
 8007a82:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	789b      	ldrb	r3, [r3, #2]
 8007a88:	2b01      	cmp	r3, #1
 8007a8a:	d002      	beq.n	8007a92 <USBH_CtlReq+0x20>
 8007a8c:	2b02      	cmp	r3, #2
 8007a8e:	d00f      	beq.n	8007ab0 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007a90:	e027      	b.n	8007ae2 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	68ba      	ldr	r2, [r7, #8]
 8007a96:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	88fa      	ldrh	r2, [r7, #6]
 8007a9c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2201      	movs	r2, #1
 8007aa2:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2202      	movs	r2, #2
 8007aa8:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007aaa:	2301      	movs	r3, #1
 8007aac:	75fb      	strb	r3, [r7, #23]
      break;
 8007aae:	e018      	b.n	8007ae2 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007ab0:	68f8      	ldr	r0, [r7, #12]
 8007ab2:	f000 f81b 	bl	8007aec <USBH_HandleControl>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007aba:	7dfb      	ldrb	r3, [r7, #23]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d002      	beq.n	8007ac6 <USBH_CtlReq+0x54>
 8007ac0:	7dfb      	ldrb	r3, [r7, #23]
 8007ac2:	2b03      	cmp	r3, #3
 8007ac4:	d106      	bne.n	8007ad4 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	2201      	movs	r2, #1
 8007aca:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	761a      	strb	r2, [r3, #24]
      break;
 8007ad2:	e005      	b.n	8007ae0 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007ad4:	7dfb      	ldrb	r3, [r7, #23]
 8007ad6:	2b02      	cmp	r3, #2
 8007ad8:	d102      	bne.n	8007ae0 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	2201      	movs	r2, #1
 8007ade:	709a      	strb	r2, [r3, #2]
      break;
 8007ae0:	bf00      	nop
  }
  return status;
 8007ae2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3718      	adds	r7, #24
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}

08007aec <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b086      	sub	sp, #24
 8007af0:	af02      	add	r7, sp, #8
 8007af2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007af4:	2301      	movs	r3, #1
 8007af6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007af8:	2300      	movs	r3, #0
 8007afa:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	7e1b      	ldrb	r3, [r3, #24]
 8007b00:	3b01      	subs	r3, #1
 8007b02:	2b0a      	cmp	r3, #10
 8007b04:	f200 8156 	bhi.w	8007db4 <USBH_HandleControl+0x2c8>
 8007b08:	a201      	add	r2, pc, #4	; (adr r2, 8007b10 <USBH_HandleControl+0x24>)
 8007b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b0e:	bf00      	nop
 8007b10:	08007b3d 	.word	0x08007b3d
 8007b14:	08007b57 	.word	0x08007b57
 8007b18:	08007bc1 	.word	0x08007bc1
 8007b1c:	08007be7 	.word	0x08007be7
 8007b20:	08007c1f 	.word	0x08007c1f
 8007b24:	08007c49 	.word	0x08007c49
 8007b28:	08007c9b 	.word	0x08007c9b
 8007b2c:	08007cbd 	.word	0x08007cbd
 8007b30:	08007cf9 	.word	0x08007cf9
 8007b34:	08007d1f 	.word	0x08007d1f
 8007b38:	08007d5d 	.word	0x08007d5d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f103 0110 	add.w	r1, r3, #16
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	795b      	ldrb	r3, [r3, #5]
 8007b46:	461a      	mov	r2, r3
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f000 f943 	bl	8007dd4 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2202      	movs	r2, #2
 8007b52:	761a      	strb	r2, [r3, #24]
      break;
 8007b54:	e139      	b.n	8007dca <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	795b      	ldrb	r3, [r3, #5]
 8007b5a:	4619      	mov	r1, r3
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f000 fcc5 	bl	80084ec <USBH_LL_GetURBState>
 8007b62:	4603      	mov	r3, r0
 8007b64:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007b66:	7bbb      	ldrb	r3, [r7, #14]
 8007b68:	2b01      	cmp	r3, #1
 8007b6a:	d11e      	bne.n	8007baa <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	7c1b      	ldrb	r3, [r3, #16]
 8007b70:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007b74:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	8adb      	ldrh	r3, [r3, #22]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d00a      	beq.n	8007b94 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007b7e:	7b7b      	ldrb	r3, [r7, #13]
 8007b80:	2b80      	cmp	r3, #128	; 0x80
 8007b82:	d103      	bne.n	8007b8c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2203      	movs	r2, #3
 8007b88:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007b8a:	e115      	b.n	8007db8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2205      	movs	r2, #5
 8007b90:	761a      	strb	r2, [r3, #24]
      break;
 8007b92:	e111      	b.n	8007db8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007b94:	7b7b      	ldrb	r3, [r7, #13]
 8007b96:	2b80      	cmp	r3, #128	; 0x80
 8007b98:	d103      	bne.n	8007ba2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2209      	movs	r2, #9
 8007b9e:	761a      	strb	r2, [r3, #24]
      break;
 8007ba0:	e10a      	b.n	8007db8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2207      	movs	r2, #7
 8007ba6:	761a      	strb	r2, [r3, #24]
      break;
 8007ba8:	e106      	b.n	8007db8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007baa:	7bbb      	ldrb	r3, [r7, #14]
 8007bac:	2b04      	cmp	r3, #4
 8007bae:	d003      	beq.n	8007bb8 <USBH_HandleControl+0xcc>
 8007bb0:	7bbb      	ldrb	r3, [r7, #14]
 8007bb2:	2b02      	cmp	r3, #2
 8007bb4:	f040 8100 	bne.w	8007db8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	220b      	movs	r2, #11
 8007bbc:	761a      	strb	r2, [r3, #24]
      break;
 8007bbe:	e0fb      	b.n	8007db8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007bc6:	b29a      	uxth	r2, r3
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6899      	ldr	r1, [r3, #8]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	899a      	ldrh	r2, [r3, #12]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	791b      	ldrb	r3, [r3, #4]
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f000 f93a 	bl	8007e52 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2204      	movs	r2, #4
 8007be2:	761a      	strb	r2, [r3, #24]
      break;
 8007be4:	e0f1      	b.n	8007dca <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	791b      	ldrb	r3, [r3, #4]
 8007bea:	4619      	mov	r1, r3
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f000 fc7d 	bl	80084ec <USBH_LL_GetURBState>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007bf6:	7bbb      	ldrb	r3, [r7, #14]
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	d102      	bne.n	8007c02 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2209      	movs	r2, #9
 8007c00:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007c02:	7bbb      	ldrb	r3, [r7, #14]
 8007c04:	2b05      	cmp	r3, #5
 8007c06:	d102      	bne.n	8007c0e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007c08:	2303      	movs	r3, #3
 8007c0a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007c0c:	e0d6      	b.n	8007dbc <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007c0e:	7bbb      	ldrb	r3, [r7, #14]
 8007c10:	2b04      	cmp	r3, #4
 8007c12:	f040 80d3 	bne.w	8007dbc <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	220b      	movs	r2, #11
 8007c1a:	761a      	strb	r2, [r3, #24]
      break;
 8007c1c:	e0ce      	b.n	8007dbc <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6899      	ldr	r1, [r3, #8]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	899a      	ldrh	r2, [r3, #12]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	795b      	ldrb	r3, [r3, #5]
 8007c2a:	2001      	movs	r0, #1
 8007c2c:	9000      	str	r0, [sp, #0]
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f000 f8ea 	bl	8007e08 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007c3a:	b29a      	uxth	r2, r3
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2206      	movs	r2, #6
 8007c44:	761a      	strb	r2, [r3, #24]
      break;
 8007c46:	e0c0      	b.n	8007dca <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	795b      	ldrb	r3, [r3, #5]
 8007c4c:	4619      	mov	r1, r3
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f000 fc4c 	bl	80084ec <USBH_LL_GetURBState>
 8007c54:	4603      	mov	r3, r0
 8007c56:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007c58:	7bbb      	ldrb	r3, [r7, #14]
 8007c5a:	2b01      	cmp	r3, #1
 8007c5c:	d103      	bne.n	8007c66 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2207      	movs	r2, #7
 8007c62:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007c64:	e0ac      	b.n	8007dc0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007c66:	7bbb      	ldrb	r3, [r7, #14]
 8007c68:	2b05      	cmp	r3, #5
 8007c6a:	d105      	bne.n	8007c78 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	220c      	movs	r2, #12
 8007c70:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007c72:	2303      	movs	r3, #3
 8007c74:	73fb      	strb	r3, [r7, #15]
      break;
 8007c76:	e0a3      	b.n	8007dc0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007c78:	7bbb      	ldrb	r3, [r7, #14]
 8007c7a:	2b02      	cmp	r3, #2
 8007c7c:	d103      	bne.n	8007c86 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2205      	movs	r2, #5
 8007c82:	761a      	strb	r2, [r3, #24]
      break;
 8007c84:	e09c      	b.n	8007dc0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007c86:	7bbb      	ldrb	r3, [r7, #14]
 8007c88:	2b04      	cmp	r3, #4
 8007c8a:	f040 8099 	bne.w	8007dc0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	220b      	movs	r2, #11
 8007c92:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007c94:	2302      	movs	r3, #2
 8007c96:	73fb      	strb	r3, [r7, #15]
      break;
 8007c98:	e092      	b.n	8007dc0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	791b      	ldrb	r3, [r3, #4]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	2100      	movs	r1, #0
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 f8d5 	bl	8007e52 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007cae:	b29a      	uxth	r2, r3
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2208      	movs	r2, #8
 8007cb8:	761a      	strb	r2, [r3, #24]

      break;
 8007cba:	e086      	b.n	8007dca <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	791b      	ldrb	r3, [r3, #4]
 8007cc0:	4619      	mov	r1, r3
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f000 fc12 	bl	80084ec <USBH_LL_GetURBState>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007ccc:	7bbb      	ldrb	r3, [r7, #14]
 8007cce:	2b01      	cmp	r3, #1
 8007cd0:	d105      	bne.n	8007cde <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	220d      	movs	r2, #13
 8007cd6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007cdc:	e072      	b.n	8007dc4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007cde:	7bbb      	ldrb	r3, [r7, #14]
 8007ce0:	2b04      	cmp	r3, #4
 8007ce2:	d103      	bne.n	8007cec <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	220b      	movs	r2, #11
 8007ce8:	761a      	strb	r2, [r3, #24]
      break;
 8007cea:	e06b      	b.n	8007dc4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007cec:	7bbb      	ldrb	r3, [r7, #14]
 8007cee:	2b05      	cmp	r3, #5
 8007cf0:	d168      	bne.n	8007dc4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007cf2:	2303      	movs	r3, #3
 8007cf4:	73fb      	strb	r3, [r7, #15]
      break;
 8007cf6:	e065      	b.n	8007dc4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	795b      	ldrb	r3, [r3, #5]
 8007cfc:	2201      	movs	r2, #1
 8007cfe:	9200      	str	r2, [sp, #0]
 8007d00:	2200      	movs	r2, #0
 8007d02:	2100      	movs	r1, #0
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f000 f87f 	bl	8007e08 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007d10:	b29a      	uxth	r2, r3
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	220a      	movs	r2, #10
 8007d1a:	761a      	strb	r2, [r3, #24]
      break;
 8007d1c:	e055      	b.n	8007dca <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	795b      	ldrb	r3, [r3, #5]
 8007d22:	4619      	mov	r1, r3
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f000 fbe1 	bl	80084ec <USBH_LL_GetURBState>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007d2e:	7bbb      	ldrb	r3, [r7, #14]
 8007d30:	2b01      	cmp	r3, #1
 8007d32:	d105      	bne.n	8007d40 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007d34:	2300      	movs	r3, #0
 8007d36:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	220d      	movs	r2, #13
 8007d3c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007d3e:	e043      	b.n	8007dc8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007d40:	7bbb      	ldrb	r3, [r7, #14]
 8007d42:	2b02      	cmp	r3, #2
 8007d44:	d103      	bne.n	8007d4e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2209      	movs	r2, #9
 8007d4a:	761a      	strb	r2, [r3, #24]
      break;
 8007d4c:	e03c      	b.n	8007dc8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007d4e:	7bbb      	ldrb	r3, [r7, #14]
 8007d50:	2b04      	cmp	r3, #4
 8007d52:	d139      	bne.n	8007dc8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	220b      	movs	r2, #11
 8007d58:	761a      	strb	r2, [r3, #24]
      break;
 8007d5a:	e035      	b.n	8007dc8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	7e5b      	ldrb	r3, [r3, #25]
 8007d60:	3301      	adds	r3, #1
 8007d62:	b2da      	uxtb	r2, r3
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	765a      	strb	r2, [r3, #25]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	7e5b      	ldrb	r3, [r3, #25]
 8007d6c:	2b02      	cmp	r3, #2
 8007d6e:	d806      	bhi.n	8007d7e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2201      	movs	r2, #1
 8007d74:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2201      	movs	r2, #1
 8007d7a:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007d7c:	e025      	b.n	8007dca <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007d84:	2106      	movs	r1, #6
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	795b      	ldrb	r3, [r3, #5]
 8007d94:	4619      	mov	r1, r3
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f000 f90c 	bl	8007fb4 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	791b      	ldrb	r3, [r3, #4]
 8007da0:	4619      	mov	r1, r3
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f000 f906 	bl	8007fb4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2200      	movs	r2, #0
 8007dac:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007dae:	2302      	movs	r3, #2
 8007db0:	73fb      	strb	r3, [r7, #15]
      break;
 8007db2:	e00a      	b.n	8007dca <USBH_HandleControl+0x2de>

    default:
      break;
 8007db4:	bf00      	nop
 8007db6:	e008      	b.n	8007dca <USBH_HandleControl+0x2de>
      break;
 8007db8:	bf00      	nop
 8007dba:	e006      	b.n	8007dca <USBH_HandleControl+0x2de>
      break;
 8007dbc:	bf00      	nop
 8007dbe:	e004      	b.n	8007dca <USBH_HandleControl+0x2de>
      break;
 8007dc0:	bf00      	nop
 8007dc2:	e002      	b.n	8007dca <USBH_HandleControl+0x2de>
      break;
 8007dc4:	bf00      	nop
 8007dc6:	e000      	b.n	8007dca <USBH_HandleControl+0x2de>
      break;
 8007dc8:	bf00      	nop
  }

  return status;
 8007dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3710      	adds	r7, #16
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}

08007dd4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b088      	sub	sp, #32
 8007dd8:	af04      	add	r7, sp, #16
 8007dda:	60f8      	str	r0, [r7, #12]
 8007ddc:	60b9      	str	r1, [r7, #8]
 8007dde:	4613      	mov	r3, r2
 8007de0:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007de2:	79f9      	ldrb	r1, [r7, #7]
 8007de4:	2300      	movs	r3, #0
 8007de6:	9303      	str	r3, [sp, #12]
 8007de8:	2308      	movs	r3, #8
 8007dea:	9302      	str	r3, [sp, #8]
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	9301      	str	r3, [sp, #4]
 8007df0:	2300      	movs	r3, #0
 8007df2:	9300      	str	r3, [sp, #0]
 8007df4:	2300      	movs	r3, #0
 8007df6:	2200      	movs	r2, #0
 8007df8:	68f8      	ldr	r0, [r7, #12]
 8007dfa:	f000 fb46 	bl	800848a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8007dfe:	2300      	movs	r3, #0
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	3710      	adds	r7, #16
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}

08007e08 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b088      	sub	sp, #32
 8007e0c:	af04      	add	r7, sp, #16
 8007e0e:	60f8      	str	r0, [r7, #12]
 8007e10:	60b9      	str	r1, [r7, #8]
 8007e12:	4611      	mov	r1, r2
 8007e14:	461a      	mov	r2, r3
 8007e16:	460b      	mov	r3, r1
 8007e18:	80fb      	strh	r3, [r7, #6]
 8007e1a:	4613      	mov	r3, r2
 8007e1c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d001      	beq.n	8007e2c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007e2c:	7979      	ldrb	r1, [r7, #5]
 8007e2e:	7e3b      	ldrb	r3, [r7, #24]
 8007e30:	9303      	str	r3, [sp, #12]
 8007e32:	88fb      	ldrh	r3, [r7, #6]
 8007e34:	9302      	str	r3, [sp, #8]
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	9301      	str	r3, [sp, #4]
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	9300      	str	r3, [sp, #0]
 8007e3e:	2300      	movs	r3, #0
 8007e40:	2200      	movs	r2, #0
 8007e42:	68f8      	ldr	r0, [r7, #12]
 8007e44:	f000 fb21 	bl	800848a <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007e48:	2300      	movs	r3, #0
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3710      	adds	r7, #16
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}

08007e52 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007e52:	b580      	push	{r7, lr}
 8007e54:	b088      	sub	sp, #32
 8007e56:	af04      	add	r7, sp, #16
 8007e58:	60f8      	str	r0, [r7, #12]
 8007e5a:	60b9      	str	r1, [r7, #8]
 8007e5c:	4611      	mov	r1, r2
 8007e5e:	461a      	mov	r2, r3
 8007e60:	460b      	mov	r3, r1
 8007e62:	80fb      	strh	r3, [r7, #6]
 8007e64:	4613      	mov	r3, r2
 8007e66:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007e68:	7979      	ldrb	r1, [r7, #5]
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	9303      	str	r3, [sp, #12]
 8007e6e:	88fb      	ldrh	r3, [r7, #6]
 8007e70:	9302      	str	r3, [sp, #8]
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	9301      	str	r3, [sp, #4]
 8007e76:	2301      	movs	r3, #1
 8007e78:	9300      	str	r3, [sp, #0]
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	2201      	movs	r2, #1
 8007e7e:	68f8      	ldr	r0, [r7, #12]
 8007e80:	f000 fb03 	bl	800848a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007e84:	2300      	movs	r3, #0

}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3710      	adds	r7, #16
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}

08007e8e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007e8e:	b580      	push	{r7, lr}
 8007e90:	b088      	sub	sp, #32
 8007e92:	af04      	add	r7, sp, #16
 8007e94:	60f8      	str	r0, [r7, #12]
 8007e96:	60b9      	str	r1, [r7, #8]
 8007e98:	4611      	mov	r1, r2
 8007e9a:	461a      	mov	r2, r3
 8007e9c:	460b      	mov	r3, r1
 8007e9e:	80fb      	strh	r3, [r7, #6]
 8007ea0:	4613      	mov	r3, r2
 8007ea2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d001      	beq.n	8007eb2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007eb2:	7979      	ldrb	r1, [r7, #5]
 8007eb4:	7e3b      	ldrb	r3, [r7, #24]
 8007eb6:	9303      	str	r3, [sp, #12]
 8007eb8:	88fb      	ldrh	r3, [r7, #6]
 8007eba:	9302      	str	r3, [sp, #8]
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	9301      	str	r3, [sp, #4]
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	9300      	str	r3, [sp, #0]
 8007ec4:	2302      	movs	r3, #2
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	68f8      	ldr	r0, [r7, #12]
 8007eca:	f000 fade 	bl	800848a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007ece:	2300      	movs	r3, #0
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3710      	adds	r7, #16
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}

08007ed8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b088      	sub	sp, #32
 8007edc:	af04      	add	r7, sp, #16
 8007ede:	60f8      	str	r0, [r7, #12]
 8007ee0:	60b9      	str	r1, [r7, #8]
 8007ee2:	4611      	mov	r1, r2
 8007ee4:	461a      	mov	r2, r3
 8007ee6:	460b      	mov	r3, r1
 8007ee8:	80fb      	strh	r3, [r7, #6]
 8007eea:	4613      	mov	r3, r2
 8007eec:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007eee:	7979      	ldrb	r1, [r7, #5]
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	9303      	str	r3, [sp, #12]
 8007ef4:	88fb      	ldrh	r3, [r7, #6]
 8007ef6:	9302      	str	r3, [sp, #8]
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	9301      	str	r3, [sp, #4]
 8007efc:	2301      	movs	r3, #1
 8007efe:	9300      	str	r3, [sp, #0]
 8007f00:	2302      	movs	r3, #2
 8007f02:	2201      	movs	r2, #1
 8007f04:	68f8      	ldr	r0, [r7, #12]
 8007f06:	f000 fac0 	bl	800848a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007f0a:	2300      	movs	r3, #0
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3710      	adds	r7, #16
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}

08007f14 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b086      	sub	sp, #24
 8007f18:	af04      	add	r7, sp, #16
 8007f1a:	6078      	str	r0, [r7, #4]
 8007f1c:	4608      	mov	r0, r1
 8007f1e:	4611      	mov	r1, r2
 8007f20:	461a      	mov	r2, r3
 8007f22:	4603      	mov	r3, r0
 8007f24:	70fb      	strb	r3, [r7, #3]
 8007f26:	460b      	mov	r3, r1
 8007f28:	70bb      	strb	r3, [r7, #2]
 8007f2a:	4613      	mov	r3, r2
 8007f2c:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007f2e:	7878      	ldrb	r0, [r7, #1]
 8007f30:	78ba      	ldrb	r2, [r7, #2]
 8007f32:	78f9      	ldrb	r1, [r7, #3]
 8007f34:	8b3b      	ldrh	r3, [r7, #24]
 8007f36:	9302      	str	r3, [sp, #8]
 8007f38:	7d3b      	ldrb	r3, [r7, #20]
 8007f3a:	9301      	str	r3, [sp, #4]
 8007f3c:	7c3b      	ldrb	r3, [r7, #16]
 8007f3e:	9300      	str	r3, [sp, #0]
 8007f40:	4603      	mov	r3, r0
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f000 fa53 	bl	80083ee <USBH_LL_OpenPipe>

  return USBH_OK;
 8007f48:	2300      	movs	r3, #0
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	3708      	adds	r7, #8
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}

08007f52 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007f52:	b580      	push	{r7, lr}
 8007f54:	b082      	sub	sp, #8
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	6078      	str	r0, [r7, #4]
 8007f5a:	460b      	mov	r3, r1
 8007f5c:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8007f5e:	78fb      	ldrb	r3, [r7, #3]
 8007f60:	4619      	mov	r1, r3
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f000 fa72 	bl	800844c <USBH_LL_ClosePipe>

  return USBH_OK;
 8007f68:	2300      	movs	r3, #0
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	3708      	adds	r7, #8
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}

08007f72 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007f72:	b580      	push	{r7, lr}
 8007f74:	b084      	sub	sp, #16
 8007f76:	af00      	add	r7, sp, #0
 8007f78:	6078      	str	r0, [r7, #4]
 8007f7a:	460b      	mov	r3, r1
 8007f7c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f000 f836 	bl	8007ff0 <USBH_GetFreePipe>
 8007f84:	4603      	mov	r3, r0
 8007f86:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007f88:	89fb      	ldrh	r3, [r7, #14]
 8007f8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d00a      	beq.n	8007fa8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8007f92:	78fa      	ldrb	r2, [r7, #3]
 8007f94:	89fb      	ldrh	r3, [r7, #14]
 8007f96:	f003 030f 	and.w	r3, r3, #15
 8007f9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007f9e:	6879      	ldr	r1, [r7, #4]
 8007fa0:	33e0      	adds	r3, #224	; 0xe0
 8007fa2:	009b      	lsls	r3, r3, #2
 8007fa4:	440b      	add	r3, r1
 8007fa6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007fa8:	89fb      	ldrh	r3, [r7, #14]
 8007faa:	b2db      	uxtb	r3, r3
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3710      	adds	r7, #16
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}

08007fb4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b083      	sub	sp, #12
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	460b      	mov	r3, r1
 8007fbe:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8007fc0:	78fb      	ldrb	r3, [r7, #3]
 8007fc2:	2b0a      	cmp	r3, #10
 8007fc4:	d80d      	bhi.n	8007fe2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007fc6:	78fb      	ldrb	r3, [r7, #3]
 8007fc8:	687a      	ldr	r2, [r7, #4]
 8007fca:	33e0      	adds	r3, #224	; 0xe0
 8007fcc:	009b      	lsls	r3, r3, #2
 8007fce:	4413      	add	r3, r2
 8007fd0:	685a      	ldr	r2, [r3, #4]
 8007fd2:	78fb      	ldrb	r3, [r7, #3]
 8007fd4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007fd8:	6879      	ldr	r1, [r7, #4]
 8007fda:	33e0      	adds	r3, #224	; 0xe0
 8007fdc:	009b      	lsls	r3, r3, #2
 8007fde:	440b      	add	r3, r1
 8007fe0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007fe2:	2300      	movs	r3, #0
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	370c      	adds	r7, #12
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr

08007ff0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b085      	sub	sp, #20
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	73fb      	strb	r3, [r7, #15]
 8008000:	e00f      	b.n	8008022 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008002:	7bfb      	ldrb	r3, [r7, #15]
 8008004:	687a      	ldr	r2, [r7, #4]
 8008006:	33e0      	adds	r3, #224	; 0xe0
 8008008:	009b      	lsls	r3, r3, #2
 800800a:	4413      	add	r3, r2
 800800c:	685b      	ldr	r3, [r3, #4]
 800800e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008012:	2b00      	cmp	r3, #0
 8008014:	d102      	bne.n	800801c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008016:	7bfb      	ldrb	r3, [r7, #15]
 8008018:	b29b      	uxth	r3, r3
 800801a:	e007      	b.n	800802c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800801c:	7bfb      	ldrb	r3, [r7, #15]
 800801e:	3301      	adds	r3, #1
 8008020:	73fb      	strb	r3, [r7, #15]
 8008022:	7bfb      	ldrb	r3, [r7, #15]
 8008024:	2b0a      	cmp	r3, #10
 8008026:	d9ec      	bls.n	8008002 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008028:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800802c:	4618      	mov	r0, r3
 800802e:	3714      	adds	r7, #20
 8008030:	46bd      	mov	sp, r7
 8008032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008036:	4770      	bx	lr

08008038 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800803c:	2201      	movs	r2, #1
 800803e:	490e      	ldr	r1, [pc, #56]	; (8008078 <MX_USB_HOST_Init+0x40>)
 8008040:	480e      	ldr	r0, [pc, #56]	; (800807c <MX_USB_HOST_Init+0x44>)
 8008042:	f7fe fca1 	bl	8006988 <USBH_Init>
 8008046:	4603      	mov	r3, r0
 8008048:	2b00      	cmp	r3, #0
 800804a:	d001      	beq.n	8008050 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800804c:	f7f8 fcd4 	bl	80009f8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008050:	490b      	ldr	r1, [pc, #44]	; (8008080 <MX_USB_HOST_Init+0x48>)
 8008052:	480a      	ldr	r0, [pc, #40]	; (800807c <MX_USB_HOST_Init+0x44>)
 8008054:	f7fe fd26 	bl	8006aa4 <USBH_RegisterClass>
 8008058:	4603      	mov	r3, r0
 800805a:	2b00      	cmp	r3, #0
 800805c:	d001      	beq.n	8008062 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800805e:	f7f8 fccb 	bl	80009f8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008062:	4806      	ldr	r0, [pc, #24]	; (800807c <MX_USB_HOST_Init+0x44>)
 8008064:	f7fe fdaa 	bl	8006bbc <USBH_Start>
 8008068:	4603      	mov	r3, r0
 800806a:	2b00      	cmp	r3, #0
 800806c:	d001      	beq.n	8008072 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800806e:	f7f8 fcc3 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008072:	bf00      	nop
 8008074:	bd80      	pop	{r7, pc}
 8008076:	bf00      	nop
 8008078:	08008099 	.word	0x08008099
 800807c:	200001fc 	.word	0x200001fc
 8008080:	2000000c 	.word	0x2000000c

08008084 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008088:	4802      	ldr	r0, [pc, #8]	; (8008094 <MX_USB_HOST_Process+0x10>)
 800808a:	f7fe fda7 	bl	8006bdc <USBH_Process>
}
 800808e:	bf00      	nop
 8008090:	bd80      	pop	{r7, pc}
 8008092:	bf00      	nop
 8008094:	200001fc 	.word	0x200001fc

08008098 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008098:	b480      	push	{r7}
 800809a:	b083      	sub	sp, #12
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	460b      	mov	r3, r1
 80080a2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80080a4:	78fb      	ldrb	r3, [r7, #3]
 80080a6:	3b01      	subs	r3, #1
 80080a8:	2b04      	cmp	r3, #4
 80080aa:	d819      	bhi.n	80080e0 <USBH_UserProcess+0x48>
 80080ac:	a201      	add	r2, pc, #4	; (adr r2, 80080b4 <USBH_UserProcess+0x1c>)
 80080ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080b2:	bf00      	nop
 80080b4:	080080e1 	.word	0x080080e1
 80080b8:	080080d1 	.word	0x080080d1
 80080bc:	080080e1 	.word	0x080080e1
 80080c0:	080080d9 	.word	0x080080d9
 80080c4:	080080c9 	.word	0x080080c9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80080c8:	4b09      	ldr	r3, [pc, #36]	; (80080f0 <USBH_UserProcess+0x58>)
 80080ca:	2203      	movs	r2, #3
 80080cc:	701a      	strb	r2, [r3, #0]
  break;
 80080ce:	e008      	b.n	80080e2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80080d0:	4b07      	ldr	r3, [pc, #28]	; (80080f0 <USBH_UserProcess+0x58>)
 80080d2:	2202      	movs	r2, #2
 80080d4:	701a      	strb	r2, [r3, #0]
  break;
 80080d6:	e004      	b.n	80080e2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80080d8:	4b05      	ldr	r3, [pc, #20]	; (80080f0 <USBH_UserProcess+0x58>)
 80080da:	2201      	movs	r2, #1
 80080dc:	701a      	strb	r2, [r3, #0]
  break;
 80080de:	e000      	b.n	80080e2 <USBH_UserProcess+0x4a>

  default:
  break;
 80080e0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80080e2:	bf00      	nop
 80080e4:	370c      	adds	r7, #12
 80080e6:	46bd      	mov	sp, r7
 80080e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop
 80080f0:	200000b0 	.word	0x200000b0

080080f4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b08a      	sub	sp, #40	; 0x28
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80080fc:	f107 0314 	add.w	r3, r7, #20
 8008100:	2200      	movs	r2, #0
 8008102:	601a      	str	r2, [r3, #0]
 8008104:	605a      	str	r2, [r3, #4]
 8008106:	609a      	str	r2, [r3, #8]
 8008108:	60da      	str	r2, [r3, #12]
 800810a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008114:	d147      	bne.n	80081a6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008116:	2300      	movs	r3, #0
 8008118:	613b      	str	r3, [r7, #16]
 800811a:	4b25      	ldr	r3, [pc, #148]	; (80081b0 <HAL_HCD_MspInit+0xbc>)
 800811c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800811e:	4a24      	ldr	r2, [pc, #144]	; (80081b0 <HAL_HCD_MspInit+0xbc>)
 8008120:	f043 0301 	orr.w	r3, r3, #1
 8008124:	6313      	str	r3, [r2, #48]	; 0x30
 8008126:	4b22      	ldr	r3, [pc, #136]	; (80081b0 <HAL_HCD_MspInit+0xbc>)
 8008128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800812a:	f003 0301 	and.w	r3, r3, #1
 800812e:	613b      	str	r3, [r7, #16]
 8008130:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008132:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008136:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008138:	2300      	movs	r3, #0
 800813a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800813c:	2300      	movs	r3, #0
 800813e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008140:	f107 0314 	add.w	r3, r7, #20
 8008144:	4619      	mov	r1, r3
 8008146:	481b      	ldr	r0, [pc, #108]	; (80081b4 <HAL_HCD_MspInit+0xc0>)
 8008148:	f7f9 f83e 	bl	80011c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800814c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008150:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008152:	2302      	movs	r3, #2
 8008154:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008156:	2300      	movs	r3, #0
 8008158:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800815a:	2300      	movs	r3, #0
 800815c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800815e:	230a      	movs	r3, #10
 8008160:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008162:	f107 0314 	add.w	r3, r7, #20
 8008166:	4619      	mov	r1, r3
 8008168:	4812      	ldr	r0, [pc, #72]	; (80081b4 <HAL_HCD_MspInit+0xc0>)
 800816a:	f7f9 f82d 	bl	80011c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800816e:	4b10      	ldr	r3, [pc, #64]	; (80081b0 <HAL_HCD_MspInit+0xbc>)
 8008170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008172:	4a0f      	ldr	r2, [pc, #60]	; (80081b0 <HAL_HCD_MspInit+0xbc>)
 8008174:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008178:	6353      	str	r3, [r2, #52]	; 0x34
 800817a:	2300      	movs	r3, #0
 800817c:	60fb      	str	r3, [r7, #12]
 800817e:	4b0c      	ldr	r3, [pc, #48]	; (80081b0 <HAL_HCD_MspInit+0xbc>)
 8008180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008182:	4a0b      	ldr	r2, [pc, #44]	; (80081b0 <HAL_HCD_MspInit+0xbc>)
 8008184:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008188:	6453      	str	r3, [r2, #68]	; 0x44
 800818a:	4b09      	ldr	r3, [pc, #36]	; (80081b0 <HAL_HCD_MspInit+0xbc>)
 800818c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800818e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008192:	60fb      	str	r3, [r7, #12]
 8008194:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008196:	2200      	movs	r2, #0
 8008198:	2100      	movs	r1, #0
 800819a:	2043      	movs	r0, #67	; 0x43
 800819c:	f7f8 ffdd 	bl	800115a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80081a0:	2043      	movs	r0, #67	; 0x43
 80081a2:	f7f8 fff6 	bl	8001192 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80081a6:	bf00      	nop
 80081a8:	3728      	adds	r7, #40	; 0x28
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}
 80081ae:	bf00      	nop
 80081b0:	40023800 	.word	0x40023800
 80081b4:	40020000 	.word	0x40020000

080081b8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b082      	sub	sp, #8
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80081c6:	4618      	mov	r0, r3
 80081c8:	f7ff f8db 	bl	8007382 <USBH_LL_IncTimer>
}
 80081cc:	bf00      	nop
 80081ce:	3708      	adds	r7, #8
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b082      	sub	sp, #8
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80081e2:	4618      	mov	r0, r3
 80081e4:	f7ff f913 	bl	800740e <USBH_LL_Connect>
}
 80081e8:	bf00      	nop
 80081ea:	3708      	adds	r7, #8
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}

080081f0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b082      	sub	sp, #8
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80081fe:	4618      	mov	r0, r3
 8008200:	f7ff f91c 	bl	800743c <USBH_LL_Disconnect>
}
 8008204:	bf00      	nop
 8008206:	3708      	adds	r7, #8
 8008208:	46bd      	mov	sp, r7
 800820a:	bd80      	pop	{r7, pc}

0800820c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800820c:	b480      	push	{r7}
 800820e:	b083      	sub	sp, #12
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
 8008214:	460b      	mov	r3, r1
 8008216:	70fb      	strb	r3, [r7, #3]
 8008218:	4613      	mov	r3, r2
 800821a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800821c:	bf00      	nop
 800821e:	370c      	adds	r7, #12
 8008220:	46bd      	mov	sp, r7
 8008222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008226:	4770      	bx	lr

08008228 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b082      	sub	sp, #8
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008236:	4618      	mov	r0, r3
 8008238:	f7ff f8cd 	bl	80073d6 <USBH_LL_PortEnabled>
}
 800823c:	bf00      	nop
 800823e:	3708      	adds	r7, #8
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}

08008244 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b082      	sub	sp, #8
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008252:	4618      	mov	r0, r3
 8008254:	f7ff f8cd 	bl	80073f2 <USBH_LL_PortDisabled>
}
 8008258:	bf00      	nop
 800825a:	3708      	adds	r7, #8
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}

08008260 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b082      	sub	sp, #8
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800826e:	2b01      	cmp	r3, #1
 8008270:	d12a      	bne.n	80082c8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008272:	4a18      	ldr	r2, [pc, #96]	; (80082d4 <USBH_LL_Init+0x74>)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	4a15      	ldr	r2, [pc, #84]	; (80082d4 <USBH_LL_Init+0x74>)
 800827e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008282:	4b14      	ldr	r3, [pc, #80]	; (80082d4 <USBH_LL_Init+0x74>)
 8008284:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008288:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800828a:	4b12      	ldr	r3, [pc, #72]	; (80082d4 <USBH_LL_Init+0x74>)
 800828c:	2208      	movs	r2, #8
 800828e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008290:	4b10      	ldr	r3, [pc, #64]	; (80082d4 <USBH_LL_Init+0x74>)
 8008292:	2201      	movs	r2, #1
 8008294:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008296:	4b0f      	ldr	r3, [pc, #60]	; (80082d4 <USBH_LL_Init+0x74>)
 8008298:	2200      	movs	r2, #0
 800829a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800829c:	4b0d      	ldr	r3, [pc, #52]	; (80082d4 <USBH_LL_Init+0x74>)
 800829e:	2202      	movs	r2, #2
 80082a0:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80082a2:	4b0c      	ldr	r3, [pc, #48]	; (80082d4 <USBH_LL_Init+0x74>)
 80082a4:	2200      	movs	r2, #0
 80082a6:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80082a8:	480a      	ldr	r0, [pc, #40]	; (80082d4 <USBH_LL_Init+0x74>)
 80082aa:	f7f9 f942 	bl	8001532 <HAL_HCD_Init>
 80082ae:	4603      	mov	r3, r0
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d001      	beq.n	80082b8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80082b4:	f7f8 fba0 	bl	80009f8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80082b8:	4806      	ldr	r0, [pc, #24]	; (80082d4 <USBH_LL_Init+0x74>)
 80082ba:	f7f9 fd26 	bl	8001d0a <HAL_HCD_GetCurrentFrame>
 80082be:	4603      	mov	r3, r0
 80082c0:	4619      	mov	r1, r3
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f7ff f84e 	bl	8007364 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80082c8:	2300      	movs	r3, #0
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3708      	adds	r7, #8
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}
 80082d2:	bf00      	nop
 80082d4:	200005d4 	.word	0x200005d4

080082d8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b084      	sub	sp, #16
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082e0:	2300      	movs	r3, #0
 80082e2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80082e4:	2300      	movs	r3, #0
 80082e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80082ee:	4618      	mov	r0, r3
 80082f0:	f7f9 fc95 	bl	8001c1e <HAL_HCD_Start>
 80082f4:	4603      	mov	r3, r0
 80082f6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80082f8:	7bfb      	ldrb	r3, [r7, #15]
 80082fa:	4618      	mov	r0, r3
 80082fc:	f000 f95c 	bl	80085b8 <USBH_Get_USB_Status>
 8008300:	4603      	mov	r3, r0
 8008302:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008304:	7bbb      	ldrb	r3, [r7, #14]
}
 8008306:	4618      	mov	r0, r3
 8008308:	3710      	adds	r7, #16
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}

0800830e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800830e:	b580      	push	{r7, lr}
 8008310:	b084      	sub	sp, #16
 8008312:	af00      	add	r7, sp, #0
 8008314:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008316:	2300      	movs	r3, #0
 8008318:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800831a:	2300      	movs	r3, #0
 800831c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008324:	4618      	mov	r0, r3
 8008326:	f7f9 fc9d 	bl	8001c64 <HAL_HCD_Stop>
 800832a:	4603      	mov	r3, r0
 800832c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800832e:	7bfb      	ldrb	r3, [r7, #15]
 8008330:	4618      	mov	r0, r3
 8008332:	f000 f941 	bl	80085b8 <USBH_Get_USB_Status>
 8008336:	4603      	mov	r3, r0
 8008338:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800833a:	7bbb      	ldrb	r3, [r7, #14]
}
 800833c:	4618      	mov	r0, r3
 800833e:	3710      	adds	r7, #16
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}

08008344 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b084      	sub	sp, #16
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800834c:	2301      	movs	r3, #1
 800834e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008356:	4618      	mov	r0, r3
 8008358:	f7f9 fce5 	bl	8001d26 <HAL_HCD_GetCurrentSpeed>
 800835c:	4603      	mov	r3, r0
 800835e:	2b02      	cmp	r3, #2
 8008360:	d00c      	beq.n	800837c <USBH_LL_GetSpeed+0x38>
 8008362:	2b02      	cmp	r3, #2
 8008364:	d80d      	bhi.n	8008382 <USBH_LL_GetSpeed+0x3e>
 8008366:	2b00      	cmp	r3, #0
 8008368:	d002      	beq.n	8008370 <USBH_LL_GetSpeed+0x2c>
 800836a:	2b01      	cmp	r3, #1
 800836c:	d003      	beq.n	8008376 <USBH_LL_GetSpeed+0x32>
 800836e:	e008      	b.n	8008382 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008370:	2300      	movs	r3, #0
 8008372:	73fb      	strb	r3, [r7, #15]
    break;
 8008374:	e008      	b.n	8008388 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008376:	2301      	movs	r3, #1
 8008378:	73fb      	strb	r3, [r7, #15]
    break;
 800837a:	e005      	b.n	8008388 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800837c:	2302      	movs	r3, #2
 800837e:	73fb      	strb	r3, [r7, #15]
    break;
 8008380:	e002      	b.n	8008388 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008382:	2301      	movs	r3, #1
 8008384:	73fb      	strb	r3, [r7, #15]
    break;
 8008386:	bf00      	nop
  }
  return  speed;
 8008388:	7bfb      	ldrb	r3, [r7, #15]
}
 800838a:	4618      	mov	r0, r3
 800838c:	3710      	adds	r7, #16
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}

08008392 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008392:	b580      	push	{r7, lr}
 8008394:	b084      	sub	sp, #16
 8008396:	af00      	add	r7, sp, #0
 8008398:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800839a:	2300      	movs	r3, #0
 800839c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800839e:	2300      	movs	r3, #0
 80083a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80083a8:	4618      	mov	r0, r3
 80083aa:	f7f9 fc78 	bl	8001c9e <HAL_HCD_ResetPort>
 80083ae:	4603      	mov	r3, r0
 80083b0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80083b2:	7bfb      	ldrb	r3, [r7, #15]
 80083b4:	4618      	mov	r0, r3
 80083b6:	f000 f8ff 	bl	80085b8 <USBH_Get_USB_Status>
 80083ba:	4603      	mov	r3, r0
 80083bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083be:	7bbb      	ldrb	r3, [r7, #14]
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	3710      	adds	r7, #16
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}

080083c8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b082      	sub	sp, #8
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
 80083d0:	460b      	mov	r3, r1
 80083d2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80083da:	78fa      	ldrb	r2, [r7, #3]
 80083dc:	4611      	mov	r1, r2
 80083de:	4618      	mov	r0, r3
 80083e0:	f7f9 fc7f 	bl	8001ce2 <HAL_HCD_HC_GetXferCount>
 80083e4:	4603      	mov	r3, r0
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3708      	adds	r7, #8
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}

080083ee <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80083ee:	b590      	push	{r4, r7, lr}
 80083f0:	b089      	sub	sp, #36	; 0x24
 80083f2:	af04      	add	r7, sp, #16
 80083f4:	6078      	str	r0, [r7, #4]
 80083f6:	4608      	mov	r0, r1
 80083f8:	4611      	mov	r1, r2
 80083fa:	461a      	mov	r2, r3
 80083fc:	4603      	mov	r3, r0
 80083fe:	70fb      	strb	r3, [r7, #3]
 8008400:	460b      	mov	r3, r1
 8008402:	70bb      	strb	r3, [r7, #2]
 8008404:	4613      	mov	r3, r2
 8008406:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008408:	2300      	movs	r3, #0
 800840a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800840c:	2300      	movs	r3, #0
 800840e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008416:	787c      	ldrb	r4, [r7, #1]
 8008418:	78ba      	ldrb	r2, [r7, #2]
 800841a:	78f9      	ldrb	r1, [r7, #3]
 800841c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800841e:	9302      	str	r3, [sp, #8]
 8008420:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008424:	9301      	str	r3, [sp, #4]
 8008426:	f897 3020 	ldrb.w	r3, [r7, #32]
 800842a:	9300      	str	r3, [sp, #0]
 800842c:	4623      	mov	r3, r4
 800842e:	f7f9 f8e2 	bl	80015f6 <HAL_HCD_HC_Init>
 8008432:	4603      	mov	r3, r0
 8008434:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008436:	7bfb      	ldrb	r3, [r7, #15]
 8008438:	4618      	mov	r0, r3
 800843a:	f000 f8bd 	bl	80085b8 <USBH_Get_USB_Status>
 800843e:	4603      	mov	r3, r0
 8008440:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008442:	7bbb      	ldrb	r3, [r7, #14]
}
 8008444:	4618      	mov	r0, r3
 8008446:	3714      	adds	r7, #20
 8008448:	46bd      	mov	sp, r7
 800844a:	bd90      	pop	{r4, r7, pc}

0800844c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b084      	sub	sp, #16
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
 8008454:	460b      	mov	r3, r1
 8008456:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008458:	2300      	movs	r3, #0
 800845a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800845c:	2300      	movs	r3, #0
 800845e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008466:	78fa      	ldrb	r2, [r7, #3]
 8008468:	4611      	mov	r1, r2
 800846a:	4618      	mov	r0, r3
 800846c:	f7f9 f952 	bl	8001714 <HAL_HCD_HC_Halt>
 8008470:	4603      	mov	r3, r0
 8008472:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008474:	7bfb      	ldrb	r3, [r7, #15]
 8008476:	4618      	mov	r0, r3
 8008478:	f000 f89e 	bl	80085b8 <USBH_Get_USB_Status>
 800847c:	4603      	mov	r3, r0
 800847e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008480:	7bbb      	ldrb	r3, [r7, #14]
}
 8008482:	4618      	mov	r0, r3
 8008484:	3710      	adds	r7, #16
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}

0800848a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800848a:	b590      	push	{r4, r7, lr}
 800848c:	b089      	sub	sp, #36	; 0x24
 800848e:	af04      	add	r7, sp, #16
 8008490:	6078      	str	r0, [r7, #4]
 8008492:	4608      	mov	r0, r1
 8008494:	4611      	mov	r1, r2
 8008496:	461a      	mov	r2, r3
 8008498:	4603      	mov	r3, r0
 800849a:	70fb      	strb	r3, [r7, #3]
 800849c:	460b      	mov	r3, r1
 800849e:	70bb      	strb	r3, [r7, #2]
 80084a0:	4613      	mov	r3, r2
 80084a2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084a4:	2300      	movs	r3, #0
 80084a6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80084a8:	2300      	movs	r3, #0
 80084aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80084b2:	787c      	ldrb	r4, [r7, #1]
 80084b4:	78ba      	ldrb	r2, [r7, #2]
 80084b6:	78f9      	ldrb	r1, [r7, #3]
 80084b8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80084bc:	9303      	str	r3, [sp, #12]
 80084be:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80084c0:	9302      	str	r3, [sp, #8]
 80084c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c4:	9301      	str	r3, [sp, #4]
 80084c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80084ca:	9300      	str	r3, [sp, #0]
 80084cc:	4623      	mov	r3, r4
 80084ce:	f7f9 f945 	bl	800175c <HAL_HCD_HC_SubmitRequest>
 80084d2:	4603      	mov	r3, r0
 80084d4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80084d6:	7bfb      	ldrb	r3, [r7, #15]
 80084d8:	4618      	mov	r0, r3
 80084da:	f000 f86d 	bl	80085b8 <USBH_Get_USB_Status>
 80084de:	4603      	mov	r3, r0
 80084e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	3714      	adds	r7, #20
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd90      	pop	{r4, r7, pc}

080084ec <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b082      	sub	sp, #8
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
 80084f4:	460b      	mov	r3, r1
 80084f6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80084fe:	78fa      	ldrb	r2, [r7, #3]
 8008500:	4611      	mov	r1, r2
 8008502:	4618      	mov	r0, r3
 8008504:	f7f9 fbd9 	bl	8001cba <HAL_HCD_HC_GetURBState>
 8008508:	4603      	mov	r3, r0
}
 800850a:	4618      	mov	r0, r3
 800850c:	3708      	adds	r7, #8
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}

08008512 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008512:	b580      	push	{r7, lr}
 8008514:	b082      	sub	sp, #8
 8008516:	af00      	add	r7, sp, #0
 8008518:	6078      	str	r0, [r7, #4]
 800851a:	460b      	mov	r3, r1
 800851c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008524:	2b01      	cmp	r3, #1
 8008526:	d103      	bne.n	8008530 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008528:	78fb      	ldrb	r3, [r7, #3]
 800852a:	4618      	mov	r0, r3
 800852c:	f000 f870 	bl	8008610 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008530:	20c8      	movs	r0, #200	; 0xc8
 8008532:	f7f8 fd13 	bl	8000f5c <HAL_Delay>
  return USBH_OK;
 8008536:	2300      	movs	r3, #0
}
 8008538:	4618      	mov	r0, r3
 800853a:	3708      	adds	r7, #8
 800853c:	46bd      	mov	sp, r7
 800853e:	bd80      	pop	{r7, pc}

08008540 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008540:	b480      	push	{r7}
 8008542:	b085      	sub	sp, #20
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
 8008548:	460b      	mov	r3, r1
 800854a:	70fb      	strb	r3, [r7, #3]
 800854c:	4613      	mov	r3, r2
 800854e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008556:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008558:	78fb      	ldrb	r3, [r7, #3]
 800855a:	68fa      	ldr	r2, [r7, #12]
 800855c:	212c      	movs	r1, #44	; 0x2c
 800855e:	fb01 f303 	mul.w	r3, r1, r3
 8008562:	4413      	add	r3, r2
 8008564:	333b      	adds	r3, #59	; 0x3b
 8008566:	781b      	ldrb	r3, [r3, #0]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d009      	beq.n	8008580 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800856c:	78fb      	ldrb	r3, [r7, #3]
 800856e:	68fa      	ldr	r2, [r7, #12]
 8008570:	212c      	movs	r1, #44	; 0x2c
 8008572:	fb01 f303 	mul.w	r3, r1, r3
 8008576:	4413      	add	r3, r2
 8008578:	3354      	adds	r3, #84	; 0x54
 800857a:	78ba      	ldrb	r2, [r7, #2]
 800857c:	701a      	strb	r2, [r3, #0]
 800857e:	e008      	b.n	8008592 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008580:	78fb      	ldrb	r3, [r7, #3]
 8008582:	68fa      	ldr	r2, [r7, #12]
 8008584:	212c      	movs	r1, #44	; 0x2c
 8008586:	fb01 f303 	mul.w	r3, r1, r3
 800858a:	4413      	add	r3, r2
 800858c:	3355      	adds	r3, #85	; 0x55
 800858e:	78ba      	ldrb	r2, [r7, #2]
 8008590:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008592:	2300      	movs	r3, #0
}
 8008594:	4618      	mov	r0, r3
 8008596:	3714      	adds	r7, #20
 8008598:	46bd      	mov	sp, r7
 800859a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859e:	4770      	bx	lr

080085a0 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b082      	sub	sp, #8
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f7f8 fcd7 	bl	8000f5c <HAL_Delay>
}
 80085ae:	bf00      	nop
 80085b0:	3708      	adds	r7, #8
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}
	...

080085b8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80085b8:	b480      	push	{r7}
 80085ba:	b085      	sub	sp, #20
 80085bc:	af00      	add	r7, sp, #0
 80085be:	4603      	mov	r3, r0
 80085c0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80085c2:	2300      	movs	r3, #0
 80085c4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80085c6:	79fb      	ldrb	r3, [r7, #7]
 80085c8:	2b03      	cmp	r3, #3
 80085ca:	d817      	bhi.n	80085fc <USBH_Get_USB_Status+0x44>
 80085cc:	a201      	add	r2, pc, #4	; (adr r2, 80085d4 <USBH_Get_USB_Status+0x1c>)
 80085ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085d2:	bf00      	nop
 80085d4:	080085e5 	.word	0x080085e5
 80085d8:	080085eb 	.word	0x080085eb
 80085dc:	080085f1 	.word	0x080085f1
 80085e0:	080085f7 	.word	0x080085f7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80085e4:	2300      	movs	r3, #0
 80085e6:	73fb      	strb	r3, [r7, #15]
    break;
 80085e8:	e00b      	b.n	8008602 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80085ea:	2302      	movs	r3, #2
 80085ec:	73fb      	strb	r3, [r7, #15]
    break;
 80085ee:	e008      	b.n	8008602 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80085f0:	2301      	movs	r3, #1
 80085f2:	73fb      	strb	r3, [r7, #15]
    break;
 80085f4:	e005      	b.n	8008602 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80085f6:	2302      	movs	r3, #2
 80085f8:	73fb      	strb	r3, [r7, #15]
    break;
 80085fa:	e002      	b.n	8008602 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80085fc:	2302      	movs	r3, #2
 80085fe:	73fb      	strb	r3, [r7, #15]
    break;
 8008600:	bf00      	nop
  }
  return usb_status;
 8008602:	7bfb      	ldrb	r3, [r7, #15]
}
 8008604:	4618      	mov	r0, r3
 8008606:	3714      	adds	r7, #20
 8008608:	46bd      	mov	sp, r7
 800860a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860e:	4770      	bx	lr

08008610 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b084      	sub	sp, #16
 8008614:	af00      	add	r7, sp, #0
 8008616:	4603      	mov	r3, r0
 8008618:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800861a:	79fb      	ldrb	r3, [r7, #7]
 800861c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800861e:	79fb      	ldrb	r3, [r7, #7]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d102      	bne.n	800862a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8008624:	2301      	movs	r3, #1
 8008626:	73fb      	strb	r3, [r7, #15]
 8008628:	e001      	b.n	800862e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800862a:	2300      	movs	r3, #0
 800862c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800862e:	7bfb      	ldrb	r3, [r7, #15]
 8008630:	461a      	mov	r2, r3
 8008632:	2101      	movs	r1, #1
 8008634:	4803      	ldr	r0, [pc, #12]	; (8008644 <MX_DriverVbusFS+0x34>)
 8008636:	f7f8 ff63 	bl	8001500 <HAL_GPIO_WritePin>
}
 800863a:	bf00      	nop
 800863c:	3710      	adds	r7, #16
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}
 8008642:	bf00      	nop
 8008644:	40020800 	.word	0x40020800

08008648 <__errno>:
 8008648:	4b01      	ldr	r3, [pc, #4]	; (8008650 <__errno+0x8>)
 800864a:	6818      	ldr	r0, [r3, #0]
 800864c:	4770      	bx	lr
 800864e:	bf00      	nop
 8008650:	2000002c 	.word	0x2000002c

08008654 <__libc_init_array>:
 8008654:	b570      	push	{r4, r5, r6, lr}
 8008656:	4d0d      	ldr	r5, [pc, #52]	; (800868c <__libc_init_array+0x38>)
 8008658:	4c0d      	ldr	r4, [pc, #52]	; (8008690 <__libc_init_array+0x3c>)
 800865a:	1b64      	subs	r4, r4, r5
 800865c:	10a4      	asrs	r4, r4, #2
 800865e:	2600      	movs	r6, #0
 8008660:	42a6      	cmp	r6, r4
 8008662:	d109      	bne.n	8008678 <__libc_init_array+0x24>
 8008664:	4d0b      	ldr	r5, [pc, #44]	; (8008694 <__libc_init_array+0x40>)
 8008666:	4c0c      	ldr	r4, [pc, #48]	; (8008698 <__libc_init_array+0x44>)
 8008668:	f000 f8f8 	bl	800885c <_init>
 800866c:	1b64      	subs	r4, r4, r5
 800866e:	10a4      	asrs	r4, r4, #2
 8008670:	2600      	movs	r6, #0
 8008672:	42a6      	cmp	r6, r4
 8008674:	d105      	bne.n	8008682 <__libc_init_array+0x2e>
 8008676:	bd70      	pop	{r4, r5, r6, pc}
 8008678:	f855 3b04 	ldr.w	r3, [r5], #4
 800867c:	4798      	blx	r3
 800867e:	3601      	adds	r6, #1
 8008680:	e7ee      	b.n	8008660 <__libc_init_array+0xc>
 8008682:	f855 3b04 	ldr.w	r3, [r5], #4
 8008686:	4798      	blx	r3
 8008688:	3601      	adds	r6, #1
 800868a:	e7f2      	b.n	8008672 <__libc_init_array+0x1e>
 800868c:	08008898 	.word	0x08008898
 8008690:	08008898 	.word	0x08008898
 8008694:	08008898 	.word	0x08008898
 8008698:	0800889c 	.word	0x0800889c

0800869c <malloc>:
 800869c:	4b02      	ldr	r3, [pc, #8]	; (80086a8 <malloc+0xc>)
 800869e:	4601      	mov	r1, r0
 80086a0:	6818      	ldr	r0, [r3, #0]
 80086a2:	f000 b863 	b.w	800876c <_malloc_r>
 80086a6:	bf00      	nop
 80086a8:	2000002c 	.word	0x2000002c

080086ac <free>:
 80086ac:	4b02      	ldr	r3, [pc, #8]	; (80086b8 <free+0xc>)
 80086ae:	4601      	mov	r1, r0
 80086b0:	6818      	ldr	r0, [r3, #0]
 80086b2:	f000 b80b 	b.w	80086cc <_free_r>
 80086b6:	bf00      	nop
 80086b8:	2000002c 	.word	0x2000002c

080086bc <memset>:
 80086bc:	4402      	add	r2, r0
 80086be:	4603      	mov	r3, r0
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d100      	bne.n	80086c6 <memset+0xa>
 80086c4:	4770      	bx	lr
 80086c6:	f803 1b01 	strb.w	r1, [r3], #1
 80086ca:	e7f9      	b.n	80086c0 <memset+0x4>

080086cc <_free_r>:
 80086cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80086ce:	2900      	cmp	r1, #0
 80086d0:	d048      	beq.n	8008764 <_free_r+0x98>
 80086d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086d6:	9001      	str	r0, [sp, #4]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	f1a1 0404 	sub.w	r4, r1, #4
 80086de:	bfb8      	it	lt
 80086e0:	18e4      	addlt	r4, r4, r3
 80086e2:	f000 f8ad 	bl	8008840 <__malloc_lock>
 80086e6:	4a20      	ldr	r2, [pc, #128]	; (8008768 <_free_r+0x9c>)
 80086e8:	9801      	ldr	r0, [sp, #4]
 80086ea:	6813      	ldr	r3, [r2, #0]
 80086ec:	4615      	mov	r5, r2
 80086ee:	b933      	cbnz	r3, 80086fe <_free_r+0x32>
 80086f0:	6063      	str	r3, [r4, #4]
 80086f2:	6014      	str	r4, [r2, #0]
 80086f4:	b003      	add	sp, #12
 80086f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80086fa:	f000 b8a7 	b.w	800884c <__malloc_unlock>
 80086fe:	42a3      	cmp	r3, r4
 8008700:	d90b      	bls.n	800871a <_free_r+0x4e>
 8008702:	6821      	ldr	r1, [r4, #0]
 8008704:	1862      	adds	r2, r4, r1
 8008706:	4293      	cmp	r3, r2
 8008708:	bf04      	itt	eq
 800870a:	681a      	ldreq	r2, [r3, #0]
 800870c:	685b      	ldreq	r3, [r3, #4]
 800870e:	6063      	str	r3, [r4, #4]
 8008710:	bf04      	itt	eq
 8008712:	1852      	addeq	r2, r2, r1
 8008714:	6022      	streq	r2, [r4, #0]
 8008716:	602c      	str	r4, [r5, #0]
 8008718:	e7ec      	b.n	80086f4 <_free_r+0x28>
 800871a:	461a      	mov	r2, r3
 800871c:	685b      	ldr	r3, [r3, #4]
 800871e:	b10b      	cbz	r3, 8008724 <_free_r+0x58>
 8008720:	42a3      	cmp	r3, r4
 8008722:	d9fa      	bls.n	800871a <_free_r+0x4e>
 8008724:	6811      	ldr	r1, [r2, #0]
 8008726:	1855      	adds	r5, r2, r1
 8008728:	42a5      	cmp	r5, r4
 800872a:	d10b      	bne.n	8008744 <_free_r+0x78>
 800872c:	6824      	ldr	r4, [r4, #0]
 800872e:	4421      	add	r1, r4
 8008730:	1854      	adds	r4, r2, r1
 8008732:	42a3      	cmp	r3, r4
 8008734:	6011      	str	r1, [r2, #0]
 8008736:	d1dd      	bne.n	80086f4 <_free_r+0x28>
 8008738:	681c      	ldr	r4, [r3, #0]
 800873a:	685b      	ldr	r3, [r3, #4]
 800873c:	6053      	str	r3, [r2, #4]
 800873e:	4421      	add	r1, r4
 8008740:	6011      	str	r1, [r2, #0]
 8008742:	e7d7      	b.n	80086f4 <_free_r+0x28>
 8008744:	d902      	bls.n	800874c <_free_r+0x80>
 8008746:	230c      	movs	r3, #12
 8008748:	6003      	str	r3, [r0, #0]
 800874a:	e7d3      	b.n	80086f4 <_free_r+0x28>
 800874c:	6825      	ldr	r5, [r4, #0]
 800874e:	1961      	adds	r1, r4, r5
 8008750:	428b      	cmp	r3, r1
 8008752:	bf04      	itt	eq
 8008754:	6819      	ldreq	r1, [r3, #0]
 8008756:	685b      	ldreq	r3, [r3, #4]
 8008758:	6063      	str	r3, [r4, #4]
 800875a:	bf04      	itt	eq
 800875c:	1949      	addeq	r1, r1, r5
 800875e:	6021      	streq	r1, [r4, #0]
 8008760:	6054      	str	r4, [r2, #4]
 8008762:	e7c7      	b.n	80086f4 <_free_r+0x28>
 8008764:	b003      	add	sp, #12
 8008766:	bd30      	pop	{r4, r5, pc}
 8008768:	200000b4 	.word	0x200000b4

0800876c <_malloc_r>:
 800876c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800876e:	1ccd      	adds	r5, r1, #3
 8008770:	f025 0503 	bic.w	r5, r5, #3
 8008774:	3508      	adds	r5, #8
 8008776:	2d0c      	cmp	r5, #12
 8008778:	bf38      	it	cc
 800877a:	250c      	movcc	r5, #12
 800877c:	2d00      	cmp	r5, #0
 800877e:	4606      	mov	r6, r0
 8008780:	db01      	blt.n	8008786 <_malloc_r+0x1a>
 8008782:	42a9      	cmp	r1, r5
 8008784:	d903      	bls.n	800878e <_malloc_r+0x22>
 8008786:	230c      	movs	r3, #12
 8008788:	6033      	str	r3, [r6, #0]
 800878a:	2000      	movs	r0, #0
 800878c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800878e:	f000 f857 	bl	8008840 <__malloc_lock>
 8008792:	4921      	ldr	r1, [pc, #132]	; (8008818 <_malloc_r+0xac>)
 8008794:	680a      	ldr	r2, [r1, #0]
 8008796:	4614      	mov	r4, r2
 8008798:	b99c      	cbnz	r4, 80087c2 <_malloc_r+0x56>
 800879a:	4f20      	ldr	r7, [pc, #128]	; (800881c <_malloc_r+0xb0>)
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	b923      	cbnz	r3, 80087aa <_malloc_r+0x3e>
 80087a0:	4621      	mov	r1, r4
 80087a2:	4630      	mov	r0, r6
 80087a4:	f000 f83c 	bl	8008820 <_sbrk_r>
 80087a8:	6038      	str	r0, [r7, #0]
 80087aa:	4629      	mov	r1, r5
 80087ac:	4630      	mov	r0, r6
 80087ae:	f000 f837 	bl	8008820 <_sbrk_r>
 80087b2:	1c43      	adds	r3, r0, #1
 80087b4:	d123      	bne.n	80087fe <_malloc_r+0x92>
 80087b6:	230c      	movs	r3, #12
 80087b8:	6033      	str	r3, [r6, #0]
 80087ba:	4630      	mov	r0, r6
 80087bc:	f000 f846 	bl	800884c <__malloc_unlock>
 80087c0:	e7e3      	b.n	800878a <_malloc_r+0x1e>
 80087c2:	6823      	ldr	r3, [r4, #0]
 80087c4:	1b5b      	subs	r3, r3, r5
 80087c6:	d417      	bmi.n	80087f8 <_malloc_r+0x8c>
 80087c8:	2b0b      	cmp	r3, #11
 80087ca:	d903      	bls.n	80087d4 <_malloc_r+0x68>
 80087cc:	6023      	str	r3, [r4, #0]
 80087ce:	441c      	add	r4, r3
 80087d0:	6025      	str	r5, [r4, #0]
 80087d2:	e004      	b.n	80087de <_malloc_r+0x72>
 80087d4:	6863      	ldr	r3, [r4, #4]
 80087d6:	42a2      	cmp	r2, r4
 80087d8:	bf0c      	ite	eq
 80087da:	600b      	streq	r3, [r1, #0]
 80087dc:	6053      	strne	r3, [r2, #4]
 80087de:	4630      	mov	r0, r6
 80087e0:	f000 f834 	bl	800884c <__malloc_unlock>
 80087e4:	f104 000b 	add.w	r0, r4, #11
 80087e8:	1d23      	adds	r3, r4, #4
 80087ea:	f020 0007 	bic.w	r0, r0, #7
 80087ee:	1ac2      	subs	r2, r0, r3
 80087f0:	d0cc      	beq.n	800878c <_malloc_r+0x20>
 80087f2:	1a1b      	subs	r3, r3, r0
 80087f4:	50a3      	str	r3, [r4, r2]
 80087f6:	e7c9      	b.n	800878c <_malloc_r+0x20>
 80087f8:	4622      	mov	r2, r4
 80087fa:	6864      	ldr	r4, [r4, #4]
 80087fc:	e7cc      	b.n	8008798 <_malloc_r+0x2c>
 80087fe:	1cc4      	adds	r4, r0, #3
 8008800:	f024 0403 	bic.w	r4, r4, #3
 8008804:	42a0      	cmp	r0, r4
 8008806:	d0e3      	beq.n	80087d0 <_malloc_r+0x64>
 8008808:	1a21      	subs	r1, r4, r0
 800880a:	4630      	mov	r0, r6
 800880c:	f000 f808 	bl	8008820 <_sbrk_r>
 8008810:	3001      	adds	r0, #1
 8008812:	d1dd      	bne.n	80087d0 <_malloc_r+0x64>
 8008814:	e7cf      	b.n	80087b6 <_malloc_r+0x4a>
 8008816:	bf00      	nop
 8008818:	200000b4 	.word	0x200000b4
 800881c:	200000b8 	.word	0x200000b8

08008820 <_sbrk_r>:
 8008820:	b538      	push	{r3, r4, r5, lr}
 8008822:	4d06      	ldr	r5, [pc, #24]	; (800883c <_sbrk_r+0x1c>)
 8008824:	2300      	movs	r3, #0
 8008826:	4604      	mov	r4, r0
 8008828:	4608      	mov	r0, r1
 800882a:	602b      	str	r3, [r5, #0]
 800882c:	f7f8 fab2 	bl	8000d94 <_sbrk>
 8008830:	1c43      	adds	r3, r0, #1
 8008832:	d102      	bne.n	800883a <_sbrk_r+0x1a>
 8008834:	682b      	ldr	r3, [r5, #0]
 8008836:	b103      	cbz	r3, 800883a <_sbrk_r+0x1a>
 8008838:	6023      	str	r3, [r4, #0]
 800883a:	bd38      	pop	{r3, r4, r5, pc}
 800883c:	200008d8 	.word	0x200008d8

08008840 <__malloc_lock>:
 8008840:	4801      	ldr	r0, [pc, #4]	; (8008848 <__malloc_lock+0x8>)
 8008842:	f000 b809 	b.w	8008858 <__retarget_lock_acquire_recursive>
 8008846:	bf00      	nop
 8008848:	200008e0 	.word	0x200008e0

0800884c <__malloc_unlock>:
 800884c:	4801      	ldr	r0, [pc, #4]	; (8008854 <__malloc_unlock+0x8>)
 800884e:	f000 b804 	b.w	800885a <__retarget_lock_release_recursive>
 8008852:	bf00      	nop
 8008854:	200008e0 	.word	0x200008e0

08008858 <__retarget_lock_acquire_recursive>:
 8008858:	4770      	bx	lr

0800885a <__retarget_lock_release_recursive>:
 800885a:	4770      	bx	lr

0800885c <_init>:
 800885c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800885e:	bf00      	nop
 8008860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008862:	bc08      	pop	{r3}
 8008864:	469e      	mov	lr, r3
 8008866:	4770      	bx	lr

08008868 <_fini>:
 8008868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800886a:	bf00      	nop
 800886c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800886e:	bc08      	pop	{r3}
 8008870:	469e      	mov	lr, r3
 8008872:	4770      	bx	lr
