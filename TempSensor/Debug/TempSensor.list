
TempSensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075e0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000574  08007770  08007770  00017770  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ce4  08007ce4  0002028c  2**0
                  CONTENTS
  4 .ARM          00000008  08007ce4  08007ce4  00017ce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007cec  08007cec  0002028c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007cec  08007cec  00017cec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007cf0  08007cf0  00017cf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000028c  20000000  08007cf4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002028c  2**0
                  CONTENTS
 10 .bss          00000280  20000290  20000290  00020290  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000510  20000510  00020290  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002028c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001234a  00000000  00000000  000202bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023fe  00000000  00000000  00032606  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dc0  00000000  00000000  00034a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022aab  00000000  00000000  000357c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010465  00000000  00000000  00058273  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cec43  00000000  00000000  000686d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013731b  2**0
                  CONTENTS, READONLY
 20 .debug_ranges 00000cc0  00000000  00000000  00137370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004a80  00000000  00000000  00138030  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000290 	.word	0x20000290
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007758 	.word	0x08007758

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000294 	.word	0x20000294
 80001cc:	08007758 	.word	0x08007758

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2uiz>:
 8000b2c:	004a      	lsls	r2, r1, #1
 8000b2e:	d211      	bcs.n	8000b54 <__aeabi_d2uiz+0x28>
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d211      	bcs.n	8000b5a <__aeabi_d2uiz+0x2e>
 8000b36:	d50d      	bpl.n	8000b54 <__aeabi_d2uiz+0x28>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d40e      	bmi.n	8000b60 <__aeabi_d2uiz+0x34>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b52:	4770      	bx	lr
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b5e:	d102      	bne.n	8000b66 <__aeabi_d2uiz+0x3a>
 8000b60:	f04f 30ff 	mov.w	r0, #4294967295
 8000b64:	4770      	bx	lr
 8000b66:	f04f 0000 	mov.w	r0, #0
 8000b6a:	4770      	bx	lr

08000b6c <__aeabi_uldivmod>:
 8000b6c:	b953      	cbnz	r3, 8000b84 <__aeabi_uldivmod+0x18>
 8000b6e:	b94a      	cbnz	r2, 8000b84 <__aeabi_uldivmod+0x18>
 8000b70:	2900      	cmp	r1, #0
 8000b72:	bf08      	it	eq
 8000b74:	2800      	cmpeq	r0, #0
 8000b76:	bf1c      	itt	ne
 8000b78:	f04f 31ff 	movne.w	r1, #4294967295
 8000b7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b80:	f000 b9a4 	b.w	8000ecc <__aeabi_idiv0>
 8000b84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b8c:	f000 f83c 	bl	8000c08 <__udivmoddi4>
 8000b90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b98:	b004      	add	sp, #16
 8000b9a:	4770      	bx	lr

08000b9c <__aeabi_d2lz>:
 8000b9c:	b538      	push	{r3, r4, r5, lr}
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	4604      	mov	r4, r0
 8000ba4:	460d      	mov	r5, r1
 8000ba6:	f7ff ff99 	bl	8000adc <__aeabi_dcmplt>
 8000baa:	b928      	cbnz	r0, 8000bb8 <__aeabi_d2lz+0x1c>
 8000bac:	4620      	mov	r0, r4
 8000bae:	4629      	mov	r1, r5
 8000bb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000bb4:	f000 b80a 	b.w	8000bcc <__aeabi_d2ulz>
 8000bb8:	4620      	mov	r0, r4
 8000bba:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000bbe:	f000 f805 	bl	8000bcc <__aeabi_d2ulz>
 8000bc2:	4240      	negs	r0, r0
 8000bc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bc8:	bd38      	pop	{r3, r4, r5, pc}
 8000bca:	bf00      	nop

08000bcc <__aeabi_d2ulz>:
 8000bcc:	b5d0      	push	{r4, r6, r7, lr}
 8000bce:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <__aeabi_d2ulz+0x34>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	4606      	mov	r6, r0
 8000bd4:	460f      	mov	r7, r1
 8000bd6:	f7ff fd0f 	bl	80005f8 <__aeabi_dmul>
 8000bda:	f7ff ffa7 	bl	8000b2c <__aeabi_d2uiz>
 8000bde:	4604      	mov	r4, r0
 8000be0:	f7ff fc90 	bl	8000504 <__aeabi_ui2d>
 8000be4:	4b07      	ldr	r3, [pc, #28]	; (8000c04 <__aeabi_d2ulz+0x38>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	f7ff fd06 	bl	80005f8 <__aeabi_dmul>
 8000bec:	4602      	mov	r2, r0
 8000bee:	460b      	mov	r3, r1
 8000bf0:	4630      	mov	r0, r6
 8000bf2:	4639      	mov	r1, r7
 8000bf4:	f7ff fb48 	bl	8000288 <__aeabi_dsub>
 8000bf8:	f7ff ff98 	bl	8000b2c <__aeabi_d2uiz>
 8000bfc:	4621      	mov	r1, r4
 8000bfe:	bdd0      	pop	{r4, r6, r7, pc}
 8000c00:	3df00000 	.word	0x3df00000
 8000c04:	41f00000 	.word	0x41f00000

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468c      	mov	ip, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	f040 8083 	bne.w	8000d1e <__udivmoddi4+0x116>
 8000c18:	428a      	cmp	r2, r1
 8000c1a:	4617      	mov	r7, r2
 8000c1c:	d947      	bls.n	8000cae <__udivmoddi4+0xa6>
 8000c1e:	fab2 f282 	clz	r2, r2
 8000c22:	b142      	cbz	r2, 8000c36 <__udivmoddi4+0x2e>
 8000c24:	f1c2 0020 	rsb	r0, r2, #32
 8000c28:	fa24 f000 	lsr.w	r0, r4, r0
 8000c2c:	4091      	lsls	r1, r2
 8000c2e:	4097      	lsls	r7, r2
 8000c30:	ea40 0c01 	orr.w	ip, r0, r1
 8000c34:	4094      	lsls	r4, r2
 8000c36:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c3a:	0c23      	lsrs	r3, r4, #16
 8000c3c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c40:	fa1f fe87 	uxth.w	lr, r7
 8000c44:	fb08 c116 	mls	r1, r8, r6, ip
 8000c48:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c50:	4299      	cmp	r1, r3
 8000c52:	d909      	bls.n	8000c68 <__udivmoddi4+0x60>
 8000c54:	18fb      	adds	r3, r7, r3
 8000c56:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c5a:	f080 8119 	bcs.w	8000e90 <__udivmoddi4+0x288>
 8000c5e:	4299      	cmp	r1, r3
 8000c60:	f240 8116 	bls.w	8000e90 <__udivmoddi4+0x288>
 8000c64:	3e02      	subs	r6, #2
 8000c66:	443b      	add	r3, r7
 8000c68:	1a5b      	subs	r3, r3, r1
 8000c6a:	b2a4      	uxth	r4, r4
 8000c6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c70:	fb08 3310 	mls	r3, r8, r0, r3
 8000c74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c78:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c7c:	45a6      	cmp	lr, r4
 8000c7e:	d909      	bls.n	8000c94 <__udivmoddi4+0x8c>
 8000c80:	193c      	adds	r4, r7, r4
 8000c82:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c86:	f080 8105 	bcs.w	8000e94 <__udivmoddi4+0x28c>
 8000c8a:	45a6      	cmp	lr, r4
 8000c8c:	f240 8102 	bls.w	8000e94 <__udivmoddi4+0x28c>
 8000c90:	3802      	subs	r0, #2
 8000c92:	443c      	add	r4, r7
 8000c94:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c98:	eba4 040e 	sub.w	r4, r4, lr
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	b11d      	cbz	r5, 8000ca8 <__udivmoddi4+0xa0>
 8000ca0:	40d4      	lsrs	r4, r2
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	e9c5 4300 	strd	r4, r3, [r5]
 8000ca8:	4631      	mov	r1, r6
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	b902      	cbnz	r2, 8000cb2 <__udivmoddi4+0xaa>
 8000cb0:	deff      	udf	#255	; 0xff
 8000cb2:	fab2 f282 	clz	r2, r2
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	d150      	bne.n	8000d5c <__udivmoddi4+0x154>
 8000cba:	1bcb      	subs	r3, r1, r7
 8000cbc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cc0:	fa1f f887 	uxth.w	r8, r7
 8000cc4:	2601      	movs	r6, #1
 8000cc6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cca:	0c21      	lsrs	r1, r4, #16
 8000ccc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cd4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cd8:	428b      	cmp	r3, r1
 8000cda:	d907      	bls.n	8000cec <__udivmoddi4+0xe4>
 8000cdc:	1879      	adds	r1, r7, r1
 8000cde:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ce2:	d202      	bcs.n	8000cea <__udivmoddi4+0xe2>
 8000ce4:	428b      	cmp	r3, r1
 8000ce6:	f200 80e9 	bhi.w	8000ebc <__udivmoddi4+0x2b4>
 8000cea:	4684      	mov	ip, r0
 8000cec:	1ac9      	subs	r1, r1, r3
 8000cee:	b2a3      	uxth	r3, r4
 8000cf0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cf4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cf8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cfc:	fb08 f800 	mul.w	r8, r8, r0
 8000d00:	45a0      	cmp	r8, r4
 8000d02:	d907      	bls.n	8000d14 <__udivmoddi4+0x10c>
 8000d04:	193c      	adds	r4, r7, r4
 8000d06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x10a>
 8000d0c:	45a0      	cmp	r8, r4
 8000d0e:	f200 80d9 	bhi.w	8000ec4 <__udivmoddi4+0x2bc>
 8000d12:	4618      	mov	r0, r3
 8000d14:	eba4 0408 	sub.w	r4, r4, r8
 8000d18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d1c:	e7bf      	b.n	8000c9e <__udivmoddi4+0x96>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0x12e>
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	f000 80b1 	beq.w	8000e8a <__udivmoddi4+0x282>
 8000d28:	2600      	movs	r6, #0
 8000d2a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2e:	4630      	mov	r0, r6
 8000d30:	4631      	mov	r1, r6
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f683 	clz	r6, r3
 8000d3a:	2e00      	cmp	r6, #0
 8000d3c:	d14a      	bne.n	8000dd4 <__udivmoddi4+0x1cc>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0x140>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80b8 	bhi.w	8000eb8 <__udivmoddi4+0x2b0>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	468c      	mov	ip, r1
 8000d52:	2d00      	cmp	r5, #0
 8000d54:	d0a8      	beq.n	8000ca8 <__udivmoddi4+0xa0>
 8000d56:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d5a:	e7a5      	b.n	8000ca8 <__udivmoddi4+0xa0>
 8000d5c:	f1c2 0320 	rsb	r3, r2, #32
 8000d60:	fa20 f603 	lsr.w	r6, r0, r3
 8000d64:	4097      	lsls	r7, r2
 8000d66:	fa01 f002 	lsl.w	r0, r1, r2
 8000d6a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d6e:	40d9      	lsrs	r1, r3
 8000d70:	4330      	orrs	r0, r6
 8000d72:	0c03      	lsrs	r3, r0, #16
 8000d74:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d78:	fa1f f887 	uxth.w	r8, r7
 8000d7c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d84:	fb06 f108 	mul.w	r1, r6, r8
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x19c>
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d96:	f080 808d 	bcs.w	8000eb4 <__udivmoddi4+0x2ac>
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	f240 808a 	bls.w	8000eb4 <__udivmoddi4+0x2ac>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	443b      	add	r3, r7
 8000da4:	1a5b      	subs	r3, r3, r1
 8000da6:	b281      	uxth	r1, r0
 8000da8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dac:	fb0e 3310 	mls	r3, lr, r0, r3
 8000db0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000db4:	fb00 f308 	mul.w	r3, r0, r8
 8000db8:	428b      	cmp	r3, r1
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x1c4>
 8000dbc:	1879      	adds	r1, r7, r1
 8000dbe:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dc2:	d273      	bcs.n	8000eac <__udivmoddi4+0x2a4>
 8000dc4:	428b      	cmp	r3, r1
 8000dc6:	d971      	bls.n	8000eac <__udivmoddi4+0x2a4>
 8000dc8:	3802      	subs	r0, #2
 8000dca:	4439      	add	r1, r7
 8000dcc:	1acb      	subs	r3, r1, r3
 8000dce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000dd2:	e778      	b.n	8000cc6 <__udivmoddi4+0xbe>
 8000dd4:	f1c6 0c20 	rsb	ip, r6, #32
 8000dd8:	fa03 f406 	lsl.w	r4, r3, r6
 8000ddc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000de0:	431c      	orrs	r4, r3
 8000de2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000de6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dee:	fa21 f10c 	lsr.w	r1, r1, ip
 8000df2:	431f      	orrs	r7, r3
 8000df4:	0c3b      	lsrs	r3, r7, #16
 8000df6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dfa:	fa1f f884 	uxth.w	r8, r4
 8000dfe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e02:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e06:	fb09 fa08 	mul.w	sl, r9, r8
 8000e0a:	458a      	cmp	sl, r1
 8000e0c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e10:	fa00 f306 	lsl.w	r3, r0, r6
 8000e14:	d908      	bls.n	8000e28 <__udivmoddi4+0x220>
 8000e16:	1861      	adds	r1, r4, r1
 8000e18:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e1c:	d248      	bcs.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e1e:	458a      	cmp	sl, r1
 8000e20:	d946      	bls.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	4421      	add	r1, r4
 8000e28:	eba1 010a 	sub.w	r1, r1, sl
 8000e2c:	b2bf      	uxth	r7, r7
 8000e2e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e32:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e36:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e3a:	fb00 f808 	mul.w	r8, r0, r8
 8000e3e:	45b8      	cmp	r8, r7
 8000e40:	d907      	bls.n	8000e52 <__udivmoddi4+0x24a>
 8000e42:	19e7      	adds	r7, r4, r7
 8000e44:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e48:	d22e      	bcs.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e4a:	45b8      	cmp	r8, r7
 8000e4c:	d92c      	bls.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4427      	add	r7, r4
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	eba7 0708 	sub.w	r7, r7, r8
 8000e5a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5e:	454f      	cmp	r7, r9
 8000e60:	46c6      	mov	lr, r8
 8000e62:	4649      	mov	r1, r9
 8000e64:	d31a      	bcc.n	8000e9c <__udivmoddi4+0x294>
 8000e66:	d017      	beq.n	8000e98 <__udivmoddi4+0x290>
 8000e68:	b15d      	cbz	r5, 8000e82 <__udivmoddi4+0x27a>
 8000e6a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e6e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e72:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e76:	40f2      	lsrs	r2, r6
 8000e78:	ea4c 0202 	orr.w	r2, ip, r2
 8000e7c:	40f7      	lsrs	r7, r6
 8000e7e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e82:	2600      	movs	r6, #0
 8000e84:	4631      	mov	r1, r6
 8000e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e8a:	462e      	mov	r6, r5
 8000e8c:	4628      	mov	r0, r5
 8000e8e:	e70b      	b.n	8000ca8 <__udivmoddi4+0xa0>
 8000e90:	4606      	mov	r6, r0
 8000e92:	e6e9      	b.n	8000c68 <__udivmoddi4+0x60>
 8000e94:	4618      	mov	r0, r3
 8000e96:	e6fd      	b.n	8000c94 <__udivmoddi4+0x8c>
 8000e98:	4543      	cmp	r3, r8
 8000e9a:	d2e5      	bcs.n	8000e68 <__udivmoddi4+0x260>
 8000e9c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ea0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ea4:	3801      	subs	r0, #1
 8000ea6:	e7df      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	e7d2      	b.n	8000e52 <__udivmoddi4+0x24a>
 8000eac:	4660      	mov	r0, ip
 8000eae:	e78d      	b.n	8000dcc <__udivmoddi4+0x1c4>
 8000eb0:	4681      	mov	r9, r0
 8000eb2:	e7b9      	b.n	8000e28 <__udivmoddi4+0x220>
 8000eb4:	4666      	mov	r6, ip
 8000eb6:	e775      	b.n	8000da4 <__udivmoddi4+0x19c>
 8000eb8:	4630      	mov	r0, r6
 8000eba:	e74a      	b.n	8000d52 <__udivmoddi4+0x14a>
 8000ebc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec0:	4439      	add	r1, r7
 8000ec2:	e713      	b.n	8000cec <__udivmoddi4+0xe4>
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	443c      	add	r4, r7
 8000ec8:	e724      	b.n	8000d14 <__udivmoddi4+0x10c>
 8000eca:	bf00      	nop

08000ecc <__aeabi_idiv0>:
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop

08000ed0 <USART2_IRQHandler>:
//* Input Parameters      : none
//* Output Parameters     : none
//*--------------------------------------------------------------------------------------
#ifdef MASTER_CMD_USART2
void USART2_IRQHandler(void)
{
 8000ed0:	b590      	push	{r4, r7, lr}
 8000ed2:	b093      	sub	sp, #76	; 0x4c
 8000ed4:	af00      	add	r7, sp, #0
	UART_HandleTypeDef huart;
	uint8_t buffer[4];
//	CmdPacket[CmdCounter] = (unsigned char)USART_ReceiveData(USART2);
	CmdPacket[CmdCounter] = (unsigned char)HAL_UART_Receive(&huart, buffer , sizeof(buffer), HAL_MAX_DELAY);
 8000ed6:	4b30      	ldr	r3, [pc, #192]	; (8000f98 <USART2_IRQHandler+0xc8>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	461c      	mov	r4, r3
 8000edc:	4639      	mov	r1, r7
 8000ede:	1d38      	adds	r0, r7, #4
 8000ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee4:	2204      	movs	r2, #4
 8000ee6:	f003 fc79 	bl	80047dc <HAL_UART_Receive>
 8000eea:	4603      	mov	r3, r0
 8000eec:	461a      	mov	r2, r3
 8000eee:	4b2b      	ldr	r3, [pc, #172]	; (8000f9c <USART2_IRQHandler+0xcc>)
 8000ef0:	551a      	strb	r2, [r3, r4]
//	ToggleGpioPin(LED_B);

	//testing of packet header
	if (((CmdCounter == 0) && (CmdPacket[0] == '!')) ||	//fixed start character
 8000ef2:	4b29      	ldr	r3, [pc, #164]	; (8000f98 <USART2_IRQHandler+0xc8>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d103      	bne.n	8000f02 <USART2_IRQHandler+0x32>
 8000efa:	4b28      	ldr	r3, [pc, #160]	; (8000f9c <USART2_IRQHandler+0xcc>)
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	2b21      	cmp	r3, #33	; 0x21
 8000f00:	d017      	beq.n	8000f32 <USART2_IRQHandler+0x62>
   		((CmdCounter == 1) && (CmdPacket[1] == MT )) || //Module type
 8000f02:	4b25      	ldr	r3, [pc, #148]	; (8000f98 <USART2_IRQHandler+0xc8>)
 8000f04:	781b      	ldrb	r3, [r3, #0]
	if (((CmdCounter == 0) && (CmdPacket[0] == '!')) ||	//fixed start character
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d105      	bne.n	8000f16 <USART2_IRQHandler+0x46>
   		((CmdCounter == 1) && (CmdPacket[1] == MT )) || //Module type
 8000f0a:	4b24      	ldr	r3, [pc, #144]	; (8000f9c <USART2_IRQHandler+0xcc>)
 8000f0c:	785a      	ldrb	r2, [r3, #1]
 8000f0e:	4b24      	ldr	r3, [pc, #144]	; (8000fa0 <USART2_IRQHandler+0xd0>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	429a      	cmp	r2, r3
 8000f14:	d00d      	beq.n	8000f32 <USART2_IRQHandler+0x62>
   		((CmdCounter == 2) && (CmdPacket[2] == MA )) || //Module address
 8000f16:	4b20      	ldr	r3, [pc, #128]	; (8000f98 <USART2_IRQHandler+0xc8>)
 8000f18:	781b      	ldrb	r3, [r3, #0]
   		((CmdCounter == 1) && (CmdPacket[1] == MT )) || //Module type
 8000f1a:	2b02      	cmp	r3, #2
 8000f1c:	d105      	bne.n	8000f2a <USART2_IRQHandler+0x5a>
   		((CmdCounter == 2) && (CmdPacket[2] == MA )) || //Module address
 8000f1e:	4b1f      	ldr	r3, [pc, #124]	; (8000f9c <USART2_IRQHandler+0xcc>)
 8000f20:	789a      	ldrb	r2, [r3, #2]
 8000f22:	4b20      	ldr	r3, [pc, #128]	; (8000fa4 <USART2_IRQHandler+0xd4>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	429a      	cmp	r2, r3
 8000f28:	d003      	beq.n	8000f32 <USART2_IRQHandler+0x62>
   		(CmdCounter > 2))
 8000f2a:	4b1b      	ldr	r3, [pc, #108]	; (8000f98 <USART2_IRQHandler+0xc8>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
   		((CmdCounter == 2) && (CmdPacket[2] == MA )) || //Module address
 8000f2e:	2b02      	cmp	r3, #2
 8000f30:	d906      	bls.n	8000f40 <USART2_IRQHandler+0x70>
	{
		++CmdCounter;
 8000f32:	4b19      	ldr	r3, [pc, #100]	; (8000f98 <USART2_IRQHandler+0xc8>)
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	3301      	adds	r3, #1
 8000f38:	b2da      	uxtb	r2, r3
 8000f3a:	4b17      	ldr	r3, [pc, #92]	; (8000f98 <USART2_IRQHandler+0xc8>)
 8000f3c:	701a      	strb	r2, [r3, #0]
 8000f3e:	e002      	b.n	8000f46 <USART2_IRQHandler+0x76>
	}
	else
	{
		CmdCounter = 0;
 8000f40:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <USART2_IRQHandler+0xc8>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	701a      	strb	r2, [r3, #0]
	}

	//packet is too long
	if(CmdCounter > CMD_PACK_MAX)
 8000f46:	4b14      	ldr	r3, [pc, #80]	; (8000f98 <USART2_IRQHandler+0xc8>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	2b16      	cmp	r3, #22
 8000f4c:	d902      	bls.n	8000f54 <USART2_IRQHandler+0x84>
		CmdCounter = 0;
 8000f4e:	4b12      	ldr	r3, [pc, #72]	; (8000f98 <USART2_IRQHandler+0xc8>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	701a      	strb	r2, [r3, #0]

  	//testing of the end of packet
	if((CmdCounter >= CMD_PACK_MIN) && (CmdCounter == (CmdPacket[3] + 6))) //expected nr. of bytes received
 8000f54:	4b10      	ldr	r3, [pc, #64]	; (8000f98 <USART2_IRQHandler+0xc8>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	2b07      	cmp	r3, #7
 8000f5a:	d914      	bls.n	8000f86 <USART2_IRQHandler+0xb6>
 8000f5c:	4b0e      	ldr	r3, [pc, #56]	; (8000f98 <USART2_IRQHandler+0xc8>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	461a      	mov	r2, r3
 8000f62:	4b0e      	ldr	r3, [pc, #56]	; (8000f9c <USART2_IRQHandler+0xcc>)
 8000f64:	78db      	ldrb	r3, [r3, #3]
 8000f66:	3306      	adds	r3, #6
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d10c      	bne.n	8000f86 <USART2_IRQHandler+0xb6>
	{
		CmdReceived = 1;				//CMD ready for decode
 8000f6c:	4b0e      	ldr	r3, [pc, #56]	; (8000fa8 <USART2_IRQHandler+0xd8>)
 8000f6e:	2201      	movs	r2, #1
 8000f70:	701a      	strb	r2, [r3, #0]
		ToggleGpioPin(LED_O);
 8000f72:	2001      	movs	r0, #1
 8000f74:	f000 fc48 	bl	8001808 <ToggleGpioPin>
//		USART_ITConfig(USART2, UART_IT_RXNE, DISABLE);; //cmd RX disabled until command executed
		__HAL_UART_DISABLE_IT(&huart,UART_IT_RXNE );
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	68da      	ldr	r2, [r3, #12]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	f022 0220 	bic.w	r2, r2, #32
 8000f82:	60da      	str	r2, [r3, #12]
 8000f84:	e003      	b.n	8000f8e <USART2_IRQHandler+0xbe>
	}
	else
	{
		CmdReceived = 0;
 8000f86:	4b08      	ldr	r3, [pc, #32]	; (8000fa8 <USART2_IRQHandler+0xd8>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	701a      	strb	r2, [r3, #0]
	}
}
 8000f8c:	bf00      	nop
 8000f8e:	bf00      	nop
 8000f90:	374c      	adds	r7, #76	; 0x4c
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd90      	pop	{r4, r7, pc}
 8000f96:	bf00      	nop
 8000f98:	2000037d 	.word	0x2000037d
 8000f9c:	20000328 	.word	0x20000328
 8000fa0:	200002f4 	.word	0x200002f4
 8000fa4:	200002f5 	.word	0x200002f5
 8000fa8:	2000033e 	.word	0x2000033e

08000fac <main>:
//* Input Parameters      : none
//* Output Parameters     : none
//*--------------------------------------------------------------------------------------

int main(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
	//Initial setup of system & peripherals
    SystemInitSetup();
 8000fb0:	f000 fa62 	bl	8001478 <SystemInitSetup>

	//Main never-ending loop
	while(2)
    {
		SystemTask();
 8000fb4:	f001 f9fb 	bl	80023ae <SystemTask>
		MeasurementTask();
 8000fb8:	f001 fa02 	bl	80023c0 <MeasurementTask>
		MasterCmdTask();
 8000fbc:	f001 fad4 	bl	8002568 <MasterCmdTask>
		SystemTask();
 8000fc0:	e7f8      	b.n	8000fb4 <main+0x8>
	...

08000fc4 <GpioInitialSetup>:
//* Input Parameters      : none
//* Output Parameters     : none
//*--------------------------------------------------------------------------------------

void GpioInitialSetup(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b08e      	sub	sp, #56	; 0x38
 8000fc8:	af00      	add	r7, sp, #0
//	__GPIOE_CLK_ENABLE();
//	__GPIOF_CLK_ENABLE();
//	__GPIOG_CLK_ENABLE();
//	__GPIOH_CLK_ENABLE();
//	__GPIOI_CLK_ENABLE();
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	623b      	str	r3, [r7, #32]
 8000fce:	4baa      	ldr	r3, [pc, #680]	; (8001278 <GpioInitialSetup+0x2b4>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	4aa9      	ldr	r2, [pc, #676]	; (8001278 <GpioInitialSetup+0x2b4>)
 8000fd4:	f043 0301 	orr.w	r3, r3, #1
 8000fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fda:	4ba7      	ldr	r3, [pc, #668]	; (8001278 <GpioInitialSetup+0x2b4>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	623b      	str	r3, [r7, #32]
 8000fe4:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61fb      	str	r3, [r7, #28]
 8000fea:	4ba3      	ldr	r3, [pc, #652]	; (8001278 <GpioInitialSetup+0x2b4>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	4aa2      	ldr	r2, [pc, #648]	; (8001278 <GpioInitialSetup+0x2b4>)
 8000ff0:	f043 0302 	orr.w	r3, r3, #2
 8000ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff6:	4ba0      	ldr	r3, [pc, #640]	; (8001278 <GpioInitialSetup+0x2b4>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	f003 0302 	and.w	r3, r3, #2
 8000ffe:	61fb      	str	r3, [r7, #28]
 8001000:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	61bb      	str	r3, [r7, #24]
 8001006:	4b9c      	ldr	r3, [pc, #624]	; (8001278 <GpioInitialSetup+0x2b4>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	4a9b      	ldr	r2, [pc, #620]	; (8001278 <GpioInitialSetup+0x2b4>)
 800100c:	f043 0304 	orr.w	r3, r3, #4
 8001010:	6313      	str	r3, [r2, #48]	; 0x30
 8001012:	4b99      	ldr	r3, [pc, #612]	; (8001278 <GpioInitialSetup+0x2b4>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	f003 0304 	and.w	r3, r3, #4
 800101a:	61bb      	str	r3, [r7, #24]
 800101c:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	617b      	str	r3, [r7, #20]
 8001022:	4b95      	ldr	r3, [pc, #596]	; (8001278 <GpioInitialSetup+0x2b4>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	4a94      	ldr	r2, [pc, #592]	; (8001278 <GpioInitialSetup+0x2b4>)
 8001028:	f043 0308 	orr.w	r3, r3, #8
 800102c:	6313      	str	r3, [r2, #48]	; 0x30
 800102e:	4b92      	ldr	r3, [pc, #584]	; (8001278 <GpioInitialSetup+0x2b4>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	f003 0308 	and.w	r3, r3, #8
 8001036:	617b      	str	r3, [r7, #20]
 8001038:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	613b      	str	r3, [r7, #16]
 800103e:	4b8e      	ldr	r3, [pc, #568]	; (8001278 <GpioInitialSetup+0x2b4>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	4a8d      	ldr	r2, [pc, #564]	; (8001278 <GpioInitialSetup+0x2b4>)
 8001044:	f043 0310 	orr.w	r3, r3, #16
 8001048:	6313      	str	r3, [r2, #48]	; 0x30
 800104a:	4b8b      	ldr	r3, [pc, #556]	; (8001278 <GpioInitialSetup+0x2b4>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	f003 0310 	and.w	r3, r3, #16
 8001052:	613b      	str	r3, [r7, #16]
 8001054:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	4b87      	ldr	r3, [pc, #540]	; (8001278 <GpioInitialSetup+0x2b4>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	4a86      	ldr	r2, [pc, #536]	; (8001278 <GpioInitialSetup+0x2b4>)
 8001060:	f043 0320 	orr.w	r3, r3, #32
 8001064:	6313      	str	r3, [r2, #48]	; 0x30
 8001066:	4b84      	ldr	r3, [pc, #528]	; (8001278 <GpioInitialSetup+0x2b4>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	f003 0320 	and.w	r3, r3, #32
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	60bb      	str	r3, [r7, #8]
 8001076:	4b80      	ldr	r3, [pc, #512]	; (8001278 <GpioInitialSetup+0x2b4>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	4a7f      	ldr	r2, [pc, #508]	; (8001278 <GpioInitialSetup+0x2b4>)
 800107c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001080:	6313      	str	r3, [r2, #48]	; 0x30
 8001082:	4b7d      	ldr	r3, [pc, #500]	; (8001278 <GpioInitialSetup+0x2b4>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800108a:	60bb      	str	r3, [r7, #8]
 800108c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800108e:	2300      	movs	r3, #0
 8001090:	607b      	str	r3, [r7, #4]
 8001092:	4b79      	ldr	r3, [pc, #484]	; (8001278 <GpioInitialSetup+0x2b4>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	4a78      	ldr	r2, [pc, #480]	; (8001278 <GpioInitialSetup+0x2b4>)
 8001098:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800109c:	6313      	str	r3, [r2, #48]	; 0x30
 800109e:	4b76      	ldr	r3, [pc, #472]	; (8001278 <GpioInitialSetup+0x2b4>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010a6:	607b      	str	r3, [r7, #4]
 80010a8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOI_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	603b      	str	r3, [r7, #0]
 80010ae:	4b72      	ldr	r3, [pc, #456]	; (8001278 <GpioInitialSetup+0x2b4>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	4a71      	ldr	r2, [pc, #452]	; (8001278 <GpioInitialSetup+0x2b4>)
 80010b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010b8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ba:	4b6f      	ldr	r3, [pc, #444]	; (8001278 <GpioInitialSetup+0x2b4>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010c2:	603b      	str	r3, [r7, #0]
 80010c4:	683b      	ldr	r3, [r7, #0]
//	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;		//output mode
//	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;		//push-pull output type
//	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;	//high speed on 30 pF (80 MHz Output max speed on 15 pF)
//	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;	//No pull-up, no pull-down

	GPIO_InitStructure.Mode  = GPIO_MODE_OUTPUT_PP;		//output mode
 80010c6:	2301      	movs	r3, #1
 80010c8:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;	//high speed on 30 pF (80 MHz Output max speed on 15 pF)
 80010ca:	2303      	movs	r3, #3
 80010cc:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStructure.Pull  = GPIO_NOPULL;	//No pull-up, no pull-down
 80010ce:	2300      	movs	r3, #0
 80010d0:	62fb      	str	r3, [r7, #44]	; 0x2c

	//LED_G port setup
	GPIO_InitStructure.Pin = McuGpioPinDef[LED_G];
 80010d2:	4b6a      	ldr	r3, [pc, #424]	; (800127c <GpioInitialSetup+0x2b8>)
 80010d4:	881b      	ldrh	r3, [r3, #0]
 80010d6:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(McuGpioPerDef[LED_G], &GPIO_InitStructure);
 80010d8:	4b69      	ldr	r3, [pc, #420]	; (8001280 <GpioInitialSetup+0x2bc>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80010e0:	4611      	mov	r1, r2
 80010e2:	4618      	mov	r0, r3
 80010e4:	f001 fe16 	bl	8002d14 <HAL_GPIO_Init>
	WriteToGpioPin(LED_G, 0);
 80010e8:	2100      	movs	r1, #0
 80010ea:	2000      	movs	r0, #0
 80010ec:	f000 fb62 	bl	80017b4 <WriteToGpioPin>

	//LED_O port setup
	GPIO_InitStructure.Pin = McuGpioPinDef[LED_O];
 80010f0:	4b62      	ldr	r3, [pc, #392]	; (800127c <GpioInitialSetup+0x2b8>)
 80010f2:	885b      	ldrh	r3, [r3, #2]
 80010f4:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(McuGpioPerDef[LED_O], &GPIO_InitStructure);
 80010f6:	4b62      	ldr	r3, [pc, #392]	; (8001280 <GpioInitialSetup+0x2bc>)
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80010fe:	4611      	mov	r1, r2
 8001100:	4618      	mov	r0, r3
 8001102:	f001 fe07 	bl	8002d14 <HAL_GPIO_Init>
	WriteToGpioPin(LED_O, 0);
 8001106:	2100      	movs	r1, #0
 8001108:	2001      	movs	r0, #1
 800110a:	f000 fb53 	bl	80017b4 <WriteToGpioPin>

	//LED_R port setup
	GPIO_InitStructure.Pin = McuGpioPinDef[LED_R];
 800110e:	4b5b      	ldr	r3, [pc, #364]	; (800127c <GpioInitialSetup+0x2b8>)
 8001110:	889b      	ldrh	r3, [r3, #4]
 8001112:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(McuGpioPerDef[LED_R], &GPIO_InitStructure);
 8001114:	4b5a      	ldr	r3, [pc, #360]	; (8001280 <GpioInitialSetup+0x2bc>)
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800111c:	4611      	mov	r1, r2
 800111e:	4618      	mov	r0, r3
 8001120:	f001 fdf8 	bl	8002d14 <HAL_GPIO_Init>
	WriteToGpioPin(LED_R, 0);
 8001124:	2100      	movs	r1, #0
 8001126:	2002      	movs	r0, #2
 8001128:	f000 fb44 	bl	80017b4 <WriteToGpioPin>

	//LED_B port setup
	GPIO_InitStructure.Pin = McuGpioPinDef[LED_B];
 800112c:	4b53      	ldr	r3, [pc, #332]	; (800127c <GpioInitialSetup+0x2b8>)
 800112e:	88db      	ldrh	r3, [r3, #6]
 8001130:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(McuGpioPerDef[LED_B], &GPIO_InitStructure);
 8001132:	4b53      	ldr	r3, [pc, #332]	; (8001280 <GpioInitialSetup+0x2bc>)
 8001134:	68db      	ldr	r3, [r3, #12]
 8001136:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800113a:	4611      	mov	r1, r2
 800113c:	4618      	mov	r0, r3
 800113e:	f001 fde9 	bl	8002d14 <HAL_GPIO_Init>
	WriteToGpioPin(LED_B, 0);
 8001142:	2100      	movs	r1, #0
 8001144:	2003      	movs	r0, #3
 8001146:	f000 fb35 	bl	80017b4 <WriteToGpioPin>

	//PLED_R port setup
	GPIO_InitStructure.Pin = McuGpioPinDef[PLED_R];
 800114a:	4b4c      	ldr	r3, [pc, #304]	; (800127c <GpioInitialSetup+0x2b8>)
 800114c:	8c1b      	ldrh	r3, [r3, #32]
 800114e:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(McuGpioPerDef[PLED_R], &GPIO_InitStructure);
 8001150:	4b4b      	ldr	r3, [pc, #300]	; (8001280 <GpioInitialSetup+0x2bc>)
 8001152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001154:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001158:	4611      	mov	r1, r2
 800115a:	4618      	mov	r0, r3
 800115c:	f001 fdda 	bl	8002d14 <HAL_GPIO_Init>
	WriteToGpioPin(PLED_R, 0);
 8001160:	2100      	movs	r1, #0
 8001162:	2010      	movs	r0, #16
 8001164:	f000 fb26 	bl	80017b4 <WriteToGpioPin>

	//PLED_G port setup
	GPIO_InitStructure.Pin = McuGpioPinDef[PLED_G];
 8001168:	4b44      	ldr	r3, [pc, #272]	; (800127c <GpioInitialSetup+0x2b8>)
 800116a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800116c:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(McuGpioPerDef[PLED_G], &GPIO_InitStructure);
 800116e:	4b44      	ldr	r3, [pc, #272]	; (8001280 <GpioInitialSetup+0x2bc>)
 8001170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001172:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001176:	4611      	mov	r1, r2
 8001178:	4618      	mov	r0, r3
 800117a:	f001 fdcb 	bl	8002d14 <HAL_GPIO_Init>
	WriteToGpioPin(PLED_G, 0);
 800117e:	2100      	movs	r1, #0
 8001180:	2011      	movs	r0, #17
 8001182:	f000 fb17 	bl	80017b4 <WriteToGpioPin>
//	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;	//high speed on 30 pF (80 MHz Output max speed on 15 pF)
//	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;		//Pull-up, no pull-down
//	GPIO_Init(McuGpioPerDef[TEST_PIN], &GPIO_InitStructure);
//	WriteToGpioPin(TEST_PIN, 1);							//Initial state: logic high

GPIO_InitStructure.Pin   = McuGpioPinDef[TEST_PIN];//TEST_PIN port
 8001186:	4b3d      	ldr	r3, [pc, #244]	; (800127c <GpioInitialSetup+0x2b8>)
 8001188:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800118a:	627b      	str	r3, [r7, #36]	; 0x24
GPIO_InitStructure.Mode  = GPIO_MODE_INPUT;		//input mode
 800118c:	2300      	movs	r3, #0
 800118e:	62bb      	str	r3, [r7, #40]	; 0x28
//GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;	//high speed on 30 pF (80 MHz Output max speed on 15 pF)
 8001190:	2303      	movs	r3, #3
 8001192:	633b      	str	r3, [r7, #48]	; 0x30
GPIO_InitStructure.Pull  = GPIO_PULLUP;		//Pull-up, no pull-down
 8001194:	2301      	movs	r3, #1
 8001196:	62fb      	str	r3, [r7, #44]	; 0x2c
HAL_GPIO_Init(McuGpioPerDef[TEST_PIN], &GPIO_InitStructure);
 8001198:	4b39      	ldr	r3, [pc, #228]	; (8001280 <GpioInitialSetup+0x2bc>)
 800119a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800119c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80011a0:	4611      	mov	r1, r2
 80011a2:	4618      	mov	r0, r3
 80011a4:	f001 fdb6 	bl	8002d14 <HAL_GPIO_Init>
//	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;	//high speed on 30 pF (80 MHz Output max speed on 15 pF)
//	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;	//No pull-up, no pull-down
//	GPIO_Init(McuGpioPerDef[BUTT], &GPIO_InitStructure);

	//common attributes for actuator switches inputs
	GPIO_InitStructure.Mode  = GPIO_MODE_INPUT;		//output mode
 80011a8:	2300      	movs	r3, #0
 80011aa:	62bb      	str	r3, [r7, #40]	; 0x28
//	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;		//push-pull output type - N/A
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;	//high speed on 30 pF (80 MHz Output max speed on 15 pF)
 80011ac:	2303      	movs	r3, #3
 80011ae:	633b      	str	r3, [r7, #48]	; 0x30
#ifdef SIMULATION_MODE
	GPIO_InitStructure.Pull  = GPIO_PULLUP;		//Pull-up, no pull-down
#else
	GPIO_InitStructure.Pull  = GPIO_NOPULL;	//no pull-up, no pull-down
 80011b0:	2300      	movs	r3, #0
 80011b2:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif
	//APS1 port setup
	GPIO_InitStructure.Pin = McuGpioPinDef[APS1];
 80011b4:	4b31      	ldr	r3, [pc, #196]	; (800127c <GpioInitialSetup+0x2b8>)
 80011b6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80011b8:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(McuGpioPerDef[APS1], &GPIO_InitStructure);
 80011ba:	4b31      	ldr	r3, [pc, #196]	; (8001280 <GpioInitialSetup+0x2bc>)
 80011bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011be:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80011c2:	4611      	mov	r1, r2
 80011c4:	4618      	mov	r0, r3
 80011c6:	f001 fda5 	bl	8002d14 <HAL_GPIO_Init>

	//APS2 port setup
	GPIO_InitStructure.Pin = McuGpioPinDef[APS2];
 80011ca:	4b2c      	ldr	r3, [pc, #176]	; (800127c <GpioInitialSetup+0x2b8>)
 80011cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80011ce:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(McuGpioPerDef[APS2], &GPIO_InitStructure);
 80011d0:	4b2b      	ldr	r3, [pc, #172]	; (8001280 <GpioInitialSetup+0x2bc>)
 80011d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80011d8:	4611      	mov	r1, r2
 80011da:	4618      	mov	r0, r3
 80011dc:	f001 fd9a 	bl	8002d14 <HAL_GPIO_Init>

	//APS3 port setup
	GPIO_InitStructure.Pin = McuGpioPinDef[APS3];
 80011e0:	4b26      	ldr	r3, [pc, #152]	; (800127c <GpioInitialSetup+0x2b8>)
 80011e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011e4:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(McuGpioPerDef[APS3], &GPIO_InitStructure);
 80011e6:	4b26      	ldr	r3, [pc, #152]	; (8001280 <GpioInitialSetup+0x2bc>)
 80011e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011ea:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80011ee:	4611      	mov	r1, r2
 80011f0:	4618      	mov	r0, r3
 80011f2:	f001 fd8f 	bl	8002d14 <HAL_GPIO_Init>

	//APS4 port setup
	GPIO_InitStructure.Pin = McuGpioPinDef[APS4];
 80011f6:	4b21      	ldr	r3, [pc, #132]	; (800127c <GpioInitialSetup+0x2b8>)
 80011f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011fa:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(McuGpioPerDef[APS4], &GPIO_InitStructure);
 80011fc:	4b20      	ldr	r3, [pc, #128]	; (8001280 <GpioInitialSetup+0x2bc>)
 80011fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001200:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001204:	4611      	mov	r1, r2
 8001206:	4618      	mov	r0, r3
 8001208:	f001 fd84 	bl	8002d14 <HAL_GPIO_Init>

	//APS5 port setup
	GPIO_InitStructure.Pin = McuGpioPinDef[APS5];
 800120c:	4b1b      	ldr	r3, [pc, #108]	; (800127c <GpioInitialSetup+0x2b8>)
 800120e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001210:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(McuGpioPerDef[APS5], &GPIO_InitStructure);
 8001212:	4b1b      	ldr	r3, [pc, #108]	; (8001280 <GpioInitialSetup+0x2bc>)
 8001214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001216:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800121a:	4611      	mov	r1, r2
 800121c:	4618      	mov	r0, r3
 800121e:	f001 fd79 	bl	8002d14 <HAL_GPIO_Init>

	//CLK_SYN port setup
	GPIO_InitStructure.Pin   = McuGpioPinDef[CLK_SYN];//CLK_SYN port
 8001222:	4b16      	ldr	r3, [pc, #88]	; (800127c <GpioInitialSetup+0x2b8>)
 8001224:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001226:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStructure.Mode  = GPIO_MODE_INPUT;		//input mode
 8001228:	2300      	movs	r3, #0
 800122a:	62bb      	str	r3, [r7, #40]	; 0x28
//	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;	//high speed on 30 pF (80 MHz Output max speed on 15 pF)
 800122c:	2303      	movs	r3, #3
 800122e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStructure.Pull  = GPIO_NOPULL;	//no pull-up, no pull-down
 8001230:	2300      	movs	r3, #0
 8001232:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(McuGpioPerDef[CLK_SYN], &GPIO_InitStructure);
 8001234:	4b12      	ldr	r3, [pc, #72]	; (8001280 <GpioInitialSetup+0x2bc>)
 8001236:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001238:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800123c:	4611      	mov	r1, r2
 800123e:	4618      	mov	r0, r3
 8001240:	f001 fd68 	bl	8002d14 <HAL_GPIO_Init>

	//ALARM port setup
	GPIO_InitStructure.Pin   = McuGpioPinDef[ALARM];//ALARM port
 8001244:	4b0d      	ldr	r3, [pc, #52]	; (800127c <GpioInitialSetup+0x2b8>)
 8001246:	8b9b      	ldrh	r3, [r3, #28]
 8001248:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStructure.Mode  = GPIO_MODE_OUTPUT_PP;		//output mode
 800124a:	2301      	movs	r3, #1
 800124c:	62bb      	str	r3, [r7, #40]	; 0x28
//	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;		//open-drain output type
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;	//high speed on 30 pF (80 MHz Output max speed on 15 pF)
 800124e:	2303      	movs	r3, #3
 8001250:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStructure.Pull  = GPIO_NOPULL;	//No pull-up, no pull-down
 8001252:	2300      	movs	r3, #0
 8001254:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(McuGpioPerDef[ALARM], &GPIO_InitStructure);
 8001256:	4b0a      	ldr	r3, [pc, #40]	; (8001280 <GpioInitialSetup+0x2bc>)
 8001258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800125a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800125e:	4611      	mov	r1, r2
 8001260:	4618      	mov	r0, r3
 8001262:	f001 fd57 	bl	8002d14 <HAL_GPIO_Init>
	WriteToGpioPin(ALARM, 0);						//Initial state: logic low - alarm muted
 8001266:	2100      	movs	r1, #0
 8001268:	200e      	movs	r0, #14
 800126a:	f000 faa3 	bl	80017b4 <WriteToGpioPin>
}
 800126e:	bf00      	nop
 8001270:	3738      	adds	r7, #56	; 0x38
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40023800 	.word	0x40023800
 800127c:	20000064 	.word	0x20000064
 8001280:	20000000 	.word	0x20000000

08001284 <Usart2GpioSetup>:
//* Input Parameters      : none
//* Output Parameters     : none
//*--------------------------------------------------------------------------------------

void Usart2GpioSetup(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0
//	GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_USART2);

//GPIO_InitStructure.Alternate = GPIO_AF7_USART2;

	//USART2_TX port setup
	GPIO_InitStructure.Pin   = McuGpioPinDef[USART2_TX];//USART2_TX port
 800128a:	4b26      	ldr	r3, [pc, #152]	; (8001324 <Usart2GpioSetup+0xa0>)
 800128c:	891b      	ldrh	r3, [r3, #8]
 800128e:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;		//Alternate function Mode
 8001290:	2302      	movs	r3, #2
 8001292:	60bb      	str	r3, [r7, #8]
//	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;		//open-drain output type
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;	//high speed on 30 pF (80 MHz Output max speed on 15 pF)
 8001294:	2303      	movs	r3, #3
 8001296:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.Pull  = GPIO_NOPULL;	//No pull-up, no pull-down
 8001298:	2300      	movs	r3, #0
 800129a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructure.Alternate = GPIO_AF7_USART2;
 800129c:	2307      	movs	r3, #7
 800129e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(McuGpioPerDef[USART2_TX], &GPIO_InitStructure);
 80012a0:	4b21      	ldr	r3, [pc, #132]	; (8001328 <Usart2GpioSetup+0xa4>)
 80012a2:	691b      	ldr	r3, [r3, #16]
 80012a4:	1d3a      	adds	r2, r7, #4
 80012a6:	4611      	mov	r1, r2
 80012a8:	4618      	mov	r0, r3
 80012aa:	f001 fd33 	bl	8002d14 <HAL_GPIO_Init>

	//USART2_RX port setup
	GPIO_InitStructure.Pin   = McuGpioPinDef[USART2_RX];//USART2_RX port
 80012ae:	4b1d      	ldr	r3, [pc, #116]	; (8001324 <Usart2GpioSetup+0xa0>)
 80012b0:	895b      	ldrh	r3, [r3, #10]
 80012b2:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;		//Alternate function Mode
 80012b4:	2302      	movs	r3, #2
 80012b6:	60bb      	str	r3, [r7, #8]
//	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;		//open-drain output type - N/A
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;	//high speed on 30 pF (80 MHz Output max speed on 15 pF)
 80012b8:	2303      	movs	r3, #3
 80012ba:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.Pull  = GPIO_NOPULL;	//No pull-up, no pull-down
 80012bc:	2300      	movs	r3, #0
 80012be:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructure.Alternate = GPIO_AF7_USART2;
 80012c0:	2307      	movs	r3, #7
 80012c2:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(McuGpioPerDef[USART2_RX], &GPIO_InitStructure);
 80012c4:	4b18      	ldr	r3, [pc, #96]	; (8001328 <Usart2GpioSetup+0xa4>)
 80012c6:	695b      	ldr	r3, [r3, #20]
 80012c8:	1d3a      	adds	r2, r7, #4
 80012ca:	4611      	mov	r1, r2
 80012cc:	4618      	mov	r0, r3
 80012ce:	f001 fd21 	bl	8002d14 <HAL_GPIO_Init>

	//USART2_RTS port setup
	GPIO_InitStructure.Pin   = McuGpioPinDef[USART2_RTS];//USART2_RTS port
 80012d2:	4b14      	ldr	r3, [pc, #80]	; (8001324 <Usart2GpioSetup+0xa0>)
 80012d4:	899b      	ldrh	r3, [r3, #12]
 80012d6:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Mode  = GPIO_MODE_INPUT;		//output mode
 80012d8:	2300      	movs	r3, #0
 80012da:	60bb      	str	r3, [r7, #8]
//	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;		//open-drain output type - N/A
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;	//high speed on 30 pF (80 MHz Output max speed on 15 pF)
 80012dc:	2303      	movs	r3, #3
 80012de:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.Pull  = GPIO_NOPULL;	//No pull-up, no pull-down
 80012e0:	2300      	movs	r3, #0
 80012e2:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(McuGpioPerDef[USART2_RTS], &GPIO_InitStructure);
 80012e4:	4b10      	ldr	r3, [pc, #64]	; (8001328 <Usart2GpioSetup+0xa4>)
 80012e6:	699b      	ldr	r3, [r3, #24]
 80012e8:	1d3a      	adds	r2, r7, #4
 80012ea:	4611      	mov	r1, r2
 80012ec:	4618      	mov	r0, r3
 80012ee:	f001 fd11 	bl	8002d14 <HAL_GPIO_Init>

	//USART2_CTS port setup
	GPIO_InitStructure.Pin   = McuGpioPinDef[USART2_CTS];//USART2_CTS port
 80012f2:	4b0c      	ldr	r3, [pc, #48]	; (8001324 <Usart2GpioSetup+0xa0>)
 80012f4:	89db      	ldrh	r3, [r3, #14]
 80012f6:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Mode  = GPIO_MODE_OUTPUT_PP;		//output mode
 80012f8:	2301      	movs	r3, #1
 80012fa:	60bb      	str	r3, [r7, #8]
//	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;		//push-pull output type
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;	//high speed on 30 pF (80 MHz Output max speed on 15 pF)
 80012fc:	2303      	movs	r3, #3
 80012fe:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.Pull  = GPIO_NOPULL;	//No pull-up, no pull-down
 8001300:	2300      	movs	r3, #0
 8001302:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(McuGpioPerDef[USART2_CTS], &GPIO_InitStructure);
 8001304:	4b08      	ldr	r3, [pc, #32]	; (8001328 <Usart2GpioSetup+0xa4>)
 8001306:	69db      	ldr	r3, [r3, #28]
 8001308:	1d3a      	adds	r2, r7, #4
 800130a:	4611      	mov	r1, r2
 800130c:	4618      	mov	r0, r3
 800130e:	f001 fd01 	bl	8002d14 <HAL_GPIO_Init>
	WriteToGpioPin(USART2_CTS, 1);						//initial state - logic high
 8001312:	2101      	movs	r1, #1
 8001314:	2007      	movs	r0, #7
 8001316:	f000 fa4d 	bl	80017b4 <WriteToGpioPin>
}
 800131a:	bf00      	nop
 800131c:	3718      	adds	r7, #24
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	20000064 	.word	0x20000064
 8001328:	20000000 	.word	0x20000000

0800132c <Uart4GpioSetup>:
//* Input Parameters      : none
//* Output Parameters     : none
//*--------------------------------------------------------------------------------------

void Uart4GpioSetup(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b086      	sub	sp, #24
 8001330:	af00      	add	r7, sp, #0
	//UART4 remap to pin PC10 and PC11
//	GPIO_PinAFConfig(GPIOC, GPIO_PinSource10, GPIO_AF_UART4);
//	GPIO_PinAFConfig(GPIOC, GPIO_PinSource11, GPIO_AF_UART4);

	//UART4_TX port setup
	GPIO_InitStructure.Pin   = McuGpioPinDef[UART4_TX];//UART4_TX port
 8001332:	4b1e      	ldr	r3, [pc, #120]	; (80013ac <Uart4GpioSetup+0x80>)
 8001334:	8adb      	ldrh	r3, [r3, #22]
 8001336:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;			//Alternate function Mode
 8001338:	2302      	movs	r3, #2
 800133a:	60bb      	str	r3, [r7, #8]
//	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;			//open-drain output type
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;		//high speed on 30 pF (80 MHz Output max speed on 15 pF)
 800133c:	2303      	movs	r3, #3
 800133e:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.Pull  = GPIO_NOPULL;		//no pull-up
 8001340:	2300      	movs	r3, #0
 8001342:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructure.Alternate = GPIO_AF8_UART4;  /*  AF8  */
 8001344:	2308      	movs	r3, #8
 8001346:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(McuGpioPerDef[UART4_TX], &GPIO_InitStructure);
 8001348:	4b19      	ldr	r3, [pc, #100]	; (80013b0 <Uart4GpioSetup+0x84>)
 800134a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800134c:	1d3a      	adds	r2, r7, #4
 800134e:	4611      	mov	r1, r2
 8001350:	4618      	mov	r0, r3
 8001352:	f001 fcdf 	bl	8002d14 <HAL_GPIO_Init>

	//UART4_RX port setup
	GPIO_InitStructure.Pin   = McuGpioPinDef[UART4_RX];//UART4_TX port
 8001356:	4b15      	ldr	r3, [pc, #84]	; (80013ac <Uart4GpioSetup+0x80>)
 8001358:	8b1b      	ldrh	r3, [r3, #24]
 800135a:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;			//Alternate function Mode
 800135c:	2302      	movs	r3, #2
 800135e:	60bb      	str	r3, [r7, #8]
//	GPIO_InitStructure.OType = GPIO_OType_OD;			//open-drain output type
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;		//high speed on 30 pF (80 MHz Output max speed on 15 pF)
 8001360:	2303      	movs	r3, #3
 8001362:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.Pull  = GPIO_NOPULL;		//no pull-up
 8001364:	2300      	movs	r3, #0
 8001366:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructure.Alternate = GPIO_AF8_UART4;
 8001368:	2308      	movs	r3, #8
 800136a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(McuGpioPerDef[UART4_RX], &GPIO_InitStructure);
 800136c:	4b10      	ldr	r3, [pc, #64]	; (80013b0 <Uart4GpioSetup+0x84>)
 800136e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001370:	1d3a      	adds	r2, r7, #4
 8001372:	4611      	mov	r1, r2
 8001374:	4618      	mov	r0, r3
 8001376:	f001 fccd 	bl	8002d14 <HAL_GPIO_Init>

	//RS485_DIR2 port setup
	GPIO_InitStructure.Pin   = McuGpioPinDef[RS485_DIR2];//RS485_DIR2 port
 800137a:	4b0c      	ldr	r3, [pc, #48]	; (80013ac <Uart4GpioSetup+0x80>)
 800137c:	8b5b      	ldrh	r3, [r3, #26]
 800137e:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Mode  = GPIO_MODE_OUTPUT_PP;		//output mode
 8001380:	2301      	movs	r3, #1
 8001382:	60bb      	str	r3, [r7, #8]
//	GPIO_InitStructure.OType = GPIO_OType_OD;		//open-drain output type
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;	//high speed on 30 pF (80 MHz Output max speed on 15 pF)
 8001384:	2303      	movs	r3, #3
 8001386:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.Pull  = GPIO_NOPULL;	//No pull-up, no pull-down
 8001388:	2300      	movs	r3, #0
 800138a:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(McuGpioPerDef[RS485_DIR2], &GPIO_InitStructure);
 800138c:	4b08      	ldr	r3, [pc, #32]	; (80013b0 <Uart4GpioSetup+0x84>)
 800138e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001390:	1d3a      	adds	r2, r7, #4
 8001392:	4611      	mov	r1, r2
 8001394:	4618      	mov	r0, r3
 8001396:	f001 fcbd 	bl	8002d14 <HAL_GPIO_Init>
	WriteToGpioPin(RS485_DIR2, 0);						//Initial state: logic low - RX mode
 800139a:	2100      	movs	r1, #0
 800139c:	200d      	movs	r0, #13
 800139e:	f000 fa09 	bl	80017b4 <WriteToGpioPin>
}
 80013a2:	bf00      	nop
 80013a4:	3718      	adds	r7, #24
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20000064 	.word	0x20000064
 80013b0:	20000000 	.word	0x20000000

080013b4 <Usart6GpioSetup>:
//* Input Parameters      : none
//* Output Parameters     : none
//*--------------------------------------------------------------------------------------

void Usart6GpioSetup(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af00      	add	r7, sp, #0
//	GPIO_PinAFConfig(GPIOC, GPIO_PinSource7, GPIO_AF_USART6);


#ifdef MASTER_CMD_USART2
	//USART6_TX port setup
	GPIO_InitStructure.Pin   = McuGpioPinDef[USART6_TX];//USART6_TX port
 80013ba:	4b1e      	ldr	r3, [pc, #120]	; (8001434 <Usart6GpioSetup+0x80>)
 80013bc:	8a1b      	ldrh	r3, [r3, #16]
 80013be:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;		//Alternate function Mode
 80013c0:	2302      	movs	r3, #2
 80013c2:	60bb      	str	r3, [r7, #8]
//	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;		//open-drain output type
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;	//high speed on 30 pF (80 MHz Output max speed on 15 pF)
 80013c4:	2303      	movs	r3, #3
 80013c6:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.Pull  = GPIO_NOPULL;	//No pull-up, no pull-down
 80013c8:	2300      	movs	r3, #0
 80013ca:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructure.Alternate = GPIO_AF8_USART6;
 80013cc:	2308      	movs	r3, #8
 80013ce:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(McuGpioPerDef[USART6_TX], &GPIO_InitStructure);
 80013d0:	4b19      	ldr	r3, [pc, #100]	; (8001438 <Usart6GpioSetup+0x84>)
 80013d2:	6a1b      	ldr	r3, [r3, #32]
 80013d4:	1d3a      	adds	r2, r7, #4
 80013d6:	4611      	mov	r1, r2
 80013d8:	4618      	mov	r0, r3
 80013da:	f001 fc9b 	bl	8002d14 <HAL_GPIO_Init>
	GPIO_InitStructure.Alternate = GPIO_AF8_USART6;
	HAL_GPIO_Init(McuGpioPerDef[USART6_TX], &GPIO_InitStructure);
#endif

	//USART6_RX port setup
	GPIO_InitStructure.Pin   = McuGpioPinDef[USART6_RX];//USART6_RX port
 80013de:	4b15      	ldr	r3, [pc, #84]	; (8001434 <Usart6GpioSetup+0x80>)
 80013e0:	8a5b      	ldrh	r3, [r3, #18]
 80013e2:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;		//Alternate function Mode
 80013e4:	2302      	movs	r3, #2
 80013e6:	60bb      	str	r3, [r7, #8]
//	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;		//open-drain output type - N/A
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;	//high speed on 30 pF (80 MHz Output max speed on 15 pF)
 80013e8:	2303      	movs	r3, #3
 80013ea:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.Pull  = GPIO_NOPULL;	//No pull-up, no pull-down
 80013ec:	2300      	movs	r3, #0
 80013ee:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructure.Alternate = GPIO_AF8_USART6;
 80013f0:	2308      	movs	r3, #8
 80013f2:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(McuGpioPerDef[USART6_RX], &GPIO_InitStructure);
 80013f4:	4b10      	ldr	r3, [pc, #64]	; (8001438 <Usart6GpioSetup+0x84>)
 80013f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f8:	1d3a      	adds	r2, r7, #4
 80013fa:	4611      	mov	r1, r2
 80013fc:	4618      	mov	r0, r3
 80013fe:	f001 fc89 	bl	8002d14 <HAL_GPIO_Init>

	//RS485_DIR1 port setup
	GPIO_InitStructure.Pin   = McuGpioPinDef[RS485_DIR1];//RS485_DIR1 port
 8001402:	4b0c      	ldr	r3, [pc, #48]	; (8001434 <Usart6GpioSetup+0x80>)
 8001404:	8a9b      	ldrh	r3, [r3, #20]
 8001406:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Mode  = GPIO_MODE_OUTPUT_PP;		//output mode
 8001408:	2301      	movs	r3, #1
 800140a:	60bb      	str	r3, [r7, #8]
//	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;		//open-drain output type
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;	//high speed on 30 pF (80 MHz Output max speed on 15 pF)
 800140c:	2303      	movs	r3, #3
 800140e:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.Pull  = GPIO_NOPULL;	//No pull-up, no pull-down
 8001410:	2300      	movs	r3, #0
 8001412:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(McuGpioPerDef[RS485_DIR1], &GPIO_InitStructure);
 8001414:	4b08      	ldr	r3, [pc, #32]	; (8001438 <Usart6GpioSetup+0x84>)
 8001416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001418:	1d3a      	adds	r2, r7, #4
 800141a:	4611      	mov	r1, r2
 800141c:	4618      	mov	r0, r3
 800141e:	f001 fc79 	bl	8002d14 <HAL_GPIO_Init>
	WriteToGpioPin(RS485_DIR1, 0);						//Initial state: logic low - RX mode
 8001422:	2100      	movs	r1, #0
 8001424:	200a      	movs	r0, #10
 8001426:	f000 f9c5 	bl	80017b4 <WriteToGpioPin>
}
 800142a:	bf00      	nop
 800142c:	3718      	adds	r7, #24
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	20000064 	.word	0x20000064
 8001438:	20000000 	.word	0x20000000

0800143c <Tim3GpioSetup>:
//* Input Parameters      : none
//* Output Parameters     : none
//*--------------------------------------------------------------------------------------

void Tim3GpioSetup(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af00      	add	r7, sp, #0

	//USART6 remap to pins PB13 and PB15
//	GPIO_PinAFConfig(GPIOB, GPIO_PinSource0, GPIO_AF_TIM3); // PB0

	//GEN_OUT port setup
	GPIO_InitStructure.Pin   = McuGpioPinDef[GEN_OUT];//GEN_OUT port
 8001442:	4b0b      	ldr	r3, [pc, #44]	; (8001470 <Tim3GpioSetup+0x34>)
 8001444:	8bdb      	ldrh	r3, [r3, #30]
 8001446:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;		//Alternate function Mode
 8001448:	2302      	movs	r3, #2
 800144a:	60bb      	str	r3, [r7, #8]
//	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;		//push-pull output type
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;	//high speed on 30 pF (80 MHz Output max speed on 15 pF)
 800144c:	2303      	movs	r3, #3
 800144e:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.Pull  = GPIO_NOPULL;	//no pull-up
 8001450:	2300      	movs	r3, #0
 8001452:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructure.Alternate = GPIO_AF2_TIM3;
 8001454:	2302      	movs	r3, #2
 8001456:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(McuGpioPerDef[GEN_OUT], &GPIO_InitStructure);
 8001458:	4b06      	ldr	r3, [pc, #24]	; (8001474 <Tim3GpioSetup+0x38>)
 800145a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800145c:	1d3a      	adds	r2, r7, #4
 800145e:	4611      	mov	r1, r2
 8001460:	4618      	mov	r0, r3
 8001462:	f001 fc57 	bl	8002d14 <HAL_GPIO_Init>
}
 8001466:	bf00      	nop
 8001468:	3718      	adds	r7, #24
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	20000064 	.word	0x20000064
 8001474:	20000000 	.word	0x20000000

08001478 <SystemInitSetup>:
//* Input Parameters      : none
//* Output Parameters     : none
//*--------------------------------------------------------------------------------------

void SystemInitSetup(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b098      	sub	sp, #96	; 0x60
 800147c:	af00      	add	r7, sp, #0
HAL_Init();
 800147e:	f001 fac5 	bl	8002a0c <HAL_Init>
//NVIC_InitTypeDef NVIC_InitStruct;
//TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
//SPI_InitTypeDef SPI_InitStructure;
//I2C_InitTypeDef  I2C_InitStructure;
//RCC_ClocksTypeDef RCC_ClocksNow;
RCC_ClkInitTypeDef RCC_ClocksNow = {0};
 8001482:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	605a      	str	r2, [r3, #4]
 800148c:	609a      	str	r2, [r3, #8]
 800148e:	60da      	str	r2, [r3, #12]
 8001490:	611a      	str	r2, [r3, #16]
RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001492:	f107 031c 	add.w	r3, r7, #28
 8001496:	2230      	movs	r2, #48	; 0x30
 8001498:	2100      	movs	r1, #0
 800149a:	4618      	mov	r0, r3
 800149c:	f003 faea 	bl	8004a74 <memset>
//USART_InitTypeDef USART_InitStructure;
//unsigned int InitTimer;
//int Status;

__HAL_RCC_PWR_CLK_ENABLE();
 80014a0:	2300      	movs	r3, #0
 80014a2:	61bb      	str	r3, [r7, #24]
 80014a4:	4b71      	ldr	r3, [pc, #452]	; (800166c <SystemInitSetup+0x1f4>)
 80014a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a8:	4a70      	ldr	r2, [pc, #448]	; (800166c <SystemInitSetup+0x1f4>)
 80014aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014ae:	6413      	str	r3, [r2, #64]	; 0x40
 80014b0:	4b6e      	ldr	r3, [pc, #440]	; (800166c <SystemInitSetup+0x1f4>)
 80014b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b8:	61bb      	str	r3, [r7, #24]
 80014ba:	69bb      	ldr	r3, [r7, #24]
__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014bc:	2300      	movs	r3, #0
 80014be:	617b      	str	r3, [r7, #20]
 80014c0:	4b6b      	ldr	r3, [pc, #428]	; (8001670 <SystemInitSetup+0x1f8>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a6a      	ldr	r2, [pc, #424]	; (8001670 <SystemInitSetup+0x1f8>)
 80014c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014ca:	6013      	str	r3, [r2, #0]
 80014cc:	4b68      	ldr	r3, [pc, #416]	; (8001670 <SystemInitSetup+0x1f8>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014d4:	617b      	str	r3, [r7, #20]
 80014d6:	697b      	ldr	r3, [r7, #20]
	/////////////////////////////////////////////////////////////////////////////////////
	//Directly controlled GPIO setup
	/////////////////////////////////////////////////////////////////////////////////////
	GpioInitialSetup();
 80014d8:	f7ff fd74 	bl	8000fc4 <GpioInitialSetup>
	WriteToGpioPin(LED_B,1);			//setup in progress
 80014dc:	2101      	movs	r1, #1
 80014de:	2003      	movs	r0, #3
 80014e0:	f000 f968 	bl	80017b4 <WriteToGpioPin>

	WriteToGpioPin(LED_B,0);			//setup in progress
 80014e4:	2100      	movs	r1, #0
 80014e6:	2003      	movs	r0, #3
 80014e8:	f000 f964 	bl	80017b4 <WriteToGpioPin>

	//Initialise the Embedded Flash Interface, the PLL and update the SystemFrequency variable
	SystemInit();
 80014ec:	f001 fa52 	bl	8002994 <SystemInit>

	//System clock setup is done - read back for debug
//	RCC_GetClocksFreq(&RCC_ClocksNow); //System clock test function
	HAL_RCC_GetSysClockFreq();
 80014f0:	f002 f93c 	bl	800376c <HAL_RCC_GetSysClockFreq>
	//SysTick
	/////////////////////////////////////////////////////////////////////////////////////
//	RCC_HCLKConfig(RCC_SYSCLK_Div1); //setup AHB (HCLK) clock = SYSCLK
//	SysTick_CLKSourceConfig(SysTick_CLKSource_HCLK); //AHB clock selected as SysTick clock source
	//Initialises the RCC Oscillators according to the specified parameters in the RCC_OscInitTypeDef structure.
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014f4:	2302      	movs	r3, #2
 80014f6:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014f8:	2301      	movs	r3, #1
 80014fa:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014fc:	2310      	movs	r3, #16
 80014fe:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001500:	2300      	movs	r3, #0
 8001502:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001504:	f107 031c 	add.w	r3, r7, #28
 8001508:	4618      	mov	r0, r3
 800150a:	f001 fdd1 	bl	80030b0 <HAL_RCC_OscConfig>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <SystemInitSetup+0xa0>
	{
		Error_Handler();
 8001514:	f000 ff46 	bl	80023a4 <Error_Handler>
	}
	// Initialises the CPU, AHB and APB buses clocks

	RCC_ClocksNow.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001518:	230f      	movs	r3, #15
 800151a:	64fb      	str	r3, [r7, #76]	; 0x4c
								 |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClocksNow.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800151c:	2300      	movs	r3, #0
 800151e:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_ClocksNow.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001520:	2300      	movs	r3, #0
 8001522:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_ClocksNow.APB1CLKDivider = RCC_HCLK_DIV1;
 8001524:	2300      	movs	r3, #0
 8001526:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_ClocksNow.APB2CLKDivider = RCC_HCLK_DIV1;
 8001528:	2300      	movs	r3, #0
 800152a:	65fb      	str	r3, [r7, #92]	; 0x5c

	if (HAL_RCC_ClockConfig(&RCC_ClocksNow, FLASH_LATENCY_0) != HAL_OK)
 800152c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001530:	2100      	movs	r1, #0
 8001532:	4618      	mov	r0, r3
 8001534:	f002 f834 	bl	80035a0 <HAL_RCC_ClockConfig>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <SystemInitSetup+0xca>
	{
		Error_Handler();
 800153e:	f000 ff31 	bl	80023a4 <Error_Handler>
	}


	SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk;
 8001542:	4b4c      	ldr	r3, [pc, #304]	; (8001674 <SystemInitSetup+0x1fc>)
 8001544:	2204      	movs	r2, #4
 8001546:	601a      	str	r2, [r3, #0]


	/////////////////////////////////////////////////////////////////////////////////////
	//Directly controlled GPIO setup
	/////////////////////////////////////////////////////////////////////////////////////
	GpioInitialSetup();
 8001548:	f7ff fd3c 	bl	8000fc4 <GpioInitialSetup>
	/////////////////////////////////////////////////////////////////////////////////////
	//USART2 (Master commands) setup
	//further changes to be done via InitUsart() function
	/////////////////////////////////////////////////////////////////////////////////////
//	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2,ENABLE); //RCC enable for USART2
	__USART2_CLK_ENABLE();
 800154c:	2300      	movs	r3, #0
 800154e:	613b      	str	r3, [r7, #16]
 8001550:	4b46      	ldr	r3, [pc, #280]	; (800166c <SystemInitSetup+0x1f4>)
 8001552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001554:	4a45      	ldr	r2, [pc, #276]	; (800166c <SystemInitSetup+0x1f4>)
 8001556:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800155a:	6413      	str	r3, [r2, #64]	; 0x40
 800155c:	4b43      	ldr	r3, [pc, #268]	; (800166c <SystemInitSetup+0x1f4>)
 800155e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001564:	613b      	str	r3, [r7, #16]
 8001566:	693b      	ldr	r3, [r7, #16]
//	USART_Cmd(USART2, ENABLE);

//	huart2.Instance = USART2;
//	huart2.Init.BaudRate = 115200;
//	HAL_UART_Init(&huart2);
	Usart2GpioSetup(); //initialisation of associated GPIOs
 8001568:	f7ff fe8c 	bl	8001284 <Usart2GpioSetup>
	/////////////////////////////////////////////////////////////////////////////////////
	//&UART4 (RDPs commands) setup
	//further changes to be done via InitUsart() function
	/////////////////////////////////////////////////////////////////////////////////////
//	RCC_APB1PeriphClockCmd(RCC_APB1Periph_&UART4,ENABLE); //RCC enable for &UART4
	__USART4_CLK_ENABLE();
 800156c:	2300      	movs	r3, #0
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	4b3e      	ldr	r3, [pc, #248]	; (800166c <SystemInitSetup+0x1f4>)
 8001572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001574:	4a3d      	ldr	r2, [pc, #244]	; (800166c <SystemInitSetup+0x1f4>)
 8001576:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800157a:	6413      	str	r3, [r2, #64]	; 0x40
 800157c:	4b3b      	ldr	r3, [pc, #236]	; (800166c <SystemInitSetup+0x1f4>)
 800157e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001580:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001584:	60fb      	str	r3, [r7, #12]
 8001586:	68fb      	ldr	r3, [r7, #12]

//	huart4.Instance = &UART4;
//	huart4.Init.BaudRate = 57600;
//	HAL_UART_Init(&huart4);

	Uart4GpioSetup(); //initialisation of associated GPIOs
 8001588:	f7ff fed0 	bl	800132c <Uart4GpioSetup>

	/////////////////////////////////////////////////////////////////////////////////////
	//&USART6 (ADAM commands) setup
	/////////////////////////////////////////////////////////////////////////////////////
//	RCC_APB2PeriphClockCmd(RCC_APB2Periph_&USART6,ENABLE); //RCC enable for &USART6
	__USART6_CLK_ENABLE();
 800158c:	2300      	movs	r3, #0
 800158e:	60bb      	str	r3, [r7, #8]
 8001590:	4b36      	ldr	r3, [pc, #216]	; (800166c <SystemInitSetup+0x1f4>)
 8001592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001594:	4a35      	ldr	r2, [pc, #212]	; (800166c <SystemInitSetup+0x1f4>)
 8001596:	f043 0320 	orr.w	r3, r3, #32
 800159a:	6453      	str	r3, [r2, #68]	; 0x44
 800159c:	4b33      	ldr	r3, [pc, #204]	; (800166c <SystemInitSetup+0x1f4>)
 800159e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a0:	f003 0320 	and.w	r3, r3, #32
 80015a4:	60bb      	str	r3, [r7, #8]
 80015a6:	68bb      	ldr	r3, [r7, #8]
//	huart6.Instance = &USART6;
//	huart6.Init.BaudRate = 115200;
//	HAL_UART_Init(&huart6);


	Usart6GpioSetup(); //initialisation of associated GPIOs
 80015a8:	f7ff ff04 	bl	80013b4 <Usart6GpioSetup>

	/////////////////////////////////////////////////////////////////////////////////////
	//TIM3 (Generator PWM out) setup
	/////////////////////////////////////////////////////////////////////////////////////
//    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE); //TIM3 clock enable
    __TIM3_CLK_ENABLE();
 80015ac:	2300      	movs	r3, #0
 80015ae:	607b      	str	r3, [r7, #4]
 80015b0:	4b2e      	ldr	r3, [pc, #184]	; (800166c <SystemInitSetup+0x1f4>)
 80015b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b4:	4a2d      	ldr	r2, [pc, #180]	; (800166c <SystemInitSetup+0x1f4>)
 80015b6:	f043 0302 	orr.w	r3, r3, #2
 80015ba:	6413      	str	r3, [r2, #64]	; 0x40
 80015bc:	4b2b      	ldr	r3, [pc, #172]	; (800166c <SystemInitSetup+0x1f4>)
 80015be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c0:	f003 0302 	and.w	r3, r3, #2
 80015c4:	607b      	str	r3, [r7, #4]
 80015c6:	687b      	ldr	r3, [r7, #4]
//    TIM_Cmd(TIM3, ENABLE); //TIM3 enable counter
    SetGeneratorOut(1000, 2688, 1344); //fout = 26880000 / 1000 / 2688 = 10Hz, 2688 / 1344 = 50% duty cycle
 80015c8:	f44f 62a8 	mov.w	r2, #1344	; 0x540
 80015cc:	f44f 6128 	mov.w	r1, #2688	; 0xa80
 80015d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015d4:	f000 fa6c 	bl	8001ab0 <SetGeneratorOut>
    Tim3GpioSetup();
 80015d8:	f7ff ff30 	bl	800143c <Tim3GpioSetup>

	/////////////////////////////////////////////////////////////////////////////////////
	//Interrupt system setup
	/////////////////////////////////////////////////////////////////////////////////////
//	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_0); //Configure the NVIC Preemption Priority Bits
    HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0); //Configure the NVIC Preemption Priority Bits
 80015dc:	2007      	movs	r0, #7
 80015de:	f001 fb57 	bl	8002c90 <HAL_NVIC_SetPriorityGrouping>

	//USART2 IRQ setup
#ifdef MASTER_CMD_USART2

    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80015e2:	2200      	movs	r2, #0
 80015e4:	2100      	movs	r1, #0
 80015e6:	2026      	movs	r0, #38	; 0x26
 80015e8:	f001 fb5d 	bl	8002ca6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80015ec:	2026      	movs	r0, #38	; 0x26
 80015ee:	f001 fb76 	bl	8002cde <HAL_NVIC_EnableIRQ>


	/////////////////////////////////////////////////////////////////////////////////////
	//Initialisation of global variables
	/////////////////////////////////////////////////////////////////////////////////////
	ModuleMode = MM_STANDBY;			//current module mode = standby
 80015f2:	4b21      	ldr	r3, [pc, #132]	; (8001678 <SystemInitSetup+0x200>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
	CmdReceived = 0;					//no command is ready for decoding
 80015f8:	4b20      	ldr	r3, [pc, #128]	; (800167c <SystemInitSetup+0x204>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	701a      	strb	r2, [r3, #0]
	CmdCounter = 0;						//command counter - number of received bytes = 0
 80015fe:	4b20      	ldr	r3, [pc, #128]	; (8001680 <SystemInitSetup+0x208>)
 8001600:	2200      	movs	r2, #0
 8001602:	701a      	strb	r2, [r3, #0]
	CmdDecoded = CMD_NONE;				//no command is decoded and to be executed
 8001604:	4b1f      	ldr	r3, [pc, #124]	; (8001684 <SystemInitSetup+0x20c>)
 8001606:	2200      	movs	r2, #0
 8001608:	701a      	strb	r2, [r3, #0]
	SB = 0;								//Status Byte - no error
 800160a:	4b1f      	ldr	r3, [pc, #124]	; (8001688 <SystemInitSetup+0x210>)
 800160c:	2200      	movs	r2, #0
 800160e:	701a      	strb	r2, [r3, #0]
	MT = 0x14;							//Module Type RADM
 8001610:	4b1e      	ldr	r3, [pc, #120]	; (800168c <SystemInitSetup+0x214>)
 8001612:	2214      	movs	r2, #20
 8001614:	701a      	strb	r2, [r3, #0]
	MA = 0x00;							//Module Address
 8001616:	4b1e      	ldr	r3, [pc, #120]	; (8001690 <SystemInitSetup+0x218>)
 8001618:	2200      	movs	r2, #0
 800161a:	701a      	strb	r2, [r3, #0]
	Sample = 0;							//sample counter - timestamp for measurement
 800161c:	4b1d      	ldr	r3, [pc, #116]	; (8001694 <SystemInitSetup+0x21c>)
 800161e:	2200      	movs	r2, #0
 8001620:	601a      	str	r2, [r3, #0]
	SamplePacketCount = 0;				//sample packet counter - counts measurements per packet
 8001622:	4b1d      	ldr	r3, [pc, #116]	; (8001698 <SystemInitSetup+0x220>)
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
	RdpAddresses[RDP_THRUST] = 0x00;	//RDP meters RS-485 addresses - thrust meter
 8001628:	4b1c      	ldr	r3, [pc, #112]	; (800169c <SystemInitSetup+0x224>)
 800162a:	2200      	movs	r2, #0
 800162c:	701a      	strb	r2, [r3, #0]
	RdpAddresses[RDP_TORQUE] = 0x00;	//RDP meters RS-485 addresses - torque meter
 800162e:	4b1b      	ldr	r3, [pc, #108]	; (800169c <SystemInitSetup+0x224>)
 8001630:	2200      	movs	r2, #0
 8001632:	705a      	strb	r2, [r3, #1]
	WriteToGpioPin(LED_B,0);			//setup done
 8001634:	2100      	movs	r1, #0
 8001636:	2003      	movs	r0, #3
 8001638:	f000 f8bc 	bl	80017b4 <WriteToGpioPin>

	/////////////////////////////////////////////////////////////////////////////////////
	//welcome alarm
	/////////////////////////////////////////////////////////////////////////////////////
	WriteToGpioPin(ALARM, 1);
 800163c:	2101      	movs	r1, #1
 800163e:	200e      	movs	r0, #14
 8001640:	f000 f8b8 	bl	80017b4 <WriteToGpioPin>
	Sleep(50);
 8001644:	2032      	movs	r0, #50	; 0x32
 8001646:	f000 f833 	bl	80016b0 <Sleep>
	WriteToGpioPin(ALARM, 0);
 800164a:	2100      	movs	r1, #0
 800164c:	200e      	movs	r0, #14
 800164e:	f000 f8b1 	bl	80017b4 <WriteToGpioPin>


	/////////////////////////////////////////////////////////////////////////////////////
	//initial self-test
	/////////////////////////////////////////////////////////////////////////////////////
	Sleep(50000); //sleep 5s for ADAM to boot-up
 8001652:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001656:	f000 f82b 	bl	80016b0 <Sleep>
	RadmSelfTest(0); //RPDs not tested at this stage
 800165a:	2000      	movs	r0, #0
 800165c:	f000 fac0 	bl	8001be0 <RadmSelfTest>


	/////////////////////////////////////////////////////////////////////////////////////
	//Debug function - TODO to be commented out in the final version!
	/////////////////////////////////////////////////////////////////////////////////////
	DebugTestFunc();
 8001660:	f000 f81e 	bl	80016a0 <DebugTestFunc>

}
 8001664:	bf00      	nop
 8001666:	3760      	adds	r7, #96	; 0x60
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40023800 	.word	0x40023800
 8001670:	40007000 	.word	0x40007000
 8001674:	e000e010 	.word	0xe000e010
 8001678:	20000340 	.word	0x20000340
 800167c:	2000033e 	.word	0x2000033e
 8001680:	2000037d 	.word	0x2000037d
 8001684:	20000344 	.word	0x20000344
 8001688:	2000033f 	.word	0x2000033f
 800168c:	200002f4 	.word	0x200002f4
 8001690:	200002f5 	.word	0x200002f5
 8001694:	20000380 	.word	0x20000380
 8001698:	200002fc 	.word	0x200002fc
 800169c:	200002f8 	.word	0x200002f8

080016a0 <DebugTestFunc>:
//* Input Parameters      : none
//* Output Parameters     : none
//*--------------------------------------------------------------------------------------

void DebugTestFunc(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
//		WriteToGpioPin(USART2_CTS, ReadGpioPinStatus(USART2_RTS));
//		WriteToGpioPin(PLED_R, ReadGpioPinStatus(USART2_RTS));
//	}
//
//
}
 80016a4:	bf00      	nop
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
	...

080016b0 <Sleep>:
//* Input Parameters      : unsigned int HundMicroSec - range 0.1ms to 4294967.296s
//* Output Parameters     : none
//*--------------------------------------------------------------------------------------

void Sleep(unsigned int HundMicroSec)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
unsigned int Loop;

	SysTick->VAL   = 0;                       /* Load the SysTick Counter Value */
 80016b8:	4b16      	ldr	r3, [pc, #88]	; (8001714 <Sleep+0x64>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	609a      	str	r2, [r3, #8]
	SysTick->LOAD  = 0;
 80016be:	4b15      	ldr	r3, [pc, #84]	; (8001714 <Sleep+0x64>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	605a      	str	r2, [r3, #4]
	SysTick->CTRL  |= SysTick_CTRL_ENABLE_Msk; //enable timer
 80016c4:	4b13      	ldr	r3, [pc, #76]	; (8001714 <Sleep+0x64>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a12      	ldr	r2, [pc, #72]	; (8001714 <Sleep+0x64>)
 80016ca:	f043 0301 	orr.w	r3, r3, #1
 80016ce:	6013      	str	r3, [r2, #0]

	for(Loop = 0; Loop < HundMicroSec; Loop++)
 80016d0:	2300      	movs	r3, #0
 80016d2:	60fb      	str	r3, [r7, #12]
 80016d4:	e00e      	b.n	80016f4 <Sleep+0x44>
	{
		SysTick->LOAD  = 5376;      // set reload register for 100us: 53.76MHz/10kHz = 5376
 80016d6:	4b0f      	ldr	r3, [pc, #60]	; (8001714 <Sleep+0x64>)
 80016d8:	f44f 52a8 	mov.w	r2, #5376	; 0x1500
 80016dc:	605a      	str	r2, [r3, #4]
		while(SysTick->VAL > 10);	//10 ticks to make sure MCU will catch it
 80016de:	bf00      	nop
 80016e0:	4b0c      	ldr	r3, [pc, #48]	; (8001714 <Sleep+0x64>)
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	2b0a      	cmp	r3, #10
 80016e6:	d8fb      	bhi.n	80016e0 <Sleep+0x30>
		SysTick->VAL   = 0;
 80016e8:	4b0a      	ldr	r3, [pc, #40]	; (8001714 <Sleep+0x64>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	609a      	str	r2, [r3, #8]
	for(Loop = 0; Loop < HundMicroSec; Loop++)
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	3301      	adds	r3, #1
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	68fa      	ldr	r2, [r7, #12]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d3ec      	bcc.n	80016d6 <Sleep+0x26>
	}

	SysTick->CTRL  &= ~SysTick_CTRL_ENABLE_Msk; //disable timer
 80016fc:	4b05      	ldr	r3, [pc, #20]	; (8001714 <Sleep+0x64>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a04      	ldr	r2, [pc, #16]	; (8001714 <Sleep+0x64>)
 8001702:	f023 0301 	bic.w	r3, r3, #1
 8001706:	6013      	str	r3, [r2, #0]
}
 8001708:	bf00      	nop
 800170a:	3714      	adds	r7, #20
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	e000e010 	.word	0xe000e010

08001718 <Sleep10us>:
//* Input Parameters      : unsigned int TenMicroSec - range 0.01ms to 429496.7296s
//* Output Parameters     : none
//*--------------------------------------------------------------------------------------

void Sleep10us(unsigned int TenMicroSec)
{
 8001718:	b480      	push	{r7}
 800171a:	b085      	sub	sp, #20
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
unsigned int Loop;

	SysTick->VAL   = 0;                       /* Load the SysTick Counter Value */
 8001720:	4b16      	ldr	r3, [pc, #88]	; (800177c <Sleep10us+0x64>)
 8001722:	2200      	movs	r2, #0
 8001724:	609a      	str	r2, [r3, #8]
	SysTick->LOAD  = 0;
 8001726:	4b15      	ldr	r3, [pc, #84]	; (800177c <Sleep10us+0x64>)
 8001728:	2200      	movs	r2, #0
 800172a:	605a      	str	r2, [r3, #4]
	SysTick->CTRL  |= SysTick_CTRL_ENABLE_Msk; //enable timer
 800172c:	4b13      	ldr	r3, [pc, #76]	; (800177c <Sleep10us+0x64>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a12      	ldr	r2, [pc, #72]	; (800177c <Sleep10us+0x64>)
 8001732:	f043 0301 	orr.w	r3, r3, #1
 8001736:	6013      	str	r3, [r2, #0]

	for(Loop = 0; Loop < TenMicroSec; Loop++)
 8001738:	2300      	movs	r3, #0
 800173a:	60fb      	str	r3, [r7, #12]
 800173c:	e00e      	b.n	800175c <Sleep10us+0x44>
	{
		SysTick->LOAD  = 538;      // set reload register for 100us: 53.76MHz/100kHz = 538
 800173e:	4b0f      	ldr	r3, [pc, #60]	; (800177c <Sleep10us+0x64>)
 8001740:	f240 221a 	movw	r2, #538	; 0x21a
 8001744:	605a      	str	r2, [r3, #4]
		while(SysTick->VAL > 10);	//10 ticks to make sure MCU will catch it
 8001746:	bf00      	nop
 8001748:	4b0c      	ldr	r3, [pc, #48]	; (800177c <Sleep10us+0x64>)
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	2b0a      	cmp	r3, #10
 800174e:	d8fb      	bhi.n	8001748 <Sleep10us+0x30>
		SysTick->VAL   = 0;
 8001750:	4b0a      	ldr	r3, [pc, #40]	; (800177c <Sleep10us+0x64>)
 8001752:	2200      	movs	r2, #0
 8001754:	609a      	str	r2, [r3, #8]
	for(Loop = 0; Loop < TenMicroSec; Loop++)
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	3301      	adds	r3, #1
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	68fa      	ldr	r2, [r7, #12]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	429a      	cmp	r2, r3
 8001762:	d3ec      	bcc.n	800173e <Sleep10us+0x26>
	}
	SysTick->CTRL  &= ~SysTick_CTRL_ENABLE_Msk; //disable timer
 8001764:	4b05      	ldr	r3, [pc, #20]	; (800177c <Sleep10us+0x64>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a04      	ldr	r2, [pc, #16]	; (800177c <Sleep10us+0x64>)
 800176a:	f023 0301 	bic.w	r3, r3, #1
 800176e:	6013      	str	r3, [r2, #0]
}
 8001770:	bf00      	nop
 8001772:	3714      	adds	r7, #20
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr
 800177c:	e000e010 	.word	0xe000e010

08001780 <ReadGpioPinStatus>:
//* Input Parameters      : unsigned int PortPin - defines which pin is to be read
//* Output Parameters     : unsigned int - current status of PIO pin
//*--------------------------------------------------------------------------------------

unsigned int ReadGpioPinStatus(unsigned int PortPin)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
	return HAL_GPIO_ReadPin(McuGpioPerDef[PortPin],McuGpioPinDef[PortPin]);
 8001788:	4a08      	ldr	r2, [pc, #32]	; (80017ac <ReadGpioPinStatus+0x2c>)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001790:	4907      	ldr	r1, [pc, #28]	; (80017b0 <ReadGpioPinStatus+0x30>)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001798:	4619      	mov	r1, r3
 800179a:	4610      	mov	r0, r2
 800179c:	f001 fc56 	bl	800304c <HAL_GPIO_ReadPin>
 80017a0:	4603      	mov	r3, r0
//    return(unsigned int)(GPIO_ReadInputDataBit(McuGpioPerDef[PortPin],McuGpioPinDef[PortPin]));
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20000000 	.word	0x20000000
 80017b0:	20000064 	.word	0x20000064

080017b4 <WriteToGpioPin>:
//*                         bool PortPinStatus - new status of PIO pin
//* Output Parameters     : none
//*--------------------------------------------------------------------------------------

void WriteToGpioPin(unsigned int PortPin, unsigned int PortPinStatus)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]
    if (PortPinStatus)
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d00c      	beq.n	80017de <WriteToGpioPin+0x2a>
//    	GPIO_WriteBit(McuGpioPerDef[PortPin],McuGpioPinDef[PortPin], Bit_SET);
    	HAL_GPIO_WritePin(McuGpioPerDef[PortPin],McuGpioPinDef[PortPin], GPIO_PIN_SET);
 80017c4:	4a0e      	ldr	r2, [pc, #56]	; (8001800 <WriteToGpioPin+0x4c>)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80017cc:	4a0d      	ldr	r2, [pc, #52]	; (8001804 <WriteToGpioPin+0x50>)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017d4:	2201      	movs	r2, #1
 80017d6:	4619      	mov	r1, r3
 80017d8:	f001 fc50 	bl	800307c <HAL_GPIO_WritePin>
    else
//    	GPIO_WriteBit(McuGpioPerDef[PortPin],McuGpioPinDef[PortPin], Bit_RESET);
    HAL_GPIO_WritePin(McuGpioPerDef[PortPin],McuGpioPinDef[PortPin], GPIO_PIN_RESET);
}
 80017dc:	e00b      	b.n	80017f6 <WriteToGpioPin+0x42>
    HAL_GPIO_WritePin(McuGpioPerDef[PortPin],McuGpioPinDef[PortPin], GPIO_PIN_RESET);
 80017de:	4a08      	ldr	r2, [pc, #32]	; (8001800 <WriteToGpioPin+0x4c>)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80017e6:	4a07      	ldr	r2, [pc, #28]	; (8001804 <WriteToGpioPin+0x50>)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017ee:	2200      	movs	r2, #0
 80017f0:	4619      	mov	r1, r3
 80017f2:	f001 fc43 	bl	800307c <HAL_GPIO_WritePin>
}
 80017f6:	bf00      	nop
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	20000000 	.word	0x20000000
 8001804:	20000064 	.word	0x20000064

08001808 <ToggleGpioPin>:
//* Input Parameters      : unsigned int PortPin - defines which pin is to be negated
//* Output Parameters     : none
//*--------------------------------------------------------------------------------------

void ToggleGpioPin(unsigned int PortPin)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
////	if (GPIO_ReadOutputDataBit(McuGpioPerDef[PortPin],McuGpioPinDef[PortPin]))
	if ( HAL_GPIO_ReadPin(McuGpioPerDef[PortPin],McuGpioPinDef[PortPin]) )
 8001810:	4a0d      	ldr	r2, [pc, #52]	; (8001848 <ToggleGpioPin+0x40>)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001818:	490c      	ldr	r1, [pc, #48]	; (800184c <ToggleGpioPin+0x44>)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001820:	4619      	mov	r1, r3
 8001822:	4610      	mov	r0, r2
 8001824:	f001 fc12 	bl	800304c <HAL_GPIO_ReadPin>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d004      	beq.n	8001838 <ToggleGpioPin+0x30>
		WriteToGpioPin(PortPin, 0);
 800182e:	2100      	movs	r1, #0
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f7ff ffbf 	bl	80017b4 <WriteToGpioPin>
    else
        WriteToGpioPin(PortPin, 1);

}
 8001836:	e003      	b.n	8001840 <ToggleGpioPin+0x38>
        WriteToGpioPin(PortPin, 1);
 8001838:	2101      	movs	r1, #1
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f7ff ffba 	bl	80017b4 <WriteToGpioPin>
}
 8001840:	bf00      	nop
 8001842:	3708      	adds	r7, #8
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	20000000 	.word	0x20000000
 800184c:	20000064 	.word	0x20000064

08001850 <UpdateSystemLeds>:
//* Input Parameters      : none 
//* Output Parameters     : none
//*--------------------------------------------------------------------------------------

void UpdateSystemLeds(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
//		else
//			PANEL_LED = PLED_R;
//    }
//	else
//	{
	if(SB == 0x00)
 8001856:	4b14      	ldr	r3, [pc, #80]	; (80018a8 <UpdateSystemLeds+0x58>)
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d106      	bne.n	800186c <UpdateSystemLeds+0x1c>
	{
		PANEL_LED = PLED_G;
 800185e:	2311      	movs	r3, #17
 8001860:	607b      	str	r3, [r7, #4]
		WriteToGpioPin(PLED_R, 0);
 8001862:	2100      	movs	r1, #0
 8001864:	2010      	movs	r0, #16
 8001866:	f7ff ffa5 	bl	80017b4 <WriteToGpioPin>
 800186a:	e005      	b.n	8001878 <UpdateSystemLeds+0x28>
	}
	else
	{
		PANEL_LED = PLED_R;
 800186c:	2310      	movs	r3, #16
 800186e:	607b      	str	r3, [r7, #4]
		WriteToGpioPin(PLED_G, 0);
 8001870:	2100      	movs	r1, #0
 8001872:	2011      	movs	r0, #17
 8001874:	f7ff ff9e 	bl	80017b4 <WriteToGpioPin>
	}
//	}

    //blink MCU alive/error LEDs
	SysLedCounter++;
 8001878:	4b0c      	ldr	r3, [pc, #48]	; (80018ac <UpdateSystemLeds+0x5c>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	3301      	adds	r3, #1
 800187e:	4a0b      	ldr	r2, [pc, #44]	; (80018ac <UpdateSystemLeds+0x5c>)
 8001880:	6013      	str	r3, [r2, #0]
	if(SysLedCounter >= SYS_LED_CALLS)
 8001882:	4b0a      	ldr	r3, [pc, #40]	; (80018ac <UpdateSystemLeds+0x5c>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a0a      	ldr	r2, [pc, #40]	; (80018b0 <UpdateSystemLeds+0x60>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d909      	bls.n	80018a0 <UpdateSystemLeds+0x50>
    {
    	ToggleGpioPin(LED_G);
 800188c:	2000      	movs	r0, #0
 800188e:	f7ff ffbb 	bl	8001808 <ToggleGpioPin>
    	ToggleGpioPin(PANEL_LED);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff ffb7 	bl	8001808 <ToggleGpioPin>
    	SysLedCounter = 0;
 800189a:	4b04      	ldr	r3, [pc, #16]	; (80018ac <UpdateSystemLeds+0x5c>)
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
    }

}
 80018a0:	bf00      	nop
 80018a2:	3708      	adds	r7, #8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	2000033f 	.word	0x2000033f
 80018ac:	20000348 	.word	0x20000348
 80018b0:	0001869f 	.word	0x0001869f

080018b4 <Get8BitCrc>:
//*							unsigned char OldCrc - initial CRC
//* Output Parameters     : unsigned char CRC - checksum for DataByte
//*--------------------------------------------------------------------------------------

unsigned char Get8BitCrc(unsigned char DataByte, unsigned char OldCrc)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b0c2      	sub	sp, #264	; 0x108
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4602      	mov	r2, r0
 80018bc:	1dfb      	adds	r3, r7, #7
 80018be:	701a      	strb	r2, [r3, #0]
 80018c0:	1dbb      	adds	r3, r7, #6
 80018c2:	460a      	mov	r2, r1
 80018c4:	701a      	strb	r2, [r3, #0]
unsigned char CrcTable[256] =
 80018c6:	f107 0308 	add.w	r3, r7, #8
 80018ca:	4a0b      	ldr	r2, [pc, #44]	; (80018f8 <Get8BitCrc+0x44>)
 80018cc:	4618      	mov	r0, r3
 80018ce:	4611      	mov	r1, r2
 80018d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018d4:	461a      	mov	r2, r3
 80018d6:	f003 f8bf 	bl	8004a58 <memcpy>
	0xCA,  0x94,  0x76,  0x28,  0xAB,  0xF5,  0x17,  0x49,  0x08,  0x56,  0xB4,  0xEA,  0x69,  0x37,  0xD5,  0x8B,
	0x57,  0x09,  0xEB,  0xB5,  0x36,  0x68,  0x8A,  0xD4,  0x95,  0xCB,  0x29,  0x77,  0xF4,  0xAA,  0x48,  0x16,
	0xE9,  0xB7,  0x55,  0x0B,  0x88,  0xD6,  0x34,  0x6A,  0x2B,  0x75,  0x97,  0xC9,  0x4A,  0x14,  0xF6,  0xA8,
	0x74,  0x2A,  0xC8,  0x96,  0x15,  0x4B,  0xA9,  0xF7,  0xB6,  0xE8,  0x0A,  0x54,  0xD7,  0x89,  0x6B,  0x35,
};
	return(CrcTable[(OldCrc ^ DataByte)]);
 80018da:	1dba      	adds	r2, r7, #6
 80018dc:	1dfb      	adds	r3, r7, #7
 80018de:	7812      	ldrb	r2, [r2, #0]
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	4053      	eors	r3, r2
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	461a      	mov	r2, r3
 80018e8:	f107 0308 	add.w	r3, r7, #8
 80018ec:	5c9b      	ldrb	r3, [r3, r2]
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	08007770 	.word	0x08007770

080018fc <SendResponseToMaster>:
//*							unsigned int Length - total length of input data array
//* Output Parameters     : none
//*--------------------------------------------------------------------------------------

void SendResponseToMaster(unsigned char *DataPacket, unsigned int Length)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
unsigned int Loop;
unsigned char CrcByte;

#ifdef MASTER_CMD_USART2
	CrcByte = CRC_INIT;
 8001906:	23ff      	movs	r3, #255	; 0xff
 8001908:	72fb      	strb	r3, [r7, #11]
	//send data
	__HAL_UART_CLEAR_FLAG(&huart2,UART_FLAG_TC);
 800190a:	4b21      	ldr	r3, [pc, #132]	; (8001990 <SendResponseToMaster+0x94>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001912:	601a      	str	r2, [r3, #0]
//	USART_ClearITPendingBit(USART2, UART_FLAG_TC);
	for(Loop = 0; Loop < Length; Loop++)
 8001914:	2300      	movs	r3, #0
 8001916:	60fb      	str	r3, [r7, #12]
 8001918:	e020      	b.n	800195c <SendResponseToMaster+0x60>
	{
//		USART_SendData(USART2,DataPacket[Loop] & 0x1FF);
		HAL_UART_Transmit(&huart2, DataPacket[Loop] & 0x1FF, sizeof(DataPacket[Loop] & 0x1FF), HAL_MAX_DELAY);
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	4413      	add	r3, r2
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	4619      	mov	r1, r3
 8001924:	f04f 33ff 	mov.w	r3, #4294967295
 8001928:	2204      	movs	r2, #4
 800192a:	4819      	ldr	r0, [pc, #100]	; (8001990 <SendResponseToMaster+0x94>)
 800192c:	f002 fec4 	bl	80046b8 <HAL_UART_Transmit>
//		while(USART_GetITStatus(USART2,UART_IT_TC) == RESET );
		while(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TC) == RESET);
 8001930:	bf00      	nop
 8001932:	4b17      	ldr	r3, [pc, #92]	; (8001990 <SendResponseToMaster+0x94>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800193c:	2b40      	cmp	r3, #64	; 0x40
 800193e:	d1f8      	bne.n	8001932 <SendResponseToMaster+0x36>
		CrcByte = Get8BitCrc(DataPacket[Loop], CrcByte);
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	4413      	add	r3, r2
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	7afa      	ldrb	r2, [r7, #11]
 800194a:	4611      	mov	r1, r2
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff ffb1 	bl	80018b4 <Get8BitCrc>
 8001952:	4603      	mov	r3, r0
 8001954:	72fb      	strb	r3, [r7, #11]
	for(Loop = 0; Loop < Length; Loop++)
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	3301      	adds	r3, #1
 800195a:	60fb      	str	r3, [r7, #12]
 800195c:	68fa      	ldr	r2, [r7, #12]
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	429a      	cmp	r2, r3
 8001962:	d3da      	bcc.n	800191a <SendResponseToMaster+0x1e>
	}
	//send CRC
//	USART_SendData(USART2,CrcByte & 0x1FF);
	HAL_UART_Transmit(&huart2, CrcByte & 0x1FF, sizeof(CrcByte & 0x1FF), HAL_MAX_DELAY);
 8001964:	7afb      	ldrb	r3, [r7, #11]
 8001966:	4619      	mov	r1, r3
 8001968:	f04f 33ff 	mov.w	r3, #4294967295
 800196c:	2204      	movs	r2, #4
 800196e:	4808      	ldr	r0, [pc, #32]	; (8001990 <SendResponseToMaster+0x94>)
 8001970:	f002 fea2 	bl	80046b8 <HAL_UART_Transmit>
//	while (USART_GetFlagStatus(USART2, UART_FLAG_TC) == RESET);
	while(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TC) == RESET);
 8001974:	bf00      	nop
 8001976:	4b06      	ldr	r3, [pc, #24]	; (8001990 <SendResponseToMaster+0x94>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001980:	2b40      	cmp	r3, #64	; 0x40
 8001982:	d1f8      	bne.n	8001976 <SendResponseToMaster+0x7a>
//	}
//	//send CRC
//	USART_SendData(&USART6,CrcByte & 0x1FF);
//	while (USART_GetFlagStatus(&USART6, USART_FLAG_TC) == RESET);
#endif
}
 8001984:	bf00      	nop
 8001986:	bf00      	nop
 8001988:	3710      	adds	r7, #16
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	200004b8 	.word	0x200004b8

08001994 <DecodeCmd>:
//* Input Parameters      : none
//* Output Parameters     : none
//*--------------------------------------------------------------------------------------

void DecodeCmd(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
unsigned char CrcByte;
unsigned char Loop;

//Command characters table - the higher position the faster response
unsigned char CmdChars[CMD_LAST - 1][2] =
 800199a:	4a3f      	ldr	r2, [pc, #252]	; (8001a98 <DecodeCmd+0x104>)
 800199c:	463b      	mov	r3, r7
 800199e:	ca07      	ldmia	r2, {r0, r1, r2}
 80019a0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	{'R',	'S'},	//CMD RADM setup
	{'A',	'C'}	//CMD alarm control
};

	//until decoded, no cmd received
	CmdDecoded = CMD_NONE;
 80019a4:	4b3d      	ldr	r3, [pc, #244]	; (8001a9c <DecodeCmd+0x108>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	701a      	strb	r2, [r3, #0]

	//double check the package length
	if(CmdCounter != (CmdPacket[3] + 6))
 80019aa:	4b3d      	ldr	r3, [pc, #244]	; (8001aa0 <DecodeCmd+0x10c>)
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	461a      	mov	r2, r3
 80019b0:	4b3c      	ldr	r3, [pc, #240]	; (8001aa4 <DecodeCmd+0x110>)
 80019b2:	78db      	ldrb	r3, [r3, #3]
 80019b4:	3306      	adds	r3, #6
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d163      	bne.n	8001a82 <DecodeCmd+0xee>
		return;

	//double check the package header
	if(CmdPacket[0] != '!')
 80019ba:	4b3a      	ldr	r3, [pc, #232]	; (8001aa4 <DecodeCmd+0x110>)
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	2b21      	cmp	r3, #33	; 0x21
 80019c0:	d161      	bne.n	8001a86 <DecodeCmd+0xf2>
		return;

	//double check the module type
	if(CmdPacket[1] != MT)
 80019c2:	4b38      	ldr	r3, [pc, #224]	; (8001aa4 <DecodeCmd+0x110>)
 80019c4:	785a      	ldrb	r2, [r3, #1]
 80019c6:	4b38      	ldr	r3, [pc, #224]	; (8001aa8 <DecodeCmd+0x114>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d15d      	bne.n	8001a8a <DecodeCmd+0xf6>
		return;

	//double check the module address
	if(CmdPacket[2] != MA)
 80019ce:	4b35      	ldr	r3, [pc, #212]	; (8001aa4 <DecodeCmd+0x110>)
 80019d0:	789a      	ldrb	r2, [r3, #2]
 80019d2:	4b36      	ldr	r3, [pc, #216]	; (8001aac <DecodeCmd+0x118>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d159      	bne.n	8001a8e <DecodeCmd+0xfa>
		return;

	//compare command characters
	for(Loop = 0; Loop < (CMD_LAST - 1); Loop++)
 80019da:	2300      	movs	r3, #0
 80019dc:	73bb      	strb	r3, [r7, #14]
 80019de:	e01e      	b.n	8001a1e <DecodeCmd+0x8a>
	{
		if((CmdPacket[4] == CmdChars[Loop][0]) && (CmdPacket[5] == CmdChars[Loop][1]))
 80019e0:	4b30      	ldr	r3, [pc, #192]	; (8001aa4 <DecodeCmd+0x110>)
 80019e2:	791a      	ldrb	r2, [r3, #4]
 80019e4:	7bbb      	ldrb	r3, [r7, #14]
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	f107 0110 	add.w	r1, r7, #16
 80019ec:	440b      	add	r3, r1
 80019ee:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d110      	bne.n	8001a18 <DecodeCmd+0x84>
 80019f6:	4b2b      	ldr	r3, [pc, #172]	; (8001aa4 <DecodeCmd+0x110>)
 80019f8:	795a      	ldrb	r2, [r3, #5]
 80019fa:	7bbb      	ldrb	r3, [r7, #14]
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	f107 0110 	add.w	r1, r7, #16
 8001a02:	440b      	add	r3, r1
 8001a04:	f813 3c0f 	ldrb.w	r3, [r3, #-15]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d105      	bne.n	8001a18 <DecodeCmd+0x84>
		{
			CmdDecoded = Loop + 1;
 8001a0c:	7bbb      	ldrb	r3, [r7, #14]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	b2da      	uxtb	r2, r3
 8001a12:	4b22      	ldr	r3, [pc, #136]	; (8001a9c <DecodeCmd+0x108>)
 8001a14:	701a      	strb	r2, [r3, #0]
			break;
 8001a16:	e005      	b.n	8001a24 <DecodeCmd+0x90>
	for(Loop = 0; Loop < (CMD_LAST - 1); Loop++)
 8001a18:	7bbb      	ldrb	r3, [r7, #14]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	73bb      	strb	r3, [r7, #14]
 8001a1e:	7bbb      	ldrb	r3, [r7, #14]
 8001a20:	2b05      	cmp	r3, #5
 8001a22:	d9dd      	bls.n	80019e0 <DecodeCmd+0x4c>
		}
	}

	//Check packet checksum
	CrcByte = CRC_INIT;
 8001a24:	23ff      	movs	r3, #255	; 0xff
 8001a26:	73fb      	strb	r3, [r7, #15]
	for(Loop = 1;Loop < (CmdCounter - 2); Loop++) //header is not a part of checksum check
 8001a28:	2301      	movs	r3, #1
 8001a2a:	73bb      	strb	r3, [r7, #14]
 8001a2c:	e00c      	b.n	8001a48 <DecodeCmd+0xb4>
		CrcByte = Get8BitCrc(CmdPacket[Loop], CrcByte);
 8001a2e:	7bbb      	ldrb	r3, [r7, #14]
 8001a30:	4a1c      	ldr	r2, [pc, #112]	; (8001aa4 <DecodeCmd+0x110>)
 8001a32:	5cd3      	ldrb	r3, [r2, r3]
 8001a34:	7bfa      	ldrb	r2, [r7, #15]
 8001a36:	4611      	mov	r1, r2
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7ff ff3b 	bl	80018b4 <Get8BitCrc>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	73fb      	strb	r3, [r7, #15]
	for(Loop = 1;Loop < (CmdCounter - 2); Loop++) //header is not a part of checksum check
 8001a42:	7bbb      	ldrb	r3, [r7, #14]
 8001a44:	3301      	adds	r3, #1
 8001a46:	73bb      	strb	r3, [r7, #14]
 8001a48:	7bba      	ldrb	r2, [r7, #14]
 8001a4a:	4b15      	ldr	r3, [pc, #84]	; (8001aa0 <DecodeCmd+0x10c>)
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	3b02      	subs	r3, #2
 8001a50:	429a      	cmp	r2, r3
 8001a52:	dbec      	blt.n	8001a2e <DecodeCmd+0x9a>

	if(CmdPacket[CmdCounter - 2] != CrcByte)
 8001a54:	4b12      	ldr	r3, [pc, #72]	; (8001aa0 <DecodeCmd+0x10c>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	3b02      	subs	r3, #2
 8001a5a:	4a12      	ldr	r2, [pc, #72]	; (8001aa4 <DecodeCmd+0x110>)
 8001a5c:	5cd3      	ldrb	r3, [r2, r3]
 8001a5e:	7bfa      	ldrb	r2, [r7, #15]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d003      	beq.n	8001a6c <DecodeCmd+0xd8>
	{
		CmdDecoded = CMD_NONE;
 8001a64:	4b0d      	ldr	r3, [pc, #52]	; (8001a9c <DecodeCmd+0x108>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	701a      	strb	r2, [r3, #0]
		return;
 8001a6a:	e011      	b.n	8001a90 <DecodeCmd+0xfc>
	}

	//Packet ending char check
	if(CmdPacket[CmdCounter - 1] != '#')
 8001a6c:	4b0c      	ldr	r3, [pc, #48]	; (8001aa0 <DecodeCmd+0x10c>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	3b01      	subs	r3, #1
 8001a72:	4a0c      	ldr	r2, [pc, #48]	; (8001aa4 <DecodeCmd+0x110>)
 8001a74:	5cd3      	ldrb	r3, [r2, r3]
 8001a76:	2b23      	cmp	r3, #35	; 0x23
 8001a78:	d00a      	beq.n	8001a90 <DecodeCmd+0xfc>
	{
		CmdDecoded = CMD_NONE;
 8001a7a:	4b08      	ldr	r3, [pc, #32]	; (8001a9c <DecodeCmd+0x108>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	701a      	strb	r2, [r3, #0]
		return;
 8001a80:	e006      	b.n	8001a90 <DecodeCmd+0xfc>
		return;
 8001a82:	bf00      	nop
 8001a84:	e004      	b.n	8001a90 <DecodeCmd+0xfc>
		return;
 8001a86:	bf00      	nop
 8001a88:	e002      	b.n	8001a90 <DecodeCmd+0xfc>
		return;
 8001a8a:	bf00      	nop
 8001a8c:	e000      	b.n	8001a90 <DecodeCmd+0xfc>
		return;
 8001a8e:	bf00      	nop
	}
}
 8001a90:	3710      	adds	r7, #16
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	08007870 	.word	0x08007870
 8001a9c:	20000344 	.word	0x20000344
 8001aa0:	2000037d 	.word	0x2000037d
 8001aa4:	20000328 	.word	0x20000328
 8001aa8:	200002f4 	.word	0x200002f4
 8001aac:	200002f5 	.word	0x200002f5

08001ab0 <SetGeneratorOut>:
//* Output Parameters     : none
//*--------------------------------------------------------------------------------------


void SetGeneratorOut(uint16_t Prescaler, uint16_t Period, uint16_t Pulse)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b090      	sub	sp, #64	; 0x40
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	80fb      	strh	r3, [r7, #6]
 8001aba:	460b      	mov	r3, r1
 8001abc:	80bb      	strh	r3, [r7, #4]
 8001abe:	4613      	mov	r3, r2
 8001ac0:	807b      	strh	r3, [r7, #2]
//	TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
//	TIM_TimeBaseStructure.TIM_Prescaler = Prescaler - 1;
//	TIM_TimeBaseStructure.TIM_Period = Period - 1;
//	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
//	TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);
	htim3.Instance = TIM3;
 8001ac2:	4b2c      	ldr	r3, [pc, #176]	; (8001b74 <SetGeneratorOut+0xc4>)
 8001ac4:	4a2c      	ldr	r2, [pc, #176]	; (8001b78 <SetGeneratorOut+0xc8>)
 8001ac6:	601a      	str	r2, [r3, #0]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ac8:	4b2a      	ldr	r3, [pc, #168]	; (8001b74 <SetGeneratorOut+0xc4>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	611a      	str	r2, [r3, #16]
	htim3.Init.Prescaler = Prescaler -1; // defined in function para
 8001ace:	88fb      	ldrh	r3, [r7, #6]
 8001ad0:	3b01      	subs	r3, #1
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	4b27      	ldr	r3, [pc, #156]	; (8001b74 <SetGeneratorOut+0xc4>)
 8001ad6:	605a      	str	r2, [r3, #4]
	htim3.Init.Period = Period  -1;
 8001ad8:	88bb      	ldrh	r3, [r7, #4]
 8001ada:	3b01      	subs	r3, #1
 8001adc:	461a      	mov	r2, r3
 8001ade:	4b25      	ldr	r3, [pc, #148]	; (8001b74 <SetGeneratorOut+0xc4>)
 8001ae0:	60da      	str	r2, [r3, #12]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ae2:	4b24      	ldr	r3, [pc, #144]	; (8001b74 <SetGeneratorOut+0xc4>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	609a      	str	r2, [r3, #8]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ae8:	4b22      	ldr	r3, [pc, #136]	; (8001b74 <SetGeneratorOut+0xc4>)
 8001aea:	2280      	movs	r2, #128	; 0x80
 8001aec:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001aee:	4821      	ldr	r0, [pc, #132]	; (8001b74 <SetGeneratorOut+0xc4>)
 8001af0:	f001 fef2 	bl	80038d8 <HAL_TIM_Base_Init>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <SetGeneratorOut+0x4e>
	{
	Error_Handler();
 8001afa:	f000 fc53 	bl	80023a4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001afe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b02:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b04:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b08:	4619      	mov	r1, r3
 8001b0a:	481a      	ldr	r0, [pc, #104]	; (8001b74 <SetGeneratorOut+0xc4>)
 8001b0c:	f002 f980 	bl	8003e10 <HAL_TIM_ConfigClockSource>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <SetGeneratorOut+0x6a>
	{
	Error_Handler();
 8001b16:	f000 fc45 	bl	80023a4 <Error_Handler>
	}
	TIM_TimeBaseStructure.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	62bb      	str	r3, [r7, #40]	; 0x28
	TIM_TimeBaseStructure.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &TIM_TimeBaseStructure) != HAL_OK)
 8001b22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b26:	4619      	mov	r1, r3
 8001b28:	4812      	ldr	r0, [pc, #72]	; (8001b74 <SetGeneratorOut+0xc4>)
 8001b2a:	f002 fd49 	bl	80045c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <SetGeneratorOut+0x88>
	{
	Error_Handler();
 8001b34:	f000 fc36 	bl	80023a4 <Error_Handler>
	}
	HAL_TIM_Base_Start(&htim3);
 8001b38:	480e      	ldr	r0, [pc, #56]	; (8001b74 <SetGeneratorOut+0xc4>)
 8001b3a:	f001 ff1d 	bl	8003978 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Init(&htim3);
 8001b3e:	480d      	ldr	r0, [pc, #52]	; (8001b74 <SetGeneratorOut+0xc4>)
 8001b40:	f001 ff82 	bl	8003a48 <HAL_TIM_PWM_Init>
//	TIM_OC3Init(TIM3, &TIM_OCInitStructure);
//
//	TIM_OC3PreloadConfig(TIM3, TIM_OCPreload_Enable);
//	TIM_ARRPreloadConfig(TIM3, ENABLE);

	TIM_OCInitStructure.OCMode = TIM_OCMODE_PWM1;
 8001b44:	2360      	movs	r3, #96	; 0x60
 8001b46:	60fb      	str	r3, [r7, #12]
	TIM_OCInitStructure.Pulse = Pulse;
 8001b48:	887b      	ldrh	r3, [r7, #2]
 8001b4a:	613b      	str	r3, [r7, #16]
	TIM_OCInitStructure.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	617b      	str	r3, [r7, #20]
	TIM_OCInitStructure.OCFastMode = TIM_OCFAST_DISABLE;
 8001b50:	2300      	movs	r3, #0
 8001b52:	61fb      	str	r3, [r7, #28]
	HAL_TIM_PWM_ConfigChannel(&htim3, &TIM_OCInitStructure, TIM_CHANNEL_3);
 8001b54:	f107 030c 	add.w	r3, r7, #12
 8001b58:	2208      	movs	r2, #8
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4805      	ldr	r0, [pc, #20]	; (8001b74 <SetGeneratorOut+0xc4>)
 8001b5e:	f002 f895 	bl	8003c8c <HAL_TIM_PWM_ConfigChannel>

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); //STARt PWM generation
 8001b62:	2108      	movs	r1, #8
 8001b64:	4803      	ldr	r0, [pc, #12]	; (8001b74 <SetGeneratorOut+0xc4>)
 8001b66:	f001 ffc9 	bl	8003afc <HAL_TIM_PWM_Start>
}
 8001b6a:	bf00      	nop
 8001b6c:	3740      	adds	r7, #64	; 0x40
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	200003d8 	.word	0x200003d8
 8001b78:	40000400 	.word	0x40000400

08001b7c <ReadAsp>:
//* Input Parameters      : none
//* Output Parameters     : unsigned char switches - actual status of ASPs
//*--------------------------------------------------------------------------------------

unsigned char ReadAsp(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
unsigned int Loop;
unsigned char Mask;
unsigned char APS;

	Mask = 0x01;
 8001b82:	2301      	movs	r3, #1
 8001b84:	70fb      	strb	r3, [r7, #3]
	APS = 0x00;
 8001b86:	2300      	movs	r3, #0
 8001b88:	70bb      	strb	r3, [r7, #2]
	for(Loop = 0; Loop < NR_ACT_PS; Loop++)
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	607b      	str	r3, [r7, #4]
 8001b8e:	e01d      	b.n	8001bcc <ReadAsp+0x50>
	{
		if(ReadGpioPinStatus(ActuatorPosSwitches[Loop]) == 1)
 8001b90:	4a12      	ldr	r2, [pc, #72]	; (8001bdc <ReadAsp+0x60>)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff fdf1 	bl	8001780 <ReadGpioPinStatus>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d109      	bne.n	8001bb8 <ReadAsp+0x3c>
			APS &= ~Mask;
 8001ba4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	b25a      	sxtb	r2, r3
 8001bac:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	b25b      	sxtb	r3, r3
 8001bb4:	70bb      	strb	r3, [r7, #2]
 8001bb6:	e003      	b.n	8001bc0 <ReadAsp+0x44>
		else
			APS |= Mask;
 8001bb8:	78ba      	ldrb	r2, [r7, #2]
 8001bba:	78fb      	ldrb	r3, [r7, #3]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	70bb      	strb	r3, [r7, #2]
		Mask <<= 1;
 8001bc0:	78fb      	ldrb	r3, [r7, #3]
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	70fb      	strb	r3, [r7, #3]
	for(Loop = 0; Loop < NR_ACT_PS; Loop++)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	3301      	adds	r3, #1
 8001bca:	607b      	str	r3, [r7, #4]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2b04      	cmp	r3, #4
 8001bd0:	d9de      	bls.n	8001b90 <ReadAsp+0x14>
	}
	return(APS);
 8001bd2:	78bb      	ldrb	r3, [r7, #2]
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3708      	adds	r7, #8
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	20000098 	.word	0x20000098

08001be0 <RadmSelfTest>:
//* Input Parameters      : int TestRdps - RDP test enabled [1 = yes, 0 = no]
//* Output Parameters     : none
//*--------------------------------------------------------------------------------------

void RadmSelfTest(int TestRdps)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b090      	sub	sp, #64	; 0x40
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
unsigned int Timeout;
unsigned int FirstEdge;
unsigned char CmdPacket[10];
int Status;
unsigned char AdamDataPacket[15];
unsigned char AdamTestPacket[7] = {"!014012"};
 8001be8:	4a99      	ldr	r2, [pc, #612]	; (8001e50 <RadmSelfTest+0x270>)
 8001bea:	f107 030c 	add.w	r3, r7, #12
 8001bee:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001bf2:	6018      	str	r0, [r3, #0]
 8001bf4:	3304      	adds	r3, #4
 8001bf6:	8019      	strh	r1, [r3, #0]
 8001bf8:	3302      	adds	r3, #2
 8001bfa:	0c0a      	lsrs	r2, r1, #16
 8001bfc:	701a      	strb	r2, [r3, #0]
unsigned int Loop;



	//initial SB = all OK
	SB = 0x00;
 8001bfe:	4b95      	ldr	r3, [pc, #596]	; (8001e54 <RadmSelfTest+0x274>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	701a      	strb	r2, [r3, #0]

	/////////////////////////////////////////////////////////////////
	//test synchronisation clock
	/////////////////////////////////////////////////////////////////
	//1. waiting for the edge
	Timeout = 0;
 8001c04:	2300      	movs	r3, #0
 8001c06:	63fb      	str	r3, [r7, #60]	; 0x3c
	if(ReadGpioPinStatus(CLK_SYN) == 0)
 8001c08:	2017      	movs	r0, #23
 8001c0a:	f7ff fdb9 	bl	8001780 <ReadGpioPinStatus>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d114      	bne.n	8001c3e <RadmSelfTest+0x5e>
	{
		FirstEdge = 0;
 8001c14:	2300      	movs	r3, #0
 8001c16:	63bb      	str	r3, [r7, #56]	; 0x38
		while(ReadGpioPinStatus(CLK_SYN) == 0)
 8001c18:	e00a      	b.n	8001c30 <RadmSelfTest+0x50>
		{
			Sleep10us(1);
 8001c1a:	2001      	movs	r0, #1
 8001c1c:	f7ff fd7c 	bl	8001718 <Sleep10us>
			Timeout++;
 8001c20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c22:	3301      	adds	r3, #1
 8001c24:	63fb      	str	r3, [r7, #60]	; 0x3c

			if(Timeout > 10000)
 8001c26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c28:	f242 7210 	movw	r2, #10000	; 0x2710
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d81b      	bhi.n	8001c68 <RadmSelfTest+0x88>
		while(ReadGpioPinStatus(CLK_SYN) == 0)
 8001c30:	2017      	movs	r0, #23
 8001c32:	f7ff fda5 	bl	8001780 <ReadGpioPinStatus>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d0ee      	beq.n	8001c1a <RadmSelfTest+0x3a>
 8001c3c:	e017      	b.n	8001c6e <RadmSelfTest+0x8e>
				break;
		}
	}
	else
	{
		FirstEdge = 1;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	63bb      	str	r3, [r7, #56]	; 0x38
		while(ReadGpioPinStatus(CLK_SYN) == 1)
 8001c42:	e00a      	b.n	8001c5a <RadmSelfTest+0x7a>
		{
			Sleep10us(1);
 8001c44:	2001      	movs	r0, #1
 8001c46:	f7ff fd67 	bl	8001718 <Sleep10us>
			Timeout++;
 8001c4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	63fb      	str	r3, [r7, #60]	; 0x3c

			if(Timeout > 10000)
 8001c50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c52:	f242 7210 	movw	r2, #10000	; 0x2710
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d808      	bhi.n	8001c6c <RadmSelfTest+0x8c>
		while(ReadGpioPinStatus(CLK_SYN) == 1)
 8001c5a:	2017      	movs	r0, #23
 8001c5c:	f7ff fd90 	bl	8001780 <ReadGpioPinStatus>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d0ee      	beq.n	8001c44 <RadmSelfTest+0x64>
 8001c66:	e002      	b.n	8001c6e <RadmSelfTest+0x8e>
				break;
 8001c68:	bf00      	nop
 8001c6a:	e000      	b.n	8001c6e <RadmSelfTest+0x8e>
				break;
 8001c6c:	bf00      	nop
		}

	}

	//2. some edge appeared - measure the time until the another (the same) one appears
	if(Timeout < 10000)
 8001c6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c70:	f242 720f 	movw	r2, #9999	; 0x270f
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d854      	bhi.n	8001d22 <RadmSelfTest+0x142>
	{
		Timeout = 0;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
		if(FirstEdge == 0)
 8001c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d120      	bne.n	8001cc4 <RadmSelfTest+0xe4>
		{
			//waiting for rising edge
			while(ReadGpioPinStatus(CLK_SYN) == 1)
 8001c82:	e005      	b.n	8001c90 <RadmSelfTest+0xb0>
			{
				Sleep(1);
 8001c84:	2001      	movs	r0, #1
 8001c86:	f7ff fd13 	bl	80016b0 <Sleep>
				Timeout++;
 8001c8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
			while(ReadGpioPinStatus(CLK_SYN) == 1)
 8001c90:	2017      	movs	r0, #23
 8001c92:	f7ff fd75 	bl	8001780 <ReadGpioPinStatus>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d0f3      	beq.n	8001c84 <RadmSelfTest+0xa4>
			}
			while(ReadGpioPinStatus(CLK_SYN) == 0)
 8001c9c:	e005      	b.n	8001caa <RadmSelfTest+0xca>
			{
				Sleep(1);
 8001c9e:	2001      	movs	r0, #1
 8001ca0:	f7ff fd06 	bl	80016b0 <Sleep>
				Timeout++;
 8001ca4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
			while(ReadGpioPinStatus(CLK_SYN) == 0)
 8001caa:	2017      	movs	r0, #23
 8001cac:	f7ff fd68 	bl	8001780 <ReadGpioPinStatus>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d0f3      	beq.n	8001c9e <RadmSelfTest+0xbe>
 8001cb6:	e018      	b.n	8001cea <RadmSelfTest+0x10a>
		else
		{
			//waiting for falling edge
			while(ReadGpioPinStatus(CLK_SYN) == 0)
			{
				Sleep(1);
 8001cb8:	2001      	movs	r0, #1
 8001cba:	f7ff fcf9 	bl	80016b0 <Sleep>
				Timeout++;
 8001cbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
			while(ReadGpioPinStatus(CLK_SYN) == 0)
 8001cc4:	2017      	movs	r0, #23
 8001cc6:	f7ff fd5b 	bl	8001780 <ReadGpioPinStatus>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d0f3      	beq.n	8001cb8 <RadmSelfTest+0xd8>
			}
			while(ReadGpioPinStatus(CLK_SYN) == 1)
 8001cd0:	e005      	b.n	8001cde <RadmSelfTest+0xfe>
			{
				Sleep(1);
 8001cd2:	2001      	movs	r0, #1
 8001cd4:	f7ff fcec 	bl	80016b0 <Sleep>
				Timeout++;
 8001cd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cda:	3301      	adds	r3, #1
 8001cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
			while(ReadGpioPinStatus(CLK_SYN) == 1)
 8001cde:	2017      	movs	r0, #23
 8001ce0:	f7ff fd4e 	bl	8001780 <ReadGpioPinStatus>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d0f3      	beq.n	8001cd2 <RadmSelfTest+0xf2>
			}
		}

		//check the timeout within 10% limits (nominal value is 972)
		if((Timeout > 845) && (Timeout < 1069))
 8001cea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cec:	f240 324d 	movw	r2, #845	; 0x34d
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d90c      	bls.n	8001d0e <RadmSelfTest+0x12e>
 8001cf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cf6:	f240 422c 	movw	r2, #1068	; 0x42c
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d807      	bhi.n	8001d0e <RadmSelfTest+0x12e>
			SB &= SB_OK_CLK_SYNC; //OK
 8001cfe:	4b55      	ldr	r3, [pc, #340]	; (8001e54 <RadmSelfTest+0x274>)
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	f023 0301 	bic.w	r3, r3, #1
 8001d06:	b2da      	uxtb	r2, r3
 8001d08:	4b52      	ldr	r3, [pc, #328]	; (8001e54 <RadmSelfTest+0x274>)
 8001d0a:	701a      	strb	r2, [r3, #0]
 8001d0c:	e012      	b.n	8001d34 <RadmSelfTest+0x154>
		else
			SB |= ~SB_OK_CLK_SYNC; //error
 8001d0e:	4b51      	ldr	r3, [pc, #324]	; (8001e54 <RadmSelfTest+0x274>)
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	b25b      	sxtb	r3, r3
 8001d14:	f043 0301 	orr.w	r3, r3, #1
 8001d18:	b25b      	sxtb	r3, r3
 8001d1a:	b2da      	uxtb	r2, r3
 8001d1c:	4b4d      	ldr	r3, [pc, #308]	; (8001e54 <RadmSelfTest+0x274>)
 8001d1e:	701a      	strb	r2, [r3, #0]
 8001d20:	e008      	b.n	8001d34 <RadmSelfTest+0x154>
	}
	else
	{
		SB |= ~SB_OK_CLK_SYNC; //error
 8001d22:	4b4c      	ldr	r3, [pc, #304]	; (8001e54 <RadmSelfTest+0x274>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	b25b      	sxtb	r3, r3
 8001d28:	f043 0301 	orr.w	r3, r3, #1
 8001d2c:	b25b      	sxtb	r3, r3
 8001d2e:	b2da      	uxtb	r2, r3
 8001d30:	4b48      	ldr	r3, [pc, #288]	; (8001e54 <RadmSelfTest+0x274>)
 8001d32:	701a      	strb	r2, [r3, #0]

	/////////////////////////////////////////////////////////////////
	//test the presence of the ADAM module
	/////////////////////////////////////////////////////////////////
	//Read Module Name command
	CmdPacket[0] = '$';
 8001d34:	2324      	movs	r3, #36	; 0x24
 8001d36:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	CmdPacket[1] = '0';
 8001d3a:	2330      	movs	r3, #48	; 0x30
 8001d3c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	CmdPacket[2] = '1';
 8001d40:	2331      	movs	r3, #49	; 0x31
 8001d42:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	CmdPacket[3] = 'M';
 8001d46:	234d      	movs	r3, #77	; 0x4d
 8001d48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	HAL_UART_Transmit(&huart6, CmdPacket, sizeof(CmdPacket), HAL_MAX_DELAY);
 8001d4c:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001d50:	f04f 33ff 	mov.w	r3, #4294967295
 8001d54:	220a      	movs	r2, #10
 8001d56:	4840      	ldr	r0, [pc, #256]	; (8001e58 <RadmSelfTest+0x278>)
 8001d58:	f002 fcae 	bl	80046b8 <HAL_UART_Transmit>
//	AdamSendCommand(&USART6, CmdPacket, 4);

	//get data
	Status = HAL_UART_Receive(&huart6, AdamDataPacket, sizeof(AdamDataPacket), HAL_MAX_DELAY);
 8001d5c:	f107 0114 	add.w	r1, r7, #20
 8001d60:	f04f 33ff 	mov.w	r3, #4294967295
 8001d64:	220f      	movs	r2, #15
 8001d66:	483c      	ldr	r0, [pc, #240]	; (8001e58 <RadmSelfTest+0x278>)
 8001d68:	f002 fd38 	bl	80047dc <HAL_UART_Receive>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	633b      	str	r3, [r7, #48]	; 0x30
//	Status = AdamReceiveDataCrtCheck(&USART6, AdamDataPacket, 10, 10000);

	//test data
	SB |= ~SB_OK_ADAM; //error
 8001d70:	4b38      	ldr	r3, [pc, #224]	; (8001e54 <RadmSelfTest+0x274>)
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	b25b      	sxtb	r3, r3
 8001d76:	f043 0302 	orr.w	r3, r3, #2
 8001d7a:	b25b      	sxtb	r3, r3
 8001d7c:	b2da      	uxtb	r2, r3
 8001d7e:	4b35      	ldr	r3, [pc, #212]	; (8001e54 <RadmSelfTest+0x274>)
 8001d80:	701a      	strb	r2, [r3, #0]
	if(Status == 0)
 8001d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d120      	bne.n	8001dca <RadmSelfTest+0x1ea>
	{
		for(Loop = 0;Loop < 7;Loop++)
 8001d88:	2300      	movs	r3, #0
 8001d8a:	637b      	str	r3, [r7, #52]	; 0x34
 8001d8c:	e00e      	b.n	8001dac <RadmSelfTest+0x1cc>
		{
			if(AdamTestPacket[Loop] !=	AdamDataPacket[Loop])
 8001d8e:	f107 020c 	add.w	r2, r7, #12
 8001d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d94:	4413      	add	r3, r2
 8001d96:	781a      	ldrb	r2, [r3, #0]
 8001d98:	f107 0114 	add.w	r1, r7, #20
 8001d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d9e:	440b      	add	r3, r1
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d106      	bne.n	8001db4 <RadmSelfTest+0x1d4>
		for(Loop = 0;Loop < 7;Loop++)
 8001da6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001da8:	3301      	adds	r3, #1
 8001daa:	637b      	str	r3, [r7, #52]	; 0x34
 8001dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dae:	2b06      	cmp	r3, #6
 8001db0:	d9ed      	bls.n	8001d8e <RadmSelfTest+0x1ae>
 8001db2:	e000      	b.n	8001db6 <RadmSelfTest+0x1d6>
				break;
 8001db4:	bf00      	nop
		}
		if(Loop == 7)
 8001db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001db8:	2b07      	cmp	r3, #7
 8001dba:	d106      	bne.n	8001dca <RadmSelfTest+0x1ea>
			SB &= SB_OK_ADAM; //OK
 8001dbc:	4b25      	ldr	r3, [pc, #148]	; (8001e54 <RadmSelfTest+0x274>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	f023 0302 	bic.w	r3, r3, #2
 8001dc4:	b2da      	uxtb	r2, r3
 8001dc6:	4b23      	ldr	r3, [pc, #140]	; (8001e54 <RadmSelfTest+0x274>)
 8001dc8:	701a      	strb	r2, [r3, #0]


	/////////////////////////////////////////////////////////////////
	//test the presence of the RDP meters
	/////////////////////////////////////////////////////////////////
	if(TestRdps == 1)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d136      	bne.n	8001e3e <RadmSelfTest+0x25e>
	{
		//test top RDP - thrust
		Status = RdpTest(RdpAddresses[RDP_THRUST]);
 8001dd0:	4b22      	ldr	r3, [pc, #136]	; (8001e5c <RadmSelfTest+0x27c>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f000 fa27 	bl	8002228 <RdpTest>
 8001dda:	6338      	str	r0, [r7, #48]	; 0x30
		if(Status)
 8001ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d009      	beq.n	8001df6 <RadmSelfTest+0x216>
			SB |= ~SB_OK_RDP_THRUST; //error
 8001de2:	4b1c      	ldr	r3, [pc, #112]	; (8001e54 <RadmSelfTest+0x274>)
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	b25b      	sxtb	r3, r3
 8001de8:	f043 0310 	orr.w	r3, r3, #16
 8001dec:	b25b      	sxtb	r3, r3
 8001dee:	b2da      	uxtb	r2, r3
 8001df0:	4b18      	ldr	r3, [pc, #96]	; (8001e54 <RadmSelfTest+0x274>)
 8001df2:	701a      	strb	r2, [r3, #0]
 8001df4:	e006      	b.n	8001e04 <RadmSelfTest+0x224>
		else
			SB &= SB_OK_RDP_THRUST; //OK
 8001df6:	4b17      	ldr	r3, [pc, #92]	; (8001e54 <RadmSelfTest+0x274>)
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	f023 0310 	bic.w	r3, r3, #16
 8001dfe:	b2da      	uxtb	r2, r3
 8001e00:	4b14      	ldr	r3, [pc, #80]	; (8001e54 <RadmSelfTest+0x274>)
 8001e02:	701a      	strb	r2, [r3, #0]

		Sleep(10); //sleep 1ms to avoid bus collisions
 8001e04:	200a      	movs	r0, #10
 8001e06:	f7ff fc53 	bl	80016b0 <Sleep>

		//test bottom RDP - torque
		Status = RdpTest(RdpAddresses[RDP_TORQUE]);
 8001e0a:	4b14      	ldr	r3, [pc, #80]	; (8001e5c <RadmSelfTest+0x27c>)
 8001e0c:	785b      	ldrb	r3, [r3, #1]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f000 fa0a 	bl	8002228 <RdpTest>
 8001e14:	6338      	str	r0, [r7, #48]	; 0x30
		if(Status)
 8001e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d009      	beq.n	8001e30 <RadmSelfTest+0x250>
			SB |= ~SB_OK_RDP_TORQUE; //error
 8001e1c:	4b0d      	ldr	r3, [pc, #52]	; (8001e54 <RadmSelfTest+0x274>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	b25b      	sxtb	r3, r3
 8001e22:	f043 0320 	orr.w	r3, r3, #32
 8001e26:	b25b      	sxtb	r3, r3
 8001e28:	b2da      	uxtb	r2, r3
 8001e2a:	4b0a      	ldr	r3, [pc, #40]	; (8001e54 <RadmSelfTest+0x274>)
 8001e2c:	701a      	strb	r2, [r3, #0]
 8001e2e:	e006      	b.n	8001e3e <RadmSelfTest+0x25e>
		else
			SB &= SB_OK_RDP_TORQUE; //OK
 8001e30:	4b08      	ldr	r3, [pc, #32]	; (8001e54 <RadmSelfTest+0x274>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	f023 0320 	bic.w	r3, r3, #32
 8001e38:	b2da      	uxtb	r2, r3
 8001e3a:	4b06      	ldr	r3, [pc, #24]	; (8001e54 <RadmSelfTest+0x274>)
 8001e3c:	701a      	strb	r2, [r3, #0]
	}


	SB = SB; //for debug only
 8001e3e:	4b05      	ldr	r3, [pc, #20]	; (8001e54 <RadmSelfTest+0x274>)
 8001e40:	781a      	ldrb	r2, [r3, #0]
 8001e42:	4b04      	ldr	r3, [pc, #16]	; (8001e54 <RadmSelfTest+0x274>)
 8001e44:	701a      	strb	r2, [r3, #0]

}
 8001e46:	bf00      	nop
 8001e48:	3740      	adds	r7, #64	; 0x40
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	08007884 	.word	0x08007884
 8001e54:	2000033f 	.word	0x2000033f
 8001e58:	20000430 	.word	0x20000430
 8001e5c:	200002f8 	.word	0x200002f8

08001e60 <SendMeasurementResults>:
//* Input Parameters      : none
//* Output Parameters     : none
//*--------------------------------------------------------------------------------------

void SendMeasurementResults(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b0b2      	sub	sp, #200	; 0xc8
 8001e64:	af00      	add	r7, sp, #0
unsigned int MeasLoop;
unsigned int DoubleLoop;


	//multiple measurements per packet
	for(MeasLoop = 0; MeasLoop < RADM_DATA_PACK; MeasLoop++)
 8001e66:	2300      	movs	r3, #0
 8001e68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001e6c:	e09f      	b.n	8001fae <SendMeasurementResults+0x14e>
	{
		//create response data packet: sample
		SampleCopy = SampleArray[MeasLoop];
 8001e6e:	4a57      	ldr	r2, [pc, #348]	; (8001fcc <SendMeasurementResults+0x16c>)
 8001e70:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001e74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e78:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
		for(Loop = 4; Loop > 0; Loop--)
 8001e7c:	2304      	movs	r3, #4
 8001e7e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001e82:	e01c      	b.n	8001ebe <SendMeasurementResults+0x5e>
		{
			ResponsePacket[(Loop - 1)+(29 * MeasLoop)] = (unsigned char)(SampleCopy & 0x000000FF);
 8001e84:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001e88:	4613      	mov	r3, r2
 8001e8a:	00db      	lsls	r3, r3, #3
 8001e8c:	1a9b      	subs	r3, r3, r2
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	441a      	add	r2, r3
 8001e92:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001e96:	4413      	add	r3, r2
 8001e98:	3b01      	subs	r3, #1
 8001e9a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001e9e:	b2d2      	uxtb	r2, r2
 8001ea0:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8001ea4:	440b      	add	r3, r1
 8001ea6:	f803 2cc8 	strb.w	r2, [r3, #-200]
			SampleCopy >>= 8;
 8001eaa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001eae:	0a1b      	lsrs	r3, r3, #8
 8001eb0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
		for(Loop = 4; Loop > 0; Loop--)
 8001eb4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001eb8:	3b01      	subs	r3, #1
 8001eba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001ebe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d1de      	bne.n	8001e84 <SendMeasurementResults+0x24>
		}

		//create response data packet: APS
		ResponsePacket[4+(29 * MeasLoop)] = ActualAps[MeasLoop];
 8001ec6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001eca:	4613      	mov	r3, r2
 8001ecc:	00db      	lsls	r3, r3, #3
 8001ece:	1a9b      	subs	r3, r3, r2
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	4413      	add	r3, r2
 8001ed4:	3304      	adds	r3, #4
 8001ed6:	493e      	ldr	r1, [pc, #248]	; (8001fd0 <SendMeasurementResults+0x170>)
 8001ed8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001edc:	440a      	add	r2, r1
 8001ede:	7812      	ldrb	r2, [r2, #0]
 8001ee0:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8001ee4:	440b      	add	r3, r1
 8001ee6:	f803 2cc8 	strb.w	r2, [r3, #-200]

		//create response data packet: double values
		DoubleValues[0] = MeasuredThrust[MeasLoop];
 8001eea:	4a3a      	ldr	r2, [pc, #232]	; (8001fd4 <SendMeasurementResults+0x174>)
 8001eec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001ef0:	00db      	lsls	r3, r3, #3
 8001ef2:	4413      	add	r3, r2
 8001ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef8:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
		DoubleValues[1] = MeasuredTorque[MeasLoop];
 8001efc:	4a36      	ldr	r2, [pc, #216]	; (8001fd8 <SendMeasurementResults+0x178>)
 8001efe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001f02:	00db      	lsls	r3, r3, #3
 8001f04:	4413      	add	r3, r2
 8001f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f0a:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
		DoubleValues[2] = MeasuredCurrent[MeasLoop];
 8001f0e:	4a33      	ldr	r2, [pc, #204]	; (8001fdc <SendMeasurementResults+0x17c>)
 8001f10:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001f14:	00db      	lsls	r3, r3, #3
 8001f16:	4413      	add	r3, r2
 8001f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f1c:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8

		for(DoubleLoop = 0; DoubleLoop < 3; DoubleLoop++)
 8001f20:	2300      	movs	r3, #0
 8001f22:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001f26:	e039      	b.n	8001f9c <SendMeasurementResults+0x13c>
		{
			PointerDouble = &DoubleValues[DoubleLoop];
 8001f28:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8001f2c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001f30:	00db      	lsls	r3, r3, #3
 8001f32:	4413      	add	r3, r2
 8001f34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
			PointerBytes = (unsigned char *)PointerDouble;
 8001f38:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001f3c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
			for(Loop = 0; Loop < 8; Loop++)
 8001f40:	2300      	movs	r3, #0
 8001f42:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001f46:	e020      	b.n	8001f8a <SendMeasurementResults+0x12a>
			{
				ResponsePacket[Loop + (DoubleLoop * 8) + 5 + (29 * MeasLoop)] = *PointerBytes;
 8001f48:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001f4c:	00da      	lsls	r2, r3, #3
 8001f4e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001f52:	18d1      	adds	r1, r2, r3
 8001f54:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001f58:	4613      	mov	r3, r2
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	1a9b      	subs	r3, r3, r2
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	4413      	add	r3, r2
 8001f62:	440b      	add	r3, r1
 8001f64:	3305      	adds	r3, #5
 8001f66:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001f6a:	7812      	ldrb	r2, [r2, #0]
 8001f6c:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8001f70:	440b      	add	r3, r1
 8001f72:	f803 2cc8 	strb.w	r2, [r3, #-200]
				PointerBytes++;
 8001f76:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
			for(Loop = 0; Loop < 8; Loop++)
 8001f80:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001f84:	3301      	adds	r3, #1
 8001f86:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001f8a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001f8e:	2b07      	cmp	r3, #7
 8001f90:	d9da      	bls.n	8001f48 <SendMeasurementResults+0xe8>
		for(DoubleLoop = 0; DoubleLoop < 3; DoubleLoop++)
 8001f92:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001f96:	3301      	adds	r3, #1
 8001f98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001f9c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d9c1      	bls.n	8001f28 <SendMeasurementResults+0xc8>
	for(MeasLoop = 0; MeasLoop < RADM_DATA_PACK; MeasLoop++)
 8001fa4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001fa8:	3301      	adds	r3, #1
 8001faa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001fae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001fb2:	2b04      	cmp	r3, #4
 8001fb4:	f67f af5b 	bls.w	8001e6e <SendMeasurementResults+0xe>
			}
		}
	}

	SendResponseToMaster(ResponsePacket, (29*RADM_DATA_PACK));
 8001fb8:	463b      	mov	r3, r7
 8001fba:	2191      	movs	r1, #145	; 0x91
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7ff fc9d 	bl	80018fc <SendResponseToMaster>

}
 8001fc2:	bf00      	nop
 8001fc4:	37c8      	adds	r7, #200	; 0xc8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	200002e0 	.word	0x200002e0
 8001fd0:	20000378 	.word	0x20000378
 8001fd4:	200002b8 	.word	0x200002b8
 8001fd8:	20000300 	.word	0x20000300
 8001fdc:	20000350 	.word	0x20000350

08001fe0 <AdamReadAdc>:
//* Input Parameters      : double *MeasVolt - pointer to the result
//* Output Parameters     : returns status (0 - OK, other value - ERROR)
//*--------------------------------------------------------------------------------------

int AdamReadAdc(double *MeasVolt)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b08e      	sub	sp, #56	; 0x38
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
unsigned int Loop;
char NumberStr[10];


	//Analog Data In command
	CmdPacket[0] = '#';
 8001fe8:	2323      	movs	r3, #35	; 0x23
 8001fea:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	CmdPacket[1] = '0';
 8001fee:	2330      	movs	r3, #48	; 0x30
 8001ff0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	CmdPacket[2] = '1';
 8001ff4:	2331      	movs	r3, #49	; 0x31
 8001ff6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
//	AdamSendCommand(&USART6, CmdPacket, 3);
	HAL_UART_Transmit(&huart6, CmdPacket, sizeof(CmdPacket), HAL_MAX_DELAY);
 8001ffa:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8002002:	220a      	movs	r2, #10
 8002004:	4824      	ldr	r0, [pc, #144]	; (8002098 <AdamReadAdc+0xb8>)
 8002006:	f002 fb57 	bl	80046b8 <HAL_UART_Transmit>

	//get data

//	Status = AdamReceiveDataCrtCheck(&USART6, AdamDataPacket, 11, 10000);
	Status = HAL_UART_Receive(&huart6, AdamDataPacket, sizeof(AdamDataPacket), HAL_MAX_DELAY);
 800200a:	f107 0114 	add.w	r1, r7, #20
 800200e:	f04f 33ff 	mov.w	r3, #4294967295
 8002012:	220f      	movs	r2, #15
 8002014:	4820      	ldr	r0, [pc, #128]	; (8002098 <AdamReadAdc+0xb8>)
 8002016:	f002 fbe1 	bl	80047dc <HAL_UART_Receive>
 800201a:	4603      	mov	r3, r0
 800201c:	633b      	str	r3, [r7, #48]	; 0x30
	if(Status)
 800201e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002020:	2b00      	cmp	r3, #0
 8002022:	d002      	beq.n	800202a <AdamReadAdc+0x4a>
		return(-1);
 8002024:	f04f 33ff 	mov.w	r3, #4294967295
 8002028:	e031      	b.n	800208e <AdamReadAdc+0xae>

	//data OK, time to parse the value
	for(Loop = 0; Loop < sizeof(NumberStr); Loop++)
 800202a:	2300      	movs	r3, #0
 800202c:	637b      	str	r3, [r7, #52]	; 0x34
 800202e:	e008      	b.n	8002042 <AdamReadAdc+0x62>
		NumberStr[Loop] = 0x00;
 8002030:	f107 0208 	add.w	r2, r7, #8
 8002034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002036:	4413      	add	r3, r2
 8002038:	2200      	movs	r2, #0
 800203a:	701a      	strb	r2, [r3, #0]
	for(Loop = 0; Loop < sizeof(NumberStr); Loop++)
 800203c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800203e:	3301      	adds	r3, #1
 8002040:	637b      	str	r3, [r7, #52]	; 0x34
 8002042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002044:	2b09      	cmp	r3, #9
 8002046:	d9f3      	bls.n	8002030 <AdamReadAdc+0x50>
	for(Loop = 0; Loop < 7; Loop++)
 8002048:	2300      	movs	r3, #0
 800204a:	637b      	str	r3, [r7, #52]	; 0x34
 800204c:	e00f      	b.n	800206e <AdamReadAdc+0x8e>
		NumberStr[Loop] = (char)AdamDataPacket[Loop + 1];
 800204e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002050:	3301      	adds	r3, #1
 8002052:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002056:	4413      	add	r3, r2
 8002058:	f813 1c24 	ldrb.w	r1, [r3, #-36]
 800205c:	f107 0208 	add.w	r2, r7, #8
 8002060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002062:	4413      	add	r3, r2
 8002064:	460a      	mov	r2, r1
 8002066:	701a      	strb	r2, [r3, #0]
	for(Loop = 0; Loop < 7; Loop++)
 8002068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800206a:	3301      	adds	r3, #1
 800206c:	637b      	str	r3, [r7, #52]	; 0x34
 800206e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002070:	2b06      	cmp	r3, #6
 8002072:	d9ec      	bls.n	800204e <AdamReadAdc+0x6e>
	*MeasVolt = atof(NumberStr);
 8002074:	f107 0308 	add.w	r3, r7, #8
 8002078:	4618      	mov	r0, r3
 800207a:	f002 fcbf 	bl	80049fc <atof>
 800207e:	eeb0 7a40 	vmov.f32	s14, s0
 8002082:	eef0 7a60 	vmov.f32	s15, s1
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	ed83 7b00 	vstr	d7, [r3]

	return(0);
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3738      	adds	r7, #56	; 0x38
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	20000430 	.word	0x20000430

0800209c <RdpReadVal>:
//*							double *MeasVal - pointer to the result
//* Output Parameters     : returns status (0 - OK, other value - ERROR)
//*--------------------------------------------------------------------------------------

int RdpReadVal(unsigned char RdpAddress, double *MeasVal)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b08e      	sub	sp, #56	; 0x38
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	4603      	mov	r3, r0
 80020a4:	6039      	str	r1, [r7, #0]
 80020a6:	71fb      	strb	r3, [r7, #7]
char NumberStr[10];
char AddressHighChar;
char AddressLowChar;

	//get the address characters
	AddressHighChar = RdpAddress;
 80020a8:	79fb      	ldrb	r3, [r7, #7]
 80020aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	AddressHighChar >>= 4;
 80020ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80020b2:	091b      	lsrs	r3, r3, #4
 80020b4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	if(AddressHighChar < 10)
 80020b8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80020bc:	2b09      	cmp	r3, #9
 80020be:	d805      	bhi.n	80020cc <RdpReadVal+0x30>
		AddressHighChar += 0x30;
 80020c0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80020c4:	3330      	adds	r3, #48	; 0x30
 80020c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80020ca:	e004      	b.n	80020d6 <RdpReadVal+0x3a>
	else
		AddressHighChar += 0x37;
 80020cc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80020d0:	3337      	adds	r3, #55	; 0x37
 80020d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	AddressLowChar = RdpAddress;
 80020d6:	79fb      	ldrb	r3, [r7, #7]
 80020d8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	AddressLowChar &= 0x0F;
 80020dc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80020e0:	f003 030f 	and.w	r3, r3, #15
 80020e4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	if(AddressLowChar < 10)
 80020e8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80020ec:	2b09      	cmp	r3, #9
 80020ee:	d805      	bhi.n	80020fc <RdpReadVal+0x60>
		AddressLowChar += 0x30;
 80020f0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80020f4:	3330      	adds	r3, #48	; 0x30
 80020f6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80020fa:	e004      	b.n	8002106 <RdpReadVal+0x6a>
	else
		AddressLowChar += 0x37;
 80020fc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002100:	3337      	adds	r3, #55	; 0x37
 8002102:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	//prepare the command string
	CmdPacket[0] = '#';
 8002106:	2323      	movs	r3, #35	; 0x23
 8002108:	f887 3020 	strb.w	r3, [r7, #32]
	CmdPacket[1] = AddressHighChar;
 800210c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002110:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	CmdPacket[2] = AddressLowChar;
 8002114:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002118:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	CmdPacket[3] = ' ';
 800211c:	2320      	movs	r3, #32
 800211e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	CmdPacket[4] = 'S';
 8002122:	2353      	movs	r3, #83	; 0x53
 8002124:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	CmdPacket[5] = 'C';
 8002128:	2343      	movs	r3, #67	; 0x43
 800212a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	CmdPacket[6] = 'A';
 800212e:	2341      	movs	r3, #65	; 0x41
 8002130:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	CmdPacket[7] = 'N';
 8002134:	234e      	movs	r3, #78	; 0x4e
 8002136:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	CmdPacket[8] = '\r';
 800213a:	230d      	movs	r3, #13
 800213c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	CmdPacket[9] = '\n';
 8002140:	230a      	movs	r3, #10
 8002142:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

	//send the command
	WriteToGpioPin(RS485_DIR2,1);
 8002146:	2101      	movs	r1, #1
 8002148:	200d      	movs	r0, #13
 800214a:	f7ff fb33 	bl	80017b4 <WriteToGpioPin>
//	USART_ClearFlag(&UART4, UART_FLAG_TC);
	__HAL_UART_CLEAR_FLAG(&huart4,UART_FLAG_TC);
 800214e:	4b35      	ldr	r3, [pc, #212]	; (8002224 <RdpReadVal+0x188>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002156:	601a      	str	r2, [r3, #0]
	for(Loop = 0; Loop < 10; Loop++)
 8002158:	2300      	movs	r3, #0
 800215a:	637b      	str	r3, [r7, #52]	; 0x34
 800215c:	e016      	b.n	800218c <RdpReadVal+0xf0>
	{
//		USART_SendData(&UART4,CmdPacket[Loop] & 0x1FF);
		HAL_UART_Transmit(&huart4, CmdPacket[Loop] & 0x1FF , sizeof(CmdPacket[Loop] & 0x1FF), HAL_MAX_DELAY);
 800215e:	f107 0220 	add.w	r2, r7, #32
 8002162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002164:	4413      	add	r3, r2
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	4619      	mov	r1, r3
 800216a:	f04f 33ff 	mov.w	r3, #4294967295
 800216e:	2204      	movs	r2, #4
 8002170:	482c      	ldr	r0, [pc, #176]	; (8002224 <RdpReadVal+0x188>)
 8002172:	f002 faa1 	bl	80046b8 <HAL_UART_Transmit>
//		while (USART_GetFlagStatus(&UART4, UART_FLAG_TC) == RESET);
		while(__HAL_UART_GET_FLAG(&huart4,UART_FLAG_TC) == RESET);
 8002176:	bf00      	nop
 8002178:	4b2a      	ldr	r3, [pc, #168]	; (8002224 <RdpReadVal+0x188>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002182:	2b40      	cmp	r3, #64	; 0x40
 8002184:	d1f8      	bne.n	8002178 <RdpReadVal+0xdc>
	for(Loop = 0; Loop < 10; Loop++)
 8002186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002188:	3301      	adds	r3, #1
 800218a:	637b      	str	r3, [r7, #52]	; 0x34
 800218c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800218e:	2b09      	cmp	r3, #9
 8002190:	d9e5      	bls.n	800215e <RdpReadVal+0xc2>
	}
	WriteToGpioPin(RS485_DIR2,0);
 8002192:	2100      	movs	r1, #0
 8002194:	200d      	movs	r0, #13
 8002196:	f7ff fb0d 	bl	80017b4 <WriteToGpioPin>

	//receive data
	Status = HAL_UART_Receive(&huart4, RdpDataPacket, sizeof(RdpDataPacket), HAL_MAX_DELAY);
 800219a:	f107 0114 	add.w	r1, r7, #20
 800219e:	f04f 33ff 	mov.w	r3, #4294967295
 80021a2:	220a      	movs	r2, #10
 80021a4:	481f      	ldr	r0, [pc, #124]	; (8002224 <RdpReadVal+0x188>)
 80021a6:	f002 fb19 	bl	80047dc <HAL_UART_Receive>
 80021aa:	4603      	mov	r3, r0
 80021ac:	62fb      	str	r3, [r7, #44]	; 0x2c
//	Status = ReceiveUsartPacket(&UART4, RdpDataPacket, 9, 10000);

	if(Status)
 80021ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d002      	beq.n	80021ba <RdpReadVal+0x11e>
		return(-1);
 80021b4:	f04f 33ff 	mov.w	r3, #4294967295
 80021b8:	e02f      	b.n	800221a <RdpReadVal+0x17e>

	//data OK, time to parse the value
	for(Loop = 0; Loop < sizeof(NumberStr); Loop++)
 80021ba:	2300      	movs	r3, #0
 80021bc:	637b      	str	r3, [r7, #52]	; 0x34
 80021be:	e008      	b.n	80021d2 <RdpReadVal+0x136>
		NumberStr[Loop] = 0x00;
 80021c0:	f107 0208 	add.w	r2, r7, #8
 80021c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021c6:	4413      	add	r3, r2
 80021c8:	2200      	movs	r2, #0
 80021ca:	701a      	strb	r2, [r3, #0]
	for(Loop = 0; Loop < sizeof(NumberStr); Loop++)
 80021cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021ce:	3301      	adds	r3, #1
 80021d0:	637b      	str	r3, [r7, #52]	; 0x34
 80021d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021d4:	2b09      	cmp	r3, #9
 80021d6:	d9f3      	bls.n	80021c0 <RdpReadVal+0x124>
	for(Loop = 0; Loop < 7; Loop++)
 80021d8:	2300      	movs	r3, #0
 80021da:	637b      	str	r3, [r7, #52]	; 0x34
 80021dc:	e00d      	b.n	80021fa <RdpReadVal+0x15e>
		NumberStr[Loop] = (char)RdpDataPacket[Loop];
 80021de:	f107 0214 	add.w	r2, r7, #20
 80021e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021e4:	4413      	add	r3, r2
 80021e6:	7819      	ldrb	r1, [r3, #0]
 80021e8:	f107 0208 	add.w	r2, r7, #8
 80021ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021ee:	4413      	add	r3, r2
 80021f0:	460a      	mov	r2, r1
 80021f2:	701a      	strb	r2, [r3, #0]
	for(Loop = 0; Loop < 7; Loop++)
 80021f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021f6:	3301      	adds	r3, #1
 80021f8:	637b      	str	r3, [r7, #52]	; 0x34
 80021fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021fc:	2b06      	cmp	r3, #6
 80021fe:	d9ee      	bls.n	80021de <RdpReadVal+0x142>
	*MeasVal = atof(NumberStr);
 8002200:	f107 0308 	add.w	r3, r7, #8
 8002204:	4618      	mov	r0, r3
 8002206:	f002 fbf9 	bl	80049fc <atof>
 800220a:	eeb0 7a40 	vmov.f32	s14, s0
 800220e:	eef0 7a60 	vmov.f32	s15, s1
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	ed83 7b00 	vstr	d7, [r3]

	return(0);
 8002218:	2300      	movs	r3, #0
}
 800221a:	4618      	mov	r0, r3
 800221c:	3738      	adds	r7, #56	; 0x38
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	20000474 	.word	0x20000474

08002228 <RdpTest>:
//* Input Parameters      : unsigned char RdpAddress - RS485 address
//* Output Parameters     : returns status (0 - OK, other value - ERROR)
//*--------------------------------------------------------------------------------------

int RdpTest(unsigned char RdpAddress)
{
 8002228:	b5b0      	push	{r4, r5, r7, lr}
 800222a:	b092      	sub	sp, #72	; 0x48
 800222c:	af00      	add	r7, sp, #0
 800222e:	4603      	mov	r3, r0
 8002230:	71fb      	strb	r3, [r7, #7]
unsigned char RdpDataPacket[20];
unsigned int Loop;
//char NumberStr[10];
char AddressHighChar;
char AddressLowChar;			  //01234567890123456789
unsigned char RdpTestPacket[19] = {"E725 Version 1.10\r\n"};
 8002232:	4b5a      	ldr	r3, [pc, #360]	; (800239c <RdpTest+0x174>)
 8002234:	f107 0408 	add.w	r4, r7, #8
 8002238:	461d      	mov	r5, r3
 800223a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800223c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800223e:	682b      	ldr	r3, [r5, #0]
 8002240:	461a      	mov	r2, r3
 8002242:	8022      	strh	r2, [r4, #0]
 8002244:	3402      	adds	r4, #2
 8002246:	0c1b      	lsrs	r3, r3, #16
 8002248:	7023      	strb	r3, [r4, #0]

	//get the address characters
	AddressHighChar = RdpAddress;
 800224a:	79fb      	ldrb	r3, [r7, #7]
 800224c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	AddressHighChar >>= 4;
 8002250:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002254:	091b      	lsrs	r3, r3, #4
 8002256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	if(AddressHighChar < 10)
 800225a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800225e:	2b09      	cmp	r3, #9
 8002260:	d805      	bhi.n	800226e <RdpTest+0x46>
		AddressHighChar += 0x30;
 8002262:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002266:	3330      	adds	r3, #48	; 0x30
 8002268:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800226c:	e004      	b.n	8002278 <RdpTest+0x50>
	else
		AddressHighChar += 0x37;
 800226e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002272:	3337      	adds	r3, #55	; 0x37
 8002274:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	AddressLowChar = RdpAddress;
 8002278:	79fb      	ldrb	r3, [r7, #7]
 800227a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	AddressLowChar &= 0x0F;
 800227e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8002282:	f003 030f 	and.w	r3, r3, #15
 8002286:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	if(AddressLowChar < 10)
 800228a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800228e:	2b09      	cmp	r3, #9
 8002290:	d805      	bhi.n	800229e <RdpTest+0x76>
		AddressLowChar += 0x30;
 8002292:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8002296:	3330      	adds	r3, #48	; 0x30
 8002298:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800229c:	e004      	b.n	80022a8 <RdpTest+0x80>
	else
		AddressLowChar += 0x37;
 800229e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80022a2:	3337      	adds	r3, #55	; 0x37
 80022a4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42

	//prepare the command string
	CmdPacket[0] = '#';
 80022a8:	2323      	movs	r3, #35	; 0x23
 80022aa:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	CmdPacket[1] = AddressHighChar;
 80022ae:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80022b2:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	CmdPacket[2] = AddressLowChar;
 80022b6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80022ba:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	CmdPacket[3] = ' ';
 80022be:	2320      	movs	r3, #32
 80022c0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	CmdPacket[4] = 'S';
 80022c4:	2353      	movs	r3, #83	; 0x53
 80022c6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	CmdPacket[5] = 'Y';
 80022ca:	2359      	movs	r3, #89	; 0x59
 80022cc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	CmdPacket[6] = 'S';
 80022d0:	2353      	movs	r3, #83	; 0x53
 80022d2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	CmdPacket[7] = '\r';
 80022d6:	230d      	movs	r3, #13
 80022d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	CmdPacket[8] = '\n';
 80022dc:	230a      	movs	r3, #10
 80022de:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38

	//send the command
	WriteToGpioPin(RS485_DIR2,1);
 80022e2:	2101      	movs	r1, #1
 80022e4:	200d      	movs	r0, #13
 80022e6:	f7ff fa65 	bl	80017b4 <WriteToGpioPin>
//	USART_ClearFlag(&UART4, UART_FLAG_TC);
	__HAL_UART_CLEAR_FLAG(&huart4,UART_FLAG_TC);
 80022ea:	4b2d      	ldr	r3, [pc, #180]	; (80023a0 <RdpTest+0x178>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80022f2:	601a      	str	r2, [r3, #0]
	for(Loop = 0; Loop < 9; Loop++)
 80022f4:	2300      	movs	r3, #0
 80022f6:	647b      	str	r3, [r7, #68]	; 0x44
 80022f8:	e016      	b.n	8002328 <RdpTest+0x100>
	{
//		HAL_UART_Transmit(&huart, buffer , sizeof(buffer), HAL_MAX_DELAY);
		HAL_UART_Transmit(&huart4, CmdPacket[Loop] & 0x1FF , sizeof(CmdPacket[Loop] & 0x1FF), HAL_MAX_DELAY);
 80022fa:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80022fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002300:	4413      	add	r3, r2
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	4619      	mov	r1, r3
 8002306:	f04f 33ff 	mov.w	r3, #4294967295
 800230a:	2204      	movs	r2, #4
 800230c:	4824      	ldr	r0, [pc, #144]	; (80023a0 <RdpTest+0x178>)
 800230e:	f002 f9d3 	bl	80046b8 <HAL_UART_Transmit>
//		USART_SendData(&UART4,CmdPacket[Loop] & 0x1FF);
//		while (USART_GetFlagStatus(&UART4, UART_FLAG_TC) == RESET);
		while(__HAL_UART_GET_FLAG(&huart4,UART_FLAG_TC) == RESET);
 8002312:	bf00      	nop
 8002314:	4b22      	ldr	r3, [pc, #136]	; (80023a0 <RdpTest+0x178>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800231e:	2b40      	cmp	r3, #64	; 0x40
 8002320:	d1f8      	bne.n	8002314 <RdpTest+0xec>
	for(Loop = 0; Loop < 9; Loop++)
 8002322:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002324:	3301      	adds	r3, #1
 8002326:	647b      	str	r3, [r7, #68]	; 0x44
 8002328:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800232a:	2b08      	cmp	r3, #8
 800232c:	d9e5      	bls.n	80022fa <RdpTest+0xd2>
	}
	WriteToGpioPin(RS485_DIR2,0);
 800232e:	2100      	movs	r1, #0
 8002330:	200d      	movs	r0, #13
 8002332:	f7ff fa3f 	bl	80017b4 <WriteToGpioPin>


	//receive data
	Status = HAL_UART_Receive(&huart4, RdpDataPacket, sizeof(RdpDataPacket), HAL_MAX_DELAY);
 8002336:	f107 011c 	add.w	r1, r7, #28
 800233a:	f04f 33ff 	mov.w	r3, #4294967295
 800233e:	2214      	movs	r2, #20
 8002340:	4817      	ldr	r0, [pc, #92]	; (80023a0 <RdpTest+0x178>)
 8002342:	f002 fa4b 	bl	80047dc <HAL_UART_Receive>
 8002346:	4603      	mov	r3, r0
 8002348:	63fb      	str	r3, [r7, #60]	; 0x3c
//	Status = ReceiveUsartPacket(&UART4, RdpDataPacket, 19, 10000);
	if(Status)
 800234a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800234c:	2b00      	cmp	r3, #0
 800234e:	d002      	beq.n	8002356 <RdpTest+0x12e>
		return(-1); //error
 8002350:	f04f 33ff 	mov.w	r3, #4294967295
 8002354:	e01d      	b.n	8002392 <RdpTest+0x16a>
	//test data string
	for(Loop = 0;Loop < 19;Loop++)
 8002356:	2300      	movs	r3, #0
 8002358:	647b      	str	r3, [r7, #68]	; 0x44
 800235a:	e00e      	b.n	800237a <RdpTest+0x152>
	{
		if(RdpDataPacket[Loop] != RdpTestPacket[Loop])
 800235c:	f107 021c 	add.w	r2, r7, #28
 8002360:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002362:	4413      	add	r3, r2
 8002364:	781a      	ldrb	r2, [r3, #0]
 8002366:	f107 0108 	add.w	r1, r7, #8
 800236a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800236c:	440b      	add	r3, r1
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	429a      	cmp	r2, r3
 8002372:	d106      	bne.n	8002382 <RdpTest+0x15a>
	for(Loop = 0;Loop < 19;Loop++)
 8002374:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002376:	3301      	adds	r3, #1
 8002378:	647b      	str	r3, [r7, #68]	; 0x44
 800237a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800237c:	2b12      	cmp	r3, #18
 800237e:	d9ed      	bls.n	800235c <RdpTest+0x134>
 8002380:	e000      	b.n	8002384 <RdpTest+0x15c>
			break;
 8002382:	bf00      	nop
	}
	if(Loop != 19)
 8002384:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002386:	2b13      	cmp	r3, #19
 8002388:	d002      	beq.n	8002390 <RdpTest+0x168>
		return(-2);	//error
 800238a:	f06f 0301 	mvn.w	r3, #1
 800238e:	e000      	b.n	8002392 <RdpTest+0x16a>
	else
		return(0);	//OK
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3748      	adds	r7, #72	; 0x48
 8002396:	46bd      	mov	sp, r7
 8002398:	bdb0      	pop	{r4, r5, r7, pc}
 800239a:	bf00      	nop
 800239c:	0800788c 	.word	0x0800788c
 80023a0:	20000474 	.word	0x20000474

080023a4 <Error_Handler>:


void Error_Handler(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023a8:	b672      	cpsid	i
}
 80023aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023ac:	e7fe      	b.n	80023ac <Error_Handler+0x8>

080023ae <SystemTask>:
//* Input Parameters      : none
//* Output Parameters     : none
//*--------------------------------------------------------------------------------------

void SystemTask(void)
{
 80023ae:	b580      	push	{r7, lr}
 80023b0:	af00      	add	r7, sp, #0
	//Update System LEDs
	UpdateSystemLeds();
 80023b2:	f7ff fa4d 	bl	8001850 <UpdateSystemLeds>
}
 80023b6:	bf00      	nop
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	0000      	movs	r0, r0
 80023bc:	0000      	movs	r0, r0
	...

080023c0 <MeasurementTask>:
//* Input Parameters      : none
//* Output Parameters     : none
//*--------------------------------------------------------------------------------------

void MeasurementTask(void)
{
 80023c0:	b590      	push	{r4, r7, lr}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
int Status;
unsigned int AttemptLoop;

	//initialisation of measurement
	if(ModuleMode == MM_MEAS_INIT)
 80023c6:	4b5e      	ldr	r3, [pc, #376]	; (8002540 <MeasurementTask+0x180>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d10e      	bne.n	80023ec <MeasurementTask+0x2c>
	{
		LastClkSync	= ReadGpioPinStatus(CLK_SYN);
 80023ce:	2017      	movs	r0, #23
 80023d0:	f7ff f9d6 	bl	8001780 <ReadGpioPinStatus>
 80023d4:	4603      	mov	r3, r0
 80023d6:	4a5b      	ldr	r2, [pc, #364]	; (8002544 <MeasurementTask+0x184>)
 80023d8:	6013      	str	r3, [r2, #0]
		Sample = 0;
 80023da:	4b5b      	ldr	r3, [pc, #364]	; (8002548 <MeasurementTask+0x188>)
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]
		SamplePacketCount = 0;
 80023e0:	4b5a      	ldr	r3, [pc, #360]	; (800254c <MeasurementTask+0x18c>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	601a      	str	r2, [r3, #0]
		ModuleMode = MM_MEAS;
 80023e6:	4b56      	ldr	r3, [pc, #344]	; (8002540 <MeasurementTask+0x180>)
 80023e8:	2202      	movs	r2, #2
 80023ea:	601a      	str	r2, [r3, #0]
	}

	//measurement
	if(ModuleMode == MM_MEAS)
 80023ec:	4b54      	ldr	r3, [pc, #336]	; (8002540 <MeasurementTask+0x180>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	f040 809c 	bne.w	800252e <MeasurementTask+0x16e>
	{
		//Check the rising edge of the CLK_SYN signal - time to perform measurement
		if((LastClkSync == 0) && (ReadGpioPinStatus(CLK_SYN) == 1))
 80023f6:	4b53      	ldr	r3, [pc, #332]	; (8002544 <MeasurementTask+0x184>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	f040 808e 	bne.w	800251c <MeasurementTask+0x15c>
 8002400:	2017      	movs	r0, #23
 8002402:	f7ff f9bd 	bl	8001780 <ReadGpioPinStatus>
 8002406:	4603      	mov	r3, r0
 8002408:	2b01      	cmp	r3, #1
 800240a:	f040 8087 	bne.w	800251c <MeasurementTask+0x15c>
		{
			ToggleGpioPin(TEST_PIN);
 800240e:	2018      	movs	r0, #24
 8002410:	f7ff f9fa 	bl	8001808 <ToggleGpioPin>
			ToggleGpioPin(LED_B);
 8002414:	2003      	movs	r0, #3
 8002416:	f7ff f9f7 	bl	8001808 <ToggleGpioPin>
			LastClkSync = ReadGpioPinStatus(CLK_SYN);
 800241a:	2017      	movs	r0, #23
 800241c:	f7ff f9b0 	bl	8001780 <ReadGpioPinStatus>
 8002420:	4603      	mov	r3, r0
 8002422:	4a48      	ldr	r2, [pc, #288]	; (8002544 <MeasurementTask+0x184>)
 8002424:	6013      	str	r3, [r2, #0]
#ifndef SIMULATION_MODE //normal measurement mode
			//Measure the current - try it ADAM_ATTEMPTS times
			for(AttemptLoop = 0;AttemptLoop < ADAM_ATTEMPTS;AttemptLoop++)
 8002426:	2300      	movs	r3, #0
 8002428:	603b      	str	r3, [r7, #0]
 800242a:	e00e      	b.n	800244a <MeasurementTask+0x8a>
			{
				Status = AdamReadAdc(&MeasuredCurrent[SamplePacketCount]);
 800242c:	4b47      	ldr	r3, [pc, #284]	; (800254c <MeasurementTask+0x18c>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	00db      	lsls	r3, r3, #3
 8002432:	4a47      	ldr	r2, [pc, #284]	; (8002550 <MeasurementTask+0x190>)
 8002434:	4413      	add	r3, r2
 8002436:	4618      	mov	r0, r3
 8002438:	f7ff fdd2 	bl	8001fe0 <AdamReadAdc>
 800243c:	6078      	str	r0, [r7, #4]
				if(Status == 0)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d006      	beq.n	8002452 <MeasurementTask+0x92>
			for(AttemptLoop = 0;AttemptLoop < ADAM_ATTEMPTS;AttemptLoop++)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	3301      	adds	r3, #1
 8002448:	603b      	str	r3, [r7, #0]
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	2b02      	cmp	r3, #2
 800244e:	d9ed      	bls.n	800242c <MeasurementTask+0x6c>
 8002450:	e000      	b.n	8002454 <MeasurementTask+0x94>
					break;
 8002452:	bf00      	nop
			}
			if(Status)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d009      	beq.n	800246e <MeasurementTask+0xae>
				MeasuredCurrent[SamplePacketCount] = 1e6; //error
 800245a:	4b3c      	ldr	r3, [pc, #240]	; (800254c <MeasurementTask+0x18c>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a3c      	ldr	r2, [pc, #240]	; (8002550 <MeasurementTask+0x190>)
 8002460:	00db      	lsls	r3, r3, #3
 8002462:	18d1      	adds	r1, r2, r3
 8002464:	a334      	add	r3, pc, #208	; (adr r3, 8002538 <MeasurementTask+0x178>)
 8002466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800246a:	e9c1 2300 	strd	r2, r3, [r1]

			//Read the top RDP - thrust
			Status = RdpReadVal(RdpAddresses[RDP_THRUST], &MeasuredThrust[SamplePacketCount]);
 800246e:	4b39      	ldr	r3, [pc, #228]	; (8002554 <MeasurementTask+0x194>)
 8002470:	781a      	ldrb	r2, [r3, #0]
 8002472:	4b36      	ldr	r3, [pc, #216]	; (800254c <MeasurementTask+0x18c>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	00db      	lsls	r3, r3, #3
 8002478:	4937      	ldr	r1, [pc, #220]	; (8002558 <MeasurementTask+0x198>)
 800247a:	440b      	add	r3, r1
 800247c:	4619      	mov	r1, r3
 800247e:	4610      	mov	r0, r2
 8002480:	f7ff fe0c 	bl	800209c <RdpReadVal>
 8002484:	6078      	str	r0, [r7, #4]
			if(Status)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d009      	beq.n	80024a0 <MeasurementTask+0xe0>
				MeasuredThrust[SamplePacketCount] = 1e6; //error
 800248c:	4b2f      	ldr	r3, [pc, #188]	; (800254c <MeasurementTask+0x18c>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a31      	ldr	r2, [pc, #196]	; (8002558 <MeasurementTask+0x198>)
 8002492:	00db      	lsls	r3, r3, #3
 8002494:	18d1      	adds	r1, r2, r3
 8002496:	a328      	add	r3, pc, #160	; (adr r3, 8002538 <MeasurementTask+0x178>)
 8002498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800249c:	e9c1 2300 	strd	r2, r3, [r1]

			Sleep(50); //wait 5ms to avoid collision on the bus
 80024a0:	2032      	movs	r0, #50	; 0x32
 80024a2:	f7ff f905 	bl	80016b0 <Sleep>

			//Read the bottom RDP - torque
			Status = RdpReadVal(RdpAddresses[RDP_TORQUE], &MeasuredTorque[SamplePacketCount]);
 80024a6:	4b2b      	ldr	r3, [pc, #172]	; (8002554 <MeasurementTask+0x194>)
 80024a8:	785a      	ldrb	r2, [r3, #1]
 80024aa:	4b28      	ldr	r3, [pc, #160]	; (800254c <MeasurementTask+0x18c>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	00db      	lsls	r3, r3, #3
 80024b0:	492a      	ldr	r1, [pc, #168]	; (800255c <MeasurementTask+0x19c>)
 80024b2:	440b      	add	r3, r1
 80024b4:	4619      	mov	r1, r3
 80024b6:	4610      	mov	r0, r2
 80024b8:	f7ff fdf0 	bl	800209c <RdpReadVal>
 80024bc:	6078      	str	r0, [r7, #4]
			if(Status)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d009      	beq.n	80024d8 <MeasurementTask+0x118>
				MeasuredTorque[SamplePacketCount] = 1e6; //error
 80024c4:	4b21      	ldr	r3, [pc, #132]	; (800254c <MeasurementTask+0x18c>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a24      	ldr	r2, [pc, #144]	; (800255c <MeasurementTask+0x19c>)
 80024ca:	00db      	lsls	r3, r3, #3
 80024cc:	18d1      	adds	r1, r2, r3
 80024ce:	a31a      	add	r3, pc, #104	; (adr r3, 8002538 <MeasurementTask+0x178>)
 80024d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024d4:	e9c1 2300 	strd	r2, r3, [r1]
#endif
			//Read the APSs
			ActualAps[SamplePacketCount] = ReadAsp();
 80024d8:	4b1c      	ldr	r3, [pc, #112]	; (800254c <MeasurementTask+0x18c>)
 80024da:	681c      	ldr	r4, [r3, #0]
 80024dc:	f7ff fb4e 	bl	8001b7c <ReadAsp>
 80024e0:	4603      	mov	r3, r0
 80024e2:	461a      	mov	r2, r3
 80024e4:	4b1e      	ldr	r3, [pc, #120]	; (8002560 <MeasurementTask+0x1a0>)
 80024e6:	551a      	strb	r2, [r3, r4]
	MeasuredCurrent[SamplePacketCount] = 1.23;
MeasuredThrust[SamplePacketCount] = 1e3 * Sample;
MeasuredTorque[SamplePacketCount] = 1e4 * Sample;
//ActualAps[SamplePacketCount] = 0x15;
#endif
			SampleArray[SamplePacketCount] = Sample;
 80024e8:	4b18      	ldr	r3, [pc, #96]	; (800254c <MeasurementTask+0x18c>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a16      	ldr	r2, [pc, #88]	; (8002548 <MeasurementTask+0x188>)
 80024ee:	6812      	ldr	r2, [r2, #0]
 80024f0:	491c      	ldr	r1, [pc, #112]	; (8002564 <MeasurementTask+0x1a4>)
 80024f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

			//send the results to the master
			SamplePacketCount++;
 80024f6:	4b15      	ldr	r3, [pc, #84]	; (800254c <MeasurementTask+0x18c>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	3301      	adds	r3, #1
 80024fc:	4a13      	ldr	r2, [pc, #76]	; (800254c <MeasurementTask+0x18c>)
 80024fe:	6013      	str	r3, [r2, #0]
			if(SamplePacketCount > (RADM_DATA_PACK - 1))
 8002500:	4b12      	ldr	r3, [pc, #72]	; (800254c <MeasurementTask+0x18c>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2b04      	cmp	r3, #4
 8002506:	d904      	bls.n	8002512 <MeasurementTask+0x152>
			{
				SendMeasurementResults();
 8002508:	f7ff fcaa 	bl	8001e60 <SendMeasurementResults>
				SamplePacketCount = 0;
 800250c:	4b0f      	ldr	r3, [pc, #60]	; (800254c <MeasurementTask+0x18c>)
 800250e:	2200      	movs	r2, #0
 8002510:	601a      	str	r2, [r3, #0]
			}

			Sample++;
 8002512:	4b0d      	ldr	r3, [pc, #52]	; (8002548 <MeasurementTask+0x188>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	3301      	adds	r3, #1
 8002518:	4a0b      	ldr	r2, [pc, #44]	; (8002548 <MeasurementTask+0x188>)
 800251a:	6013      	str	r3, [r2, #0]
		}

		if(ReadGpioPinStatus(CLK_SYN) == 0)
 800251c:	2017      	movs	r0, #23
 800251e:	f7ff f92f 	bl	8001780 <ReadGpioPinStatus>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d102      	bne.n	800252e <MeasurementTask+0x16e>
			LastClkSync = 0;
 8002528:	4b06      	ldr	r3, [pc, #24]	; (8002544 <MeasurementTask+0x184>)
 800252a:	2200      	movs	r2, #0
 800252c:	601a      	str	r2, [r3, #0]
	}

}
 800252e:	bf00      	nop
 8002530:	370c      	adds	r7, #12
 8002532:	46bd      	mov	sp, r7
 8002534:	bd90      	pop	{r4, r7, pc}
 8002536:	bf00      	nop
 8002538:	00000000 	.word	0x00000000
 800253c:	412e8480 	.word	0x412e8480
 8002540:	20000340 	.word	0x20000340
 8002544:	2000034c 	.word	0x2000034c
 8002548:	20000380 	.word	0x20000380
 800254c:	200002fc 	.word	0x200002fc
 8002550:	20000350 	.word	0x20000350
 8002554:	200002f8 	.word	0x200002f8
 8002558:	200002b8 	.word	0x200002b8
 800255c:	20000300 	.word	0x20000300
 8002560:	20000378 	.word	0x20000378
 8002564:	200002e0 	.word	0x200002e0

08002568 <MasterCmdTask>:
//* Input Parameters      : none
//* Output Parameters     : none
//*--------------------------------------------------------------------------------------

void MasterCmdTask(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
//unsigned char *PointerBytes;
//double MeasTempDut;
//int Loop;

	//if command not received
	if(!CmdReceived)
 800256e:	4b51      	ldr	r3, [pc, #324]	; (80026b4 <MasterCmdTask+0x14c>)
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	2b00      	cmp	r3, #0
 8002574:	f000 809a 	beq.w	80026ac <MasterCmdTask+0x144>
		return;

	//decode CMD packet
	DecodeCmd();
 8002578:	f7ff fa0c 	bl	8001994 <DecodeCmd>

	//Ping module
	if(CmdDecoded == CMD_PING)
 800257c:	4b4e      	ldr	r3, [pc, #312]	; (80026b8 <MasterCmdTask+0x150>)
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d10d      	bne.n	80025a0 <MasterCmdTask+0x38>
	{
		ResponsePacket[0] = 'P';
 8002584:	2350      	movs	r3, #80	; 0x50
 8002586:	713b      	strb	r3, [r7, #4]
		ResponsePacket[1] = 'O';
 8002588:	234f      	movs	r3, #79	; 0x4f
 800258a:	717b      	strb	r3, [r7, #5]
		ResponsePacket[2] = 'N';
 800258c:	234e      	movs	r3, #78	; 0x4e
 800258e:	71bb      	strb	r3, [r7, #6]
		ResponsePacket[3] = 'G';
 8002590:	2347      	movs	r3, #71	; 0x47
 8002592:	71fb      	strb	r3, [r7, #7]
		SendResponseToMaster(ResponsePacket, 4);
 8002594:	1d3b      	adds	r3, r7, #4
 8002596:	2104      	movs	r1, #4
 8002598:	4618      	mov	r0, r3
 800259a:	f7ff f9af 	bl	80018fc <SendResponseToMaster>
		goto CLEANUP;
 800259e:	e076      	b.n	800268e <MasterCmdTask+0x126>
	}

	switch(CmdDecoded)
 80025a0:	4b45      	ldr	r3, [pc, #276]	; (80026b8 <MasterCmdTask+0x150>)
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	2b06      	cmp	r3, #6
 80025a6:	d872      	bhi.n	800268e <MasterCmdTask+0x126>
 80025a8:	a201      	add	r2, pc, #4	; (adr r2, 80025b0 <MasterCmdTask+0x48>)
 80025aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025ae:	bf00      	nop
 80025b0:	0800268f 	.word	0x0800268f
 80025b4:	0800268f 	.word	0x0800268f
 80025b8:	080025cd 	.word	0x080025cd
 80025bc:	080025e3 	.word	0x080025e3
 80025c0:	08002601 	.word	0x08002601
 80025c4:	08002619 	.word	0x08002619
 80025c8:	0800264f 	.word	0x0800264f
		break;
		//*******************************************************************************
		//CMD Start measurement
		//*******************************************************************************
		case CMD_MEAS_START:
		ModuleMode = MM_MEAS_INIT;
 80025cc:	4b3b      	ldr	r3, [pc, #236]	; (80026bc <MasterCmdTask+0x154>)
 80025ce:	2201      	movs	r2, #1
 80025d0:	601a      	str	r2, [r3, #0]
		ResponsePacket[0] = 0; //fixed to no errors
 80025d2:	2300      	movs	r3, #0
 80025d4:	713b      	strb	r3, [r7, #4]
		SendResponseToMaster(ResponsePacket, 1);
 80025d6:	1d3b      	adds	r3, r7, #4
 80025d8:	2101      	movs	r1, #1
 80025da:	4618      	mov	r0, r3
 80025dc:	f7ff f98e 	bl	80018fc <SendResponseToMaster>
		break;
 80025e0:	e055      	b.n	800268e <MasterCmdTask+0x126>
		//*******************************************************************************
		//CMD End measurement
		//*******************************************************************************
		case CMD_MEAS_END:
		ModuleMode = MM_STANDBY;
 80025e2:	4b36      	ldr	r3, [pc, #216]	; (80026bc <MasterCmdTask+0x154>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	601a      	str	r2, [r3, #0]
		WriteToGpioPin(LED_B, 0);
 80025e8:	2100      	movs	r1, #0
 80025ea:	2003      	movs	r0, #3
 80025ec:	f7ff f8e2 	bl	80017b4 <WriteToGpioPin>
		ResponsePacket[0] = 0; //fixed to no errors
 80025f0:	2300      	movs	r3, #0
 80025f2:	713b      	strb	r3, [r7, #4]
		SendResponseToMaster(ResponsePacket, 1);
 80025f4:	1d3b      	adds	r3, r7, #4
 80025f6:	2101      	movs	r1, #1
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7ff f97f 	bl	80018fc <SendResponseToMaster>
		break;
 80025fe:	e046      	b.n	800268e <MasterCmdTask+0x126>
		//*******************************************************************************
		//CMD Self-test
		//*******************************************************************************
		case CMD_SELF_TEST:
		RadmSelfTest(1); //RPDs tested as well
 8002600:	2001      	movs	r0, #1
 8002602:	f7ff faed 	bl	8001be0 <RadmSelfTest>
		ResponsePacket[0] = SB;
 8002606:	4b2e      	ldr	r3, [pc, #184]	; (80026c0 <MasterCmdTask+0x158>)
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	713b      	strb	r3, [r7, #4]
		SendResponseToMaster(ResponsePacket, 1);
 800260c:	1d3b      	adds	r3, r7, #4
 800260e:	2101      	movs	r1, #1
 8002610:	4618      	mov	r0, r3
 8002612:	f7ff f973 	bl	80018fc <SendResponseToMaster>
		break;
 8002616:	e03a      	b.n	800268e <MasterCmdTask+0x126>
		//*******************************************************************************
		//CMD RADM setup
		//*******************************************************************************
		case CMD_RADM_SETUP:
		RdpAddresses[RDP_THRUST] = CmdPacket[6];//RDP meters RS-485 addresses - thrust meter
 8002618:	4b2a      	ldr	r3, [pc, #168]	; (80026c4 <MasterCmdTask+0x15c>)
 800261a:	799a      	ldrb	r2, [r3, #6]
 800261c:	4b2a      	ldr	r3, [pc, #168]	; (80026c8 <MasterCmdTask+0x160>)
 800261e:	701a      	strb	r2, [r3, #0]
		RdpAddresses[RDP_TORQUE] = CmdPacket[7];//RDP meters RS-485 addresses - torque meter
 8002620:	4b28      	ldr	r3, [pc, #160]	; (80026c4 <MasterCmdTask+0x15c>)
 8002622:	79da      	ldrb	r2, [r3, #7]
 8002624:	4b28      	ldr	r3, [pc, #160]	; (80026c8 <MasterCmdTask+0x160>)
 8002626:	705a      	strb	r2, [r3, #1]
		WriteToGpioPin(ALARM, 0);	//reset the alarm
 8002628:	2100      	movs	r1, #0
 800262a:	200e      	movs	r0, #14
 800262c:	f7ff f8c2 	bl	80017b4 <WriteToGpioPin>
		ModuleMode = MM_STANDBY;	//stop the measurement
 8002630:	4b22      	ldr	r3, [pc, #136]	; (80026bc <MasterCmdTask+0x154>)
 8002632:	2200      	movs	r2, #0
 8002634:	601a      	str	r2, [r3, #0]
		WriteToGpioPin(LED_R, 0);
 8002636:	2100      	movs	r1, #0
 8002638:	2002      	movs	r0, #2
 800263a:	f7ff f8bb 	bl	80017b4 <WriteToGpioPin>
		ResponsePacket[0] = 0; //fixed to no errors
 800263e:	2300      	movs	r3, #0
 8002640:	713b      	strb	r3, [r7, #4]
		SendResponseToMaster(ResponsePacket, 1);
 8002642:	1d3b      	adds	r3, r7, #4
 8002644:	2101      	movs	r1, #1
 8002646:	4618      	mov	r0, r3
 8002648:	f7ff f958 	bl	80018fc <SendResponseToMaster>
		break;
 800264c:	e01f      	b.n	800268e <MasterCmdTask+0x126>
		//*******************************************************************************
		//CMD alarm control
		//*******************************************************************************
		case CMD_ALARM_CTRL:
		if(CmdPacket[6] == 0x00)
 800264e:	4b1d      	ldr	r3, [pc, #116]	; (80026c4 <MasterCmdTask+0x15c>)
 8002650:	799b      	ldrb	r3, [r3, #6]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d107      	bne.n	8002666 <MasterCmdTask+0xfe>
		{
			WriteToGpioPin(ALARM, 0);
 8002656:	2100      	movs	r1, #0
 8002658:	200e      	movs	r0, #14
 800265a:	f7ff f8ab 	bl	80017b4 <WriteToGpioPin>
			WriteToGpioPin(LED_R, 0);
 800265e:	2100      	movs	r1, #0
 8002660:	2002      	movs	r0, #2
 8002662:	f7ff f8a7 	bl	80017b4 <WriteToGpioPin>
		}
		if(CmdPacket[6] == 0xAA)
 8002666:	4b17      	ldr	r3, [pc, #92]	; (80026c4 <MasterCmdTask+0x15c>)
 8002668:	799b      	ldrb	r3, [r3, #6]
 800266a:	2baa      	cmp	r3, #170	; 0xaa
 800266c:	d107      	bne.n	800267e <MasterCmdTask+0x116>
		{
			WriteToGpioPin(ALARM, 1);
 800266e:	2101      	movs	r1, #1
 8002670:	200e      	movs	r0, #14
 8002672:	f7ff f89f 	bl	80017b4 <WriteToGpioPin>
			WriteToGpioPin(LED_R, 1);
 8002676:	2101      	movs	r1, #1
 8002678:	2002      	movs	r0, #2
 800267a:	f7ff f89b 	bl	80017b4 <WriteToGpioPin>
		}
		ResponsePacket[0] = 0; //fixed to no errors
 800267e:	2300      	movs	r3, #0
 8002680:	713b      	strb	r3, [r7, #4]
		SendResponseToMaster(ResponsePacket, 1);
 8002682:	1d3b      	adds	r3, r7, #4
 8002684:	2101      	movs	r1, #1
 8002686:	4618      	mov	r0, r3
 8002688:	f7ff f938 	bl	80018fc <SendResponseToMaster>
		break;
 800268c:	bf00      	nop
	}

CLEANUP:
	CmdCounter = 0;
 800268e:	4b0f      	ldr	r3, [pc, #60]	; (80026cc <MasterCmdTask+0x164>)
 8002690:	2200      	movs	r2, #0
 8002692:	701a      	strb	r2, [r3, #0]
	CmdReceived	= 0;
 8002694:	4b07      	ldr	r3, [pc, #28]	; (80026b4 <MasterCmdTask+0x14c>)
 8002696:	2200      	movs	r2, #0
 8002698:	701a      	strb	r2, [r3, #0]

//if def usart 2 for ex, do this , but ifdef usart 6 from macros do usart 6 command
#ifdef MASTER_CMD_USART2
	__HAL_UART_ENABLE_IT(&huart,UART_IT_RXNE);
 800269a:	4b0d      	ldr	r3, [pc, #52]	; (80026d0 <MasterCmdTask+0x168>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68da      	ldr	r2, [r3, #12]
 80026a0:	4b0b      	ldr	r3, [pc, #44]	; (80026d0 <MasterCmdTask+0x168>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f042 0220 	orr.w	r2, r2, #32
 80026a8:	60da      	str	r2, [r3, #12]
 80026aa:	e000      	b.n	80026ae <MasterCmdTask+0x146>
		return;
 80026ac:	bf00      	nop
#endif
#ifdef MASTER_CMD_USART6
	USART_ITConfig(USART6, USART_IT_RXNE, ENABLE);; //cmd RX enabled
#endif

}
 80026ae:	3710      	adds	r7, #16
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	2000033e 	.word	0x2000033e
 80026b8:	20000344 	.word	0x20000344
 80026bc:	20000340 	.word	0x20000340
 80026c0:	2000033f 	.word	0x2000033f
 80026c4:	20000328 	.word	0x20000328
 80026c8:	200002f8 	.word	0x200002f8
 80026cc:	2000037d 	.word	0x2000037d
 80026d0:	20000394 	.word	0x20000394

080026d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026da:	2300      	movs	r3, #0
 80026dc:	607b      	str	r3, [r7, #4]
 80026de:	4b10      	ldr	r3, [pc, #64]	; (8002720 <HAL_MspInit+0x4c>)
 80026e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e2:	4a0f      	ldr	r2, [pc, #60]	; (8002720 <HAL_MspInit+0x4c>)
 80026e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026e8:	6453      	str	r3, [r2, #68]	; 0x44
 80026ea:	4b0d      	ldr	r3, [pc, #52]	; (8002720 <HAL_MspInit+0x4c>)
 80026ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026f2:	607b      	str	r3, [r7, #4]
 80026f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026f6:	2300      	movs	r3, #0
 80026f8:	603b      	str	r3, [r7, #0]
 80026fa:	4b09      	ldr	r3, [pc, #36]	; (8002720 <HAL_MspInit+0x4c>)
 80026fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fe:	4a08      	ldr	r2, [pc, #32]	; (8002720 <HAL_MspInit+0x4c>)
 8002700:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002704:	6413      	str	r3, [r2, #64]	; 0x40
 8002706:	4b06      	ldr	r3, [pc, #24]	; (8002720 <HAL_MspInit+0x4c>)
 8002708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800270e:	603b      	str	r3, [r7, #0]
 8002710:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002712:	bf00      	nop
 8002714:	370c      	adds	r7, #12
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	40023800 	.word	0x40023800

08002724 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b08a      	sub	sp, #40	; 0x28
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800272c:	f107 0314 	add.w	r3, r7, #20
 8002730:	2200      	movs	r2, #0
 8002732:	601a      	str	r2, [r3, #0]
 8002734:	605a      	str	r2, [r3, #4]
 8002736:	609a      	str	r2, [r3, #8]
 8002738:	60da      	str	r2, [r3, #12]
 800273a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a19      	ldr	r2, [pc, #100]	; (80027a8 <HAL_TIM_Base_MspInit+0x84>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d12b      	bne.n	800279e <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002746:	2300      	movs	r3, #0
 8002748:	613b      	str	r3, [r7, #16]
 800274a:	4b18      	ldr	r3, [pc, #96]	; (80027ac <HAL_TIM_Base_MspInit+0x88>)
 800274c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274e:	4a17      	ldr	r2, [pc, #92]	; (80027ac <HAL_TIM_Base_MspInit+0x88>)
 8002750:	f043 0302 	orr.w	r3, r3, #2
 8002754:	6413      	str	r3, [r2, #64]	; 0x40
 8002756:	4b15      	ldr	r3, [pc, #84]	; (80027ac <HAL_TIM_Base_MspInit+0x88>)
 8002758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	613b      	str	r3, [r7, #16]
 8002760:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002762:	2300      	movs	r3, #0
 8002764:	60fb      	str	r3, [r7, #12]
 8002766:	4b11      	ldr	r3, [pc, #68]	; (80027ac <HAL_TIM_Base_MspInit+0x88>)
 8002768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276a:	4a10      	ldr	r2, [pc, #64]	; (80027ac <HAL_TIM_Base_MspInit+0x88>)
 800276c:	f043 0302 	orr.w	r3, r3, #2
 8002770:	6313      	str	r3, [r2, #48]	; 0x30
 8002772:	4b0e      	ldr	r3, [pc, #56]	; (80027ac <HAL_TIM_Base_MspInit+0x88>)
 8002774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	60fb      	str	r3, [r7, #12]
 800277c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800277e:	2301      	movs	r3, #1
 8002780:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002782:	2302      	movs	r3, #2
 8002784:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002786:	2300      	movs	r3, #0
 8002788:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800278a:	2300      	movs	r3, #0
 800278c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800278e:	2302      	movs	r3, #2
 8002790:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002792:	f107 0314 	add.w	r3, r7, #20
 8002796:	4619      	mov	r1, r3
 8002798:	4805      	ldr	r0, [pc, #20]	; (80027b0 <HAL_TIM_Base_MspInit+0x8c>)
 800279a:	f000 fabb 	bl	8002d14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800279e:	bf00      	nop
 80027a0:	3728      	adds	r7, #40	; 0x28
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	40000400 	.word	0x40000400
 80027ac:	40023800 	.word	0x40023800
 80027b0:	40020400 	.word	0x40020400

080027b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027b8:	e7fe      	b.n	80027b8 <NMI_Handler+0x4>

080027ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027ba:	b480      	push	{r7}
 80027bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027be:	e7fe      	b.n	80027be <HardFault_Handler+0x4>

080027c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027c4:	e7fe      	b.n	80027c4 <MemManage_Handler+0x4>

080027c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027c6:	b480      	push	{r7}
 80027c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027ca:	e7fe      	b.n	80027ca <BusFault_Handler+0x4>

080027cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027d0:	e7fe      	b.n	80027d0 <UsageFault_Handler+0x4>

080027d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027d2:	b480      	push	{r7}
 80027d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027d6:	bf00      	nop
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027e4:	bf00      	nop
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr

080027ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027ee:	b480      	push	{r7}
 80027f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027f2:	bf00      	nop
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002800:	f000 f956 	bl	8002ab0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002804:	bf00      	nop
 8002806:	bd80      	pop	{r7, pc}

08002808 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
	return 1;
 800280c:	2301      	movs	r3, #1
}
 800280e:	4618      	mov	r0, r3
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <_kill>:

int _kill(int pid, int sig)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002822:	f002 f8ef 	bl	8004a04 <__errno>
 8002826:	4603      	mov	r3, r0
 8002828:	2216      	movs	r2, #22
 800282a:	601a      	str	r2, [r3, #0]
	return -1;
 800282c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002830:	4618      	mov	r0, r3
 8002832:	3708      	adds	r7, #8
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <_exit>:

void _exit (int status)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002840:	f04f 31ff 	mov.w	r1, #4294967295
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f7ff ffe7 	bl	8002818 <_kill>
	while (1) {}		/* Make sure we hang here */
 800284a:	e7fe      	b.n	800284a <_exit+0x12>

0800284c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b086      	sub	sp, #24
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002858:	2300      	movs	r3, #0
 800285a:	617b      	str	r3, [r7, #20]
 800285c:	e00a      	b.n	8002874 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800285e:	f3af 8000 	nop.w
 8002862:	4601      	mov	r1, r0
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	1c5a      	adds	r2, r3, #1
 8002868:	60ba      	str	r2, [r7, #8]
 800286a:	b2ca      	uxtb	r2, r1
 800286c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	3301      	adds	r3, #1
 8002872:	617b      	str	r3, [r7, #20]
 8002874:	697a      	ldr	r2, [r7, #20]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	429a      	cmp	r2, r3
 800287a:	dbf0      	blt.n	800285e <_read+0x12>
	}

return len;
 800287c:	687b      	ldr	r3, [r7, #4]
}
 800287e:	4618      	mov	r0, r3
 8002880:	3718      	adds	r7, #24
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002886:	b580      	push	{r7, lr}
 8002888:	b086      	sub	sp, #24
 800288a:	af00      	add	r7, sp, #0
 800288c:	60f8      	str	r0, [r7, #12]
 800288e:	60b9      	str	r1, [r7, #8]
 8002890:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002892:	2300      	movs	r3, #0
 8002894:	617b      	str	r3, [r7, #20]
 8002896:	e009      	b.n	80028ac <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	1c5a      	adds	r2, r3, #1
 800289c:	60ba      	str	r2, [r7, #8]
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	4618      	mov	r0, r3
 80028a2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	3301      	adds	r3, #1
 80028aa:	617b      	str	r3, [r7, #20]
 80028ac:	697a      	ldr	r2, [r7, #20]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	dbf1      	blt.n	8002898 <_write+0x12>
	}
	return len;
 80028b4:	687b      	ldr	r3, [r7, #4]
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3718      	adds	r7, #24
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <_close>:

int _close(int file)
{
 80028be:	b480      	push	{r7}
 80028c0:	b083      	sub	sp, #12
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
	return -1;
 80028c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	370c      	adds	r7, #12
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr

080028d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028d6:	b480      	push	{r7}
 80028d8:	b083      	sub	sp, #12
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
 80028de:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028e6:	605a      	str	r2, [r3, #4]
	return 0;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	370c      	adds	r7, #12
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr

080028f6 <_isatty>:

int _isatty(int file)
{
 80028f6:	b480      	push	{r7}
 80028f8:	b083      	sub	sp, #12
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
	return 1;
 80028fe:	2301      	movs	r3, #1
}
 8002900:	4618      	mov	r0, r3
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800290c:	b480      	push	{r7}
 800290e:	b085      	sub	sp, #20
 8002910:	af00      	add	r7, sp, #0
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	607a      	str	r2, [r7, #4]
	return 0;
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	3714      	adds	r7, #20
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
	...

08002928 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b086      	sub	sp, #24
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002930:	4a14      	ldr	r2, [pc, #80]	; (8002984 <_sbrk+0x5c>)
 8002932:	4b15      	ldr	r3, [pc, #84]	; (8002988 <_sbrk+0x60>)
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800293c:	4b13      	ldr	r3, [pc, #76]	; (800298c <_sbrk+0x64>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d102      	bne.n	800294a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002944:	4b11      	ldr	r3, [pc, #68]	; (800298c <_sbrk+0x64>)
 8002946:	4a12      	ldr	r2, [pc, #72]	; (8002990 <_sbrk+0x68>)
 8002948:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800294a:	4b10      	ldr	r3, [pc, #64]	; (800298c <_sbrk+0x64>)
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4413      	add	r3, r2
 8002952:	693a      	ldr	r2, [r7, #16]
 8002954:	429a      	cmp	r2, r3
 8002956:	d207      	bcs.n	8002968 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002958:	f002 f854 	bl	8004a04 <__errno>
 800295c:	4603      	mov	r3, r0
 800295e:	220c      	movs	r2, #12
 8002960:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002962:	f04f 33ff 	mov.w	r3, #4294967295
 8002966:	e009      	b.n	800297c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002968:	4b08      	ldr	r3, [pc, #32]	; (800298c <_sbrk+0x64>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800296e:	4b07      	ldr	r3, [pc, #28]	; (800298c <_sbrk+0x64>)
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4413      	add	r3, r2
 8002976:	4a05      	ldr	r2, [pc, #20]	; (800298c <_sbrk+0x64>)
 8002978:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800297a:	68fb      	ldr	r3, [r7, #12]
}
 800297c:	4618      	mov	r0, r3
 800297e:	3718      	adds	r7, #24
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	20020000 	.word	0x20020000
 8002988:	00000400 	.word	0x00000400
 800298c:	200002ac 	.word	0x200002ac
 8002990:	20000510 	.word	0x20000510

08002994 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002998:	4b06      	ldr	r3, [pc, #24]	; (80029b4 <SystemInit+0x20>)
 800299a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800299e:	4a05      	ldr	r2, [pc, #20]	; (80029b4 <SystemInit+0x20>)
 80029a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029a8:	bf00      	nop
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	e000ed00 	.word	0xe000ed00

080029b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80029b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029f0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80029bc:	480d      	ldr	r0, [pc, #52]	; (80029f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80029be:	490e      	ldr	r1, [pc, #56]	; (80029f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80029c0:	4a0e      	ldr	r2, [pc, #56]	; (80029fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80029c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029c4:	e002      	b.n	80029cc <LoopCopyDataInit>

080029c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029ca:	3304      	adds	r3, #4

080029cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029d0:	d3f9      	bcc.n	80029c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029d2:	4a0b      	ldr	r2, [pc, #44]	; (8002a00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80029d4:	4c0b      	ldr	r4, [pc, #44]	; (8002a04 <LoopFillZerobss+0x26>)
  movs r3, #0
 80029d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029d8:	e001      	b.n	80029de <LoopFillZerobss>

080029da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029dc:	3204      	adds	r2, #4

080029de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029e0:	d3fb      	bcc.n	80029da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80029e2:	f7ff ffd7 	bl	8002994 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029e6:	f002 f813 	bl	8004a10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029ea:	f7fe fadf 	bl	8000fac <main>
  bx  lr    
 80029ee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80029f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80029f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029f8:	2000028c 	.word	0x2000028c
  ldr r2, =_sidata
 80029fc:	08007cf4 	.word	0x08007cf4
  ldr r2, =_sbss
 8002a00:	20000290 	.word	0x20000290
  ldr r4, =_ebss
 8002a04:	20000510 	.word	0x20000510

08002a08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a08:	e7fe      	b.n	8002a08 <ADC_IRQHandler>
	...

08002a0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a10:	4b0e      	ldr	r3, [pc, #56]	; (8002a4c <HAL_Init+0x40>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a0d      	ldr	r2, [pc, #52]	; (8002a4c <HAL_Init+0x40>)
 8002a16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a1c:	4b0b      	ldr	r3, [pc, #44]	; (8002a4c <HAL_Init+0x40>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a0a      	ldr	r2, [pc, #40]	; (8002a4c <HAL_Init+0x40>)
 8002a22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a28:	4b08      	ldr	r3, [pc, #32]	; (8002a4c <HAL_Init+0x40>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a07      	ldr	r2, [pc, #28]	; (8002a4c <HAL_Init+0x40>)
 8002a2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a34:	2003      	movs	r0, #3
 8002a36:	f000 f92b 	bl	8002c90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a3a:	200f      	movs	r0, #15
 8002a3c:	f000 f808 	bl	8002a50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a40:	f7ff fe48 	bl	80026d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	40023c00 	.word	0x40023c00

08002a50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a58:	4b12      	ldr	r3, [pc, #72]	; (8002aa4 <HAL_InitTick+0x54>)
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	4b12      	ldr	r3, [pc, #72]	; (8002aa8 <HAL_InitTick+0x58>)
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	4619      	mov	r1, r3
 8002a62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a66:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f000 f943 	bl	8002cfa <HAL_SYSTICK_Config>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e00e      	b.n	8002a9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2b0f      	cmp	r3, #15
 8002a82:	d80a      	bhi.n	8002a9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a84:	2200      	movs	r2, #0
 8002a86:	6879      	ldr	r1, [r7, #4]
 8002a88:	f04f 30ff 	mov.w	r0, #4294967295
 8002a8c:	f000 f90b 	bl	8002ca6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a90:	4a06      	ldr	r2, [pc, #24]	; (8002aac <HAL_InitTick+0x5c>)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a96:	2300      	movs	r3, #0
 8002a98:	e000      	b.n	8002a9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3708      	adds	r7, #8
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	200000ac 	.word	0x200000ac
 8002aa8:	200000b4 	.word	0x200000b4
 8002aac:	200000b0 	.word	0x200000b0

08002ab0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ab4:	4b06      	ldr	r3, [pc, #24]	; (8002ad0 <HAL_IncTick+0x20>)
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	461a      	mov	r2, r3
 8002aba:	4b06      	ldr	r3, [pc, #24]	; (8002ad4 <HAL_IncTick+0x24>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4413      	add	r3, r2
 8002ac0:	4a04      	ldr	r2, [pc, #16]	; (8002ad4 <HAL_IncTick+0x24>)
 8002ac2:	6013      	str	r3, [r2, #0]
}
 8002ac4:	bf00      	nop
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	200000b4 	.word	0x200000b4
 8002ad4:	200004fc 	.word	0x200004fc

08002ad8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
  return uwTick;
 8002adc:	4b03      	ldr	r3, [pc, #12]	; (8002aec <HAL_GetTick+0x14>)
 8002ade:	681b      	ldr	r3, [r3, #0]
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	200004fc 	.word	0x200004fc

08002af0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b085      	sub	sp, #20
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f003 0307 	and.w	r3, r3, #7
 8002afe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b00:	4b0c      	ldr	r3, [pc, #48]	; (8002b34 <__NVIC_SetPriorityGrouping+0x44>)
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b06:	68ba      	ldr	r2, [r7, #8]
 8002b08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b22:	4a04      	ldr	r2, [pc, #16]	; (8002b34 <__NVIC_SetPriorityGrouping+0x44>)
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	60d3      	str	r3, [r2, #12]
}
 8002b28:	bf00      	nop
 8002b2a:	3714      	adds	r7, #20
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr
 8002b34:	e000ed00 	.word	0xe000ed00

08002b38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b3c:	4b04      	ldr	r3, [pc, #16]	; (8002b50 <__NVIC_GetPriorityGrouping+0x18>)
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	0a1b      	lsrs	r3, r3, #8
 8002b42:	f003 0307 	and.w	r3, r3, #7
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr
 8002b50:	e000ed00 	.word	0xe000ed00

08002b54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	db0b      	blt.n	8002b7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b66:	79fb      	ldrb	r3, [r7, #7]
 8002b68:	f003 021f 	and.w	r2, r3, #31
 8002b6c:	4907      	ldr	r1, [pc, #28]	; (8002b8c <__NVIC_EnableIRQ+0x38>)
 8002b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b72:	095b      	lsrs	r3, r3, #5
 8002b74:	2001      	movs	r0, #1
 8002b76:	fa00 f202 	lsl.w	r2, r0, r2
 8002b7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b7e:	bf00      	nop
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	e000e100 	.word	0xe000e100

08002b90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	4603      	mov	r3, r0
 8002b98:	6039      	str	r1, [r7, #0]
 8002b9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	db0a      	blt.n	8002bba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	b2da      	uxtb	r2, r3
 8002ba8:	490c      	ldr	r1, [pc, #48]	; (8002bdc <__NVIC_SetPriority+0x4c>)
 8002baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bae:	0112      	lsls	r2, r2, #4
 8002bb0:	b2d2      	uxtb	r2, r2
 8002bb2:	440b      	add	r3, r1
 8002bb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bb8:	e00a      	b.n	8002bd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	b2da      	uxtb	r2, r3
 8002bbe:	4908      	ldr	r1, [pc, #32]	; (8002be0 <__NVIC_SetPriority+0x50>)
 8002bc0:	79fb      	ldrb	r3, [r7, #7]
 8002bc2:	f003 030f 	and.w	r3, r3, #15
 8002bc6:	3b04      	subs	r3, #4
 8002bc8:	0112      	lsls	r2, r2, #4
 8002bca:	b2d2      	uxtb	r2, r2
 8002bcc:	440b      	add	r3, r1
 8002bce:	761a      	strb	r2, [r3, #24]
}
 8002bd0:	bf00      	nop
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr
 8002bdc:	e000e100 	.word	0xe000e100
 8002be0:	e000ed00 	.word	0xe000ed00

08002be4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b089      	sub	sp, #36	; 0x24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f003 0307 	and.w	r3, r3, #7
 8002bf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	f1c3 0307 	rsb	r3, r3, #7
 8002bfe:	2b04      	cmp	r3, #4
 8002c00:	bf28      	it	cs
 8002c02:	2304      	movcs	r3, #4
 8002c04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	3304      	adds	r3, #4
 8002c0a:	2b06      	cmp	r3, #6
 8002c0c:	d902      	bls.n	8002c14 <NVIC_EncodePriority+0x30>
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	3b03      	subs	r3, #3
 8002c12:	e000      	b.n	8002c16 <NVIC_EncodePriority+0x32>
 8002c14:	2300      	movs	r3, #0
 8002c16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c18:	f04f 32ff 	mov.w	r2, #4294967295
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c22:	43da      	mvns	r2, r3
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	401a      	ands	r2, r3
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c2c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	fa01 f303 	lsl.w	r3, r1, r3
 8002c36:	43d9      	mvns	r1, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c3c:	4313      	orrs	r3, r2
         );
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3724      	adds	r7, #36	; 0x24
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
	...

08002c4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	3b01      	subs	r3, #1
 8002c58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c5c:	d301      	bcc.n	8002c62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e00f      	b.n	8002c82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c62:	4a0a      	ldr	r2, [pc, #40]	; (8002c8c <SysTick_Config+0x40>)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	3b01      	subs	r3, #1
 8002c68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c6a:	210f      	movs	r1, #15
 8002c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c70:	f7ff ff8e 	bl	8002b90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c74:	4b05      	ldr	r3, [pc, #20]	; (8002c8c <SysTick_Config+0x40>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c7a:	4b04      	ldr	r3, [pc, #16]	; (8002c8c <SysTick_Config+0x40>)
 8002c7c:	2207      	movs	r2, #7
 8002c7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3708      	adds	r7, #8
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	e000e010 	.word	0xe000e010

08002c90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f7ff ff29 	bl	8002af0 <__NVIC_SetPriorityGrouping>
}
 8002c9e:	bf00      	nop
 8002ca0:	3708      	adds	r7, #8
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b086      	sub	sp, #24
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	4603      	mov	r3, r0
 8002cae:	60b9      	str	r1, [r7, #8]
 8002cb0:	607a      	str	r2, [r7, #4]
 8002cb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cb8:	f7ff ff3e 	bl	8002b38 <__NVIC_GetPriorityGrouping>
 8002cbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	68b9      	ldr	r1, [r7, #8]
 8002cc2:	6978      	ldr	r0, [r7, #20]
 8002cc4:	f7ff ff8e 	bl	8002be4 <NVIC_EncodePriority>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cce:	4611      	mov	r1, r2
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7ff ff5d 	bl	8002b90 <__NVIC_SetPriority>
}
 8002cd6:	bf00      	nop
 8002cd8:	3718      	adds	r7, #24
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b082      	sub	sp, #8
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7ff ff31 	bl	8002b54 <__NVIC_EnableIRQ>
}
 8002cf2:	bf00      	nop
 8002cf4:	3708      	adds	r7, #8
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b082      	sub	sp, #8
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f7ff ffa2 	bl	8002c4c <SysTick_Config>
 8002d08:	4603      	mov	r3, r0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
	...

08002d14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b089      	sub	sp, #36	; 0x24
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d22:	2300      	movs	r3, #0
 8002d24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d26:	2300      	movs	r3, #0
 8002d28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	61fb      	str	r3, [r7, #28]
 8002d2e:	e16b      	b.n	8003008 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d30:	2201      	movs	r2, #1
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	fa02 f303 	lsl.w	r3, r2, r3
 8002d38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	697a      	ldr	r2, [r7, #20]
 8002d40:	4013      	ands	r3, r2
 8002d42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d44:	693a      	ldr	r2, [r7, #16]
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	f040 815a 	bne.w	8003002 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f003 0303 	and.w	r3, r3, #3
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d005      	beq.n	8002d66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d130      	bne.n	8002dc8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	005b      	lsls	r3, r3, #1
 8002d70:	2203      	movs	r2, #3
 8002d72:	fa02 f303 	lsl.w	r3, r2, r3
 8002d76:	43db      	mvns	r3, r3
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	68da      	ldr	r2, [r3, #12]
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	005b      	lsls	r3, r3, #1
 8002d86:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8a:	69ba      	ldr	r2, [r7, #24]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	69ba      	ldr	r2, [r7, #24]
 8002d94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	fa02 f303 	lsl.w	r3, r2, r3
 8002da4:	43db      	mvns	r3, r3
 8002da6:	69ba      	ldr	r2, [r7, #24]
 8002da8:	4013      	ands	r3, r2
 8002daa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	091b      	lsrs	r3, r3, #4
 8002db2:	f003 0201 	and.w	r2, r3, #1
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbc:	69ba      	ldr	r2, [r7, #24]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	69ba      	ldr	r2, [r7, #24]
 8002dc6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f003 0303 	and.w	r3, r3, #3
 8002dd0:	2b03      	cmp	r3, #3
 8002dd2:	d017      	beq.n	8002e04 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	005b      	lsls	r3, r3, #1
 8002dde:	2203      	movs	r2, #3
 8002de0:	fa02 f303 	lsl.w	r3, r2, r3
 8002de4:	43db      	mvns	r3, r3
 8002de6:	69ba      	ldr	r2, [r7, #24]
 8002de8:	4013      	ands	r3, r2
 8002dea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	689a      	ldr	r2, [r3, #8]
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	fa02 f303 	lsl.w	r3, r2, r3
 8002df8:	69ba      	ldr	r2, [r7, #24]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	69ba      	ldr	r2, [r7, #24]
 8002e02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f003 0303 	and.w	r3, r3, #3
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d123      	bne.n	8002e58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	08da      	lsrs	r2, r3, #3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	3208      	adds	r2, #8
 8002e18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	f003 0307 	and.w	r3, r3, #7
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	220f      	movs	r2, #15
 8002e28:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2c:	43db      	mvns	r3, r3
 8002e2e:	69ba      	ldr	r2, [r7, #24]
 8002e30:	4013      	ands	r3, r2
 8002e32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	691a      	ldr	r2, [r3, #16]
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	f003 0307 	and.w	r3, r3, #7
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	fa02 f303 	lsl.w	r3, r2, r3
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	08da      	lsrs	r2, r3, #3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	3208      	adds	r2, #8
 8002e52:	69b9      	ldr	r1, [r7, #24]
 8002e54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	005b      	lsls	r3, r3, #1
 8002e62:	2203      	movs	r2, #3
 8002e64:	fa02 f303 	lsl.w	r3, r2, r3
 8002e68:	43db      	mvns	r3, r3
 8002e6a:	69ba      	ldr	r2, [r7, #24]
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f003 0203 	and.w	r2, r3, #3
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	005b      	lsls	r3, r3, #1
 8002e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	69ba      	ldr	r2, [r7, #24]
 8002e8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	f000 80b4 	beq.w	8003002 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	60fb      	str	r3, [r7, #12]
 8002e9e:	4b60      	ldr	r3, [pc, #384]	; (8003020 <HAL_GPIO_Init+0x30c>)
 8002ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea2:	4a5f      	ldr	r2, [pc, #380]	; (8003020 <HAL_GPIO_Init+0x30c>)
 8002ea4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ea8:	6453      	str	r3, [r2, #68]	; 0x44
 8002eaa:	4b5d      	ldr	r3, [pc, #372]	; (8003020 <HAL_GPIO_Init+0x30c>)
 8002eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eb2:	60fb      	str	r3, [r7, #12]
 8002eb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002eb6:	4a5b      	ldr	r2, [pc, #364]	; (8003024 <HAL_GPIO_Init+0x310>)
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	089b      	lsrs	r3, r3, #2
 8002ebc:	3302      	adds	r3, #2
 8002ebe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	f003 0303 	and.w	r3, r3, #3
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	220f      	movs	r2, #15
 8002ece:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed2:	43db      	mvns	r3, r3
 8002ed4:	69ba      	ldr	r2, [r7, #24]
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a52      	ldr	r2, [pc, #328]	; (8003028 <HAL_GPIO_Init+0x314>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d02b      	beq.n	8002f3a <HAL_GPIO_Init+0x226>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a51      	ldr	r2, [pc, #324]	; (800302c <HAL_GPIO_Init+0x318>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d025      	beq.n	8002f36 <HAL_GPIO_Init+0x222>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a50      	ldr	r2, [pc, #320]	; (8003030 <HAL_GPIO_Init+0x31c>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d01f      	beq.n	8002f32 <HAL_GPIO_Init+0x21e>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a4f      	ldr	r2, [pc, #316]	; (8003034 <HAL_GPIO_Init+0x320>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d019      	beq.n	8002f2e <HAL_GPIO_Init+0x21a>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a4e      	ldr	r2, [pc, #312]	; (8003038 <HAL_GPIO_Init+0x324>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d013      	beq.n	8002f2a <HAL_GPIO_Init+0x216>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a4d      	ldr	r2, [pc, #308]	; (800303c <HAL_GPIO_Init+0x328>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d00d      	beq.n	8002f26 <HAL_GPIO_Init+0x212>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a4c      	ldr	r2, [pc, #304]	; (8003040 <HAL_GPIO_Init+0x32c>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d007      	beq.n	8002f22 <HAL_GPIO_Init+0x20e>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a4b      	ldr	r2, [pc, #300]	; (8003044 <HAL_GPIO_Init+0x330>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d101      	bne.n	8002f1e <HAL_GPIO_Init+0x20a>
 8002f1a:	2307      	movs	r3, #7
 8002f1c:	e00e      	b.n	8002f3c <HAL_GPIO_Init+0x228>
 8002f1e:	2308      	movs	r3, #8
 8002f20:	e00c      	b.n	8002f3c <HAL_GPIO_Init+0x228>
 8002f22:	2306      	movs	r3, #6
 8002f24:	e00a      	b.n	8002f3c <HAL_GPIO_Init+0x228>
 8002f26:	2305      	movs	r3, #5
 8002f28:	e008      	b.n	8002f3c <HAL_GPIO_Init+0x228>
 8002f2a:	2304      	movs	r3, #4
 8002f2c:	e006      	b.n	8002f3c <HAL_GPIO_Init+0x228>
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e004      	b.n	8002f3c <HAL_GPIO_Init+0x228>
 8002f32:	2302      	movs	r3, #2
 8002f34:	e002      	b.n	8002f3c <HAL_GPIO_Init+0x228>
 8002f36:	2301      	movs	r3, #1
 8002f38:	e000      	b.n	8002f3c <HAL_GPIO_Init+0x228>
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	69fa      	ldr	r2, [r7, #28]
 8002f3e:	f002 0203 	and.w	r2, r2, #3
 8002f42:	0092      	lsls	r2, r2, #2
 8002f44:	4093      	lsls	r3, r2
 8002f46:	69ba      	ldr	r2, [r7, #24]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f4c:	4935      	ldr	r1, [pc, #212]	; (8003024 <HAL_GPIO_Init+0x310>)
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	089b      	lsrs	r3, r3, #2
 8002f52:	3302      	adds	r3, #2
 8002f54:	69ba      	ldr	r2, [r7, #24]
 8002f56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f5a:	4b3b      	ldr	r3, [pc, #236]	; (8003048 <HAL_GPIO_Init+0x334>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	43db      	mvns	r3, r3
 8002f64:	69ba      	ldr	r2, [r7, #24]
 8002f66:	4013      	ands	r3, r2
 8002f68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d003      	beq.n	8002f7e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002f76:	69ba      	ldr	r2, [r7, #24]
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f7e:	4a32      	ldr	r2, [pc, #200]	; (8003048 <HAL_GPIO_Init+0x334>)
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002f84:	4b30      	ldr	r3, [pc, #192]	; (8003048 <HAL_GPIO_Init+0x334>)
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	43db      	mvns	r3, r3
 8002f8e:	69ba      	ldr	r2, [r7, #24]
 8002f90:	4013      	ands	r3, r2
 8002f92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d003      	beq.n	8002fa8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fa8:	4a27      	ldr	r2, [pc, #156]	; (8003048 <HAL_GPIO_Init+0x334>)
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fae:	4b26      	ldr	r3, [pc, #152]	; (8003048 <HAL_GPIO_Init+0x334>)
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	43db      	mvns	r3, r3
 8002fb8:	69ba      	ldr	r2, [r7, #24]
 8002fba:	4013      	ands	r3, r2
 8002fbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d003      	beq.n	8002fd2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002fca:	69ba      	ldr	r2, [r7, #24]
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002fd2:	4a1d      	ldr	r2, [pc, #116]	; (8003048 <HAL_GPIO_Init+0x334>)
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fd8:	4b1b      	ldr	r3, [pc, #108]	; (8003048 <HAL_GPIO_Init+0x334>)
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	43db      	mvns	r3, r3
 8002fe2:	69ba      	ldr	r2, [r7, #24]
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d003      	beq.n	8002ffc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ffc:	4a12      	ldr	r2, [pc, #72]	; (8003048 <HAL_GPIO_Init+0x334>)
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	3301      	adds	r3, #1
 8003006:	61fb      	str	r3, [r7, #28]
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	2b0f      	cmp	r3, #15
 800300c:	f67f ae90 	bls.w	8002d30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003010:	bf00      	nop
 8003012:	bf00      	nop
 8003014:	3724      	adds	r7, #36	; 0x24
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop
 8003020:	40023800 	.word	0x40023800
 8003024:	40013800 	.word	0x40013800
 8003028:	40020000 	.word	0x40020000
 800302c:	40020400 	.word	0x40020400
 8003030:	40020800 	.word	0x40020800
 8003034:	40020c00 	.word	0x40020c00
 8003038:	40021000 	.word	0x40021000
 800303c:	40021400 	.word	0x40021400
 8003040:	40021800 	.word	0x40021800
 8003044:	40021c00 	.word	0x40021c00
 8003048:	40013c00 	.word	0x40013c00

0800304c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800304c:	b480      	push	{r7}
 800304e:	b085      	sub	sp, #20
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	460b      	mov	r3, r1
 8003056:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	691a      	ldr	r2, [r3, #16]
 800305c:	887b      	ldrh	r3, [r7, #2]
 800305e:	4013      	ands	r3, r2
 8003060:	2b00      	cmp	r3, #0
 8003062:	d002      	beq.n	800306a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003064:	2301      	movs	r3, #1
 8003066:	73fb      	strb	r3, [r7, #15]
 8003068:	e001      	b.n	800306e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800306a:	2300      	movs	r3, #0
 800306c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800306e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003070:	4618      	mov	r0, r3
 8003072:	3714      	adds	r7, #20
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	460b      	mov	r3, r1
 8003086:	807b      	strh	r3, [r7, #2]
 8003088:	4613      	mov	r3, r2
 800308a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800308c:	787b      	ldrb	r3, [r7, #1]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d003      	beq.n	800309a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003092:	887a      	ldrh	r2, [r7, #2]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003098:	e003      	b.n	80030a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800309a:	887b      	ldrh	r3, [r7, #2]
 800309c:	041a      	lsls	r2, r3, #16
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	619a      	str	r2, [r3, #24]
}
 80030a2:	bf00      	nop
 80030a4:	370c      	adds	r7, #12
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
	...

080030b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b086      	sub	sp, #24
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d101      	bne.n	80030c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e264      	b.n	800358c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0301 	and.w	r3, r3, #1
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d075      	beq.n	80031ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030ce:	4ba3      	ldr	r3, [pc, #652]	; (800335c <HAL_RCC_OscConfig+0x2ac>)
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	f003 030c 	and.w	r3, r3, #12
 80030d6:	2b04      	cmp	r3, #4
 80030d8:	d00c      	beq.n	80030f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030da:	4ba0      	ldr	r3, [pc, #640]	; (800335c <HAL_RCC_OscConfig+0x2ac>)
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030e2:	2b08      	cmp	r3, #8
 80030e4:	d112      	bne.n	800310c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030e6:	4b9d      	ldr	r3, [pc, #628]	; (800335c <HAL_RCC_OscConfig+0x2ac>)
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030f2:	d10b      	bne.n	800310c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030f4:	4b99      	ldr	r3, [pc, #612]	; (800335c <HAL_RCC_OscConfig+0x2ac>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d05b      	beq.n	80031b8 <HAL_RCC_OscConfig+0x108>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d157      	bne.n	80031b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e23f      	b.n	800358c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003114:	d106      	bne.n	8003124 <HAL_RCC_OscConfig+0x74>
 8003116:	4b91      	ldr	r3, [pc, #580]	; (800335c <HAL_RCC_OscConfig+0x2ac>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a90      	ldr	r2, [pc, #576]	; (800335c <HAL_RCC_OscConfig+0x2ac>)
 800311c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003120:	6013      	str	r3, [r2, #0]
 8003122:	e01d      	b.n	8003160 <HAL_RCC_OscConfig+0xb0>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800312c:	d10c      	bne.n	8003148 <HAL_RCC_OscConfig+0x98>
 800312e:	4b8b      	ldr	r3, [pc, #556]	; (800335c <HAL_RCC_OscConfig+0x2ac>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a8a      	ldr	r2, [pc, #552]	; (800335c <HAL_RCC_OscConfig+0x2ac>)
 8003134:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003138:	6013      	str	r3, [r2, #0]
 800313a:	4b88      	ldr	r3, [pc, #544]	; (800335c <HAL_RCC_OscConfig+0x2ac>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a87      	ldr	r2, [pc, #540]	; (800335c <HAL_RCC_OscConfig+0x2ac>)
 8003140:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003144:	6013      	str	r3, [r2, #0]
 8003146:	e00b      	b.n	8003160 <HAL_RCC_OscConfig+0xb0>
 8003148:	4b84      	ldr	r3, [pc, #528]	; (800335c <HAL_RCC_OscConfig+0x2ac>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a83      	ldr	r2, [pc, #524]	; (800335c <HAL_RCC_OscConfig+0x2ac>)
 800314e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003152:	6013      	str	r3, [r2, #0]
 8003154:	4b81      	ldr	r3, [pc, #516]	; (800335c <HAL_RCC_OscConfig+0x2ac>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a80      	ldr	r2, [pc, #512]	; (800335c <HAL_RCC_OscConfig+0x2ac>)
 800315a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800315e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d013      	beq.n	8003190 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003168:	f7ff fcb6 	bl	8002ad8 <HAL_GetTick>
 800316c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800316e:	e008      	b.n	8003182 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003170:	f7ff fcb2 	bl	8002ad8 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2b64      	cmp	r3, #100	; 0x64
 800317c:	d901      	bls.n	8003182 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e204      	b.n	800358c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003182:	4b76      	ldr	r3, [pc, #472]	; (800335c <HAL_RCC_OscConfig+0x2ac>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d0f0      	beq.n	8003170 <HAL_RCC_OscConfig+0xc0>
 800318e:	e014      	b.n	80031ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003190:	f7ff fca2 	bl	8002ad8 <HAL_GetTick>
 8003194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003196:	e008      	b.n	80031aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003198:	f7ff fc9e 	bl	8002ad8 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	2b64      	cmp	r3, #100	; 0x64
 80031a4:	d901      	bls.n	80031aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e1f0      	b.n	800358c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031aa:	4b6c      	ldr	r3, [pc, #432]	; (800335c <HAL_RCC_OscConfig+0x2ac>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d1f0      	bne.n	8003198 <HAL_RCC_OscConfig+0xe8>
 80031b6:	e000      	b.n	80031ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0302 	and.w	r3, r3, #2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d063      	beq.n	800328e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031c6:	4b65      	ldr	r3, [pc, #404]	; (800335c <HAL_RCC_OscConfig+0x2ac>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f003 030c 	and.w	r3, r3, #12
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00b      	beq.n	80031ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031d2:	4b62      	ldr	r3, [pc, #392]	; (800335c <HAL_RCC_OscConfig+0x2ac>)
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031da:	2b08      	cmp	r3, #8
 80031dc:	d11c      	bne.n	8003218 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031de:	4b5f      	ldr	r3, [pc, #380]	; (800335c <HAL_RCC_OscConfig+0x2ac>)
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d116      	bne.n	8003218 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ea:	4b5c      	ldr	r3, [pc, #368]	; (800335c <HAL_RCC_OscConfig+0x2ac>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d005      	beq.n	8003202 <HAL_RCC_OscConfig+0x152>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d001      	beq.n	8003202 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e1c4      	b.n	800358c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003202:	4b56      	ldr	r3, [pc, #344]	; (800335c <HAL_RCC_OscConfig+0x2ac>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	00db      	lsls	r3, r3, #3
 8003210:	4952      	ldr	r1, [pc, #328]	; (800335c <HAL_RCC_OscConfig+0x2ac>)
 8003212:	4313      	orrs	r3, r2
 8003214:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003216:	e03a      	b.n	800328e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d020      	beq.n	8003262 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003220:	4b4f      	ldr	r3, [pc, #316]	; (8003360 <HAL_RCC_OscConfig+0x2b0>)
 8003222:	2201      	movs	r2, #1
 8003224:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003226:	f7ff fc57 	bl	8002ad8 <HAL_GetTick>
 800322a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800322c:	e008      	b.n	8003240 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800322e:	f7ff fc53 	bl	8002ad8 <HAL_GetTick>
 8003232:	4602      	mov	r2, r0
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	2b02      	cmp	r3, #2
 800323a:	d901      	bls.n	8003240 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	e1a5      	b.n	800358c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003240:	4b46      	ldr	r3, [pc, #280]	; (800335c <HAL_RCC_OscConfig+0x2ac>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0302 	and.w	r3, r3, #2
 8003248:	2b00      	cmp	r3, #0
 800324a:	d0f0      	beq.n	800322e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800324c:	4b43      	ldr	r3, [pc, #268]	; (800335c <HAL_RCC_OscConfig+0x2ac>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	691b      	ldr	r3, [r3, #16]
 8003258:	00db      	lsls	r3, r3, #3
 800325a:	4940      	ldr	r1, [pc, #256]	; (800335c <HAL_RCC_OscConfig+0x2ac>)
 800325c:	4313      	orrs	r3, r2
 800325e:	600b      	str	r3, [r1, #0]
 8003260:	e015      	b.n	800328e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003262:	4b3f      	ldr	r3, [pc, #252]	; (8003360 <HAL_RCC_OscConfig+0x2b0>)
 8003264:	2200      	movs	r2, #0
 8003266:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003268:	f7ff fc36 	bl	8002ad8 <HAL_GetTick>
 800326c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800326e:	e008      	b.n	8003282 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003270:	f7ff fc32 	bl	8002ad8 <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	2b02      	cmp	r3, #2
 800327c:	d901      	bls.n	8003282 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e184      	b.n	800358c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003282:	4b36      	ldr	r3, [pc, #216]	; (800335c <HAL_RCC_OscConfig+0x2ac>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d1f0      	bne.n	8003270 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0308 	and.w	r3, r3, #8
 8003296:	2b00      	cmp	r3, #0
 8003298:	d030      	beq.n	80032fc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d016      	beq.n	80032d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032a2:	4b30      	ldr	r3, [pc, #192]	; (8003364 <HAL_RCC_OscConfig+0x2b4>)
 80032a4:	2201      	movs	r2, #1
 80032a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032a8:	f7ff fc16 	bl	8002ad8 <HAL_GetTick>
 80032ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032ae:	e008      	b.n	80032c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032b0:	f7ff fc12 	bl	8002ad8 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d901      	bls.n	80032c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e164      	b.n	800358c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032c2:	4b26      	ldr	r3, [pc, #152]	; (800335c <HAL_RCC_OscConfig+0x2ac>)
 80032c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d0f0      	beq.n	80032b0 <HAL_RCC_OscConfig+0x200>
 80032ce:	e015      	b.n	80032fc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032d0:	4b24      	ldr	r3, [pc, #144]	; (8003364 <HAL_RCC_OscConfig+0x2b4>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032d6:	f7ff fbff 	bl	8002ad8 <HAL_GetTick>
 80032da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032dc:	e008      	b.n	80032f0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032de:	f7ff fbfb 	bl	8002ad8 <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d901      	bls.n	80032f0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e14d      	b.n	800358c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032f0:	4b1a      	ldr	r3, [pc, #104]	; (800335c <HAL_RCC_OscConfig+0x2ac>)
 80032f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d1f0      	bne.n	80032de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0304 	and.w	r3, r3, #4
 8003304:	2b00      	cmp	r3, #0
 8003306:	f000 80a0 	beq.w	800344a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800330a:	2300      	movs	r3, #0
 800330c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800330e:	4b13      	ldr	r3, [pc, #76]	; (800335c <HAL_RCC_OscConfig+0x2ac>)
 8003310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d10f      	bne.n	800333a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800331a:	2300      	movs	r3, #0
 800331c:	60bb      	str	r3, [r7, #8]
 800331e:	4b0f      	ldr	r3, [pc, #60]	; (800335c <HAL_RCC_OscConfig+0x2ac>)
 8003320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003322:	4a0e      	ldr	r2, [pc, #56]	; (800335c <HAL_RCC_OscConfig+0x2ac>)
 8003324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003328:	6413      	str	r3, [r2, #64]	; 0x40
 800332a:	4b0c      	ldr	r3, [pc, #48]	; (800335c <HAL_RCC_OscConfig+0x2ac>)
 800332c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003332:	60bb      	str	r3, [r7, #8]
 8003334:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003336:	2301      	movs	r3, #1
 8003338:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800333a:	4b0b      	ldr	r3, [pc, #44]	; (8003368 <HAL_RCC_OscConfig+0x2b8>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003342:	2b00      	cmp	r3, #0
 8003344:	d121      	bne.n	800338a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003346:	4b08      	ldr	r3, [pc, #32]	; (8003368 <HAL_RCC_OscConfig+0x2b8>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a07      	ldr	r2, [pc, #28]	; (8003368 <HAL_RCC_OscConfig+0x2b8>)
 800334c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003350:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003352:	f7ff fbc1 	bl	8002ad8 <HAL_GetTick>
 8003356:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003358:	e011      	b.n	800337e <HAL_RCC_OscConfig+0x2ce>
 800335a:	bf00      	nop
 800335c:	40023800 	.word	0x40023800
 8003360:	42470000 	.word	0x42470000
 8003364:	42470e80 	.word	0x42470e80
 8003368:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800336c:	f7ff fbb4 	bl	8002ad8 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b02      	cmp	r3, #2
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e106      	b.n	800358c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800337e:	4b85      	ldr	r3, [pc, #532]	; (8003594 <HAL_RCC_OscConfig+0x4e4>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003386:	2b00      	cmp	r3, #0
 8003388:	d0f0      	beq.n	800336c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	2b01      	cmp	r3, #1
 8003390:	d106      	bne.n	80033a0 <HAL_RCC_OscConfig+0x2f0>
 8003392:	4b81      	ldr	r3, [pc, #516]	; (8003598 <HAL_RCC_OscConfig+0x4e8>)
 8003394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003396:	4a80      	ldr	r2, [pc, #512]	; (8003598 <HAL_RCC_OscConfig+0x4e8>)
 8003398:	f043 0301 	orr.w	r3, r3, #1
 800339c:	6713      	str	r3, [r2, #112]	; 0x70
 800339e:	e01c      	b.n	80033da <HAL_RCC_OscConfig+0x32a>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	2b05      	cmp	r3, #5
 80033a6:	d10c      	bne.n	80033c2 <HAL_RCC_OscConfig+0x312>
 80033a8:	4b7b      	ldr	r3, [pc, #492]	; (8003598 <HAL_RCC_OscConfig+0x4e8>)
 80033aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ac:	4a7a      	ldr	r2, [pc, #488]	; (8003598 <HAL_RCC_OscConfig+0x4e8>)
 80033ae:	f043 0304 	orr.w	r3, r3, #4
 80033b2:	6713      	str	r3, [r2, #112]	; 0x70
 80033b4:	4b78      	ldr	r3, [pc, #480]	; (8003598 <HAL_RCC_OscConfig+0x4e8>)
 80033b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b8:	4a77      	ldr	r2, [pc, #476]	; (8003598 <HAL_RCC_OscConfig+0x4e8>)
 80033ba:	f043 0301 	orr.w	r3, r3, #1
 80033be:	6713      	str	r3, [r2, #112]	; 0x70
 80033c0:	e00b      	b.n	80033da <HAL_RCC_OscConfig+0x32a>
 80033c2:	4b75      	ldr	r3, [pc, #468]	; (8003598 <HAL_RCC_OscConfig+0x4e8>)
 80033c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c6:	4a74      	ldr	r2, [pc, #464]	; (8003598 <HAL_RCC_OscConfig+0x4e8>)
 80033c8:	f023 0301 	bic.w	r3, r3, #1
 80033cc:	6713      	str	r3, [r2, #112]	; 0x70
 80033ce:	4b72      	ldr	r3, [pc, #456]	; (8003598 <HAL_RCC_OscConfig+0x4e8>)
 80033d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d2:	4a71      	ldr	r2, [pc, #452]	; (8003598 <HAL_RCC_OscConfig+0x4e8>)
 80033d4:	f023 0304 	bic.w	r3, r3, #4
 80033d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d015      	beq.n	800340e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033e2:	f7ff fb79 	bl	8002ad8 <HAL_GetTick>
 80033e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033e8:	e00a      	b.n	8003400 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033ea:	f7ff fb75 	bl	8002ad8 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d901      	bls.n	8003400 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e0c5      	b.n	800358c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003400:	4b65      	ldr	r3, [pc, #404]	; (8003598 <HAL_RCC_OscConfig+0x4e8>)
 8003402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003404:	f003 0302 	and.w	r3, r3, #2
 8003408:	2b00      	cmp	r3, #0
 800340a:	d0ee      	beq.n	80033ea <HAL_RCC_OscConfig+0x33a>
 800340c:	e014      	b.n	8003438 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800340e:	f7ff fb63 	bl	8002ad8 <HAL_GetTick>
 8003412:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003414:	e00a      	b.n	800342c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003416:	f7ff fb5f 	bl	8002ad8 <HAL_GetTick>
 800341a:	4602      	mov	r2, r0
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	f241 3288 	movw	r2, #5000	; 0x1388
 8003424:	4293      	cmp	r3, r2
 8003426:	d901      	bls.n	800342c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003428:	2303      	movs	r3, #3
 800342a:	e0af      	b.n	800358c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800342c:	4b5a      	ldr	r3, [pc, #360]	; (8003598 <HAL_RCC_OscConfig+0x4e8>)
 800342e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003430:	f003 0302 	and.w	r3, r3, #2
 8003434:	2b00      	cmp	r3, #0
 8003436:	d1ee      	bne.n	8003416 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003438:	7dfb      	ldrb	r3, [r7, #23]
 800343a:	2b01      	cmp	r3, #1
 800343c:	d105      	bne.n	800344a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800343e:	4b56      	ldr	r3, [pc, #344]	; (8003598 <HAL_RCC_OscConfig+0x4e8>)
 8003440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003442:	4a55      	ldr	r2, [pc, #340]	; (8003598 <HAL_RCC_OscConfig+0x4e8>)
 8003444:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003448:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	2b00      	cmp	r3, #0
 8003450:	f000 809b 	beq.w	800358a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003454:	4b50      	ldr	r3, [pc, #320]	; (8003598 <HAL_RCC_OscConfig+0x4e8>)
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	f003 030c 	and.w	r3, r3, #12
 800345c:	2b08      	cmp	r3, #8
 800345e:	d05c      	beq.n	800351a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	699b      	ldr	r3, [r3, #24]
 8003464:	2b02      	cmp	r3, #2
 8003466:	d141      	bne.n	80034ec <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003468:	4b4c      	ldr	r3, [pc, #304]	; (800359c <HAL_RCC_OscConfig+0x4ec>)
 800346a:	2200      	movs	r2, #0
 800346c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800346e:	f7ff fb33 	bl	8002ad8 <HAL_GetTick>
 8003472:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003474:	e008      	b.n	8003488 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003476:	f7ff fb2f 	bl	8002ad8 <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	2b02      	cmp	r3, #2
 8003482:	d901      	bls.n	8003488 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e081      	b.n	800358c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003488:	4b43      	ldr	r3, [pc, #268]	; (8003598 <HAL_RCC_OscConfig+0x4e8>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d1f0      	bne.n	8003476 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	69da      	ldr	r2, [r3, #28]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a1b      	ldr	r3, [r3, #32]
 800349c:	431a      	orrs	r2, r3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a2:	019b      	lsls	r3, r3, #6
 80034a4:	431a      	orrs	r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034aa:	085b      	lsrs	r3, r3, #1
 80034ac:	3b01      	subs	r3, #1
 80034ae:	041b      	lsls	r3, r3, #16
 80034b0:	431a      	orrs	r2, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b6:	061b      	lsls	r3, r3, #24
 80034b8:	4937      	ldr	r1, [pc, #220]	; (8003598 <HAL_RCC_OscConfig+0x4e8>)
 80034ba:	4313      	orrs	r3, r2
 80034bc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034be:	4b37      	ldr	r3, [pc, #220]	; (800359c <HAL_RCC_OscConfig+0x4ec>)
 80034c0:	2201      	movs	r2, #1
 80034c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c4:	f7ff fb08 	bl	8002ad8 <HAL_GetTick>
 80034c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034ca:	e008      	b.n	80034de <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034cc:	f7ff fb04 	bl	8002ad8 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d901      	bls.n	80034de <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e056      	b.n	800358c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034de:	4b2e      	ldr	r3, [pc, #184]	; (8003598 <HAL_RCC_OscConfig+0x4e8>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d0f0      	beq.n	80034cc <HAL_RCC_OscConfig+0x41c>
 80034ea:	e04e      	b.n	800358a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ec:	4b2b      	ldr	r3, [pc, #172]	; (800359c <HAL_RCC_OscConfig+0x4ec>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f2:	f7ff faf1 	bl	8002ad8 <HAL_GetTick>
 80034f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034f8:	e008      	b.n	800350c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034fa:	f7ff faed 	bl	8002ad8 <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	2b02      	cmp	r3, #2
 8003506:	d901      	bls.n	800350c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e03f      	b.n	800358c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800350c:	4b22      	ldr	r3, [pc, #136]	; (8003598 <HAL_RCC_OscConfig+0x4e8>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d1f0      	bne.n	80034fa <HAL_RCC_OscConfig+0x44a>
 8003518:	e037      	b.n	800358a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	699b      	ldr	r3, [r3, #24]
 800351e:	2b01      	cmp	r3, #1
 8003520:	d101      	bne.n	8003526 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e032      	b.n	800358c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003526:	4b1c      	ldr	r3, [pc, #112]	; (8003598 <HAL_RCC_OscConfig+0x4e8>)
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	699b      	ldr	r3, [r3, #24]
 8003530:	2b01      	cmp	r3, #1
 8003532:	d028      	beq.n	8003586 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800353e:	429a      	cmp	r2, r3
 8003540:	d121      	bne.n	8003586 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800354c:	429a      	cmp	r2, r3
 800354e:	d11a      	bne.n	8003586 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003550:	68fa      	ldr	r2, [r7, #12]
 8003552:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003556:	4013      	ands	r3, r2
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800355c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800355e:	4293      	cmp	r3, r2
 8003560:	d111      	bne.n	8003586 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800356c:	085b      	lsrs	r3, r3, #1
 800356e:	3b01      	subs	r3, #1
 8003570:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003572:	429a      	cmp	r2, r3
 8003574:	d107      	bne.n	8003586 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003580:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003582:	429a      	cmp	r2, r3
 8003584:	d001      	beq.n	800358a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e000      	b.n	800358c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800358a:	2300      	movs	r3, #0
}
 800358c:	4618      	mov	r0, r3
 800358e:	3718      	adds	r7, #24
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}
 8003594:	40007000 	.word	0x40007000
 8003598:	40023800 	.word	0x40023800
 800359c:	42470060 	.word	0x42470060

080035a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d101      	bne.n	80035b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e0cc      	b.n	800374e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035b4:	4b68      	ldr	r3, [pc, #416]	; (8003758 <HAL_RCC_ClockConfig+0x1b8>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0307 	and.w	r3, r3, #7
 80035bc:	683a      	ldr	r2, [r7, #0]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d90c      	bls.n	80035dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035c2:	4b65      	ldr	r3, [pc, #404]	; (8003758 <HAL_RCC_ClockConfig+0x1b8>)
 80035c4:	683a      	ldr	r2, [r7, #0]
 80035c6:	b2d2      	uxtb	r2, r2
 80035c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ca:	4b63      	ldr	r3, [pc, #396]	; (8003758 <HAL_RCC_ClockConfig+0x1b8>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0307 	and.w	r3, r3, #7
 80035d2:	683a      	ldr	r2, [r7, #0]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d001      	beq.n	80035dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e0b8      	b.n	800374e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0302 	and.w	r3, r3, #2
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d020      	beq.n	800362a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0304 	and.w	r3, r3, #4
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d005      	beq.n	8003600 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035f4:	4b59      	ldr	r3, [pc, #356]	; (800375c <HAL_RCC_ClockConfig+0x1bc>)
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	4a58      	ldr	r2, [pc, #352]	; (800375c <HAL_RCC_ClockConfig+0x1bc>)
 80035fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80035fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0308 	and.w	r3, r3, #8
 8003608:	2b00      	cmp	r3, #0
 800360a:	d005      	beq.n	8003618 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800360c:	4b53      	ldr	r3, [pc, #332]	; (800375c <HAL_RCC_ClockConfig+0x1bc>)
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	4a52      	ldr	r2, [pc, #328]	; (800375c <HAL_RCC_ClockConfig+0x1bc>)
 8003612:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003616:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003618:	4b50      	ldr	r3, [pc, #320]	; (800375c <HAL_RCC_ClockConfig+0x1bc>)
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	494d      	ldr	r1, [pc, #308]	; (800375c <HAL_RCC_ClockConfig+0x1bc>)
 8003626:	4313      	orrs	r3, r2
 8003628:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	2b00      	cmp	r3, #0
 8003634:	d044      	beq.n	80036c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	2b01      	cmp	r3, #1
 800363c:	d107      	bne.n	800364e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800363e:	4b47      	ldr	r3, [pc, #284]	; (800375c <HAL_RCC_ClockConfig+0x1bc>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d119      	bne.n	800367e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e07f      	b.n	800374e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	2b02      	cmp	r3, #2
 8003654:	d003      	beq.n	800365e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800365a:	2b03      	cmp	r3, #3
 800365c:	d107      	bne.n	800366e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800365e:	4b3f      	ldr	r3, [pc, #252]	; (800375c <HAL_RCC_ClockConfig+0x1bc>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d109      	bne.n	800367e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e06f      	b.n	800374e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800366e:	4b3b      	ldr	r3, [pc, #236]	; (800375c <HAL_RCC_ClockConfig+0x1bc>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d101      	bne.n	800367e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e067      	b.n	800374e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800367e:	4b37      	ldr	r3, [pc, #220]	; (800375c <HAL_RCC_ClockConfig+0x1bc>)
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f023 0203 	bic.w	r2, r3, #3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	4934      	ldr	r1, [pc, #208]	; (800375c <HAL_RCC_ClockConfig+0x1bc>)
 800368c:	4313      	orrs	r3, r2
 800368e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003690:	f7ff fa22 	bl	8002ad8 <HAL_GetTick>
 8003694:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003696:	e00a      	b.n	80036ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003698:	f7ff fa1e 	bl	8002ad8 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d901      	bls.n	80036ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e04f      	b.n	800374e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ae:	4b2b      	ldr	r3, [pc, #172]	; (800375c <HAL_RCC_ClockConfig+0x1bc>)
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f003 020c 	and.w	r2, r3, #12
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	429a      	cmp	r2, r3
 80036be:	d1eb      	bne.n	8003698 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036c0:	4b25      	ldr	r3, [pc, #148]	; (8003758 <HAL_RCC_ClockConfig+0x1b8>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0307 	and.w	r3, r3, #7
 80036c8:	683a      	ldr	r2, [r7, #0]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d20c      	bcs.n	80036e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ce:	4b22      	ldr	r3, [pc, #136]	; (8003758 <HAL_RCC_ClockConfig+0x1b8>)
 80036d0:	683a      	ldr	r2, [r7, #0]
 80036d2:	b2d2      	uxtb	r2, r2
 80036d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036d6:	4b20      	ldr	r3, [pc, #128]	; (8003758 <HAL_RCC_ClockConfig+0x1b8>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0307 	and.w	r3, r3, #7
 80036de:	683a      	ldr	r2, [r7, #0]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d001      	beq.n	80036e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e032      	b.n	800374e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0304 	and.w	r3, r3, #4
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d008      	beq.n	8003706 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036f4:	4b19      	ldr	r3, [pc, #100]	; (800375c <HAL_RCC_ClockConfig+0x1bc>)
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	4916      	ldr	r1, [pc, #88]	; (800375c <HAL_RCC_ClockConfig+0x1bc>)
 8003702:	4313      	orrs	r3, r2
 8003704:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0308 	and.w	r3, r3, #8
 800370e:	2b00      	cmp	r3, #0
 8003710:	d009      	beq.n	8003726 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003712:	4b12      	ldr	r3, [pc, #72]	; (800375c <HAL_RCC_ClockConfig+0x1bc>)
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	00db      	lsls	r3, r3, #3
 8003720:	490e      	ldr	r1, [pc, #56]	; (800375c <HAL_RCC_ClockConfig+0x1bc>)
 8003722:	4313      	orrs	r3, r2
 8003724:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003726:	f000 f821 	bl	800376c <HAL_RCC_GetSysClockFreq>
 800372a:	4602      	mov	r2, r0
 800372c:	4b0b      	ldr	r3, [pc, #44]	; (800375c <HAL_RCC_ClockConfig+0x1bc>)
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	091b      	lsrs	r3, r3, #4
 8003732:	f003 030f 	and.w	r3, r3, #15
 8003736:	490a      	ldr	r1, [pc, #40]	; (8003760 <HAL_RCC_ClockConfig+0x1c0>)
 8003738:	5ccb      	ldrb	r3, [r1, r3]
 800373a:	fa22 f303 	lsr.w	r3, r2, r3
 800373e:	4a09      	ldr	r2, [pc, #36]	; (8003764 <HAL_RCC_ClockConfig+0x1c4>)
 8003740:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003742:	4b09      	ldr	r3, [pc, #36]	; (8003768 <HAL_RCC_ClockConfig+0x1c8>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4618      	mov	r0, r3
 8003748:	f7ff f982 	bl	8002a50 <HAL_InitTick>

  return HAL_OK;
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3710      	adds	r7, #16
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	40023c00 	.word	0x40023c00
 800375c:	40023800 	.word	0x40023800
 8003760:	080078a0 	.word	0x080078a0
 8003764:	200000ac 	.word	0x200000ac
 8003768:	200000b0 	.word	0x200000b0

0800376c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800376c:	b5b0      	push	{r4, r5, r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003772:	2100      	movs	r1, #0
 8003774:	6079      	str	r1, [r7, #4]
 8003776:	2100      	movs	r1, #0
 8003778:	60f9      	str	r1, [r7, #12]
 800377a:	2100      	movs	r1, #0
 800377c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800377e:	2100      	movs	r1, #0
 8003780:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003782:	4952      	ldr	r1, [pc, #328]	; (80038cc <HAL_RCC_GetSysClockFreq+0x160>)
 8003784:	6889      	ldr	r1, [r1, #8]
 8003786:	f001 010c 	and.w	r1, r1, #12
 800378a:	2908      	cmp	r1, #8
 800378c:	d00d      	beq.n	80037aa <HAL_RCC_GetSysClockFreq+0x3e>
 800378e:	2908      	cmp	r1, #8
 8003790:	f200 8094 	bhi.w	80038bc <HAL_RCC_GetSysClockFreq+0x150>
 8003794:	2900      	cmp	r1, #0
 8003796:	d002      	beq.n	800379e <HAL_RCC_GetSysClockFreq+0x32>
 8003798:	2904      	cmp	r1, #4
 800379a:	d003      	beq.n	80037a4 <HAL_RCC_GetSysClockFreq+0x38>
 800379c:	e08e      	b.n	80038bc <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800379e:	4b4c      	ldr	r3, [pc, #304]	; (80038d0 <HAL_RCC_GetSysClockFreq+0x164>)
 80037a0:	60bb      	str	r3, [r7, #8]
       break;
 80037a2:	e08e      	b.n	80038c2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037a4:	4b4b      	ldr	r3, [pc, #300]	; (80038d4 <HAL_RCC_GetSysClockFreq+0x168>)
 80037a6:	60bb      	str	r3, [r7, #8]
      break;
 80037a8:	e08b      	b.n	80038c2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037aa:	4948      	ldr	r1, [pc, #288]	; (80038cc <HAL_RCC_GetSysClockFreq+0x160>)
 80037ac:	6849      	ldr	r1, [r1, #4]
 80037ae:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80037b2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037b4:	4945      	ldr	r1, [pc, #276]	; (80038cc <HAL_RCC_GetSysClockFreq+0x160>)
 80037b6:	6849      	ldr	r1, [r1, #4]
 80037b8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80037bc:	2900      	cmp	r1, #0
 80037be:	d024      	beq.n	800380a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037c0:	4942      	ldr	r1, [pc, #264]	; (80038cc <HAL_RCC_GetSysClockFreq+0x160>)
 80037c2:	6849      	ldr	r1, [r1, #4]
 80037c4:	0989      	lsrs	r1, r1, #6
 80037c6:	4608      	mov	r0, r1
 80037c8:	f04f 0100 	mov.w	r1, #0
 80037cc:	f240 14ff 	movw	r4, #511	; 0x1ff
 80037d0:	f04f 0500 	mov.w	r5, #0
 80037d4:	ea00 0204 	and.w	r2, r0, r4
 80037d8:	ea01 0305 	and.w	r3, r1, r5
 80037dc:	493d      	ldr	r1, [pc, #244]	; (80038d4 <HAL_RCC_GetSysClockFreq+0x168>)
 80037de:	fb01 f003 	mul.w	r0, r1, r3
 80037e2:	2100      	movs	r1, #0
 80037e4:	fb01 f102 	mul.w	r1, r1, r2
 80037e8:	1844      	adds	r4, r0, r1
 80037ea:	493a      	ldr	r1, [pc, #232]	; (80038d4 <HAL_RCC_GetSysClockFreq+0x168>)
 80037ec:	fba2 0101 	umull	r0, r1, r2, r1
 80037f0:	1863      	adds	r3, r4, r1
 80037f2:	4619      	mov	r1, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	461a      	mov	r2, r3
 80037f8:	f04f 0300 	mov.w	r3, #0
 80037fc:	f7fd f9b6 	bl	8000b6c <__aeabi_uldivmod>
 8003800:	4602      	mov	r2, r0
 8003802:	460b      	mov	r3, r1
 8003804:	4613      	mov	r3, r2
 8003806:	60fb      	str	r3, [r7, #12]
 8003808:	e04a      	b.n	80038a0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800380a:	4b30      	ldr	r3, [pc, #192]	; (80038cc <HAL_RCC_GetSysClockFreq+0x160>)
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	099b      	lsrs	r3, r3, #6
 8003810:	461a      	mov	r2, r3
 8003812:	f04f 0300 	mov.w	r3, #0
 8003816:	f240 10ff 	movw	r0, #511	; 0x1ff
 800381a:	f04f 0100 	mov.w	r1, #0
 800381e:	ea02 0400 	and.w	r4, r2, r0
 8003822:	ea03 0501 	and.w	r5, r3, r1
 8003826:	4620      	mov	r0, r4
 8003828:	4629      	mov	r1, r5
 800382a:	f04f 0200 	mov.w	r2, #0
 800382e:	f04f 0300 	mov.w	r3, #0
 8003832:	014b      	lsls	r3, r1, #5
 8003834:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003838:	0142      	lsls	r2, r0, #5
 800383a:	4610      	mov	r0, r2
 800383c:	4619      	mov	r1, r3
 800383e:	1b00      	subs	r0, r0, r4
 8003840:	eb61 0105 	sbc.w	r1, r1, r5
 8003844:	f04f 0200 	mov.w	r2, #0
 8003848:	f04f 0300 	mov.w	r3, #0
 800384c:	018b      	lsls	r3, r1, #6
 800384e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003852:	0182      	lsls	r2, r0, #6
 8003854:	1a12      	subs	r2, r2, r0
 8003856:	eb63 0301 	sbc.w	r3, r3, r1
 800385a:	f04f 0000 	mov.w	r0, #0
 800385e:	f04f 0100 	mov.w	r1, #0
 8003862:	00d9      	lsls	r1, r3, #3
 8003864:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003868:	00d0      	lsls	r0, r2, #3
 800386a:	4602      	mov	r2, r0
 800386c:	460b      	mov	r3, r1
 800386e:	1912      	adds	r2, r2, r4
 8003870:	eb45 0303 	adc.w	r3, r5, r3
 8003874:	f04f 0000 	mov.w	r0, #0
 8003878:	f04f 0100 	mov.w	r1, #0
 800387c:	0299      	lsls	r1, r3, #10
 800387e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003882:	0290      	lsls	r0, r2, #10
 8003884:	4602      	mov	r2, r0
 8003886:	460b      	mov	r3, r1
 8003888:	4610      	mov	r0, r2
 800388a:	4619      	mov	r1, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	461a      	mov	r2, r3
 8003890:	f04f 0300 	mov.w	r3, #0
 8003894:	f7fd f96a 	bl	8000b6c <__aeabi_uldivmod>
 8003898:	4602      	mov	r2, r0
 800389a:	460b      	mov	r3, r1
 800389c:	4613      	mov	r3, r2
 800389e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80038a0:	4b0a      	ldr	r3, [pc, #40]	; (80038cc <HAL_RCC_GetSysClockFreq+0x160>)
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	0c1b      	lsrs	r3, r3, #16
 80038a6:	f003 0303 	and.w	r3, r3, #3
 80038aa:	3301      	adds	r3, #1
 80038ac:	005b      	lsls	r3, r3, #1
 80038ae:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80038b0:	68fa      	ldr	r2, [r7, #12]
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038b8:	60bb      	str	r3, [r7, #8]
      break;
 80038ba:	e002      	b.n	80038c2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038bc:	4b04      	ldr	r3, [pc, #16]	; (80038d0 <HAL_RCC_GetSysClockFreq+0x164>)
 80038be:	60bb      	str	r3, [r7, #8]
      break;
 80038c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038c2:	68bb      	ldr	r3, [r7, #8]
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3710      	adds	r7, #16
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bdb0      	pop	{r4, r5, r7, pc}
 80038cc:	40023800 	.word	0x40023800
 80038d0:	00f42400 	.word	0x00f42400
 80038d4:	017d7840 	.word	0x017d7840

080038d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d101      	bne.n	80038ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e041      	b.n	800396e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d106      	bne.n	8003904 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f7fe ff10 	bl	8002724 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2202      	movs	r2, #2
 8003908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	3304      	adds	r3, #4
 8003914:	4619      	mov	r1, r3
 8003916:	4610      	mov	r0, r2
 8003918:	f000 fb42 	bl	8003fa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3708      	adds	r7, #8
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
	...

08003978 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003978:	b480      	push	{r7}
 800397a:	b085      	sub	sp, #20
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003986:	b2db      	uxtb	r3, r3
 8003988:	2b01      	cmp	r3, #1
 800398a:	d001      	beq.n	8003990 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e046      	b.n	8003a1e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2202      	movs	r2, #2
 8003994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a23      	ldr	r2, [pc, #140]	; (8003a2c <HAL_TIM_Base_Start+0xb4>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d022      	beq.n	80039e8 <HAL_TIM_Base_Start+0x70>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039aa:	d01d      	beq.n	80039e8 <HAL_TIM_Base_Start+0x70>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a1f      	ldr	r2, [pc, #124]	; (8003a30 <HAL_TIM_Base_Start+0xb8>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d018      	beq.n	80039e8 <HAL_TIM_Base_Start+0x70>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a1e      	ldr	r2, [pc, #120]	; (8003a34 <HAL_TIM_Base_Start+0xbc>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d013      	beq.n	80039e8 <HAL_TIM_Base_Start+0x70>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a1c      	ldr	r2, [pc, #112]	; (8003a38 <HAL_TIM_Base_Start+0xc0>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d00e      	beq.n	80039e8 <HAL_TIM_Base_Start+0x70>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a1b      	ldr	r2, [pc, #108]	; (8003a3c <HAL_TIM_Base_Start+0xc4>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d009      	beq.n	80039e8 <HAL_TIM_Base_Start+0x70>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a19      	ldr	r2, [pc, #100]	; (8003a40 <HAL_TIM_Base_Start+0xc8>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d004      	beq.n	80039e8 <HAL_TIM_Base_Start+0x70>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a18      	ldr	r2, [pc, #96]	; (8003a44 <HAL_TIM_Base_Start+0xcc>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d111      	bne.n	8003a0c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f003 0307 	and.w	r3, r3, #7
 80039f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2b06      	cmp	r3, #6
 80039f8:	d010      	beq.n	8003a1c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f042 0201 	orr.w	r2, r2, #1
 8003a08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a0a:	e007      	b.n	8003a1c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f042 0201 	orr.w	r2, r2, #1
 8003a1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3714      	adds	r7, #20
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	40010000 	.word	0x40010000
 8003a30:	40000400 	.word	0x40000400
 8003a34:	40000800 	.word	0x40000800
 8003a38:	40000c00 	.word	0x40000c00
 8003a3c:	40010400 	.word	0x40010400
 8003a40:	40014000 	.word	0x40014000
 8003a44:	40001800 	.word	0x40001800

08003a48 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d101      	bne.n	8003a5a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e041      	b.n	8003ade <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d106      	bne.n	8003a74 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 f839 	bl	8003ae6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2202      	movs	r2, #2
 8003a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	3304      	adds	r3, #4
 8003a84:	4619      	mov	r1, r3
 8003a86:	4610      	mov	r0, r2
 8003a88:	f000 fa8a 	bl	8003fa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3708      	adds	r7, #8
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003ae6:	b480      	push	{r7}
 8003ae8:	b083      	sub	sp, #12
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003aee:	bf00      	nop
 8003af0:	370c      	adds	r7, #12
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr
	...

08003afc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d109      	bne.n	8003b20 <HAL_TIM_PWM_Start+0x24>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	bf14      	ite	ne
 8003b18:	2301      	movne	r3, #1
 8003b1a:	2300      	moveq	r3, #0
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	e022      	b.n	8003b66 <HAL_TIM_PWM_Start+0x6a>
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	2b04      	cmp	r3, #4
 8003b24:	d109      	bne.n	8003b3a <HAL_TIM_PWM_Start+0x3e>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	bf14      	ite	ne
 8003b32:	2301      	movne	r3, #1
 8003b34:	2300      	moveq	r3, #0
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	e015      	b.n	8003b66 <HAL_TIM_PWM_Start+0x6a>
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	2b08      	cmp	r3, #8
 8003b3e:	d109      	bne.n	8003b54 <HAL_TIM_PWM_Start+0x58>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	bf14      	ite	ne
 8003b4c:	2301      	movne	r3, #1
 8003b4e:	2300      	moveq	r3, #0
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	e008      	b.n	8003b66 <HAL_TIM_PWM_Start+0x6a>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	bf14      	ite	ne
 8003b60:	2301      	movne	r3, #1
 8003b62:	2300      	moveq	r3, #0
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d001      	beq.n	8003b6e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e07c      	b.n	8003c68 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d104      	bne.n	8003b7e <HAL_TIM_PWM_Start+0x82>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2202      	movs	r2, #2
 8003b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b7c:	e013      	b.n	8003ba6 <HAL_TIM_PWM_Start+0xaa>
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	2b04      	cmp	r3, #4
 8003b82:	d104      	bne.n	8003b8e <HAL_TIM_PWM_Start+0x92>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2202      	movs	r2, #2
 8003b88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b8c:	e00b      	b.n	8003ba6 <HAL_TIM_PWM_Start+0xaa>
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	2b08      	cmp	r3, #8
 8003b92:	d104      	bne.n	8003b9e <HAL_TIM_PWM_Start+0xa2>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2202      	movs	r2, #2
 8003b98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b9c:	e003      	b.n	8003ba6 <HAL_TIM_PWM_Start+0xaa>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2202      	movs	r2, #2
 8003ba2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	2201      	movs	r2, #1
 8003bac:	6839      	ldr	r1, [r7, #0]
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f000 fce0 	bl	8004574 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a2d      	ldr	r2, [pc, #180]	; (8003c70 <HAL_TIM_PWM_Start+0x174>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d004      	beq.n	8003bc8 <HAL_TIM_PWM_Start+0xcc>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a2c      	ldr	r2, [pc, #176]	; (8003c74 <HAL_TIM_PWM_Start+0x178>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d101      	bne.n	8003bcc <HAL_TIM_PWM_Start+0xd0>
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e000      	b.n	8003bce <HAL_TIM_PWM_Start+0xd2>
 8003bcc:	2300      	movs	r3, #0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d007      	beq.n	8003be2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003be0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a22      	ldr	r2, [pc, #136]	; (8003c70 <HAL_TIM_PWM_Start+0x174>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d022      	beq.n	8003c32 <HAL_TIM_PWM_Start+0x136>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bf4:	d01d      	beq.n	8003c32 <HAL_TIM_PWM_Start+0x136>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a1f      	ldr	r2, [pc, #124]	; (8003c78 <HAL_TIM_PWM_Start+0x17c>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d018      	beq.n	8003c32 <HAL_TIM_PWM_Start+0x136>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a1d      	ldr	r2, [pc, #116]	; (8003c7c <HAL_TIM_PWM_Start+0x180>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d013      	beq.n	8003c32 <HAL_TIM_PWM_Start+0x136>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a1c      	ldr	r2, [pc, #112]	; (8003c80 <HAL_TIM_PWM_Start+0x184>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d00e      	beq.n	8003c32 <HAL_TIM_PWM_Start+0x136>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a16      	ldr	r2, [pc, #88]	; (8003c74 <HAL_TIM_PWM_Start+0x178>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d009      	beq.n	8003c32 <HAL_TIM_PWM_Start+0x136>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a18      	ldr	r2, [pc, #96]	; (8003c84 <HAL_TIM_PWM_Start+0x188>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d004      	beq.n	8003c32 <HAL_TIM_PWM_Start+0x136>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a16      	ldr	r2, [pc, #88]	; (8003c88 <HAL_TIM_PWM_Start+0x18c>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d111      	bne.n	8003c56 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	f003 0307 	and.w	r3, r3, #7
 8003c3c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2b06      	cmp	r3, #6
 8003c42:	d010      	beq.n	8003c66 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f042 0201 	orr.w	r2, r2, #1
 8003c52:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c54:	e007      	b.n	8003c66 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f042 0201 	orr.w	r2, r2, #1
 8003c64:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c66:	2300      	movs	r3, #0
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3710      	adds	r7, #16
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	40010000 	.word	0x40010000
 8003c74:	40010400 	.word	0x40010400
 8003c78:	40000400 	.word	0x40000400
 8003c7c:	40000800 	.word	0x40000800
 8003c80:	40000c00 	.word	0x40000c00
 8003c84:	40014000 	.word	0x40014000
 8003c88:	40001800 	.word	0x40001800

08003c8c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b086      	sub	sp, #24
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	60f8      	str	r0, [r7, #12]
 8003c94:	60b9      	str	r1, [r7, #8]
 8003c96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d101      	bne.n	8003caa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003ca6:	2302      	movs	r3, #2
 8003ca8:	e0ae      	b.n	8003e08 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2201      	movs	r2, #1
 8003cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2b0c      	cmp	r3, #12
 8003cb6:	f200 809f 	bhi.w	8003df8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003cba:	a201      	add	r2, pc, #4	; (adr r2, 8003cc0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc0:	08003cf5 	.word	0x08003cf5
 8003cc4:	08003df9 	.word	0x08003df9
 8003cc8:	08003df9 	.word	0x08003df9
 8003ccc:	08003df9 	.word	0x08003df9
 8003cd0:	08003d35 	.word	0x08003d35
 8003cd4:	08003df9 	.word	0x08003df9
 8003cd8:	08003df9 	.word	0x08003df9
 8003cdc:	08003df9 	.word	0x08003df9
 8003ce0:	08003d77 	.word	0x08003d77
 8003ce4:	08003df9 	.word	0x08003df9
 8003ce8:	08003df9 	.word	0x08003df9
 8003cec:	08003df9 	.word	0x08003df9
 8003cf0:	08003db7 	.word	0x08003db7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68b9      	ldr	r1, [r7, #8]
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f000 f9f0 	bl	80040e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	699a      	ldr	r2, [r3, #24]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f042 0208 	orr.w	r2, r2, #8
 8003d0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	699a      	ldr	r2, [r3, #24]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f022 0204 	bic.w	r2, r2, #4
 8003d1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	6999      	ldr	r1, [r3, #24]
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	691a      	ldr	r2, [r3, #16]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	430a      	orrs	r2, r1
 8003d30:	619a      	str	r2, [r3, #24]
      break;
 8003d32:	e064      	b.n	8003dfe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	68b9      	ldr	r1, [r7, #8]
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f000 fa40 	bl	80041c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	699a      	ldr	r2, [r3, #24]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	699a      	ldr	r2, [r3, #24]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	6999      	ldr	r1, [r3, #24]
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	021a      	lsls	r2, r3, #8
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	430a      	orrs	r2, r1
 8003d72:	619a      	str	r2, [r3, #24]
      break;
 8003d74:	e043      	b.n	8003dfe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68b9      	ldr	r1, [r7, #8]
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f000 fa95 	bl	80042ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	69da      	ldr	r2, [r3, #28]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f042 0208 	orr.w	r2, r2, #8
 8003d90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	69da      	ldr	r2, [r3, #28]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f022 0204 	bic.w	r2, r2, #4
 8003da0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	69d9      	ldr	r1, [r3, #28]
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	691a      	ldr	r2, [r3, #16]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	430a      	orrs	r2, r1
 8003db2:	61da      	str	r2, [r3, #28]
      break;
 8003db4:	e023      	b.n	8003dfe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	68b9      	ldr	r1, [r7, #8]
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f000 fae9 	bl	8004394 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	69da      	ldr	r2, [r3, #28]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	69da      	ldr	r2, [r3, #28]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003de0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	69d9      	ldr	r1, [r3, #28]
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	691b      	ldr	r3, [r3, #16]
 8003dec:	021a      	lsls	r2, r3, #8
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	430a      	orrs	r2, r1
 8003df4:	61da      	str	r2, [r3, #28]
      break;
 8003df6:	e002      	b.n	8003dfe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	75fb      	strb	r3, [r7, #23]
      break;
 8003dfc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e06:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3718      	adds	r7, #24
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}

08003e10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d101      	bne.n	8003e2c <HAL_TIM_ConfigClockSource+0x1c>
 8003e28:	2302      	movs	r3, #2
 8003e2a:	e0b4      	b.n	8003f96 <HAL_TIM_ConfigClockSource+0x186>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2202      	movs	r2, #2
 8003e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68ba      	ldr	r2, [r7, #8]
 8003e5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e64:	d03e      	beq.n	8003ee4 <HAL_TIM_ConfigClockSource+0xd4>
 8003e66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e6a:	f200 8087 	bhi.w	8003f7c <HAL_TIM_ConfigClockSource+0x16c>
 8003e6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e72:	f000 8086 	beq.w	8003f82 <HAL_TIM_ConfigClockSource+0x172>
 8003e76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e7a:	d87f      	bhi.n	8003f7c <HAL_TIM_ConfigClockSource+0x16c>
 8003e7c:	2b70      	cmp	r3, #112	; 0x70
 8003e7e:	d01a      	beq.n	8003eb6 <HAL_TIM_ConfigClockSource+0xa6>
 8003e80:	2b70      	cmp	r3, #112	; 0x70
 8003e82:	d87b      	bhi.n	8003f7c <HAL_TIM_ConfigClockSource+0x16c>
 8003e84:	2b60      	cmp	r3, #96	; 0x60
 8003e86:	d050      	beq.n	8003f2a <HAL_TIM_ConfigClockSource+0x11a>
 8003e88:	2b60      	cmp	r3, #96	; 0x60
 8003e8a:	d877      	bhi.n	8003f7c <HAL_TIM_ConfigClockSource+0x16c>
 8003e8c:	2b50      	cmp	r3, #80	; 0x50
 8003e8e:	d03c      	beq.n	8003f0a <HAL_TIM_ConfigClockSource+0xfa>
 8003e90:	2b50      	cmp	r3, #80	; 0x50
 8003e92:	d873      	bhi.n	8003f7c <HAL_TIM_ConfigClockSource+0x16c>
 8003e94:	2b40      	cmp	r3, #64	; 0x40
 8003e96:	d058      	beq.n	8003f4a <HAL_TIM_ConfigClockSource+0x13a>
 8003e98:	2b40      	cmp	r3, #64	; 0x40
 8003e9a:	d86f      	bhi.n	8003f7c <HAL_TIM_ConfigClockSource+0x16c>
 8003e9c:	2b30      	cmp	r3, #48	; 0x30
 8003e9e:	d064      	beq.n	8003f6a <HAL_TIM_ConfigClockSource+0x15a>
 8003ea0:	2b30      	cmp	r3, #48	; 0x30
 8003ea2:	d86b      	bhi.n	8003f7c <HAL_TIM_ConfigClockSource+0x16c>
 8003ea4:	2b20      	cmp	r3, #32
 8003ea6:	d060      	beq.n	8003f6a <HAL_TIM_ConfigClockSource+0x15a>
 8003ea8:	2b20      	cmp	r3, #32
 8003eaa:	d867      	bhi.n	8003f7c <HAL_TIM_ConfigClockSource+0x16c>
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d05c      	beq.n	8003f6a <HAL_TIM_ConfigClockSource+0x15a>
 8003eb0:	2b10      	cmp	r3, #16
 8003eb2:	d05a      	beq.n	8003f6a <HAL_TIM_ConfigClockSource+0x15a>
 8003eb4:	e062      	b.n	8003f7c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6818      	ldr	r0, [r3, #0]
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	6899      	ldr	r1, [r3, #8]
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	685a      	ldr	r2, [r3, #4]
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	f000 fb35 	bl	8004534 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ed8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68ba      	ldr	r2, [r7, #8]
 8003ee0:	609a      	str	r2, [r3, #8]
      break;
 8003ee2:	e04f      	b.n	8003f84 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6818      	ldr	r0, [r3, #0]
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	6899      	ldr	r1, [r3, #8]
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	685a      	ldr	r2, [r3, #4]
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	f000 fb1e 	bl	8004534 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	689a      	ldr	r2, [r3, #8]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f06:	609a      	str	r2, [r3, #8]
      break;
 8003f08:	e03c      	b.n	8003f84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6818      	ldr	r0, [r3, #0]
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	6859      	ldr	r1, [r3, #4]
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	461a      	mov	r2, r3
 8003f18:	f000 fa92 	bl	8004440 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2150      	movs	r1, #80	; 0x50
 8003f22:	4618      	mov	r0, r3
 8003f24:	f000 faeb 	bl	80044fe <TIM_ITRx_SetConfig>
      break;
 8003f28:	e02c      	b.n	8003f84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6818      	ldr	r0, [r3, #0]
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	6859      	ldr	r1, [r3, #4]
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	461a      	mov	r2, r3
 8003f38:	f000 fab1 	bl	800449e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2160      	movs	r1, #96	; 0x60
 8003f42:	4618      	mov	r0, r3
 8003f44:	f000 fadb 	bl	80044fe <TIM_ITRx_SetConfig>
      break;
 8003f48:	e01c      	b.n	8003f84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6818      	ldr	r0, [r3, #0]
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	6859      	ldr	r1, [r3, #4]
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	461a      	mov	r2, r3
 8003f58:	f000 fa72 	bl	8004440 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2140      	movs	r1, #64	; 0x40
 8003f62:	4618      	mov	r0, r3
 8003f64:	f000 facb 	bl	80044fe <TIM_ITRx_SetConfig>
      break;
 8003f68:	e00c      	b.n	8003f84 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4619      	mov	r1, r3
 8003f74:	4610      	mov	r0, r2
 8003f76:	f000 fac2 	bl	80044fe <TIM_ITRx_SetConfig>
      break;
 8003f7a:	e003      	b.n	8003f84 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	73fb      	strb	r3, [r7, #15]
      break;
 8003f80:	e000      	b.n	8003f84 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003f82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3710      	adds	r7, #16
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
	...

08003fa0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b085      	sub	sp, #20
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	4a40      	ldr	r2, [pc, #256]	; (80040b4 <TIM_Base_SetConfig+0x114>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d013      	beq.n	8003fe0 <TIM_Base_SetConfig+0x40>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fbe:	d00f      	beq.n	8003fe0 <TIM_Base_SetConfig+0x40>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4a3d      	ldr	r2, [pc, #244]	; (80040b8 <TIM_Base_SetConfig+0x118>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d00b      	beq.n	8003fe0 <TIM_Base_SetConfig+0x40>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a3c      	ldr	r2, [pc, #240]	; (80040bc <TIM_Base_SetConfig+0x11c>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d007      	beq.n	8003fe0 <TIM_Base_SetConfig+0x40>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4a3b      	ldr	r2, [pc, #236]	; (80040c0 <TIM_Base_SetConfig+0x120>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d003      	beq.n	8003fe0 <TIM_Base_SetConfig+0x40>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a3a      	ldr	r2, [pc, #232]	; (80040c4 <TIM_Base_SetConfig+0x124>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d108      	bne.n	8003ff2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fe6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a2f      	ldr	r2, [pc, #188]	; (80040b4 <TIM_Base_SetConfig+0x114>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d02b      	beq.n	8004052 <TIM_Base_SetConfig+0xb2>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004000:	d027      	beq.n	8004052 <TIM_Base_SetConfig+0xb2>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a2c      	ldr	r2, [pc, #176]	; (80040b8 <TIM_Base_SetConfig+0x118>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d023      	beq.n	8004052 <TIM_Base_SetConfig+0xb2>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a2b      	ldr	r2, [pc, #172]	; (80040bc <TIM_Base_SetConfig+0x11c>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d01f      	beq.n	8004052 <TIM_Base_SetConfig+0xb2>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a2a      	ldr	r2, [pc, #168]	; (80040c0 <TIM_Base_SetConfig+0x120>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d01b      	beq.n	8004052 <TIM_Base_SetConfig+0xb2>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a29      	ldr	r2, [pc, #164]	; (80040c4 <TIM_Base_SetConfig+0x124>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d017      	beq.n	8004052 <TIM_Base_SetConfig+0xb2>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a28      	ldr	r2, [pc, #160]	; (80040c8 <TIM_Base_SetConfig+0x128>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d013      	beq.n	8004052 <TIM_Base_SetConfig+0xb2>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a27      	ldr	r2, [pc, #156]	; (80040cc <TIM_Base_SetConfig+0x12c>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d00f      	beq.n	8004052 <TIM_Base_SetConfig+0xb2>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a26      	ldr	r2, [pc, #152]	; (80040d0 <TIM_Base_SetConfig+0x130>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d00b      	beq.n	8004052 <TIM_Base_SetConfig+0xb2>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a25      	ldr	r2, [pc, #148]	; (80040d4 <TIM_Base_SetConfig+0x134>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d007      	beq.n	8004052 <TIM_Base_SetConfig+0xb2>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a24      	ldr	r2, [pc, #144]	; (80040d8 <TIM_Base_SetConfig+0x138>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d003      	beq.n	8004052 <TIM_Base_SetConfig+0xb2>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a23      	ldr	r2, [pc, #140]	; (80040dc <TIM_Base_SetConfig+0x13c>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d108      	bne.n	8004064 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004058:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	4313      	orrs	r3, r2
 8004062:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	4313      	orrs	r3, r2
 8004070:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	68fa      	ldr	r2, [r7, #12]
 8004076:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	689a      	ldr	r2, [r3, #8]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a0a      	ldr	r2, [pc, #40]	; (80040b4 <TIM_Base_SetConfig+0x114>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d003      	beq.n	8004098 <TIM_Base_SetConfig+0xf8>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a0c      	ldr	r2, [pc, #48]	; (80040c4 <TIM_Base_SetConfig+0x124>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d103      	bne.n	80040a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	691a      	ldr	r2, [r3, #16]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	615a      	str	r2, [r3, #20]
}
 80040a6:	bf00      	nop
 80040a8:	3714      	adds	r7, #20
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr
 80040b2:	bf00      	nop
 80040b4:	40010000 	.word	0x40010000
 80040b8:	40000400 	.word	0x40000400
 80040bc:	40000800 	.word	0x40000800
 80040c0:	40000c00 	.word	0x40000c00
 80040c4:	40010400 	.word	0x40010400
 80040c8:	40014000 	.word	0x40014000
 80040cc:	40014400 	.word	0x40014400
 80040d0:	40014800 	.word	0x40014800
 80040d4:	40001800 	.word	0x40001800
 80040d8:	40001c00 	.word	0x40001c00
 80040dc:	40002000 	.word	0x40002000

080040e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b087      	sub	sp, #28
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a1b      	ldr	r3, [r3, #32]
 80040ee:	f023 0201 	bic.w	r2, r3, #1
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a1b      	ldr	r3, [r3, #32]
 80040fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	699b      	ldr	r3, [r3, #24]
 8004106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800410e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f023 0303 	bic.w	r3, r3, #3
 8004116:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	68fa      	ldr	r2, [r7, #12]
 800411e:	4313      	orrs	r3, r2
 8004120:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	f023 0302 	bic.w	r3, r3, #2
 8004128:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	697a      	ldr	r2, [r7, #20]
 8004130:	4313      	orrs	r3, r2
 8004132:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4a20      	ldr	r2, [pc, #128]	; (80041b8 <TIM_OC1_SetConfig+0xd8>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d003      	beq.n	8004144 <TIM_OC1_SetConfig+0x64>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4a1f      	ldr	r2, [pc, #124]	; (80041bc <TIM_OC1_SetConfig+0xdc>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d10c      	bne.n	800415e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	f023 0308 	bic.w	r3, r3, #8
 800414a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	697a      	ldr	r2, [r7, #20]
 8004152:	4313      	orrs	r3, r2
 8004154:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	f023 0304 	bic.w	r3, r3, #4
 800415c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a15      	ldr	r2, [pc, #84]	; (80041b8 <TIM_OC1_SetConfig+0xd8>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d003      	beq.n	800416e <TIM_OC1_SetConfig+0x8e>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a14      	ldr	r2, [pc, #80]	; (80041bc <TIM_OC1_SetConfig+0xdc>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d111      	bne.n	8004192 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004174:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800417c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	695b      	ldr	r3, [r3, #20]
 8004182:	693a      	ldr	r2, [r7, #16]
 8004184:	4313      	orrs	r3, r2
 8004186:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	699b      	ldr	r3, [r3, #24]
 800418c:	693a      	ldr	r2, [r7, #16]
 800418e:	4313      	orrs	r3, r2
 8004190:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	693a      	ldr	r2, [r7, #16]
 8004196:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	68fa      	ldr	r2, [r7, #12]
 800419c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	685a      	ldr	r2, [r3, #4]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	697a      	ldr	r2, [r7, #20]
 80041aa:	621a      	str	r2, [r3, #32]
}
 80041ac:	bf00      	nop
 80041ae:	371c      	adds	r7, #28
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr
 80041b8:	40010000 	.word	0x40010000
 80041bc:	40010400 	.word	0x40010400

080041c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b087      	sub	sp, #28
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a1b      	ldr	r3, [r3, #32]
 80041ce:	f023 0210 	bic.w	r2, r3, #16
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a1b      	ldr	r3, [r3, #32]
 80041da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	699b      	ldr	r3, [r3, #24]
 80041e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	021b      	lsls	r3, r3, #8
 80041fe:	68fa      	ldr	r2, [r7, #12]
 8004200:	4313      	orrs	r3, r2
 8004202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	f023 0320 	bic.w	r3, r3, #32
 800420a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	011b      	lsls	r3, r3, #4
 8004212:	697a      	ldr	r2, [r7, #20]
 8004214:	4313      	orrs	r3, r2
 8004216:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4a22      	ldr	r2, [pc, #136]	; (80042a4 <TIM_OC2_SetConfig+0xe4>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d003      	beq.n	8004228 <TIM_OC2_SetConfig+0x68>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4a21      	ldr	r2, [pc, #132]	; (80042a8 <TIM_OC2_SetConfig+0xe8>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d10d      	bne.n	8004244 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800422e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	011b      	lsls	r3, r3, #4
 8004236:	697a      	ldr	r2, [r7, #20]
 8004238:	4313      	orrs	r3, r2
 800423a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004242:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4a17      	ldr	r2, [pc, #92]	; (80042a4 <TIM_OC2_SetConfig+0xe4>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d003      	beq.n	8004254 <TIM_OC2_SetConfig+0x94>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	4a16      	ldr	r2, [pc, #88]	; (80042a8 <TIM_OC2_SetConfig+0xe8>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d113      	bne.n	800427c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800425a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004262:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	695b      	ldr	r3, [r3, #20]
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	693a      	ldr	r2, [r7, #16]
 800426c:	4313      	orrs	r3, r2
 800426e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	699b      	ldr	r3, [r3, #24]
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	693a      	ldr	r2, [r7, #16]
 8004278:	4313      	orrs	r3, r2
 800427a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	693a      	ldr	r2, [r7, #16]
 8004280:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	68fa      	ldr	r2, [r7, #12]
 8004286:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	685a      	ldr	r2, [r3, #4]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	697a      	ldr	r2, [r7, #20]
 8004294:	621a      	str	r2, [r3, #32]
}
 8004296:	bf00      	nop
 8004298:	371c      	adds	r7, #28
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	40010000 	.word	0x40010000
 80042a8:	40010400 	.word	0x40010400

080042ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b087      	sub	sp, #28
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a1b      	ldr	r3, [r3, #32]
 80042ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a1b      	ldr	r3, [r3, #32]
 80042c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	69db      	ldr	r3, [r3, #28]
 80042d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f023 0303 	bic.w	r3, r3, #3
 80042e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	68fa      	ldr	r2, [r7, #12]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80042f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	021b      	lsls	r3, r3, #8
 80042fc:	697a      	ldr	r2, [r7, #20]
 80042fe:	4313      	orrs	r3, r2
 8004300:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4a21      	ldr	r2, [pc, #132]	; (800438c <TIM_OC3_SetConfig+0xe0>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d003      	beq.n	8004312 <TIM_OC3_SetConfig+0x66>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a20      	ldr	r2, [pc, #128]	; (8004390 <TIM_OC3_SetConfig+0xe4>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d10d      	bne.n	800432e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004318:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	021b      	lsls	r3, r3, #8
 8004320:	697a      	ldr	r2, [r7, #20]
 8004322:	4313      	orrs	r3, r2
 8004324:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800432c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4a16      	ldr	r2, [pc, #88]	; (800438c <TIM_OC3_SetConfig+0xe0>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d003      	beq.n	800433e <TIM_OC3_SetConfig+0x92>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a15      	ldr	r2, [pc, #84]	; (8004390 <TIM_OC3_SetConfig+0xe4>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d113      	bne.n	8004366 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004344:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800434c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	695b      	ldr	r3, [r3, #20]
 8004352:	011b      	lsls	r3, r3, #4
 8004354:	693a      	ldr	r2, [r7, #16]
 8004356:	4313      	orrs	r3, r2
 8004358:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	011b      	lsls	r3, r3, #4
 8004360:	693a      	ldr	r2, [r7, #16]
 8004362:	4313      	orrs	r3, r2
 8004364:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	693a      	ldr	r2, [r7, #16]
 800436a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	68fa      	ldr	r2, [r7, #12]
 8004370:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	685a      	ldr	r2, [r3, #4]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	697a      	ldr	r2, [r7, #20]
 800437e:	621a      	str	r2, [r3, #32]
}
 8004380:	bf00      	nop
 8004382:	371c      	adds	r7, #28
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr
 800438c:	40010000 	.word	0x40010000
 8004390:	40010400 	.word	0x40010400

08004394 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004394:	b480      	push	{r7}
 8004396:	b087      	sub	sp, #28
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a1b      	ldr	r3, [r3, #32]
 80043a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a1b      	ldr	r3, [r3, #32]
 80043ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	69db      	ldr	r3, [r3, #28]
 80043ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	021b      	lsls	r3, r3, #8
 80043d2:	68fa      	ldr	r2, [r7, #12]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	031b      	lsls	r3, r3, #12
 80043e6:	693a      	ldr	r2, [r7, #16]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	4a12      	ldr	r2, [pc, #72]	; (8004438 <TIM_OC4_SetConfig+0xa4>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d003      	beq.n	80043fc <TIM_OC4_SetConfig+0x68>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	4a11      	ldr	r2, [pc, #68]	; (800443c <TIM_OC4_SetConfig+0xa8>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d109      	bne.n	8004410 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004402:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	695b      	ldr	r3, [r3, #20]
 8004408:	019b      	lsls	r3, r3, #6
 800440a:	697a      	ldr	r2, [r7, #20]
 800440c:	4313      	orrs	r3, r2
 800440e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	697a      	ldr	r2, [r7, #20]
 8004414:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	68fa      	ldr	r2, [r7, #12]
 800441a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	685a      	ldr	r2, [r3, #4]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	693a      	ldr	r2, [r7, #16]
 8004428:	621a      	str	r2, [r3, #32]
}
 800442a:	bf00      	nop
 800442c:	371c      	adds	r7, #28
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	40010000 	.word	0x40010000
 800443c:	40010400 	.word	0x40010400

08004440 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004440:	b480      	push	{r7}
 8004442:	b087      	sub	sp, #28
 8004444:	af00      	add	r7, sp, #0
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	60b9      	str	r1, [r7, #8]
 800444a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6a1b      	ldr	r3, [r3, #32]
 8004450:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6a1b      	ldr	r3, [r3, #32]
 8004456:	f023 0201 	bic.w	r2, r3, #1
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	699b      	ldr	r3, [r3, #24]
 8004462:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800446a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	011b      	lsls	r3, r3, #4
 8004470:	693a      	ldr	r2, [r7, #16]
 8004472:	4313      	orrs	r3, r2
 8004474:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	f023 030a 	bic.w	r3, r3, #10
 800447c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800447e:	697a      	ldr	r2, [r7, #20]
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	4313      	orrs	r3, r2
 8004484:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	693a      	ldr	r2, [r7, #16]
 800448a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	697a      	ldr	r2, [r7, #20]
 8004490:	621a      	str	r2, [r3, #32]
}
 8004492:	bf00      	nop
 8004494:	371c      	adds	r7, #28
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr

0800449e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800449e:	b480      	push	{r7}
 80044a0:	b087      	sub	sp, #28
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	60f8      	str	r0, [r7, #12]
 80044a6:	60b9      	str	r1, [r7, #8]
 80044a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	6a1b      	ldr	r3, [r3, #32]
 80044ae:	f023 0210 	bic.w	r2, r3, #16
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	699b      	ldr	r3, [r3, #24]
 80044ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6a1b      	ldr	r3, [r3, #32]
 80044c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80044c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	031b      	lsls	r3, r3, #12
 80044ce:	697a      	ldr	r2, [r7, #20]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80044da:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	011b      	lsls	r3, r3, #4
 80044e0:	693a      	ldr	r2, [r7, #16]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	697a      	ldr	r2, [r7, #20]
 80044ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	693a      	ldr	r2, [r7, #16]
 80044f0:	621a      	str	r2, [r3, #32]
}
 80044f2:	bf00      	nop
 80044f4:	371c      	adds	r7, #28
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr

080044fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80044fe:	b480      	push	{r7}
 8004500:	b085      	sub	sp, #20
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
 8004506:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004514:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004516:	683a      	ldr	r2, [r7, #0]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	4313      	orrs	r3, r2
 800451c:	f043 0307 	orr.w	r3, r3, #7
 8004520:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	68fa      	ldr	r2, [r7, #12]
 8004526:	609a      	str	r2, [r3, #8]
}
 8004528:	bf00      	nop
 800452a:	3714      	adds	r7, #20
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004534:	b480      	push	{r7}
 8004536:	b087      	sub	sp, #28
 8004538:	af00      	add	r7, sp, #0
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	60b9      	str	r1, [r7, #8]
 800453e:	607a      	str	r2, [r7, #4]
 8004540:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800454e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	021a      	lsls	r2, r3, #8
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	431a      	orrs	r2, r3
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	4313      	orrs	r3, r2
 800455c:	697a      	ldr	r2, [r7, #20]
 800455e:	4313      	orrs	r3, r2
 8004560:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	697a      	ldr	r2, [r7, #20]
 8004566:	609a      	str	r2, [r3, #8]
}
 8004568:	bf00      	nop
 800456a:	371c      	adds	r7, #28
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr

08004574 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004574:	b480      	push	{r7}
 8004576:	b087      	sub	sp, #28
 8004578:	af00      	add	r7, sp, #0
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	f003 031f 	and.w	r3, r3, #31
 8004586:	2201      	movs	r2, #1
 8004588:	fa02 f303 	lsl.w	r3, r2, r3
 800458c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6a1a      	ldr	r2, [r3, #32]
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	43db      	mvns	r3, r3
 8004596:	401a      	ands	r2, r3
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6a1a      	ldr	r2, [r3, #32]
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	f003 031f 	and.w	r3, r3, #31
 80045a6:	6879      	ldr	r1, [r7, #4]
 80045a8:	fa01 f303 	lsl.w	r3, r1, r3
 80045ac:	431a      	orrs	r2, r3
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	621a      	str	r2, [r3, #32]
}
 80045b2:	bf00      	nop
 80045b4:	371c      	adds	r7, #28
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr
	...

080045c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b085      	sub	sp, #20
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d101      	bne.n	80045d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045d4:	2302      	movs	r3, #2
 80045d6:	e05a      	b.n	800468e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2202      	movs	r2, #2
 80045e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	68fa      	ldr	r2, [r7, #12]
 8004606:	4313      	orrs	r3, r2
 8004608:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	68fa      	ldr	r2, [r7, #12]
 8004610:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a21      	ldr	r2, [pc, #132]	; (800469c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d022      	beq.n	8004662 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004624:	d01d      	beq.n	8004662 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a1d      	ldr	r2, [pc, #116]	; (80046a0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d018      	beq.n	8004662 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a1b      	ldr	r2, [pc, #108]	; (80046a4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d013      	beq.n	8004662 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a1a      	ldr	r2, [pc, #104]	; (80046a8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d00e      	beq.n	8004662 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a18      	ldr	r2, [pc, #96]	; (80046ac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d009      	beq.n	8004662 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a17      	ldr	r2, [pc, #92]	; (80046b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d004      	beq.n	8004662 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a15      	ldr	r2, [pc, #84]	; (80046b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d10c      	bne.n	800467c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004668:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	68ba      	ldr	r2, [r7, #8]
 8004670:	4313      	orrs	r3, r2
 8004672:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	68ba      	ldr	r2, [r7, #8]
 800467a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	3714      	adds	r7, #20
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr
 800469a:	bf00      	nop
 800469c:	40010000 	.word	0x40010000
 80046a0:	40000400 	.word	0x40000400
 80046a4:	40000800 	.word	0x40000800
 80046a8:	40000c00 	.word	0x40000c00
 80046ac:	40010400 	.word	0x40010400
 80046b0:	40014000 	.word	0x40014000
 80046b4:	40001800 	.word	0x40001800

080046b8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b08a      	sub	sp, #40	; 0x28
 80046bc:	af02      	add	r7, sp, #8
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	60b9      	str	r1, [r7, #8]
 80046c2:	603b      	str	r3, [r7, #0]
 80046c4:	4613      	mov	r3, r2
 80046c6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80046c8:	2300      	movs	r3, #0
 80046ca:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	2b20      	cmp	r3, #32
 80046d6:	d17c      	bne.n	80047d2 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d002      	beq.n	80046e4 <HAL_UART_Transmit+0x2c>
 80046de:	88fb      	ldrh	r3, [r7, #6]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d101      	bne.n	80046e8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e075      	b.n	80047d4 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d101      	bne.n	80046f6 <HAL_UART_Transmit+0x3e>
 80046f2:	2302      	movs	r3, #2
 80046f4:	e06e      	b.n	80047d4 <HAL_UART_Transmit+0x11c>
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2201      	movs	r2, #1
 80046fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2200      	movs	r2, #0
 8004702:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2221      	movs	r2, #33	; 0x21
 8004708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800470c:	f7fe f9e4 	bl	8002ad8 <HAL_GetTick>
 8004710:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	88fa      	ldrh	r2, [r7, #6]
 8004716:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	88fa      	ldrh	r2, [r7, #6]
 800471c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004726:	d108      	bne.n	800473a <HAL_UART_Transmit+0x82>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	691b      	ldr	r3, [r3, #16]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d104      	bne.n	800473a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004730:	2300      	movs	r3, #0
 8004732:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	61bb      	str	r3, [r7, #24]
 8004738:	e003      	b.n	8004742 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800473e:	2300      	movs	r3, #0
 8004740:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2200      	movs	r2, #0
 8004746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800474a:	e02a      	b.n	80047a2 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	9300      	str	r3, [sp, #0]
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	2200      	movs	r2, #0
 8004754:	2180      	movs	r1, #128	; 0x80
 8004756:	68f8      	ldr	r0, [r7, #12]
 8004758:	f000 f8e2 	bl	8004920 <UART_WaitOnFlagUntilTimeout>
 800475c:	4603      	mov	r3, r0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d001      	beq.n	8004766 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e036      	b.n	80047d4 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d10b      	bne.n	8004784 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	881b      	ldrh	r3, [r3, #0]
 8004770:	461a      	mov	r2, r3
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800477a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	3302      	adds	r3, #2
 8004780:	61bb      	str	r3, [r7, #24]
 8004782:	e007      	b.n	8004794 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	781a      	ldrb	r2, [r3, #0]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	3301      	adds	r3, #1
 8004792:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004798:	b29b      	uxth	r3, r3
 800479a:	3b01      	subs	r3, #1
 800479c:	b29a      	uxth	r2, r3
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d1cf      	bne.n	800474c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	9300      	str	r3, [sp, #0]
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	2200      	movs	r2, #0
 80047b4:	2140      	movs	r1, #64	; 0x40
 80047b6:	68f8      	ldr	r0, [r7, #12]
 80047b8:	f000 f8b2 	bl	8004920 <UART_WaitOnFlagUntilTimeout>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d001      	beq.n	80047c6 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e006      	b.n	80047d4 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2220      	movs	r2, #32
 80047ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80047ce:	2300      	movs	r3, #0
 80047d0:	e000      	b.n	80047d4 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80047d2:	2302      	movs	r3, #2
  }
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3720      	adds	r7, #32
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}

080047dc <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b08a      	sub	sp, #40	; 0x28
 80047e0:	af02      	add	r7, sp, #8
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	60b9      	str	r1, [r7, #8]
 80047e6:	603b      	str	r3, [r7, #0]
 80047e8:	4613      	mov	r3, r2
 80047ea:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80047ec:	2300      	movs	r3, #0
 80047ee:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	2b20      	cmp	r3, #32
 80047fa:	f040 808c 	bne.w	8004916 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d002      	beq.n	800480a <HAL_UART_Receive+0x2e>
 8004804:	88fb      	ldrh	r3, [r7, #6]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d101      	bne.n	800480e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e084      	b.n	8004918 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004814:	2b01      	cmp	r3, #1
 8004816:	d101      	bne.n	800481c <HAL_UART_Receive+0x40>
 8004818:	2302      	movs	r3, #2
 800481a:	e07d      	b.n	8004918 <HAL_UART_Receive+0x13c>
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2200      	movs	r2, #0
 8004828:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2222      	movs	r2, #34	; 0x22
 800482e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2200      	movs	r2, #0
 8004836:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004838:	f7fe f94e 	bl	8002ad8 <HAL_GetTick>
 800483c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	88fa      	ldrh	r2, [r7, #6]
 8004842:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	88fa      	ldrh	r2, [r7, #6]
 8004848:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004852:	d108      	bne.n	8004866 <HAL_UART_Receive+0x8a>
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	691b      	ldr	r3, [r3, #16]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d104      	bne.n	8004866 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800485c:	2300      	movs	r3, #0
 800485e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	61bb      	str	r3, [r7, #24]
 8004864:	e003      	b.n	800486e <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800486a:	2300      	movs	r3, #0
 800486c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2200      	movs	r2, #0
 8004872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004876:	e043      	b.n	8004900 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	9300      	str	r3, [sp, #0]
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	2200      	movs	r2, #0
 8004880:	2120      	movs	r1, #32
 8004882:	68f8      	ldr	r0, [r7, #12]
 8004884:	f000 f84c 	bl	8004920 <UART_WaitOnFlagUntilTimeout>
 8004888:	4603      	mov	r3, r0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d001      	beq.n	8004892 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e042      	b.n	8004918 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d10c      	bne.n	80048b2 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	b29b      	uxth	r3, r3
 80048a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048a4:	b29a      	uxth	r2, r3
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	3302      	adds	r3, #2
 80048ae:	61bb      	str	r3, [r7, #24]
 80048b0:	e01f      	b.n	80048f2 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048ba:	d007      	beq.n	80048cc <HAL_UART_Receive+0xf0>
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d10a      	bne.n	80048da <HAL_UART_Receive+0xfe>
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	691b      	ldr	r3, [r3, #16]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d106      	bne.n	80048da <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	b2da      	uxtb	r2, r3
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	701a      	strb	r2, [r3, #0]
 80048d8:	e008      	b.n	80048ec <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048e6:	b2da      	uxtb	r2, r3
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80048ec:	69fb      	ldr	r3, [r7, #28]
 80048ee:	3301      	adds	r3, #1
 80048f0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	3b01      	subs	r3, #1
 80048fa:	b29a      	uxth	r2, r3
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004904:	b29b      	uxth	r3, r3
 8004906:	2b00      	cmp	r3, #0
 8004908:	d1b6      	bne.n	8004878 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2220      	movs	r2, #32
 800490e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004912:	2300      	movs	r3, #0
 8004914:	e000      	b.n	8004918 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004916:	2302      	movs	r3, #2
  }
}
 8004918:	4618      	mov	r0, r3
 800491a:	3720      	adds	r7, #32
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b090      	sub	sp, #64	; 0x40
 8004924:	af00      	add	r7, sp, #0
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	60b9      	str	r1, [r7, #8]
 800492a:	603b      	str	r3, [r7, #0]
 800492c:	4613      	mov	r3, r2
 800492e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004930:	e050      	b.n	80049d4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004932:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004938:	d04c      	beq.n	80049d4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800493a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800493c:	2b00      	cmp	r3, #0
 800493e:	d007      	beq.n	8004950 <UART_WaitOnFlagUntilTimeout+0x30>
 8004940:	f7fe f8ca 	bl	8002ad8 <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800494c:	429a      	cmp	r2, r3
 800494e:	d241      	bcs.n	80049d4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	330c      	adds	r3, #12
 8004956:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800495a:	e853 3f00 	ldrex	r3, [r3]
 800495e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004962:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004966:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	330c      	adds	r3, #12
 800496e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004970:	637a      	str	r2, [r7, #52]	; 0x34
 8004972:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004974:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004976:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004978:	e841 2300 	strex	r3, r2, [r1]
 800497c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800497e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004980:	2b00      	cmp	r3, #0
 8004982:	d1e5      	bne.n	8004950 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	3314      	adds	r3, #20
 800498a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	e853 3f00 	ldrex	r3, [r3]
 8004992:	613b      	str	r3, [r7, #16]
   return(result);
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	f023 0301 	bic.w	r3, r3, #1
 800499a:	63bb      	str	r3, [r7, #56]	; 0x38
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	3314      	adds	r3, #20
 80049a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049a4:	623a      	str	r2, [r7, #32]
 80049a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a8:	69f9      	ldr	r1, [r7, #28]
 80049aa:	6a3a      	ldr	r2, [r7, #32]
 80049ac:	e841 2300 	strex	r3, r2, [r1]
 80049b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d1e5      	bne.n	8004984 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2220      	movs	r2, #32
 80049bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2220      	movs	r2, #32
 80049c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80049d0:	2303      	movs	r3, #3
 80049d2:	e00f      	b.n	80049f4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	4013      	ands	r3, r2
 80049de:	68ba      	ldr	r2, [r7, #8]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	bf0c      	ite	eq
 80049e4:	2301      	moveq	r3, #1
 80049e6:	2300      	movne	r3, #0
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	461a      	mov	r2, r3
 80049ec:	79fb      	ldrb	r3, [r7, #7]
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d09f      	beq.n	8004932 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80049f2:	2300      	movs	r3, #0
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3740      	adds	r7, #64	; 0x40
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}

080049fc <atof>:
 80049fc:	2100      	movs	r1, #0
 80049fe:	f000 be69 	b.w	80056d4 <strtod>
	...

08004a04 <__errno>:
 8004a04:	4b01      	ldr	r3, [pc, #4]	; (8004a0c <__errno+0x8>)
 8004a06:	6818      	ldr	r0, [r3, #0]
 8004a08:	4770      	bx	lr
 8004a0a:	bf00      	nop
 8004a0c:	200000b8 	.word	0x200000b8

08004a10 <__libc_init_array>:
 8004a10:	b570      	push	{r4, r5, r6, lr}
 8004a12:	4d0d      	ldr	r5, [pc, #52]	; (8004a48 <__libc_init_array+0x38>)
 8004a14:	4c0d      	ldr	r4, [pc, #52]	; (8004a4c <__libc_init_array+0x3c>)
 8004a16:	1b64      	subs	r4, r4, r5
 8004a18:	10a4      	asrs	r4, r4, #2
 8004a1a:	2600      	movs	r6, #0
 8004a1c:	42a6      	cmp	r6, r4
 8004a1e:	d109      	bne.n	8004a34 <__libc_init_array+0x24>
 8004a20:	4d0b      	ldr	r5, [pc, #44]	; (8004a50 <__libc_init_array+0x40>)
 8004a22:	4c0c      	ldr	r4, [pc, #48]	; (8004a54 <__libc_init_array+0x44>)
 8004a24:	f002 fe98 	bl	8007758 <_init>
 8004a28:	1b64      	subs	r4, r4, r5
 8004a2a:	10a4      	asrs	r4, r4, #2
 8004a2c:	2600      	movs	r6, #0
 8004a2e:	42a6      	cmp	r6, r4
 8004a30:	d105      	bne.n	8004a3e <__libc_init_array+0x2e>
 8004a32:	bd70      	pop	{r4, r5, r6, pc}
 8004a34:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a38:	4798      	blx	r3
 8004a3a:	3601      	adds	r6, #1
 8004a3c:	e7ee      	b.n	8004a1c <__libc_init_array+0xc>
 8004a3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a42:	4798      	blx	r3
 8004a44:	3601      	adds	r6, #1
 8004a46:	e7f2      	b.n	8004a2e <__libc_init_array+0x1e>
 8004a48:	08007cec 	.word	0x08007cec
 8004a4c:	08007cec 	.word	0x08007cec
 8004a50:	08007cec 	.word	0x08007cec
 8004a54:	08007cf0 	.word	0x08007cf0

08004a58 <memcpy>:
 8004a58:	440a      	add	r2, r1
 8004a5a:	4291      	cmp	r1, r2
 8004a5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004a60:	d100      	bne.n	8004a64 <memcpy+0xc>
 8004a62:	4770      	bx	lr
 8004a64:	b510      	push	{r4, lr}
 8004a66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a6e:	4291      	cmp	r1, r2
 8004a70:	d1f9      	bne.n	8004a66 <memcpy+0xe>
 8004a72:	bd10      	pop	{r4, pc}

08004a74 <memset>:
 8004a74:	4402      	add	r2, r0
 8004a76:	4603      	mov	r3, r0
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d100      	bne.n	8004a7e <memset+0xa>
 8004a7c:	4770      	bx	lr
 8004a7e:	f803 1b01 	strb.w	r1, [r3], #1
 8004a82:	e7f9      	b.n	8004a78 <memset+0x4>

08004a84 <sulp>:
 8004a84:	b570      	push	{r4, r5, r6, lr}
 8004a86:	4604      	mov	r4, r0
 8004a88:	460d      	mov	r5, r1
 8004a8a:	ec45 4b10 	vmov	d0, r4, r5
 8004a8e:	4616      	mov	r6, r2
 8004a90:	f001 fd1a 	bl	80064c8 <__ulp>
 8004a94:	ec51 0b10 	vmov	r0, r1, d0
 8004a98:	b17e      	cbz	r6, 8004aba <sulp+0x36>
 8004a9a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8004a9e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	dd09      	ble.n	8004aba <sulp+0x36>
 8004aa6:	051b      	lsls	r3, r3, #20
 8004aa8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004aac:	2400      	movs	r4, #0
 8004aae:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004ab2:	4622      	mov	r2, r4
 8004ab4:	462b      	mov	r3, r5
 8004ab6:	f7fb fd9f 	bl	80005f8 <__aeabi_dmul>
 8004aba:	bd70      	pop	{r4, r5, r6, pc}
 8004abc:	0000      	movs	r0, r0
	...

08004ac0 <_strtod_l>:
 8004ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ac4:	b0a3      	sub	sp, #140	; 0x8c
 8004ac6:	461f      	mov	r7, r3
 8004ac8:	2300      	movs	r3, #0
 8004aca:	931e      	str	r3, [sp, #120]	; 0x78
 8004acc:	4ba4      	ldr	r3, [pc, #656]	; (8004d60 <_strtod_l+0x2a0>)
 8004ace:	9219      	str	r2, [sp, #100]	; 0x64
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	9307      	str	r3, [sp, #28]
 8004ad4:	4604      	mov	r4, r0
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	4688      	mov	r8, r1
 8004ada:	f7fb fb79 	bl	80001d0 <strlen>
 8004ade:	f04f 0a00 	mov.w	sl, #0
 8004ae2:	4605      	mov	r5, r0
 8004ae4:	f04f 0b00 	mov.w	fp, #0
 8004ae8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8004aec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004aee:	781a      	ldrb	r2, [r3, #0]
 8004af0:	2a2b      	cmp	r2, #43	; 0x2b
 8004af2:	d04c      	beq.n	8004b8e <_strtod_l+0xce>
 8004af4:	d839      	bhi.n	8004b6a <_strtod_l+0xaa>
 8004af6:	2a0d      	cmp	r2, #13
 8004af8:	d832      	bhi.n	8004b60 <_strtod_l+0xa0>
 8004afa:	2a08      	cmp	r2, #8
 8004afc:	d832      	bhi.n	8004b64 <_strtod_l+0xa4>
 8004afe:	2a00      	cmp	r2, #0
 8004b00:	d03c      	beq.n	8004b7c <_strtod_l+0xbc>
 8004b02:	2300      	movs	r3, #0
 8004b04:	930e      	str	r3, [sp, #56]	; 0x38
 8004b06:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8004b08:	7833      	ldrb	r3, [r6, #0]
 8004b0a:	2b30      	cmp	r3, #48	; 0x30
 8004b0c:	f040 80b4 	bne.w	8004c78 <_strtod_l+0x1b8>
 8004b10:	7873      	ldrb	r3, [r6, #1]
 8004b12:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004b16:	2b58      	cmp	r3, #88	; 0x58
 8004b18:	d16c      	bne.n	8004bf4 <_strtod_l+0x134>
 8004b1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b1c:	9301      	str	r3, [sp, #4]
 8004b1e:	ab1e      	add	r3, sp, #120	; 0x78
 8004b20:	9702      	str	r7, [sp, #8]
 8004b22:	9300      	str	r3, [sp, #0]
 8004b24:	4a8f      	ldr	r2, [pc, #572]	; (8004d64 <_strtod_l+0x2a4>)
 8004b26:	ab1f      	add	r3, sp, #124	; 0x7c
 8004b28:	a91d      	add	r1, sp, #116	; 0x74
 8004b2a:	4620      	mov	r0, r4
 8004b2c:	f000 fe46 	bl	80057bc <__gethex>
 8004b30:	f010 0707 	ands.w	r7, r0, #7
 8004b34:	4605      	mov	r5, r0
 8004b36:	d005      	beq.n	8004b44 <_strtod_l+0x84>
 8004b38:	2f06      	cmp	r7, #6
 8004b3a:	d12a      	bne.n	8004b92 <_strtod_l+0xd2>
 8004b3c:	3601      	adds	r6, #1
 8004b3e:	2300      	movs	r3, #0
 8004b40:	961d      	str	r6, [sp, #116]	; 0x74
 8004b42:	930e      	str	r3, [sp, #56]	; 0x38
 8004b44:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	f040 8596 	bne.w	8005678 <_strtod_l+0xbb8>
 8004b4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b4e:	b1db      	cbz	r3, 8004b88 <_strtod_l+0xc8>
 8004b50:	4652      	mov	r2, sl
 8004b52:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004b56:	ec43 2b10 	vmov	d0, r2, r3
 8004b5a:	b023      	add	sp, #140	; 0x8c
 8004b5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b60:	2a20      	cmp	r2, #32
 8004b62:	d1ce      	bne.n	8004b02 <_strtod_l+0x42>
 8004b64:	3301      	adds	r3, #1
 8004b66:	931d      	str	r3, [sp, #116]	; 0x74
 8004b68:	e7c0      	b.n	8004aec <_strtod_l+0x2c>
 8004b6a:	2a2d      	cmp	r2, #45	; 0x2d
 8004b6c:	d1c9      	bne.n	8004b02 <_strtod_l+0x42>
 8004b6e:	2201      	movs	r2, #1
 8004b70:	920e      	str	r2, [sp, #56]	; 0x38
 8004b72:	1c5a      	adds	r2, r3, #1
 8004b74:	921d      	str	r2, [sp, #116]	; 0x74
 8004b76:	785b      	ldrb	r3, [r3, #1]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d1c4      	bne.n	8004b06 <_strtod_l+0x46>
 8004b7c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004b7e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	f040 8576 	bne.w	8005674 <_strtod_l+0xbb4>
 8004b88:	4652      	mov	r2, sl
 8004b8a:	465b      	mov	r3, fp
 8004b8c:	e7e3      	b.n	8004b56 <_strtod_l+0x96>
 8004b8e:	2200      	movs	r2, #0
 8004b90:	e7ee      	b.n	8004b70 <_strtod_l+0xb0>
 8004b92:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004b94:	b13a      	cbz	r2, 8004ba6 <_strtod_l+0xe6>
 8004b96:	2135      	movs	r1, #53	; 0x35
 8004b98:	a820      	add	r0, sp, #128	; 0x80
 8004b9a:	f001 fda0 	bl	80066de <__copybits>
 8004b9e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8004ba0:	4620      	mov	r0, r4
 8004ba2:	f001 f965 	bl	8005e70 <_Bfree>
 8004ba6:	3f01      	subs	r7, #1
 8004ba8:	2f05      	cmp	r7, #5
 8004baa:	d807      	bhi.n	8004bbc <_strtod_l+0xfc>
 8004bac:	e8df f007 	tbb	[pc, r7]
 8004bb0:	1d180b0e 	.word	0x1d180b0e
 8004bb4:	030e      	.short	0x030e
 8004bb6:	f04f 0b00 	mov.w	fp, #0
 8004bba:	46da      	mov	sl, fp
 8004bbc:	0728      	lsls	r0, r5, #28
 8004bbe:	d5c1      	bpl.n	8004b44 <_strtod_l+0x84>
 8004bc0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8004bc4:	e7be      	b.n	8004b44 <_strtod_l+0x84>
 8004bc6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8004bca:	e7f7      	b.n	8004bbc <_strtod_l+0xfc>
 8004bcc:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8004bd0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8004bd2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004bd6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004bda:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8004bde:	e7ed      	b.n	8004bbc <_strtod_l+0xfc>
 8004be0:	f8df b184 	ldr.w	fp, [pc, #388]	; 8004d68 <_strtod_l+0x2a8>
 8004be4:	f04f 0a00 	mov.w	sl, #0
 8004be8:	e7e8      	b.n	8004bbc <_strtod_l+0xfc>
 8004bea:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8004bee:	f04f 3aff 	mov.w	sl, #4294967295
 8004bf2:	e7e3      	b.n	8004bbc <_strtod_l+0xfc>
 8004bf4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004bf6:	1c5a      	adds	r2, r3, #1
 8004bf8:	921d      	str	r2, [sp, #116]	; 0x74
 8004bfa:	785b      	ldrb	r3, [r3, #1]
 8004bfc:	2b30      	cmp	r3, #48	; 0x30
 8004bfe:	d0f9      	beq.n	8004bf4 <_strtod_l+0x134>
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d09f      	beq.n	8004b44 <_strtod_l+0x84>
 8004c04:	2301      	movs	r3, #1
 8004c06:	f04f 0900 	mov.w	r9, #0
 8004c0a:	9304      	str	r3, [sp, #16]
 8004c0c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004c0e:	930a      	str	r3, [sp, #40]	; 0x28
 8004c10:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8004c14:	464f      	mov	r7, r9
 8004c16:	220a      	movs	r2, #10
 8004c18:	981d      	ldr	r0, [sp, #116]	; 0x74
 8004c1a:	7806      	ldrb	r6, [r0, #0]
 8004c1c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8004c20:	b2d9      	uxtb	r1, r3
 8004c22:	2909      	cmp	r1, #9
 8004c24:	d92a      	bls.n	8004c7c <_strtod_l+0x1bc>
 8004c26:	9907      	ldr	r1, [sp, #28]
 8004c28:	462a      	mov	r2, r5
 8004c2a:	f001 fe1d 	bl	8006868 <strncmp>
 8004c2e:	b398      	cbz	r0, 8004c98 <_strtod_l+0x1d8>
 8004c30:	2000      	movs	r0, #0
 8004c32:	4633      	mov	r3, r6
 8004c34:	463d      	mov	r5, r7
 8004c36:	9007      	str	r0, [sp, #28]
 8004c38:	4602      	mov	r2, r0
 8004c3a:	2b65      	cmp	r3, #101	; 0x65
 8004c3c:	d001      	beq.n	8004c42 <_strtod_l+0x182>
 8004c3e:	2b45      	cmp	r3, #69	; 0x45
 8004c40:	d118      	bne.n	8004c74 <_strtod_l+0x1b4>
 8004c42:	b91d      	cbnz	r5, 8004c4c <_strtod_l+0x18c>
 8004c44:	9b04      	ldr	r3, [sp, #16]
 8004c46:	4303      	orrs	r3, r0
 8004c48:	d098      	beq.n	8004b7c <_strtod_l+0xbc>
 8004c4a:	2500      	movs	r5, #0
 8004c4c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8004c50:	f108 0301 	add.w	r3, r8, #1
 8004c54:	931d      	str	r3, [sp, #116]	; 0x74
 8004c56:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004c5a:	2b2b      	cmp	r3, #43	; 0x2b
 8004c5c:	d075      	beq.n	8004d4a <_strtod_l+0x28a>
 8004c5e:	2b2d      	cmp	r3, #45	; 0x2d
 8004c60:	d07b      	beq.n	8004d5a <_strtod_l+0x29a>
 8004c62:	f04f 0c00 	mov.w	ip, #0
 8004c66:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8004c6a:	2909      	cmp	r1, #9
 8004c6c:	f240 8082 	bls.w	8004d74 <_strtod_l+0x2b4>
 8004c70:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8004c74:	2600      	movs	r6, #0
 8004c76:	e09d      	b.n	8004db4 <_strtod_l+0x2f4>
 8004c78:	2300      	movs	r3, #0
 8004c7a:	e7c4      	b.n	8004c06 <_strtod_l+0x146>
 8004c7c:	2f08      	cmp	r7, #8
 8004c7e:	bfd8      	it	le
 8004c80:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8004c82:	f100 0001 	add.w	r0, r0, #1
 8004c86:	bfda      	itte	le
 8004c88:	fb02 3301 	mlale	r3, r2, r1, r3
 8004c8c:	9309      	strle	r3, [sp, #36]	; 0x24
 8004c8e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8004c92:	3701      	adds	r7, #1
 8004c94:	901d      	str	r0, [sp, #116]	; 0x74
 8004c96:	e7bf      	b.n	8004c18 <_strtod_l+0x158>
 8004c98:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004c9a:	195a      	adds	r2, r3, r5
 8004c9c:	921d      	str	r2, [sp, #116]	; 0x74
 8004c9e:	5d5b      	ldrb	r3, [r3, r5]
 8004ca0:	2f00      	cmp	r7, #0
 8004ca2:	d037      	beq.n	8004d14 <_strtod_l+0x254>
 8004ca4:	9007      	str	r0, [sp, #28]
 8004ca6:	463d      	mov	r5, r7
 8004ca8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8004cac:	2a09      	cmp	r2, #9
 8004cae:	d912      	bls.n	8004cd6 <_strtod_l+0x216>
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	e7c2      	b.n	8004c3a <_strtod_l+0x17a>
 8004cb4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004cb6:	1c5a      	adds	r2, r3, #1
 8004cb8:	921d      	str	r2, [sp, #116]	; 0x74
 8004cba:	785b      	ldrb	r3, [r3, #1]
 8004cbc:	3001      	adds	r0, #1
 8004cbe:	2b30      	cmp	r3, #48	; 0x30
 8004cc0:	d0f8      	beq.n	8004cb4 <_strtod_l+0x1f4>
 8004cc2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8004cc6:	2a08      	cmp	r2, #8
 8004cc8:	f200 84db 	bhi.w	8005682 <_strtod_l+0xbc2>
 8004ccc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8004cce:	9007      	str	r0, [sp, #28]
 8004cd0:	2000      	movs	r0, #0
 8004cd2:	920a      	str	r2, [sp, #40]	; 0x28
 8004cd4:	4605      	mov	r5, r0
 8004cd6:	3b30      	subs	r3, #48	; 0x30
 8004cd8:	f100 0201 	add.w	r2, r0, #1
 8004cdc:	d014      	beq.n	8004d08 <_strtod_l+0x248>
 8004cde:	9907      	ldr	r1, [sp, #28]
 8004ce0:	4411      	add	r1, r2
 8004ce2:	9107      	str	r1, [sp, #28]
 8004ce4:	462a      	mov	r2, r5
 8004ce6:	eb00 0e05 	add.w	lr, r0, r5
 8004cea:	210a      	movs	r1, #10
 8004cec:	4572      	cmp	r2, lr
 8004cee:	d113      	bne.n	8004d18 <_strtod_l+0x258>
 8004cf0:	182a      	adds	r2, r5, r0
 8004cf2:	2a08      	cmp	r2, #8
 8004cf4:	f105 0501 	add.w	r5, r5, #1
 8004cf8:	4405      	add	r5, r0
 8004cfa:	dc1c      	bgt.n	8004d36 <_strtod_l+0x276>
 8004cfc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004cfe:	220a      	movs	r2, #10
 8004d00:	fb02 3301 	mla	r3, r2, r1, r3
 8004d04:	9309      	str	r3, [sp, #36]	; 0x24
 8004d06:	2200      	movs	r2, #0
 8004d08:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004d0a:	1c59      	adds	r1, r3, #1
 8004d0c:	911d      	str	r1, [sp, #116]	; 0x74
 8004d0e:	785b      	ldrb	r3, [r3, #1]
 8004d10:	4610      	mov	r0, r2
 8004d12:	e7c9      	b.n	8004ca8 <_strtod_l+0x1e8>
 8004d14:	4638      	mov	r0, r7
 8004d16:	e7d2      	b.n	8004cbe <_strtod_l+0x1fe>
 8004d18:	2a08      	cmp	r2, #8
 8004d1a:	dc04      	bgt.n	8004d26 <_strtod_l+0x266>
 8004d1c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8004d1e:	434e      	muls	r6, r1
 8004d20:	9609      	str	r6, [sp, #36]	; 0x24
 8004d22:	3201      	adds	r2, #1
 8004d24:	e7e2      	b.n	8004cec <_strtod_l+0x22c>
 8004d26:	f102 0c01 	add.w	ip, r2, #1
 8004d2a:	f1bc 0f10 	cmp.w	ip, #16
 8004d2e:	bfd8      	it	le
 8004d30:	fb01 f909 	mulle.w	r9, r1, r9
 8004d34:	e7f5      	b.n	8004d22 <_strtod_l+0x262>
 8004d36:	2d10      	cmp	r5, #16
 8004d38:	bfdc      	itt	le
 8004d3a:	220a      	movle	r2, #10
 8004d3c:	fb02 3909 	mlale	r9, r2, r9, r3
 8004d40:	e7e1      	b.n	8004d06 <_strtod_l+0x246>
 8004d42:	2300      	movs	r3, #0
 8004d44:	9307      	str	r3, [sp, #28]
 8004d46:	2201      	movs	r2, #1
 8004d48:	e77c      	b.n	8004c44 <_strtod_l+0x184>
 8004d4a:	f04f 0c00 	mov.w	ip, #0
 8004d4e:	f108 0302 	add.w	r3, r8, #2
 8004d52:	931d      	str	r3, [sp, #116]	; 0x74
 8004d54:	f898 3002 	ldrb.w	r3, [r8, #2]
 8004d58:	e785      	b.n	8004c66 <_strtod_l+0x1a6>
 8004d5a:	f04f 0c01 	mov.w	ip, #1
 8004d5e:	e7f6      	b.n	8004d4e <_strtod_l+0x28e>
 8004d60:	0800798c 	.word	0x0800798c
 8004d64:	080078c0 	.word	0x080078c0
 8004d68:	7ff00000 	.word	0x7ff00000
 8004d6c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004d6e:	1c59      	adds	r1, r3, #1
 8004d70:	911d      	str	r1, [sp, #116]	; 0x74
 8004d72:	785b      	ldrb	r3, [r3, #1]
 8004d74:	2b30      	cmp	r3, #48	; 0x30
 8004d76:	d0f9      	beq.n	8004d6c <_strtod_l+0x2ac>
 8004d78:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8004d7c:	2908      	cmp	r1, #8
 8004d7e:	f63f af79 	bhi.w	8004c74 <_strtod_l+0x1b4>
 8004d82:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8004d86:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004d88:	9308      	str	r3, [sp, #32]
 8004d8a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004d8c:	1c59      	adds	r1, r3, #1
 8004d8e:	911d      	str	r1, [sp, #116]	; 0x74
 8004d90:	785b      	ldrb	r3, [r3, #1]
 8004d92:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8004d96:	2e09      	cmp	r6, #9
 8004d98:	d937      	bls.n	8004e0a <_strtod_l+0x34a>
 8004d9a:	9e08      	ldr	r6, [sp, #32]
 8004d9c:	1b89      	subs	r1, r1, r6
 8004d9e:	2908      	cmp	r1, #8
 8004da0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8004da4:	dc02      	bgt.n	8004dac <_strtod_l+0x2ec>
 8004da6:	4576      	cmp	r6, lr
 8004da8:	bfa8      	it	ge
 8004daa:	4676      	movge	r6, lr
 8004dac:	f1bc 0f00 	cmp.w	ip, #0
 8004db0:	d000      	beq.n	8004db4 <_strtod_l+0x2f4>
 8004db2:	4276      	negs	r6, r6
 8004db4:	2d00      	cmp	r5, #0
 8004db6:	d14f      	bne.n	8004e58 <_strtod_l+0x398>
 8004db8:	9904      	ldr	r1, [sp, #16]
 8004dba:	4301      	orrs	r1, r0
 8004dbc:	f47f aec2 	bne.w	8004b44 <_strtod_l+0x84>
 8004dc0:	2a00      	cmp	r2, #0
 8004dc2:	f47f aedb 	bne.w	8004b7c <_strtod_l+0xbc>
 8004dc6:	2b69      	cmp	r3, #105	; 0x69
 8004dc8:	d027      	beq.n	8004e1a <_strtod_l+0x35a>
 8004dca:	dc24      	bgt.n	8004e16 <_strtod_l+0x356>
 8004dcc:	2b49      	cmp	r3, #73	; 0x49
 8004dce:	d024      	beq.n	8004e1a <_strtod_l+0x35a>
 8004dd0:	2b4e      	cmp	r3, #78	; 0x4e
 8004dd2:	f47f aed3 	bne.w	8004b7c <_strtod_l+0xbc>
 8004dd6:	499e      	ldr	r1, [pc, #632]	; (8005050 <_strtod_l+0x590>)
 8004dd8:	a81d      	add	r0, sp, #116	; 0x74
 8004dda:	f000 ff47 	bl	8005c6c <__match>
 8004dde:	2800      	cmp	r0, #0
 8004de0:	f43f aecc 	beq.w	8004b7c <_strtod_l+0xbc>
 8004de4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	2b28      	cmp	r3, #40	; 0x28
 8004dea:	d12d      	bne.n	8004e48 <_strtod_l+0x388>
 8004dec:	4999      	ldr	r1, [pc, #612]	; (8005054 <_strtod_l+0x594>)
 8004dee:	aa20      	add	r2, sp, #128	; 0x80
 8004df0:	a81d      	add	r0, sp, #116	; 0x74
 8004df2:	f000 ff4f 	bl	8005c94 <__hexnan>
 8004df6:	2805      	cmp	r0, #5
 8004df8:	d126      	bne.n	8004e48 <_strtod_l+0x388>
 8004dfa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004dfc:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8004e00:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8004e04:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8004e08:	e69c      	b.n	8004b44 <_strtod_l+0x84>
 8004e0a:	210a      	movs	r1, #10
 8004e0c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8004e10:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8004e14:	e7b9      	b.n	8004d8a <_strtod_l+0x2ca>
 8004e16:	2b6e      	cmp	r3, #110	; 0x6e
 8004e18:	e7db      	b.n	8004dd2 <_strtod_l+0x312>
 8004e1a:	498f      	ldr	r1, [pc, #572]	; (8005058 <_strtod_l+0x598>)
 8004e1c:	a81d      	add	r0, sp, #116	; 0x74
 8004e1e:	f000 ff25 	bl	8005c6c <__match>
 8004e22:	2800      	cmp	r0, #0
 8004e24:	f43f aeaa 	beq.w	8004b7c <_strtod_l+0xbc>
 8004e28:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004e2a:	498c      	ldr	r1, [pc, #560]	; (800505c <_strtod_l+0x59c>)
 8004e2c:	3b01      	subs	r3, #1
 8004e2e:	a81d      	add	r0, sp, #116	; 0x74
 8004e30:	931d      	str	r3, [sp, #116]	; 0x74
 8004e32:	f000 ff1b 	bl	8005c6c <__match>
 8004e36:	b910      	cbnz	r0, 8004e3e <_strtod_l+0x37e>
 8004e38:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	931d      	str	r3, [sp, #116]	; 0x74
 8004e3e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800506c <_strtod_l+0x5ac>
 8004e42:	f04f 0a00 	mov.w	sl, #0
 8004e46:	e67d      	b.n	8004b44 <_strtod_l+0x84>
 8004e48:	4885      	ldr	r0, [pc, #532]	; (8005060 <_strtod_l+0x5a0>)
 8004e4a:	f001 fcf5 	bl	8006838 <nan>
 8004e4e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8004e52:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8004e56:	e675      	b.n	8004b44 <_strtod_l+0x84>
 8004e58:	9b07      	ldr	r3, [sp, #28]
 8004e5a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004e5c:	1af3      	subs	r3, r6, r3
 8004e5e:	2f00      	cmp	r7, #0
 8004e60:	bf08      	it	eq
 8004e62:	462f      	moveq	r7, r5
 8004e64:	2d10      	cmp	r5, #16
 8004e66:	9308      	str	r3, [sp, #32]
 8004e68:	46a8      	mov	r8, r5
 8004e6a:	bfa8      	it	ge
 8004e6c:	f04f 0810 	movge.w	r8, #16
 8004e70:	f7fb fb48 	bl	8000504 <__aeabi_ui2d>
 8004e74:	2d09      	cmp	r5, #9
 8004e76:	4682      	mov	sl, r0
 8004e78:	468b      	mov	fp, r1
 8004e7a:	dd13      	ble.n	8004ea4 <_strtod_l+0x3e4>
 8004e7c:	4b79      	ldr	r3, [pc, #484]	; (8005064 <_strtod_l+0x5a4>)
 8004e7e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8004e82:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8004e86:	f7fb fbb7 	bl	80005f8 <__aeabi_dmul>
 8004e8a:	4682      	mov	sl, r0
 8004e8c:	4648      	mov	r0, r9
 8004e8e:	468b      	mov	fp, r1
 8004e90:	f7fb fb38 	bl	8000504 <__aeabi_ui2d>
 8004e94:	4602      	mov	r2, r0
 8004e96:	460b      	mov	r3, r1
 8004e98:	4650      	mov	r0, sl
 8004e9a:	4659      	mov	r1, fp
 8004e9c:	f7fb f9f6 	bl	800028c <__adddf3>
 8004ea0:	4682      	mov	sl, r0
 8004ea2:	468b      	mov	fp, r1
 8004ea4:	2d0f      	cmp	r5, #15
 8004ea6:	dc38      	bgt.n	8004f1a <_strtod_l+0x45a>
 8004ea8:	9b08      	ldr	r3, [sp, #32]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	f43f ae4a 	beq.w	8004b44 <_strtod_l+0x84>
 8004eb0:	dd24      	ble.n	8004efc <_strtod_l+0x43c>
 8004eb2:	2b16      	cmp	r3, #22
 8004eb4:	dc0b      	bgt.n	8004ece <_strtod_l+0x40e>
 8004eb6:	4d6b      	ldr	r5, [pc, #428]	; (8005064 <_strtod_l+0x5a4>)
 8004eb8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8004ebc:	e9d5 0100 	ldrd	r0, r1, [r5]
 8004ec0:	4652      	mov	r2, sl
 8004ec2:	465b      	mov	r3, fp
 8004ec4:	f7fb fb98 	bl	80005f8 <__aeabi_dmul>
 8004ec8:	4682      	mov	sl, r0
 8004eca:	468b      	mov	fp, r1
 8004ecc:	e63a      	b.n	8004b44 <_strtod_l+0x84>
 8004ece:	9a08      	ldr	r2, [sp, #32]
 8004ed0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	db20      	blt.n	8004f1a <_strtod_l+0x45a>
 8004ed8:	4c62      	ldr	r4, [pc, #392]	; (8005064 <_strtod_l+0x5a4>)
 8004eda:	f1c5 050f 	rsb	r5, r5, #15
 8004ede:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8004ee2:	4652      	mov	r2, sl
 8004ee4:	465b      	mov	r3, fp
 8004ee6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004eea:	f7fb fb85 	bl	80005f8 <__aeabi_dmul>
 8004eee:	9b08      	ldr	r3, [sp, #32]
 8004ef0:	1b5d      	subs	r5, r3, r5
 8004ef2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8004ef6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8004efa:	e7e3      	b.n	8004ec4 <_strtod_l+0x404>
 8004efc:	9b08      	ldr	r3, [sp, #32]
 8004efe:	3316      	adds	r3, #22
 8004f00:	db0b      	blt.n	8004f1a <_strtod_l+0x45a>
 8004f02:	9b07      	ldr	r3, [sp, #28]
 8004f04:	4a57      	ldr	r2, [pc, #348]	; (8005064 <_strtod_l+0x5a4>)
 8004f06:	1b9e      	subs	r6, r3, r6
 8004f08:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8004f0c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004f10:	4650      	mov	r0, sl
 8004f12:	4659      	mov	r1, fp
 8004f14:	f7fb fc9a 	bl	800084c <__aeabi_ddiv>
 8004f18:	e7d6      	b.n	8004ec8 <_strtod_l+0x408>
 8004f1a:	9b08      	ldr	r3, [sp, #32]
 8004f1c:	eba5 0808 	sub.w	r8, r5, r8
 8004f20:	4498      	add	r8, r3
 8004f22:	f1b8 0f00 	cmp.w	r8, #0
 8004f26:	dd71      	ble.n	800500c <_strtod_l+0x54c>
 8004f28:	f018 030f 	ands.w	r3, r8, #15
 8004f2c:	d00a      	beq.n	8004f44 <_strtod_l+0x484>
 8004f2e:	494d      	ldr	r1, [pc, #308]	; (8005064 <_strtod_l+0x5a4>)
 8004f30:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004f34:	4652      	mov	r2, sl
 8004f36:	465b      	mov	r3, fp
 8004f38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004f3c:	f7fb fb5c 	bl	80005f8 <__aeabi_dmul>
 8004f40:	4682      	mov	sl, r0
 8004f42:	468b      	mov	fp, r1
 8004f44:	f038 080f 	bics.w	r8, r8, #15
 8004f48:	d04d      	beq.n	8004fe6 <_strtod_l+0x526>
 8004f4a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8004f4e:	dd22      	ble.n	8004f96 <_strtod_l+0x4d6>
 8004f50:	2500      	movs	r5, #0
 8004f52:	462e      	mov	r6, r5
 8004f54:	9509      	str	r5, [sp, #36]	; 0x24
 8004f56:	9507      	str	r5, [sp, #28]
 8004f58:	2322      	movs	r3, #34	; 0x22
 8004f5a:	f8df b110 	ldr.w	fp, [pc, #272]	; 800506c <_strtod_l+0x5ac>
 8004f5e:	6023      	str	r3, [r4, #0]
 8004f60:	f04f 0a00 	mov.w	sl, #0
 8004f64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	f43f adec 	beq.w	8004b44 <_strtod_l+0x84>
 8004f6c:	991e      	ldr	r1, [sp, #120]	; 0x78
 8004f6e:	4620      	mov	r0, r4
 8004f70:	f000 ff7e 	bl	8005e70 <_Bfree>
 8004f74:	9907      	ldr	r1, [sp, #28]
 8004f76:	4620      	mov	r0, r4
 8004f78:	f000 ff7a 	bl	8005e70 <_Bfree>
 8004f7c:	4631      	mov	r1, r6
 8004f7e:	4620      	mov	r0, r4
 8004f80:	f000 ff76 	bl	8005e70 <_Bfree>
 8004f84:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004f86:	4620      	mov	r0, r4
 8004f88:	f000 ff72 	bl	8005e70 <_Bfree>
 8004f8c:	4629      	mov	r1, r5
 8004f8e:	4620      	mov	r0, r4
 8004f90:	f000 ff6e 	bl	8005e70 <_Bfree>
 8004f94:	e5d6      	b.n	8004b44 <_strtod_l+0x84>
 8004f96:	2300      	movs	r3, #0
 8004f98:	ea4f 1828 	mov.w	r8, r8, asr #4
 8004f9c:	4650      	mov	r0, sl
 8004f9e:	4659      	mov	r1, fp
 8004fa0:	4699      	mov	r9, r3
 8004fa2:	f1b8 0f01 	cmp.w	r8, #1
 8004fa6:	dc21      	bgt.n	8004fec <_strtod_l+0x52c>
 8004fa8:	b10b      	cbz	r3, 8004fae <_strtod_l+0x4ee>
 8004faa:	4682      	mov	sl, r0
 8004fac:	468b      	mov	fp, r1
 8004fae:	4b2e      	ldr	r3, [pc, #184]	; (8005068 <_strtod_l+0x5a8>)
 8004fb0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8004fb4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8004fb8:	4652      	mov	r2, sl
 8004fba:	465b      	mov	r3, fp
 8004fbc:	e9d9 0100 	ldrd	r0, r1, [r9]
 8004fc0:	f7fb fb1a 	bl	80005f8 <__aeabi_dmul>
 8004fc4:	4b29      	ldr	r3, [pc, #164]	; (800506c <_strtod_l+0x5ac>)
 8004fc6:	460a      	mov	r2, r1
 8004fc8:	400b      	ands	r3, r1
 8004fca:	4929      	ldr	r1, [pc, #164]	; (8005070 <_strtod_l+0x5b0>)
 8004fcc:	428b      	cmp	r3, r1
 8004fce:	4682      	mov	sl, r0
 8004fd0:	d8be      	bhi.n	8004f50 <_strtod_l+0x490>
 8004fd2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8004fd6:	428b      	cmp	r3, r1
 8004fd8:	bf86      	itte	hi
 8004fda:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8005074 <_strtod_l+0x5b4>
 8004fde:	f04f 3aff 	movhi.w	sl, #4294967295
 8004fe2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	9304      	str	r3, [sp, #16]
 8004fea:	e081      	b.n	80050f0 <_strtod_l+0x630>
 8004fec:	f018 0f01 	tst.w	r8, #1
 8004ff0:	d007      	beq.n	8005002 <_strtod_l+0x542>
 8004ff2:	4b1d      	ldr	r3, [pc, #116]	; (8005068 <_strtod_l+0x5a8>)
 8004ff4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8004ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ffc:	f7fb fafc 	bl	80005f8 <__aeabi_dmul>
 8005000:	2301      	movs	r3, #1
 8005002:	f109 0901 	add.w	r9, r9, #1
 8005006:	ea4f 0868 	mov.w	r8, r8, asr #1
 800500a:	e7ca      	b.n	8004fa2 <_strtod_l+0x4e2>
 800500c:	d0eb      	beq.n	8004fe6 <_strtod_l+0x526>
 800500e:	f1c8 0800 	rsb	r8, r8, #0
 8005012:	f018 020f 	ands.w	r2, r8, #15
 8005016:	d00a      	beq.n	800502e <_strtod_l+0x56e>
 8005018:	4b12      	ldr	r3, [pc, #72]	; (8005064 <_strtod_l+0x5a4>)
 800501a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800501e:	4650      	mov	r0, sl
 8005020:	4659      	mov	r1, fp
 8005022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005026:	f7fb fc11 	bl	800084c <__aeabi_ddiv>
 800502a:	4682      	mov	sl, r0
 800502c:	468b      	mov	fp, r1
 800502e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8005032:	d0d8      	beq.n	8004fe6 <_strtod_l+0x526>
 8005034:	f1b8 0f1f 	cmp.w	r8, #31
 8005038:	dd1e      	ble.n	8005078 <_strtod_l+0x5b8>
 800503a:	2500      	movs	r5, #0
 800503c:	462e      	mov	r6, r5
 800503e:	9509      	str	r5, [sp, #36]	; 0x24
 8005040:	9507      	str	r5, [sp, #28]
 8005042:	2322      	movs	r3, #34	; 0x22
 8005044:	f04f 0a00 	mov.w	sl, #0
 8005048:	f04f 0b00 	mov.w	fp, #0
 800504c:	6023      	str	r3, [r4, #0]
 800504e:	e789      	b.n	8004f64 <_strtod_l+0x4a4>
 8005050:	080078bd 	.word	0x080078bd
 8005054:	080078d4 	.word	0x080078d4
 8005058:	080078b4 	.word	0x080078b4
 800505c:	080078b7 	.word	0x080078b7
 8005060:	08007b4f 	.word	0x08007b4f
 8005064:	08007a40 	.word	0x08007a40
 8005068:	08007a18 	.word	0x08007a18
 800506c:	7ff00000 	.word	0x7ff00000
 8005070:	7ca00000 	.word	0x7ca00000
 8005074:	7fefffff 	.word	0x7fefffff
 8005078:	f018 0310 	ands.w	r3, r8, #16
 800507c:	bf18      	it	ne
 800507e:	236a      	movne	r3, #106	; 0x6a
 8005080:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8005438 <_strtod_l+0x978>
 8005084:	9304      	str	r3, [sp, #16]
 8005086:	4650      	mov	r0, sl
 8005088:	4659      	mov	r1, fp
 800508a:	2300      	movs	r3, #0
 800508c:	f018 0f01 	tst.w	r8, #1
 8005090:	d004      	beq.n	800509c <_strtod_l+0x5dc>
 8005092:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005096:	f7fb faaf 	bl	80005f8 <__aeabi_dmul>
 800509a:	2301      	movs	r3, #1
 800509c:	ea5f 0868 	movs.w	r8, r8, asr #1
 80050a0:	f109 0908 	add.w	r9, r9, #8
 80050a4:	d1f2      	bne.n	800508c <_strtod_l+0x5cc>
 80050a6:	b10b      	cbz	r3, 80050ac <_strtod_l+0x5ec>
 80050a8:	4682      	mov	sl, r0
 80050aa:	468b      	mov	fp, r1
 80050ac:	9b04      	ldr	r3, [sp, #16]
 80050ae:	b1bb      	cbz	r3, 80050e0 <_strtod_l+0x620>
 80050b0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80050b4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	4659      	mov	r1, fp
 80050bc:	dd10      	ble.n	80050e0 <_strtod_l+0x620>
 80050be:	2b1f      	cmp	r3, #31
 80050c0:	f340 8128 	ble.w	8005314 <_strtod_l+0x854>
 80050c4:	2b34      	cmp	r3, #52	; 0x34
 80050c6:	bfde      	ittt	le
 80050c8:	3b20      	suble	r3, #32
 80050ca:	f04f 32ff 	movle.w	r2, #4294967295
 80050ce:	fa02 f303 	lslle.w	r3, r2, r3
 80050d2:	f04f 0a00 	mov.w	sl, #0
 80050d6:	bfcc      	ite	gt
 80050d8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80050dc:	ea03 0b01 	andle.w	fp, r3, r1
 80050e0:	2200      	movs	r2, #0
 80050e2:	2300      	movs	r3, #0
 80050e4:	4650      	mov	r0, sl
 80050e6:	4659      	mov	r1, fp
 80050e8:	f7fb fcee 	bl	8000ac8 <__aeabi_dcmpeq>
 80050ec:	2800      	cmp	r0, #0
 80050ee:	d1a4      	bne.n	800503a <_strtod_l+0x57a>
 80050f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050f2:	9300      	str	r3, [sp, #0]
 80050f4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80050f6:	462b      	mov	r3, r5
 80050f8:	463a      	mov	r2, r7
 80050fa:	4620      	mov	r0, r4
 80050fc:	f000 ff24 	bl	8005f48 <__s2b>
 8005100:	9009      	str	r0, [sp, #36]	; 0x24
 8005102:	2800      	cmp	r0, #0
 8005104:	f43f af24 	beq.w	8004f50 <_strtod_l+0x490>
 8005108:	9b07      	ldr	r3, [sp, #28]
 800510a:	1b9e      	subs	r6, r3, r6
 800510c:	9b08      	ldr	r3, [sp, #32]
 800510e:	2b00      	cmp	r3, #0
 8005110:	bfb4      	ite	lt
 8005112:	4633      	movlt	r3, r6
 8005114:	2300      	movge	r3, #0
 8005116:	9310      	str	r3, [sp, #64]	; 0x40
 8005118:	9b08      	ldr	r3, [sp, #32]
 800511a:	2500      	movs	r5, #0
 800511c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005120:	9318      	str	r3, [sp, #96]	; 0x60
 8005122:	462e      	mov	r6, r5
 8005124:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005126:	4620      	mov	r0, r4
 8005128:	6859      	ldr	r1, [r3, #4]
 800512a:	f000 fe61 	bl	8005df0 <_Balloc>
 800512e:	9007      	str	r0, [sp, #28]
 8005130:	2800      	cmp	r0, #0
 8005132:	f43f af11 	beq.w	8004f58 <_strtod_l+0x498>
 8005136:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005138:	691a      	ldr	r2, [r3, #16]
 800513a:	3202      	adds	r2, #2
 800513c:	f103 010c 	add.w	r1, r3, #12
 8005140:	0092      	lsls	r2, r2, #2
 8005142:	300c      	adds	r0, #12
 8005144:	f7ff fc88 	bl	8004a58 <memcpy>
 8005148:	ec4b ab10 	vmov	d0, sl, fp
 800514c:	aa20      	add	r2, sp, #128	; 0x80
 800514e:	a91f      	add	r1, sp, #124	; 0x7c
 8005150:	4620      	mov	r0, r4
 8005152:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8005156:	f001 fa33 	bl	80065c0 <__d2b>
 800515a:	901e      	str	r0, [sp, #120]	; 0x78
 800515c:	2800      	cmp	r0, #0
 800515e:	f43f aefb 	beq.w	8004f58 <_strtod_l+0x498>
 8005162:	2101      	movs	r1, #1
 8005164:	4620      	mov	r0, r4
 8005166:	f000 ff89 	bl	800607c <__i2b>
 800516a:	4606      	mov	r6, r0
 800516c:	2800      	cmp	r0, #0
 800516e:	f43f aef3 	beq.w	8004f58 <_strtod_l+0x498>
 8005172:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005174:	9904      	ldr	r1, [sp, #16]
 8005176:	2b00      	cmp	r3, #0
 8005178:	bfab      	itete	ge
 800517a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800517c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800517e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8005180:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8005184:	bfac      	ite	ge
 8005186:	eb03 0902 	addge.w	r9, r3, r2
 800518a:	1ad7      	sublt	r7, r2, r3
 800518c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800518e:	eba3 0801 	sub.w	r8, r3, r1
 8005192:	4490      	add	r8, r2
 8005194:	4ba3      	ldr	r3, [pc, #652]	; (8005424 <_strtod_l+0x964>)
 8005196:	f108 38ff 	add.w	r8, r8, #4294967295
 800519a:	4598      	cmp	r8, r3
 800519c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80051a0:	f280 80cc 	bge.w	800533c <_strtod_l+0x87c>
 80051a4:	eba3 0308 	sub.w	r3, r3, r8
 80051a8:	2b1f      	cmp	r3, #31
 80051aa:	eba2 0203 	sub.w	r2, r2, r3
 80051ae:	f04f 0101 	mov.w	r1, #1
 80051b2:	f300 80b6 	bgt.w	8005322 <_strtod_l+0x862>
 80051b6:	fa01 f303 	lsl.w	r3, r1, r3
 80051ba:	9311      	str	r3, [sp, #68]	; 0x44
 80051bc:	2300      	movs	r3, #0
 80051be:	930c      	str	r3, [sp, #48]	; 0x30
 80051c0:	eb09 0802 	add.w	r8, r9, r2
 80051c4:	9b04      	ldr	r3, [sp, #16]
 80051c6:	45c1      	cmp	r9, r8
 80051c8:	4417      	add	r7, r2
 80051ca:	441f      	add	r7, r3
 80051cc:	464b      	mov	r3, r9
 80051ce:	bfa8      	it	ge
 80051d0:	4643      	movge	r3, r8
 80051d2:	42bb      	cmp	r3, r7
 80051d4:	bfa8      	it	ge
 80051d6:	463b      	movge	r3, r7
 80051d8:	2b00      	cmp	r3, #0
 80051da:	bfc2      	ittt	gt
 80051dc:	eba8 0803 	subgt.w	r8, r8, r3
 80051e0:	1aff      	subgt	r7, r7, r3
 80051e2:	eba9 0903 	subgt.w	r9, r9, r3
 80051e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	dd17      	ble.n	800521c <_strtod_l+0x75c>
 80051ec:	4631      	mov	r1, r6
 80051ee:	461a      	mov	r2, r3
 80051f0:	4620      	mov	r0, r4
 80051f2:	f000 ffff 	bl	80061f4 <__pow5mult>
 80051f6:	4606      	mov	r6, r0
 80051f8:	2800      	cmp	r0, #0
 80051fa:	f43f aead 	beq.w	8004f58 <_strtod_l+0x498>
 80051fe:	4601      	mov	r1, r0
 8005200:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005202:	4620      	mov	r0, r4
 8005204:	f000 ff50 	bl	80060a8 <__multiply>
 8005208:	900f      	str	r0, [sp, #60]	; 0x3c
 800520a:	2800      	cmp	r0, #0
 800520c:	f43f aea4 	beq.w	8004f58 <_strtod_l+0x498>
 8005210:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005212:	4620      	mov	r0, r4
 8005214:	f000 fe2c 	bl	8005e70 <_Bfree>
 8005218:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800521a:	931e      	str	r3, [sp, #120]	; 0x78
 800521c:	f1b8 0f00 	cmp.w	r8, #0
 8005220:	f300 8091 	bgt.w	8005346 <_strtod_l+0x886>
 8005224:	9b08      	ldr	r3, [sp, #32]
 8005226:	2b00      	cmp	r3, #0
 8005228:	dd08      	ble.n	800523c <_strtod_l+0x77c>
 800522a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800522c:	9907      	ldr	r1, [sp, #28]
 800522e:	4620      	mov	r0, r4
 8005230:	f000 ffe0 	bl	80061f4 <__pow5mult>
 8005234:	9007      	str	r0, [sp, #28]
 8005236:	2800      	cmp	r0, #0
 8005238:	f43f ae8e 	beq.w	8004f58 <_strtod_l+0x498>
 800523c:	2f00      	cmp	r7, #0
 800523e:	dd08      	ble.n	8005252 <_strtod_l+0x792>
 8005240:	9907      	ldr	r1, [sp, #28]
 8005242:	463a      	mov	r2, r7
 8005244:	4620      	mov	r0, r4
 8005246:	f001 f82f 	bl	80062a8 <__lshift>
 800524a:	9007      	str	r0, [sp, #28]
 800524c:	2800      	cmp	r0, #0
 800524e:	f43f ae83 	beq.w	8004f58 <_strtod_l+0x498>
 8005252:	f1b9 0f00 	cmp.w	r9, #0
 8005256:	dd08      	ble.n	800526a <_strtod_l+0x7aa>
 8005258:	4631      	mov	r1, r6
 800525a:	464a      	mov	r2, r9
 800525c:	4620      	mov	r0, r4
 800525e:	f001 f823 	bl	80062a8 <__lshift>
 8005262:	4606      	mov	r6, r0
 8005264:	2800      	cmp	r0, #0
 8005266:	f43f ae77 	beq.w	8004f58 <_strtod_l+0x498>
 800526a:	9a07      	ldr	r2, [sp, #28]
 800526c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800526e:	4620      	mov	r0, r4
 8005270:	f001 f8a2 	bl	80063b8 <__mdiff>
 8005274:	4605      	mov	r5, r0
 8005276:	2800      	cmp	r0, #0
 8005278:	f43f ae6e 	beq.w	8004f58 <_strtod_l+0x498>
 800527c:	68c3      	ldr	r3, [r0, #12]
 800527e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005280:	2300      	movs	r3, #0
 8005282:	60c3      	str	r3, [r0, #12]
 8005284:	4631      	mov	r1, r6
 8005286:	f001 f87b 	bl	8006380 <__mcmp>
 800528a:	2800      	cmp	r0, #0
 800528c:	da65      	bge.n	800535a <_strtod_l+0x89a>
 800528e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005290:	ea53 030a 	orrs.w	r3, r3, sl
 8005294:	f040 8087 	bne.w	80053a6 <_strtod_l+0x8e6>
 8005298:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800529c:	2b00      	cmp	r3, #0
 800529e:	f040 8082 	bne.w	80053a6 <_strtod_l+0x8e6>
 80052a2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80052a6:	0d1b      	lsrs	r3, r3, #20
 80052a8:	051b      	lsls	r3, r3, #20
 80052aa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80052ae:	d97a      	bls.n	80053a6 <_strtod_l+0x8e6>
 80052b0:	696b      	ldr	r3, [r5, #20]
 80052b2:	b913      	cbnz	r3, 80052ba <_strtod_l+0x7fa>
 80052b4:	692b      	ldr	r3, [r5, #16]
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	dd75      	ble.n	80053a6 <_strtod_l+0x8e6>
 80052ba:	4629      	mov	r1, r5
 80052bc:	2201      	movs	r2, #1
 80052be:	4620      	mov	r0, r4
 80052c0:	f000 fff2 	bl	80062a8 <__lshift>
 80052c4:	4631      	mov	r1, r6
 80052c6:	4605      	mov	r5, r0
 80052c8:	f001 f85a 	bl	8006380 <__mcmp>
 80052cc:	2800      	cmp	r0, #0
 80052ce:	dd6a      	ble.n	80053a6 <_strtod_l+0x8e6>
 80052d0:	9904      	ldr	r1, [sp, #16]
 80052d2:	4a55      	ldr	r2, [pc, #340]	; (8005428 <_strtod_l+0x968>)
 80052d4:	465b      	mov	r3, fp
 80052d6:	2900      	cmp	r1, #0
 80052d8:	f000 8085 	beq.w	80053e6 <_strtod_l+0x926>
 80052dc:	ea02 010b 	and.w	r1, r2, fp
 80052e0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80052e4:	dc7f      	bgt.n	80053e6 <_strtod_l+0x926>
 80052e6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80052ea:	f77f aeaa 	ble.w	8005042 <_strtod_l+0x582>
 80052ee:	4a4f      	ldr	r2, [pc, #316]	; (800542c <_strtod_l+0x96c>)
 80052f0:	2300      	movs	r3, #0
 80052f2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 80052f6:	4650      	mov	r0, sl
 80052f8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80052fc:	4659      	mov	r1, fp
 80052fe:	f7fb f97b 	bl	80005f8 <__aeabi_dmul>
 8005302:	460b      	mov	r3, r1
 8005304:	4303      	orrs	r3, r0
 8005306:	bf08      	it	eq
 8005308:	2322      	moveq	r3, #34	; 0x22
 800530a:	4682      	mov	sl, r0
 800530c:	468b      	mov	fp, r1
 800530e:	bf08      	it	eq
 8005310:	6023      	streq	r3, [r4, #0]
 8005312:	e62b      	b.n	8004f6c <_strtod_l+0x4ac>
 8005314:	f04f 32ff 	mov.w	r2, #4294967295
 8005318:	fa02 f303 	lsl.w	r3, r2, r3
 800531c:	ea03 0a0a 	and.w	sl, r3, sl
 8005320:	e6de      	b.n	80050e0 <_strtod_l+0x620>
 8005322:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8005326:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800532a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800532e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8005332:	fa01 f308 	lsl.w	r3, r1, r8
 8005336:	930c      	str	r3, [sp, #48]	; 0x30
 8005338:	9111      	str	r1, [sp, #68]	; 0x44
 800533a:	e741      	b.n	80051c0 <_strtod_l+0x700>
 800533c:	2300      	movs	r3, #0
 800533e:	930c      	str	r3, [sp, #48]	; 0x30
 8005340:	2301      	movs	r3, #1
 8005342:	9311      	str	r3, [sp, #68]	; 0x44
 8005344:	e73c      	b.n	80051c0 <_strtod_l+0x700>
 8005346:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005348:	4642      	mov	r2, r8
 800534a:	4620      	mov	r0, r4
 800534c:	f000 ffac 	bl	80062a8 <__lshift>
 8005350:	901e      	str	r0, [sp, #120]	; 0x78
 8005352:	2800      	cmp	r0, #0
 8005354:	f47f af66 	bne.w	8005224 <_strtod_l+0x764>
 8005358:	e5fe      	b.n	8004f58 <_strtod_l+0x498>
 800535a:	465f      	mov	r7, fp
 800535c:	d16e      	bne.n	800543c <_strtod_l+0x97c>
 800535e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005360:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005364:	b342      	cbz	r2, 80053b8 <_strtod_l+0x8f8>
 8005366:	4a32      	ldr	r2, [pc, #200]	; (8005430 <_strtod_l+0x970>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d128      	bne.n	80053be <_strtod_l+0x8fe>
 800536c:	9b04      	ldr	r3, [sp, #16]
 800536e:	4650      	mov	r0, sl
 8005370:	b1eb      	cbz	r3, 80053ae <_strtod_l+0x8ee>
 8005372:	4a2d      	ldr	r2, [pc, #180]	; (8005428 <_strtod_l+0x968>)
 8005374:	403a      	ands	r2, r7
 8005376:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800537a:	f04f 31ff 	mov.w	r1, #4294967295
 800537e:	d819      	bhi.n	80053b4 <_strtod_l+0x8f4>
 8005380:	0d12      	lsrs	r2, r2, #20
 8005382:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005386:	fa01 f303 	lsl.w	r3, r1, r3
 800538a:	4298      	cmp	r0, r3
 800538c:	d117      	bne.n	80053be <_strtod_l+0x8fe>
 800538e:	4b29      	ldr	r3, [pc, #164]	; (8005434 <_strtod_l+0x974>)
 8005390:	429f      	cmp	r7, r3
 8005392:	d102      	bne.n	800539a <_strtod_l+0x8da>
 8005394:	3001      	adds	r0, #1
 8005396:	f43f addf 	beq.w	8004f58 <_strtod_l+0x498>
 800539a:	4b23      	ldr	r3, [pc, #140]	; (8005428 <_strtod_l+0x968>)
 800539c:	403b      	ands	r3, r7
 800539e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80053a2:	f04f 0a00 	mov.w	sl, #0
 80053a6:	9b04      	ldr	r3, [sp, #16]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d1a0      	bne.n	80052ee <_strtod_l+0x82e>
 80053ac:	e5de      	b.n	8004f6c <_strtod_l+0x4ac>
 80053ae:	f04f 33ff 	mov.w	r3, #4294967295
 80053b2:	e7ea      	b.n	800538a <_strtod_l+0x8ca>
 80053b4:	460b      	mov	r3, r1
 80053b6:	e7e8      	b.n	800538a <_strtod_l+0x8ca>
 80053b8:	ea53 030a 	orrs.w	r3, r3, sl
 80053bc:	d088      	beq.n	80052d0 <_strtod_l+0x810>
 80053be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80053c0:	b1db      	cbz	r3, 80053fa <_strtod_l+0x93a>
 80053c2:	423b      	tst	r3, r7
 80053c4:	d0ef      	beq.n	80053a6 <_strtod_l+0x8e6>
 80053c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80053c8:	9a04      	ldr	r2, [sp, #16]
 80053ca:	4650      	mov	r0, sl
 80053cc:	4659      	mov	r1, fp
 80053ce:	b1c3      	cbz	r3, 8005402 <_strtod_l+0x942>
 80053d0:	f7ff fb58 	bl	8004a84 <sulp>
 80053d4:	4602      	mov	r2, r0
 80053d6:	460b      	mov	r3, r1
 80053d8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80053dc:	f7fa ff56 	bl	800028c <__adddf3>
 80053e0:	4682      	mov	sl, r0
 80053e2:	468b      	mov	fp, r1
 80053e4:	e7df      	b.n	80053a6 <_strtod_l+0x8e6>
 80053e6:	4013      	ands	r3, r2
 80053e8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80053ec:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80053f0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80053f4:	f04f 3aff 	mov.w	sl, #4294967295
 80053f8:	e7d5      	b.n	80053a6 <_strtod_l+0x8e6>
 80053fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80053fc:	ea13 0f0a 	tst.w	r3, sl
 8005400:	e7e0      	b.n	80053c4 <_strtod_l+0x904>
 8005402:	f7ff fb3f 	bl	8004a84 <sulp>
 8005406:	4602      	mov	r2, r0
 8005408:	460b      	mov	r3, r1
 800540a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800540e:	f7fa ff3b 	bl	8000288 <__aeabi_dsub>
 8005412:	2200      	movs	r2, #0
 8005414:	2300      	movs	r3, #0
 8005416:	4682      	mov	sl, r0
 8005418:	468b      	mov	fp, r1
 800541a:	f7fb fb55 	bl	8000ac8 <__aeabi_dcmpeq>
 800541e:	2800      	cmp	r0, #0
 8005420:	d0c1      	beq.n	80053a6 <_strtod_l+0x8e6>
 8005422:	e60e      	b.n	8005042 <_strtod_l+0x582>
 8005424:	fffffc02 	.word	0xfffffc02
 8005428:	7ff00000 	.word	0x7ff00000
 800542c:	39500000 	.word	0x39500000
 8005430:	000fffff 	.word	0x000fffff
 8005434:	7fefffff 	.word	0x7fefffff
 8005438:	080078e8 	.word	0x080078e8
 800543c:	4631      	mov	r1, r6
 800543e:	4628      	mov	r0, r5
 8005440:	f001 f91a 	bl	8006678 <__ratio>
 8005444:	ec59 8b10 	vmov	r8, r9, d0
 8005448:	ee10 0a10 	vmov	r0, s0
 800544c:	2200      	movs	r2, #0
 800544e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005452:	4649      	mov	r1, r9
 8005454:	f7fb fb4c 	bl	8000af0 <__aeabi_dcmple>
 8005458:	2800      	cmp	r0, #0
 800545a:	d07c      	beq.n	8005556 <_strtod_l+0xa96>
 800545c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800545e:	2b00      	cmp	r3, #0
 8005460:	d04c      	beq.n	80054fc <_strtod_l+0xa3c>
 8005462:	4b95      	ldr	r3, [pc, #596]	; (80056b8 <_strtod_l+0xbf8>)
 8005464:	2200      	movs	r2, #0
 8005466:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800546a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80056b8 <_strtod_l+0xbf8>
 800546e:	f04f 0800 	mov.w	r8, #0
 8005472:	4b92      	ldr	r3, [pc, #584]	; (80056bc <_strtod_l+0xbfc>)
 8005474:	403b      	ands	r3, r7
 8005476:	9311      	str	r3, [sp, #68]	; 0x44
 8005478:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800547a:	4b91      	ldr	r3, [pc, #580]	; (80056c0 <_strtod_l+0xc00>)
 800547c:	429a      	cmp	r2, r3
 800547e:	f040 80b2 	bne.w	80055e6 <_strtod_l+0xb26>
 8005482:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005486:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800548a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800548e:	ec4b ab10 	vmov	d0, sl, fp
 8005492:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8005496:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800549a:	f001 f815 	bl	80064c8 <__ulp>
 800549e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80054a2:	ec53 2b10 	vmov	r2, r3, d0
 80054a6:	f7fb f8a7 	bl	80005f8 <__aeabi_dmul>
 80054aa:	4652      	mov	r2, sl
 80054ac:	465b      	mov	r3, fp
 80054ae:	f7fa feed 	bl	800028c <__adddf3>
 80054b2:	460b      	mov	r3, r1
 80054b4:	4981      	ldr	r1, [pc, #516]	; (80056bc <_strtod_l+0xbfc>)
 80054b6:	4a83      	ldr	r2, [pc, #524]	; (80056c4 <_strtod_l+0xc04>)
 80054b8:	4019      	ands	r1, r3
 80054ba:	4291      	cmp	r1, r2
 80054bc:	4682      	mov	sl, r0
 80054be:	d95e      	bls.n	800557e <_strtod_l+0xabe>
 80054c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80054c2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d103      	bne.n	80054d2 <_strtod_l+0xa12>
 80054ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054cc:	3301      	adds	r3, #1
 80054ce:	f43f ad43 	beq.w	8004f58 <_strtod_l+0x498>
 80054d2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 80056d0 <_strtod_l+0xc10>
 80054d6:	f04f 3aff 	mov.w	sl, #4294967295
 80054da:	991e      	ldr	r1, [sp, #120]	; 0x78
 80054dc:	4620      	mov	r0, r4
 80054de:	f000 fcc7 	bl	8005e70 <_Bfree>
 80054e2:	9907      	ldr	r1, [sp, #28]
 80054e4:	4620      	mov	r0, r4
 80054e6:	f000 fcc3 	bl	8005e70 <_Bfree>
 80054ea:	4631      	mov	r1, r6
 80054ec:	4620      	mov	r0, r4
 80054ee:	f000 fcbf 	bl	8005e70 <_Bfree>
 80054f2:	4629      	mov	r1, r5
 80054f4:	4620      	mov	r0, r4
 80054f6:	f000 fcbb 	bl	8005e70 <_Bfree>
 80054fa:	e613      	b.n	8005124 <_strtod_l+0x664>
 80054fc:	f1ba 0f00 	cmp.w	sl, #0
 8005500:	d11b      	bne.n	800553a <_strtod_l+0xa7a>
 8005502:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005506:	b9f3      	cbnz	r3, 8005546 <_strtod_l+0xa86>
 8005508:	4b6b      	ldr	r3, [pc, #428]	; (80056b8 <_strtod_l+0xbf8>)
 800550a:	2200      	movs	r2, #0
 800550c:	4640      	mov	r0, r8
 800550e:	4649      	mov	r1, r9
 8005510:	f7fb fae4 	bl	8000adc <__aeabi_dcmplt>
 8005514:	b9d0      	cbnz	r0, 800554c <_strtod_l+0xa8c>
 8005516:	4640      	mov	r0, r8
 8005518:	4649      	mov	r1, r9
 800551a:	4b6b      	ldr	r3, [pc, #428]	; (80056c8 <_strtod_l+0xc08>)
 800551c:	2200      	movs	r2, #0
 800551e:	f7fb f86b 	bl	80005f8 <__aeabi_dmul>
 8005522:	4680      	mov	r8, r0
 8005524:	4689      	mov	r9, r1
 8005526:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800552a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800552e:	931b      	str	r3, [sp, #108]	; 0x6c
 8005530:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8005534:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8005538:	e79b      	b.n	8005472 <_strtod_l+0x9b2>
 800553a:	f1ba 0f01 	cmp.w	sl, #1
 800553e:	d102      	bne.n	8005546 <_strtod_l+0xa86>
 8005540:	2f00      	cmp	r7, #0
 8005542:	f43f ad7e 	beq.w	8005042 <_strtod_l+0x582>
 8005546:	4b61      	ldr	r3, [pc, #388]	; (80056cc <_strtod_l+0xc0c>)
 8005548:	2200      	movs	r2, #0
 800554a:	e78c      	b.n	8005466 <_strtod_l+0x9a6>
 800554c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80056c8 <_strtod_l+0xc08>
 8005550:	f04f 0800 	mov.w	r8, #0
 8005554:	e7e7      	b.n	8005526 <_strtod_l+0xa66>
 8005556:	4b5c      	ldr	r3, [pc, #368]	; (80056c8 <_strtod_l+0xc08>)
 8005558:	4640      	mov	r0, r8
 800555a:	4649      	mov	r1, r9
 800555c:	2200      	movs	r2, #0
 800555e:	f7fb f84b 	bl	80005f8 <__aeabi_dmul>
 8005562:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005564:	4680      	mov	r8, r0
 8005566:	4689      	mov	r9, r1
 8005568:	b933      	cbnz	r3, 8005578 <_strtod_l+0xab8>
 800556a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800556e:	9012      	str	r0, [sp, #72]	; 0x48
 8005570:	9313      	str	r3, [sp, #76]	; 0x4c
 8005572:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8005576:	e7dd      	b.n	8005534 <_strtod_l+0xa74>
 8005578:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800557c:	e7f9      	b.n	8005572 <_strtod_l+0xab2>
 800557e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8005582:	9b04      	ldr	r3, [sp, #16]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d1a8      	bne.n	80054da <_strtod_l+0xa1a>
 8005588:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800558c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800558e:	0d1b      	lsrs	r3, r3, #20
 8005590:	051b      	lsls	r3, r3, #20
 8005592:	429a      	cmp	r2, r3
 8005594:	d1a1      	bne.n	80054da <_strtod_l+0xa1a>
 8005596:	4640      	mov	r0, r8
 8005598:	4649      	mov	r1, r9
 800559a:	f7fb faff 	bl	8000b9c <__aeabi_d2lz>
 800559e:	f7fa fffd 	bl	800059c <__aeabi_l2d>
 80055a2:	4602      	mov	r2, r0
 80055a4:	460b      	mov	r3, r1
 80055a6:	4640      	mov	r0, r8
 80055a8:	4649      	mov	r1, r9
 80055aa:	f7fa fe6d 	bl	8000288 <__aeabi_dsub>
 80055ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80055b0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80055b4:	ea43 030a 	orr.w	r3, r3, sl
 80055b8:	4313      	orrs	r3, r2
 80055ba:	4680      	mov	r8, r0
 80055bc:	4689      	mov	r9, r1
 80055be:	d053      	beq.n	8005668 <_strtod_l+0xba8>
 80055c0:	a335      	add	r3, pc, #212	; (adr r3, 8005698 <_strtod_l+0xbd8>)
 80055c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c6:	f7fb fa89 	bl	8000adc <__aeabi_dcmplt>
 80055ca:	2800      	cmp	r0, #0
 80055cc:	f47f acce 	bne.w	8004f6c <_strtod_l+0x4ac>
 80055d0:	a333      	add	r3, pc, #204	; (adr r3, 80056a0 <_strtod_l+0xbe0>)
 80055d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d6:	4640      	mov	r0, r8
 80055d8:	4649      	mov	r1, r9
 80055da:	f7fb fa9d 	bl	8000b18 <__aeabi_dcmpgt>
 80055de:	2800      	cmp	r0, #0
 80055e0:	f43f af7b 	beq.w	80054da <_strtod_l+0xa1a>
 80055e4:	e4c2      	b.n	8004f6c <_strtod_l+0x4ac>
 80055e6:	9b04      	ldr	r3, [sp, #16]
 80055e8:	b333      	cbz	r3, 8005638 <_strtod_l+0xb78>
 80055ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80055ec:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80055f0:	d822      	bhi.n	8005638 <_strtod_l+0xb78>
 80055f2:	a32d      	add	r3, pc, #180	; (adr r3, 80056a8 <_strtod_l+0xbe8>)
 80055f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f8:	4640      	mov	r0, r8
 80055fa:	4649      	mov	r1, r9
 80055fc:	f7fb fa78 	bl	8000af0 <__aeabi_dcmple>
 8005600:	b1a0      	cbz	r0, 800562c <_strtod_l+0xb6c>
 8005602:	4649      	mov	r1, r9
 8005604:	4640      	mov	r0, r8
 8005606:	f7fb fa91 	bl	8000b2c <__aeabi_d2uiz>
 800560a:	2801      	cmp	r0, #1
 800560c:	bf38      	it	cc
 800560e:	2001      	movcc	r0, #1
 8005610:	f7fa ff78 	bl	8000504 <__aeabi_ui2d>
 8005614:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005616:	4680      	mov	r8, r0
 8005618:	4689      	mov	r9, r1
 800561a:	bb13      	cbnz	r3, 8005662 <_strtod_l+0xba2>
 800561c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005620:	9014      	str	r0, [sp, #80]	; 0x50
 8005622:	9315      	str	r3, [sp, #84]	; 0x54
 8005624:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005628:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800562c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800562e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005630:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8005634:	1a9b      	subs	r3, r3, r2
 8005636:	930d      	str	r3, [sp, #52]	; 0x34
 8005638:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800563c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8005640:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005644:	f000 ff40 	bl	80064c8 <__ulp>
 8005648:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800564c:	ec53 2b10 	vmov	r2, r3, d0
 8005650:	f7fa ffd2 	bl	80005f8 <__aeabi_dmul>
 8005654:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005658:	f7fa fe18 	bl	800028c <__adddf3>
 800565c:	4682      	mov	sl, r0
 800565e:	468b      	mov	fp, r1
 8005660:	e78f      	b.n	8005582 <_strtod_l+0xac2>
 8005662:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8005666:	e7dd      	b.n	8005624 <_strtod_l+0xb64>
 8005668:	a311      	add	r3, pc, #68	; (adr r3, 80056b0 <_strtod_l+0xbf0>)
 800566a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800566e:	f7fb fa35 	bl	8000adc <__aeabi_dcmplt>
 8005672:	e7b4      	b.n	80055de <_strtod_l+0xb1e>
 8005674:	2300      	movs	r3, #0
 8005676:	930e      	str	r3, [sp, #56]	; 0x38
 8005678:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800567a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800567c:	6013      	str	r3, [r2, #0]
 800567e:	f7ff ba65 	b.w	8004b4c <_strtod_l+0x8c>
 8005682:	2b65      	cmp	r3, #101	; 0x65
 8005684:	f43f ab5d 	beq.w	8004d42 <_strtod_l+0x282>
 8005688:	2b45      	cmp	r3, #69	; 0x45
 800568a:	f43f ab5a 	beq.w	8004d42 <_strtod_l+0x282>
 800568e:	2201      	movs	r2, #1
 8005690:	f7ff bb92 	b.w	8004db8 <_strtod_l+0x2f8>
 8005694:	f3af 8000 	nop.w
 8005698:	94a03595 	.word	0x94a03595
 800569c:	3fdfffff 	.word	0x3fdfffff
 80056a0:	35afe535 	.word	0x35afe535
 80056a4:	3fe00000 	.word	0x3fe00000
 80056a8:	ffc00000 	.word	0xffc00000
 80056ac:	41dfffff 	.word	0x41dfffff
 80056b0:	94a03595 	.word	0x94a03595
 80056b4:	3fcfffff 	.word	0x3fcfffff
 80056b8:	3ff00000 	.word	0x3ff00000
 80056bc:	7ff00000 	.word	0x7ff00000
 80056c0:	7fe00000 	.word	0x7fe00000
 80056c4:	7c9fffff 	.word	0x7c9fffff
 80056c8:	3fe00000 	.word	0x3fe00000
 80056cc:	bff00000 	.word	0xbff00000
 80056d0:	7fefffff 	.word	0x7fefffff

080056d4 <strtod>:
 80056d4:	460a      	mov	r2, r1
 80056d6:	4601      	mov	r1, r0
 80056d8:	4802      	ldr	r0, [pc, #8]	; (80056e4 <strtod+0x10>)
 80056da:	4b03      	ldr	r3, [pc, #12]	; (80056e8 <strtod+0x14>)
 80056dc:	6800      	ldr	r0, [r0, #0]
 80056de:	f7ff b9ef 	b.w	8004ac0 <_strtod_l>
 80056e2:	bf00      	nop
 80056e4:	200000b8 	.word	0x200000b8
 80056e8:	20000120 	.word	0x20000120

080056ec <rshift>:
 80056ec:	6903      	ldr	r3, [r0, #16]
 80056ee:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80056f2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80056f6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80056fa:	f100 0414 	add.w	r4, r0, #20
 80056fe:	dd45      	ble.n	800578c <rshift+0xa0>
 8005700:	f011 011f 	ands.w	r1, r1, #31
 8005704:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8005708:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800570c:	d10c      	bne.n	8005728 <rshift+0x3c>
 800570e:	f100 0710 	add.w	r7, r0, #16
 8005712:	4629      	mov	r1, r5
 8005714:	42b1      	cmp	r1, r6
 8005716:	d334      	bcc.n	8005782 <rshift+0x96>
 8005718:	1a9b      	subs	r3, r3, r2
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	1eea      	subs	r2, r5, #3
 800571e:	4296      	cmp	r6, r2
 8005720:	bf38      	it	cc
 8005722:	2300      	movcc	r3, #0
 8005724:	4423      	add	r3, r4
 8005726:	e015      	b.n	8005754 <rshift+0x68>
 8005728:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800572c:	f1c1 0820 	rsb	r8, r1, #32
 8005730:	40cf      	lsrs	r7, r1
 8005732:	f105 0e04 	add.w	lr, r5, #4
 8005736:	46a1      	mov	r9, r4
 8005738:	4576      	cmp	r6, lr
 800573a:	46f4      	mov	ip, lr
 800573c:	d815      	bhi.n	800576a <rshift+0x7e>
 800573e:	1a9b      	subs	r3, r3, r2
 8005740:	009a      	lsls	r2, r3, #2
 8005742:	3a04      	subs	r2, #4
 8005744:	3501      	adds	r5, #1
 8005746:	42ae      	cmp	r6, r5
 8005748:	bf38      	it	cc
 800574a:	2200      	movcc	r2, #0
 800574c:	18a3      	adds	r3, r4, r2
 800574e:	50a7      	str	r7, [r4, r2]
 8005750:	b107      	cbz	r7, 8005754 <rshift+0x68>
 8005752:	3304      	adds	r3, #4
 8005754:	1b1a      	subs	r2, r3, r4
 8005756:	42a3      	cmp	r3, r4
 8005758:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800575c:	bf08      	it	eq
 800575e:	2300      	moveq	r3, #0
 8005760:	6102      	str	r2, [r0, #16]
 8005762:	bf08      	it	eq
 8005764:	6143      	streq	r3, [r0, #20]
 8005766:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800576a:	f8dc c000 	ldr.w	ip, [ip]
 800576e:	fa0c fc08 	lsl.w	ip, ip, r8
 8005772:	ea4c 0707 	orr.w	r7, ip, r7
 8005776:	f849 7b04 	str.w	r7, [r9], #4
 800577a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800577e:	40cf      	lsrs	r7, r1
 8005780:	e7da      	b.n	8005738 <rshift+0x4c>
 8005782:	f851 cb04 	ldr.w	ip, [r1], #4
 8005786:	f847 cf04 	str.w	ip, [r7, #4]!
 800578a:	e7c3      	b.n	8005714 <rshift+0x28>
 800578c:	4623      	mov	r3, r4
 800578e:	e7e1      	b.n	8005754 <rshift+0x68>

08005790 <__hexdig_fun>:
 8005790:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8005794:	2b09      	cmp	r3, #9
 8005796:	d802      	bhi.n	800579e <__hexdig_fun+0xe>
 8005798:	3820      	subs	r0, #32
 800579a:	b2c0      	uxtb	r0, r0
 800579c:	4770      	bx	lr
 800579e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80057a2:	2b05      	cmp	r3, #5
 80057a4:	d801      	bhi.n	80057aa <__hexdig_fun+0x1a>
 80057a6:	3847      	subs	r0, #71	; 0x47
 80057a8:	e7f7      	b.n	800579a <__hexdig_fun+0xa>
 80057aa:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80057ae:	2b05      	cmp	r3, #5
 80057b0:	d801      	bhi.n	80057b6 <__hexdig_fun+0x26>
 80057b2:	3827      	subs	r0, #39	; 0x27
 80057b4:	e7f1      	b.n	800579a <__hexdig_fun+0xa>
 80057b6:	2000      	movs	r0, #0
 80057b8:	4770      	bx	lr
	...

080057bc <__gethex>:
 80057bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057c0:	ed2d 8b02 	vpush	{d8}
 80057c4:	b089      	sub	sp, #36	; 0x24
 80057c6:	ee08 0a10 	vmov	s16, r0
 80057ca:	9304      	str	r3, [sp, #16]
 80057cc:	4bbc      	ldr	r3, [pc, #752]	; (8005ac0 <__gethex+0x304>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	9301      	str	r3, [sp, #4]
 80057d2:	4618      	mov	r0, r3
 80057d4:	468b      	mov	fp, r1
 80057d6:	4690      	mov	r8, r2
 80057d8:	f7fa fcfa 	bl	80001d0 <strlen>
 80057dc:	9b01      	ldr	r3, [sp, #4]
 80057de:	f8db 2000 	ldr.w	r2, [fp]
 80057e2:	4403      	add	r3, r0
 80057e4:	4682      	mov	sl, r0
 80057e6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80057ea:	9305      	str	r3, [sp, #20]
 80057ec:	1c93      	adds	r3, r2, #2
 80057ee:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80057f2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80057f6:	32fe      	adds	r2, #254	; 0xfe
 80057f8:	18d1      	adds	r1, r2, r3
 80057fa:	461f      	mov	r7, r3
 80057fc:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005800:	9100      	str	r1, [sp, #0]
 8005802:	2830      	cmp	r0, #48	; 0x30
 8005804:	d0f8      	beq.n	80057f8 <__gethex+0x3c>
 8005806:	f7ff ffc3 	bl	8005790 <__hexdig_fun>
 800580a:	4604      	mov	r4, r0
 800580c:	2800      	cmp	r0, #0
 800580e:	d13a      	bne.n	8005886 <__gethex+0xca>
 8005810:	9901      	ldr	r1, [sp, #4]
 8005812:	4652      	mov	r2, sl
 8005814:	4638      	mov	r0, r7
 8005816:	f001 f827 	bl	8006868 <strncmp>
 800581a:	4605      	mov	r5, r0
 800581c:	2800      	cmp	r0, #0
 800581e:	d168      	bne.n	80058f2 <__gethex+0x136>
 8005820:	f817 000a 	ldrb.w	r0, [r7, sl]
 8005824:	eb07 060a 	add.w	r6, r7, sl
 8005828:	f7ff ffb2 	bl	8005790 <__hexdig_fun>
 800582c:	2800      	cmp	r0, #0
 800582e:	d062      	beq.n	80058f6 <__gethex+0x13a>
 8005830:	4633      	mov	r3, r6
 8005832:	7818      	ldrb	r0, [r3, #0]
 8005834:	2830      	cmp	r0, #48	; 0x30
 8005836:	461f      	mov	r7, r3
 8005838:	f103 0301 	add.w	r3, r3, #1
 800583c:	d0f9      	beq.n	8005832 <__gethex+0x76>
 800583e:	f7ff ffa7 	bl	8005790 <__hexdig_fun>
 8005842:	2301      	movs	r3, #1
 8005844:	fab0 f480 	clz	r4, r0
 8005848:	0964      	lsrs	r4, r4, #5
 800584a:	4635      	mov	r5, r6
 800584c:	9300      	str	r3, [sp, #0]
 800584e:	463a      	mov	r2, r7
 8005850:	4616      	mov	r6, r2
 8005852:	3201      	adds	r2, #1
 8005854:	7830      	ldrb	r0, [r6, #0]
 8005856:	f7ff ff9b 	bl	8005790 <__hexdig_fun>
 800585a:	2800      	cmp	r0, #0
 800585c:	d1f8      	bne.n	8005850 <__gethex+0x94>
 800585e:	9901      	ldr	r1, [sp, #4]
 8005860:	4652      	mov	r2, sl
 8005862:	4630      	mov	r0, r6
 8005864:	f001 f800 	bl	8006868 <strncmp>
 8005868:	b980      	cbnz	r0, 800588c <__gethex+0xd0>
 800586a:	b94d      	cbnz	r5, 8005880 <__gethex+0xc4>
 800586c:	eb06 050a 	add.w	r5, r6, sl
 8005870:	462a      	mov	r2, r5
 8005872:	4616      	mov	r6, r2
 8005874:	3201      	adds	r2, #1
 8005876:	7830      	ldrb	r0, [r6, #0]
 8005878:	f7ff ff8a 	bl	8005790 <__hexdig_fun>
 800587c:	2800      	cmp	r0, #0
 800587e:	d1f8      	bne.n	8005872 <__gethex+0xb6>
 8005880:	1bad      	subs	r5, r5, r6
 8005882:	00ad      	lsls	r5, r5, #2
 8005884:	e004      	b.n	8005890 <__gethex+0xd4>
 8005886:	2400      	movs	r4, #0
 8005888:	4625      	mov	r5, r4
 800588a:	e7e0      	b.n	800584e <__gethex+0x92>
 800588c:	2d00      	cmp	r5, #0
 800588e:	d1f7      	bne.n	8005880 <__gethex+0xc4>
 8005890:	7833      	ldrb	r3, [r6, #0]
 8005892:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005896:	2b50      	cmp	r3, #80	; 0x50
 8005898:	d13b      	bne.n	8005912 <__gethex+0x156>
 800589a:	7873      	ldrb	r3, [r6, #1]
 800589c:	2b2b      	cmp	r3, #43	; 0x2b
 800589e:	d02c      	beq.n	80058fa <__gethex+0x13e>
 80058a0:	2b2d      	cmp	r3, #45	; 0x2d
 80058a2:	d02e      	beq.n	8005902 <__gethex+0x146>
 80058a4:	1c71      	adds	r1, r6, #1
 80058a6:	f04f 0900 	mov.w	r9, #0
 80058aa:	7808      	ldrb	r0, [r1, #0]
 80058ac:	f7ff ff70 	bl	8005790 <__hexdig_fun>
 80058b0:	1e43      	subs	r3, r0, #1
 80058b2:	b2db      	uxtb	r3, r3
 80058b4:	2b18      	cmp	r3, #24
 80058b6:	d82c      	bhi.n	8005912 <__gethex+0x156>
 80058b8:	f1a0 0210 	sub.w	r2, r0, #16
 80058bc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80058c0:	f7ff ff66 	bl	8005790 <__hexdig_fun>
 80058c4:	1e43      	subs	r3, r0, #1
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	2b18      	cmp	r3, #24
 80058ca:	d91d      	bls.n	8005908 <__gethex+0x14c>
 80058cc:	f1b9 0f00 	cmp.w	r9, #0
 80058d0:	d000      	beq.n	80058d4 <__gethex+0x118>
 80058d2:	4252      	negs	r2, r2
 80058d4:	4415      	add	r5, r2
 80058d6:	f8cb 1000 	str.w	r1, [fp]
 80058da:	b1e4      	cbz	r4, 8005916 <__gethex+0x15a>
 80058dc:	9b00      	ldr	r3, [sp, #0]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	bf14      	ite	ne
 80058e2:	2700      	movne	r7, #0
 80058e4:	2706      	moveq	r7, #6
 80058e6:	4638      	mov	r0, r7
 80058e8:	b009      	add	sp, #36	; 0x24
 80058ea:	ecbd 8b02 	vpop	{d8}
 80058ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058f2:	463e      	mov	r6, r7
 80058f4:	4625      	mov	r5, r4
 80058f6:	2401      	movs	r4, #1
 80058f8:	e7ca      	b.n	8005890 <__gethex+0xd4>
 80058fa:	f04f 0900 	mov.w	r9, #0
 80058fe:	1cb1      	adds	r1, r6, #2
 8005900:	e7d3      	b.n	80058aa <__gethex+0xee>
 8005902:	f04f 0901 	mov.w	r9, #1
 8005906:	e7fa      	b.n	80058fe <__gethex+0x142>
 8005908:	230a      	movs	r3, #10
 800590a:	fb03 0202 	mla	r2, r3, r2, r0
 800590e:	3a10      	subs	r2, #16
 8005910:	e7d4      	b.n	80058bc <__gethex+0x100>
 8005912:	4631      	mov	r1, r6
 8005914:	e7df      	b.n	80058d6 <__gethex+0x11a>
 8005916:	1bf3      	subs	r3, r6, r7
 8005918:	3b01      	subs	r3, #1
 800591a:	4621      	mov	r1, r4
 800591c:	2b07      	cmp	r3, #7
 800591e:	dc0b      	bgt.n	8005938 <__gethex+0x17c>
 8005920:	ee18 0a10 	vmov	r0, s16
 8005924:	f000 fa64 	bl	8005df0 <_Balloc>
 8005928:	4604      	mov	r4, r0
 800592a:	b940      	cbnz	r0, 800593e <__gethex+0x182>
 800592c:	4b65      	ldr	r3, [pc, #404]	; (8005ac4 <__gethex+0x308>)
 800592e:	4602      	mov	r2, r0
 8005930:	21de      	movs	r1, #222	; 0xde
 8005932:	4865      	ldr	r0, [pc, #404]	; (8005ac8 <__gethex+0x30c>)
 8005934:	f000 ffb8 	bl	80068a8 <__assert_func>
 8005938:	3101      	adds	r1, #1
 800593a:	105b      	asrs	r3, r3, #1
 800593c:	e7ee      	b.n	800591c <__gethex+0x160>
 800593e:	f100 0914 	add.w	r9, r0, #20
 8005942:	f04f 0b00 	mov.w	fp, #0
 8005946:	f1ca 0301 	rsb	r3, sl, #1
 800594a:	f8cd 9008 	str.w	r9, [sp, #8]
 800594e:	f8cd b000 	str.w	fp, [sp]
 8005952:	9306      	str	r3, [sp, #24]
 8005954:	42b7      	cmp	r7, r6
 8005956:	d340      	bcc.n	80059da <__gethex+0x21e>
 8005958:	9802      	ldr	r0, [sp, #8]
 800595a:	9b00      	ldr	r3, [sp, #0]
 800595c:	f840 3b04 	str.w	r3, [r0], #4
 8005960:	eba0 0009 	sub.w	r0, r0, r9
 8005964:	1080      	asrs	r0, r0, #2
 8005966:	0146      	lsls	r6, r0, #5
 8005968:	6120      	str	r0, [r4, #16]
 800596a:	4618      	mov	r0, r3
 800596c:	f000 fb36 	bl	8005fdc <__hi0bits>
 8005970:	1a30      	subs	r0, r6, r0
 8005972:	f8d8 6000 	ldr.w	r6, [r8]
 8005976:	42b0      	cmp	r0, r6
 8005978:	dd63      	ble.n	8005a42 <__gethex+0x286>
 800597a:	1b87      	subs	r7, r0, r6
 800597c:	4639      	mov	r1, r7
 800597e:	4620      	mov	r0, r4
 8005980:	f000 fed0 	bl	8006724 <__any_on>
 8005984:	4682      	mov	sl, r0
 8005986:	b1a8      	cbz	r0, 80059b4 <__gethex+0x1f8>
 8005988:	1e7b      	subs	r3, r7, #1
 800598a:	1159      	asrs	r1, r3, #5
 800598c:	f003 021f 	and.w	r2, r3, #31
 8005990:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8005994:	f04f 0a01 	mov.w	sl, #1
 8005998:	fa0a f202 	lsl.w	r2, sl, r2
 800599c:	420a      	tst	r2, r1
 800599e:	d009      	beq.n	80059b4 <__gethex+0x1f8>
 80059a0:	4553      	cmp	r3, sl
 80059a2:	dd05      	ble.n	80059b0 <__gethex+0x1f4>
 80059a4:	1eb9      	subs	r1, r7, #2
 80059a6:	4620      	mov	r0, r4
 80059a8:	f000 febc 	bl	8006724 <__any_on>
 80059ac:	2800      	cmp	r0, #0
 80059ae:	d145      	bne.n	8005a3c <__gethex+0x280>
 80059b0:	f04f 0a02 	mov.w	sl, #2
 80059b4:	4639      	mov	r1, r7
 80059b6:	4620      	mov	r0, r4
 80059b8:	f7ff fe98 	bl	80056ec <rshift>
 80059bc:	443d      	add	r5, r7
 80059be:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80059c2:	42ab      	cmp	r3, r5
 80059c4:	da4c      	bge.n	8005a60 <__gethex+0x2a4>
 80059c6:	ee18 0a10 	vmov	r0, s16
 80059ca:	4621      	mov	r1, r4
 80059cc:	f000 fa50 	bl	8005e70 <_Bfree>
 80059d0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80059d2:	2300      	movs	r3, #0
 80059d4:	6013      	str	r3, [r2, #0]
 80059d6:	27a3      	movs	r7, #163	; 0xa3
 80059d8:	e785      	b.n	80058e6 <__gethex+0x12a>
 80059da:	1e73      	subs	r3, r6, #1
 80059dc:	9a05      	ldr	r2, [sp, #20]
 80059de:	9303      	str	r3, [sp, #12]
 80059e0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d019      	beq.n	8005a1c <__gethex+0x260>
 80059e8:	f1bb 0f20 	cmp.w	fp, #32
 80059ec:	d107      	bne.n	80059fe <__gethex+0x242>
 80059ee:	9b02      	ldr	r3, [sp, #8]
 80059f0:	9a00      	ldr	r2, [sp, #0]
 80059f2:	f843 2b04 	str.w	r2, [r3], #4
 80059f6:	9302      	str	r3, [sp, #8]
 80059f8:	2300      	movs	r3, #0
 80059fa:	9300      	str	r3, [sp, #0]
 80059fc:	469b      	mov	fp, r3
 80059fe:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8005a02:	f7ff fec5 	bl	8005790 <__hexdig_fun>
 8005a06:	9b00      	ldr	r3, [sp, #0]
 8005a08:	f000 000f 	and.w	r0, r0, #15
 8005a0c:	fa00 f00b 	lsl.w	r0, r0, fp
 8005a10:	4303      	orrs	r3, r0
 8005a12:	9300      	str	r3, [sp, #0]
 8005a14:	f10b 0b04 	add.w	fp, fp, #4
 8005a18:	9b03      	ldr	r3, [sp, #12]
 8005a1a:	e00d      	b.n	8005a38 <__gethex+0x27c>
 8005a1c:	9b03      	ldr	r3, [sp, #12]
 8005a1e:	9a06      	ldr	r2, [sp, #24]
 8005a20:	4413      	add	r3, r2
 8005a22:	42bb      	cmp	r3, r7
 8005a24:	d3e0      	bcc.n	80059e8 <__gethex+0x22c>
 8005a26:	4618      	mov	r0, r3
 8005a28:	9901      	ldr	r1, [sp, #4]
 8005a2a:	9307      	str	r3, [sp, #28]
 8005a2c:	4652      	mov	r2, sl
 8005a2e:	f000 ff1b 	bl	8006868 <strncmp>
 8005a32:	9b07      	ldr	r3, [sp, #28]
 8005a34:	2800      	cmp	r0, #0
 8005a36:	d1d7      	bne.n	80059e8 <__gethex+0x22c>
 8005a38:	461e      	mov	r6, r3
 8005a3a:	e78b      	b.n	8005954 <__gethex+0x198>
 8005a3c:	f04f 0a03 	mov.w	sl, #3
 8005a40:	e7b8      	b.n	80059b4 <__gethex+0x1f8>
 8005a42:	da0a      	bge.n	8005a5a <__gethex+0x29e>
 8005a44:	1a37      	subs	r7, r6, r0
 8005a46:	4621      	mov	r1, r4
 8005a48:	ee18 0a10 	vmov	r0, s16
 8005a4c:	463a      	mov	r2, r7
 8005a4e:	f000 fc2b 	bl	80062a8 <__lshift>
 8005a52:	1bed      	subs	r5, r5, r7
 8005a54:	4604      	mov	r4, r0
 8005a56:	f100 0914 	add.w	r9, r0, #20
 8005a5a:	f04f 0a00 	mov.w	sl, #0
 8005a5e:	e7ae      	b.n	80059be <__gethex+0x202>
 8005a60:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8005a64:	42a8      	cmp	r0, r5
 8005a66:	dd72      	ble.n	8005b4e <__gethex+0x392>
 8005a68:	1b45      	subs	r5, r0, r5
 8005a6a:	42ae      	cmp	r6, r5
 8005a6c:	dc36      	bgt.n	8005adc <__gethex+0x320>
 8005a6e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005a72:	2b02      	cmp	r3, #2
 8005a74:	d02a      	beq.n	8005acc <__gethex+0x310>
 8005a76:	2b03      	cmp	r3, #3
 8005a78:	d02c      	beq.n	8005ad4 <__gethex+0x318>
 8005a7a:	2b01      	cmp	r3, #1
 8005a7c:	d115      	bne.n	8005aaa <__gethex+0x2ee>
 8005a7e:	42ae      	cmp	r6, r5
 8005a80:	d113      	bne.n	8005aaa <__gethex+0x2ee>
 8005a82:	2e01      	cmp	r6, #1
 8005a84:	d10b      	bne.n	8005a9e <__gethex+0x2e2>
 8005a86:	9a04      	ldr	r2, [sp, #16]
 8005a88:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005a8c:	6013      	str	r3, [r2, #0]
 8005a8e:	2301      	movs	r3, #1
 8005a90:	6123      	str	r3, [r4, #16]
 8005a92:	f8c9 3000 	str.w	r3, [r9]
 8005a96:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005a98:	2762      	movs	r7, #98	; 0x62
 8005a9a:	601c      	str	r4, [r3, #0]
 8005a9c:	e723      	b.n	80058e6 <__gethex+0x12a>
 8005a9e:	1e71      	subs	r1, r6, #1
 8005aa0:	4620      	mov	r0, r4
 8005aa2:	f000 fe3f 	bl	8006724 <__any_on>
 8005aa6:	2800      	cmp	r0, #0
 8005aa8:	d1ed      	bne.n	8005a86 <__gethex+0x2ca>
 8005aaa:	ee18 0a10 	vmov	r0, s16
 8005aae:	4621      	mov	r1, r4
 8005ab0:	f000 f9de 	bl	8005e70 <_Bfree>
 8005ab4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	6013      	str	r3, [r2, #0]
 8005aba:	2750      	movs	r7, #80	; 0x50
 8005abc:	e713      	b.n	80058e6 <__gethex+0x12a>
 8005abe:	bf00      	nop
 8005ac0:	0800798c 	.word	0x0800798c
 8005ac4:	08007910 	.word	0x08007910
 8005ac8:	08007921 	.word	0x08007921
 8005acc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d1eb      	bne.n	8005aaa <__gethex+0x2ee>
 8005ad2:	e7d8      	b.n	8005a86 <__gethex+0x2ca>
 8005ad4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d1d5      	bne.n	8005a86 <__gethex+0x2ca>
 8005ada:	e7e6      	b.n	8005aaa <__gethex+0x2ee>
 8005adc:	1e6f      	subs	r7, r5, #1
 8005ade:	f1ba 0f00 	cmp.w	sl, #0
 8005ae2:	d131      	bne.n	8005b48 <__gethex+0x38c>
 8005ae4:	b127      	cbz	r7, 8005af0 <__gethex+0x334>
 8005ae6:	4639      	mov	r1, r7
 8005ae8:	4620      	mov	r0, r4
 8005aea:	f000 fe1b 	bl	8006724 <__any_on>
 8005aee:	4682      	mov	sl, r0
 8005af0:	117b      	asrs	r3, r7, #5
 8005af2:	2101      	movs	r1, #1
 8005af4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8005af8:	f007 071f 	and.w	r7, r7, #31
 8005afc:	fa01 f707 	lsl.w	r7, r1, r7
 8005b00:	421f      	tst	r7, r3
 8005b02:	4629      	mov	r1, r5
 8005b04:	4620      	mov	r0, r4
 8005b06:	bf18      	it	ne
 8005b08:	f04a 0a02 	orrne.w	sl, sl, #2
 8005b0c:	1b76      	subs	r6, r6, r5
 8005b0e:	f7ff fded 	bl	80056ec <rshift>
 8005b12:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8005b16:	2702      	movs	r7, #2
 8005b18:	f1ba 0f00 	cmp.w	sl, #0
 8005b1c:	d048      	beq.n	8005bb0 <__gethex+0x3f4>
 8005b1e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005b22:	2b02      	cmp	r3, #2
 8005b24:	d015      	beq.n	8005b52 <__gethex+0x396>
 8005b26:	2b03      	cmp	r3, #3
 8005b28:	d017      	beq.n	8005b5a <__gethex+0x39e>
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d109      	bne.n	8005b42 <__gethex+0x386>
 8005b2e:	f01a 0f02 	tst.w	sl, #2
 8005b32:	d006      	beq.n	8005b42 <__gethex+0x386>
 8005b34:	f8d9 0000 	ldr.w	r0, [r9]
 8005b38:	ea4a 0a00 	orr.w	sl, sl, r0
 8005b3c:	f01a 0f01 	tst.w	sl, #1
 8005b40:	d10e      	bne.n	8005b60 <__gethex+0x3a4>
 8005b42:	f047 0710 	orr.w	r7, r7, #16
 8005b46:	e033      	b.n	8005bb0 <__gethex+0x3f4>
 8005b48:	f04f 0a01 	mov.w	sl, #1
 8005b4c:	e7d0      	b.n	8005af0 <__gethex+0x334>
 8005b4e:	2701      	movs	r7, #1
 8005b50:	e7e2      	b.n	8005b18 <__gethex+0x35c>
 8005b52:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005b54:	f1c3 0301 	rsb	r3, r3, #1
 8005b58:	9315      	str	r3, [sp, #84]	; 0x54
 8005b5a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d0f0      	beq.n	8005b42 <__gethex+0x386>
 8005b60:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8005b64:	f104 0314 	add.w	r3, r4, #20
 8005b68:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8005b6c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8005b70:	f04f 0c00 	mov.w	ip, #0
 8005b74:	4618      	mov	r0, r3
 8005b76:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b7a:	f1b2 3fff 	cmp.w	r2, #4294967295
 8005b7e:	d01c      	beq.n	8005bba <__gethex+0x3fe>
 8005b80:	3201      	adds	r2, #1
 8005b82:	6002      	str	r2, [r0, #0]
 8005b84:	2f02      	cmp	r7, #2
 8005b86:	f104 0314 	add.w	r3, r4, #20
 8005b8a:	d13f      	bne.n	8005c0c <__gethex+0x450>
 8005b8c:	f8d8 2000 	ldr.w	r2, [r8]
 8005b90:	3a01      	subs	r2, #1
 8005b92:	42b2      	cmp	r2, r6
 8005b94:	d10a      	bne.n	8005bac <__gethex+0x3f0>
 8005b96:	1171      	asrs	r1, r6, #5
 8005b98:	2201      	movs	r2, #1
 8005b9a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005b9e:	f006 061f 	and.w	r6, r6, #31
 8005ba2:	fa02 f606 	lsl.w	r6, r2, r6
 8005ba6:	421e      	tst	r6, r3
 8005ba8:	bf18      	it	ne
 8005baa:	4617      	movne	r7, r2
 8005bac:	f047 0720 	orr.w	r7, r7, #32
 8005bb0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005bb2:	601c      	str	r4, [r3, #0]
 8005bb4:	9b04      	ldr	r3, [sp, #16]
 8005bb6:	601d      	str	r5, [r3, #0]
 8005bb8:	e695      	b.n	80058e6 <__gethex+0x12a>
 8005bba:	4299      	cmp	r1, r3
 8005bbc:	f843 cc04 	str.w	ip, [r3, #-4]
 8005bc0:	d8d8      	bhi.n	8005b74 <__gethex+0x3b8>
 8005bc2:	68a3      	ldr	r3, [r4, #8]
 8005bc4:	459b      	cmp	fp, r3
 8005bc6:	db19      	blt.n	8005bfc <__gethex+0x440>
 8005bc8:	6861      	ldr	r1, [r4, #4]
 8005bca:	ee18 0a10 	vmov	r0, s16
 8005bce:	3101      	adds	r1, #1
 8005bd0:	f000 f90e 	bl	8005df0 <_Balloc>
 8005bd4:	4681      	mov	r9, r0
 8005bd6:	b918      	cbnz	r0, 8005be0 <__gethex+0x424>
 8005bd8:	4b1a      	ldr	r3, [pc, #104]	; (8005c44 <__gethex+0x488>)
 8005bda:	4602      	mov	r2, r0
 8005bdc:	2184      	movs	r1, #132	; 0x84
 8005bde:	e6a8      	b.n	8005932 <__gethex+0x176>
 8005be0:	6922      	ldr	r2, [r4, #16]
 8005be2:	3202      	adds	r2, #2
 8005be4:	f104 010c 	add.w	r1, r4, #12
 8005be8:	0092      	lsls	r2, r2, #2
 8005bea:	300c      	adds	r0, #12
 8005bec:	f7fe ff34 	bl	8004a58 <memcpy>
 8005bf0:	4621      	mov	r1, r4
 8005bf2:	ee18 0a10 	vmov	r0, s16
 8005bf6:	f000 f93b 	bl	8005e70 <_Bfree>
 8005bfa:	464c      	mov	r4, r9
 8005bfc:	6923      	ldr	r3, [r4, #16]
 8005bfe:	1c5a      	adds	r2, r3, #1
 8005c00:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005c04:	6122      	str	r2, [r4, #16]
 8005c06:	2201      	movs	r2, #1
 8005c08:	615a      	str	r2, [r3, #20]
 8005c0a:	e7bb      	b.n	8005b84 <__gethex+0x3c8>
 8005c0c:	6922      	ldr	r2, [r4, #16]
 8005c0e:	455a      	cmp	r2, fp
 8005c10:	dd0b      	ble.n	8005c2a <__gethex+0x46e>
 8005c12:	2101      	movs	r1, #1
 8005c14:	4620      	mov	r0, r4
 8005c16:	f7ff fd69 	bl	80056ec <rshift>
 8005c1a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005c1e:	3501      	adds	r5, #1
 8005c20:	42ab      	cmp	r3, r5
 8005c22:	f6ff aed0 	blt.w	80059c6 <__gethex+0x20a>
 8005c26:	2701      	movs	r7, #1
 8005c28:	e7c0      	b.n	8005bac <__gethex+0x3f0>
 8005c2a:	f016 061f 	ands.w	r6, r6, #31
 8005c2e:	d0fa      	beq.n	8005c26 <__gethex+0x46a>
 8005c30:	449a      	add	sl, r3
 8005c32:	f1c6 0620 	rsb	r6, r6, #32
 8005c36:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8005c3a:	f000 f9cf 	bl	8005fdc <__hi0bits>
 8005c3e:	42b0      	cmp	r0, r6
 8005c40:	dbe7      	blt.n	8005c12 <__gethex+0x456>
 8005c42:	e7f0      	b.n	8005c26 <__gethex+0x46a>
 8005c44:	08007910 	.word	0x08007910

08005c48 <L_shift>:
 8005c48:	f1c2 0208 	rsb	r2, r2, #8
 8005c4c:	0092      	lsls	r2, r2, #2
 8005c4e:	b570      	push	{r4, r5, r6, lr}
 8005c50:	f1c2 0620 	rsb	r6, r2, #32
 8005c54:	6843      	ldr	r3, [r0, #4]
 8005c56:	6804      	ldr	r4, [r0, #0]
 8005c58:	fa03 f506 	lsl.w	r5, r3, r6
 8005c5c:	432c      	orrs	r4, r5
 8005c5e:	40d3      	lsrs	r3, r2
 8005c60:	6004      	str	r4, [r0, #0]
 8005c62:	f840 3f04 	str.w	r3, [r0, #4]!
 8005c66:	4288      	cmp	r0, r1
 8005c68:	d3f4      	bcc.n	8005c54 <L_shift+0xc>
 8005c6a:	bd70      	pop	{r4, r5, r6, pc}

08005c6c <__match>:
 8005c6c:	b530      	push	{r4, r5, lr}
 8005c6e:	6803      	ldr	r3, [r0, #0]
 8005c70:	3301      	adds	r3, #1
 8005c72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c76:	b914      	cbnz	r4, 8005c7e <__match+0x12>
 8005c78:	6003      	str	r3, [r0, #0]
 8005c7a:	2001      	movs	r0, #1
 8005c7c:	bd30      	pop	{r4, r5, pc}
 8005c7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c82:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8005c86:	2d19      	cmp	r5, #25
 8005c88:	bf98      	it	ls
 8005c8a:	3220      	addls	r2, #32
 8005c8c:	42a2      	cmp	r2, r4
 8005c8e:	d0f0      	beq.n	8005c72 <__match+0x6>
 8005c90:	2000      	movs	r0, #0
 8005c92:	e7f3      	b.n	8005c7c <__match+0x10>

08005c94 <__hexnan>:
 8005c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c98:	680b      	ldr	r3, [r1, #0]
 8005c9a:	6801      	ldr	r1, [r0, #0]
 8005c9c:	115e      	asrs	r6, r3, #5
 8005c9e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005ca2:	f013 031f 	ands.w	r3, r3, #31
 8005ca6:	b087      	sub	sp, #28
 8005ca8:	bf18      	it	ne
 8005caa:	3604      	addne	r6, #4
 8005cac:	2500      	movs	r5, #0
 8005cae:	1f37      	subs	r7, r6, #4
 8005cb0:	4682      	mov	sl, r0
 8005cb2:	4690      	mov	r8, r2
 8005cb4:	9301      	str	r3, [sp, #4]
 8005cb6:	f846 5c04 	str.w	r5, [r6, #-4]
 8005cba:	46b9      	mov	r9, r7
 8005cbc:	463c      	mov	r4, r7
 8005cbe:	9502      	str	r5, [sp, #8]
 8005cc0:	46ab      	mov	fp, r5
 8005cc2:	784a      	ldrb	r2, [r1, #1]
 8005cc4:	1c4b      	adds	r3, r1, #1
 8005cc6:	9303      	str	r3, [sp, #12]
 8005cc8:	b342      	cbz	r2, 8005d1c <__hexnan+0x88>
 8005cca:	4610      	mov	r0, r2
 8005ccc:	9105      	str	r1, [sp, #20]
 8005cce:	9204      	str	r2, [sp, #16]
 8005cd0:	f7ff fd5e 	bl	8005790 <__hexdig_fun>
 8005cd4:	2800      	cmp	r0, #0
 8005cd6:	d14f      	bne.n	8005d78 <__hexnan+0xe4>
 8005cd8:	9a04      	ldr	r2, [sp, #16]
 8005cda:	9905      	ldr	r1, [sp, #20]
 8005cdc:	2a20      	cmp	r2, #32
 8005cde:	d818      	bhi.n	8005d12 <__hexnan+0x7e>
 8005ce0:	9b02      	ldr	r3, [sp, #8]
 8005ce2:	459b      	cmp	fp, r3
 8005ce4:	dd13      	ble.n	8005d0e <__hexnan+0x7a>
 8005ce6:	454c      	cmp	r4, r9
 8005ce8:	d206      	bcs.n	8005cf8 <__hexnan+0x64>
 8005cea:	2d07      	cmp	r5, #7
 8005cec:	dc04      	bgt.n	8005cf8 <__hexnan+0x64>
 8005cee:	462a      	mov	r2, r5
 8005cf0:	4649      	mov	r1, r9
 8005cf2:	4620      	mov	r0, r4
 8005cf4:	f7ff ffa8 	bl	8005c48 <L_shift>
 8005cf8:	4544      	cmp	r4, r8
 8005cfa:	d950      	bls.n	8005d9e <__hexnan+0x10a>
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	f1a4 0904 	sub.w	r9, r4, #4
 8005d02:	f844 3c04 	str.w	r3, [r4, #-4]
 8005d06:	f8cd b008 	str.w	fp, [sp, #8]
 8005d0a:	464c      	mov	r4, r9
 8005d0c:	461d      	mov	r5, r3
 8005d0e:	9903      	ldr	r1, [sp, #12]
 8005d10:	e7d7      	b.n	8005cc2 <__hexnan+0x2e>
 8005d12:	2a29      	cmp	r2, #41	; 0x29
 8005d14:	d156      	bne.n	8005dc4 <__hexnan+0x130>
 8005d16:	3102      	adds	r1, #2
 8005d18:	f8ca 1000 	str.w	r1, [sl]
 8005d1c:	f1bb 0f00 	cmp.w	fp, #0
 8005d20:	d050      	beq.n	8005dc4 <__hexnan+0x130>
 8005d22:	454c      	cmp	r4, r9
 8005d24:	d206      	bcs.n	8005d34 <__hexnan+0xa0>
 8005d26:	2d07      	cmp	r5, #7
 8005d28:	dc04      	bgt.n	8005d34 <__hexnan+0xa0>
 8005d2a:	462a      	mov	r2, r5
 8005d2c:	4649      	mov	r1, r9
 8005d2e:	4620      	mov	r0, r4
 8005d30:	f7ff ff8a 	bl	8005c48 <L_shift>
 8005d34:	4544      	cmp	r4, r8
 8005d36:	d934      	bls.n	8005da2 <__hexnan+0x10e>
 8005d38:	f1a8 0204 	sub.w	r2, r8, #4
 8005d3c:	4623      	mov	r3, r4
 8005d3e:	f853 1b04 	ldr.w	r1, [r3], #4
 8005d42:	f842 1f04 	str.w	r1, [r2, #4]!
 8005d46:	429f      	cmp	r7, r3
 8005d48:	d2f9      	bcs.n	8005d3e <__hexnan+0xaa>
 8005d4a:	1b3b      	subs	r3, r7, r4
 8005d4c:	f023 0303 	bic.w	r3, r3, #3
 8005d50:	3304      	adds	r3, #4
 8005d52:	3401      	adds	r4, #1
 8005d54:	3e03      	subs	r6, #3
 8005d56:	42b4      	cmp	r4, r6
 8005d58:	bf88      	it	hi
 8005d5a:	2304      	movhi	r3, #4
 8005d5c:	4443      	add	r3, r8
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f843 2b04 	str.w	r2, [r3], #4
 8005d64:	429f      	cmp	r7, r3
 8005d66:	d2fb      	bcs.n	8005d60 <__hexnan+0xcc>
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	b91b      	cbnz	r3, 8005d74 <__hexnan+0xe0>
 8005d6c:	4547      	cmp	r7, r8
 8005d6e:	d127      	bne.n	8005dc0 <__hexnan+0x12c>
 8005d70:	2301      	movs	r3, #1
 8005d72:	603b      	str	r3, [r7, #0]
 8005d74:	2005      	movs	r0, #5
 8005d76:	e026      	b.n	8005dc6 <__hexnan+0x132>
 8005d78:	3501      	adds	r5, #1
 8005d7a:	2d08      	cmp	r5, #8
 8005d7c:	f10b 0b01 	add.w	fp, fp, #1
 8005d80:	dd06      	ble.n	8005d90 <__hexnan+0xfc>
 8005d82:	4544      	cmp	r4, r8
 8005d84:	d9c3      	bls.n	8005d0e <__hexnan+0x7a>
 8005d86:	2300      	movs	r3, #0
 8005d88:	f844 3c04 	str.w	r3, [r4, #-4]
 8005d8c:	2501      	movs	r5, #1
 8005d8e:	3c04      	subs	r4, #4
 8005d90:	6822      	ldr	r2, [r4, #0]
 8005d92:	f000 000f 	and.w	r0, r0, #15
 8005d96:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8005d9a:	6022      	str	r2, [r4, #0]
 8005d9c:	e7b7      	b.n	8005d0e <__hexnan+0x7a>
 8005d9e:	2508      	movs	r5, #8
 8005da0:	e7b5      	b.n	8005d0e <__hexnan+0x7a>
 8005da2:	9b01      	ldr	r3, [sp, #4]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d0df      	beq.n	8005d68 <__hexnan+0xd4>
 8005da8:	f04f 32ff 	mov.w	r2, #4294967295
 8005dac:	f1c3 0320 	rsb	r3, r3, #32
 8005db0:	fa22 f303 	lsr.w	r3, r2, r3
 8005db4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8005db8:	401a      	ands	r2, r3
 8005dba:	f846 2c04 	str.w	r2, [r6, #-4]
 8005dbe:	e7d3      	b.n	8005d68 <__hexnan+0xd4>
 8005dc0:	3f04      	subs	r7, #4
 8005dc2:	e7d1      	b.n	8005d68 <__hexnan+0xd4>
 8005dc4:	2004      	movs	r0, #4
 8005dc6:	b007      	add	sp, #28
 8005dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005dcc <__ascii_mbtowc>:
 8005dcc:	b082      	sub	sp, #8
 8005dce:	b901      	cbnz	r1, 8005dd2 <__ascii_mbtowc+0x6>
 8005dd0:	a901      	add	r1, sp, #4
 8005dd2:	b142      	cbz	r2, 8005de6 <__ascii_mbtowc+0x1a>
 8005dd4:	b14b      	cbz	r3, 8005dea <__ascii_mbtowc+0x1e>
 8005dd6:	7813      	ldrb	r3, [r2, #0]
 8005dd8:	600b      	str	r3, [r1, #0]
 8005dda:	7812      	ldrb	r2, [r2, #0]
 8005ddc:	1e10      	subs	r0, r2, #0
 8005dde:	bf18      	it	ne
 8005de0:	2001      	movne	r0, #1
 8005de2:	b002      	add	sp, #8
 8005de4:	4770      	bx	lr
 8005de6:	4610      	mov	r0, r2
 8005de8:	e7fb      	b.n	8005de2 <__ascii_mbtowc+0x16>
 8005dea:	f06f 0001 	mvn.w	r0, #1
 8005dee:	e7f8      	b.n	8005de2 <__ascii_mbtowc+0x16>

08005df0 <_Balloc>:
 8005df0:	b570      	push	{r4, r5, r6, lr}
 8005df2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005df4:	4604      	mov	r4, r0
 8005df6:	460d      	mov	r5, r1
 8005df8:	b976      	cbnz	r6, 8005e18 <_Balloc+0x28>
 8005dfa:	2010      	movs	r0, #16
 8005dfc:	f000 fd84 	bl	8006908 <malloc>
 8005e00:	4602      	mov	r2, r0
 8005e02:	6260      	str	r0, [r4, #36]	; 0x24
 8005e04:	b920      	cbnz	r0, 8005e10 <_Balloc+0x20>
 8005e06:	4b18      	ldr	r3, [pc, #96]	; (8005e68 <_Balloc+0x78>)
 8005e08:	4818      	ldr	r0, [pc, #96]	; (8005e6c <_Balloc+0x7c>)
 8005e0a:	2166      	movs	r1, #102	; 0x66
 8005e0c:	f000 fd4c 	bl	80068a8 <__assert_func>
 8005e10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005e14:	6006      	str	r6, [r0, #0]
 8005e16:	60c6      	str	r6, [r0, #12]
 8005e18:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005e1a:	68f3      	ldr	r3, [r6, #12]
 8005e1c:	b183      	cbz	r3, 8005e40 <_Balloc+0x50>
 8005e1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e20:	68db      	ldr	r3, [r3, #12]
 8005e22:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005e26:	b9b8      	cbnz	r0, 8005e58 <_Balloc+0x68>
 8005e28:	2101      	movs	r1, #1
 8005e2a:	fa01 f605 	lsl.w	r6, r1, r5
 8005e2e:	1d72      	adds	r2, r6, #5
 8005e30:	0092      	lsls	r2, r2, #2
 8005e32:	4620      	mov	r0, r4
 8005e34:	f000 fc97 	bl	8006766 <_calloc_r>
 8005e38:	b160      	cbz	r0, 8005e54 <_Balloc+0x64>
 8005e3a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005e3e:	e00e      	b.n	8005e5e <_Balloc+0x6e>
 8005e40:	2221      	movs	r2, #33	; 0x21
 8005e42:	2104      	movs	r1, #4
 8005e44:	4620      	mov	r0, r4
 8005e46:	f000 fc8e 	bl	8006766 <_calloc_r>
 8005e4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e4c:	60f0      	str	r0, [r6, #12]
 8005e4e:	68db      	ldr	r3, [r3, #12]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d1e4      	bne.n	8005e1e <_Balloc+0x2e>
 8005e54:	2000      	movs	r0, #0
 8005e56:	bd70      	pop	{r4, r5, r6, pc}
 8005e58:	6802      	ldr	r2, [r0, #0]
 8005e5a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005e5e:	2300      	movs	r3, #0
 8005e60:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005e64:	e7f7      	b.n	8005e56 <_Balloc+0x66>
 8005e66:	bf00      	nop
 8005e68:	080079a0 	.word	0x080079a0
 8005e6c:	080079b7 	.word	0x080079b7

08005e70 <_Bfree>:
 8005e70:	b570      	push	{r4, r5, r6, lr}
 8005e72:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005e74:	4605      	mov	r5, r0
 8005e76:	460c      	mov	r4, r1
 8005e78:	b976      	cbnz	r6, 8005e98 <_Bfree+0x28>
 8005e7a:	2010      	movs	r0, #16
 8005e7c:	f000 fd44 	bl	8006908 <malloc>
 8005e80:	4602      	mov	r2, r0
 8005e82:	6268      	str	r0, [r5, #36]	; 0x24
 8005e84:	b920      	cbnz	r0, 8005e90 <_Bfree+0x20>
 8005e86:	4b09      	ldr	r3, [pc, #36]	; (8005eac <_Bfree+0x3c>)
 8005e88:	4809      	ldr	r0, [pc, #36]	; (8005eb0 <_Bfree+0x40>)
 8005e8a:	218a      	movs	r1, #138	; 0x8a
 8005e8c:	f000 fd0c 	bl	80068a8 <__assert_func>
 8005e90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005e94:	6006      	str	r6, [r0, #0]
 8005e96:	60c6      	str	r6, [r0, #12]
 8005e98:	b13c      	cbz	r4, 8005eaa <_Bfree+0x3a>
 8005e9a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005e9c:	6862      	ldr	r2, [r4, #4]
 8005e9e:	68db      	ldr	r3, [r3, #12]
 8005ea0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005ea4:	6021      	str	r1, [r4, #0]
 8005ea6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005eaa:	bd70      	pop	{r4, r5, r6, pc}
 8005eac:	080079a0 	.word	0x080079a0
 8005eb0:	080079b7 	.word	0x080079b7

08005eb4 <__multadd>:
 8005eb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005eb8:	690e      	ldr	r6, [r1, #16]
 8005eba:	4607      	mov	r7, r0
 8005ebc:	4698      	mov	r8, r3
 8005ebe:	460c      	mov	r4, r1
 8005ec0:	f101 0014 	add.w	r0, r1, #20
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	6805      	ldr	r5, [r0, #0]
 8005ec8:	b2a9      	uxth	r1, r5
 8005eca:	fb02 8101 	mla	r1, r2, r1, r8
 8005ece:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8005ed2:	0c2d      	lsrs	r5, r5, #16
 8005ed4:	fb02 c505 	mla	r5, r2, r5, ip
 8005ed8:	b289      	uxth	r1, r1
 8005eda:	3301      	adds	r3, #1
 8005edc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8005ee0:	429e      	cmp	r6, r3
 8005ee2:	f840 1b04 	str.w	r1, [r0], #4
 8005ee6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8005eea:	dcec      	bgt.n	8005ec6 <__multadd+0x12>
 8005eec:	f1b8 0f00 	cmp.w	r8, #0
 8005ef0:	d022      	beq.n	8005f38 <__multadd+0x84>
 8005ef2:	68a3      	ldr	r3, [r4, #8]
 8005ef4:	42b3      	cmp	r3, r6
 8005ef6:	dc19      	bgt.n	8005f2c <__multadd+0x78>
 8005ef8:	6861      	ldr	r1, [r4, #4]
 8005efa:	4638      	mov	r0, r7
 8005efc:	3101      	adds	r1, #1
 8005efe:	f7ff ff77 	bl	8005df0 <_Balloc>
 8005f02:	4605      	mov	r5, r0
 8005f04:	b928      	cbnz	r0, 8005f12 <__multadd+0x5e>
 8005f06:	4602      	mov	r2, r0
 8005f08:	4b0d      	ldr	r3, [pc, #52]	; (8005f40 <__multadd+0x8c>)
 8005f0a:	480e      	ldr	r0, [pc, #56]	; (8005f44 <__multadd+0x90>)
 8005f0c:	21b5      	movs	r1, #181	; 0xb5
 8005f0e:	f000 fccb 	bl	80068a8 <__assert_func>
 8005f12:	6922      	ldr	r2, [r4, #16]
 8005f14:	3202      	adds	r2, #2
 8005f16:	f104 010c 	add.w	r1, r4, #12
 8005f1a:	0092      	lsls	r2, r2, #2
 8005f1c:	300c      	adds	r0, #12
 8005f1e:	f7fe fd9b 	bl	8004a58 <memcpy>
 8005f22:	4621      	mov	r1, r4
 8005f24:	4638      	mov	r0, r7
 8005f26:	f7ff ffa3 	bl	8005e70 <_Bfree>
 8005f2a:	462c      	mov	r4, r5
 8005f2c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8005f30:	3601      	adds	r6, #1
 8005f32:	f8c3 8014 	str.w	r8, [r3, #20]
 8005f36:	6126      	str	r6, [r4, #16]
 8005f38:	4620      	mov	r0, r4
 8005f3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f3e:	bf00      	nop
 8005f40:	08007910 	.word	0x08007910
 8005f44:	080079b7 	.word	0x080079b7

08005f48 <__s2b>:
 8005f48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f4c:	460c      	mov	r4, r1
 8005f4e:	4615      	mov	r5, r2
 8005f50:	461f      	mov	r7, r3
 8005f52:	2209      	movs	r2, #9
 8005f54:	3308      	adds	r3, #8
 8005f56:	4606      	mov	r6, r0
 8005f58:	fb93 f3f2 	sdiv	r3, r3, r2
 8005f5c:	2100      	movs	r1, #0
 8005f5e:	2201      	movs	r2, #1
 8005f60:	429a      	cmp	r2, r3
 8005f62:	db09      	blt.n	8005f78 <__s2b+0x30>
 8005f64:	4630      	mov	r0, r6
 8005f66:	f7ff ff43 	bl	8005df0 <_Balloc>
 8005f6a:	b940      	cbnz	r0, 8005f7e <__s2b+0x36>
 8005f6c:	4602      	mov	r2, r0
 8005f6e:	4b19      	ldr	r3, [pc, #100]	; (8005fd4 <__s2b+0x8c>)
 8005f70:	4819      	ldr	r0, [pc, #100]	; (8005fd8 <__s2b+0x90>)
 8005f72:	21ce      	movs	r1, #206	; 0xce
 8005f74:	f000 fc98 	bl	80068a8 <__assert_func>
 8005f78:	0052      	lsls	r2, r2, #1
 8005f7a:	3101      	adds	r1, #1
 8005f7c:	e7f0      	b.n	8005f60 <__s2b+0x18>
 8005f7e:	9b08      	ldr	r3, [sp, #32]
 8005f80:	6143      	str	r3, [r0, #20]
 8005f82:	2d09      	cmp	r5, #9
 8005f84:	f04f 0301 	mov.w	r3, #1
 8005f88:	6103      	str	r3, [r0, #16]
 8005f8a:	dd16      	ble.n	8005fba <__s2b+0x72>
 8005f8c:	f104 0909 	add.w	r9, r4, #9
 8005f90:	46c8      	mov	r8, r9
 8005f92:	442c      	add	r4, r5
 8005f94:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005f98:	4601      	mov	r1, r0
 8005f9a:	3b30      	subs	r3, #48	; 0x30
 8005f9c:	220a      	movs	r2, #10
 8005f9e:	4630      	mov	r0, r6
 8005fa0:	f7ff ff88 	bl	8005eb4 <__multadd>
 8005fa4:	45a0      	cmp	r8, r4
 8005fa6:	d1f5      	bne.n	8005f94 <__s2b+0x4c>
 8005fa8:	f1a5 0408 	sub.w	r4, r5, #8
 8005fac:	444c      	add	r4, r9
 8005fae:	1b2d      	subs	r5, r5, r4
 8005fb0:	1963      	adds	r3, r4, r5
 8005fb2:	42bb      	cmp	r3, r7
 8005fb4:	db04      	blt.n	8005fc0 <__s2b+0x78>
 8005fb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fba:	340a      	adds	r4, #10
 8005fbc:	2509      	movs	r5, #9
 8005fbe:	e7f6      	b.n	8005fae <__s2b+0x66>
 8005fc0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005fc4:	4601      	mov	r1, r0
 8005fc6:	3b30      	subs	r3, #48	; 0x30
 8005fc8:	220a      	movs	r2, #10
 8005fca:	4630      	mov	r0, r6
 8005fcc:	f7ff ff72 	bl	8005eb4 <__multadd>
 8005fd0:	e7ee      	b.n	8005fb0 <__s2b+0x68>
 8005fd2:	bf00      	nop
 8005fd4:	08007910 	.word	0x08007910
 8005fd8:	080079b7 	.word	0x080079b7

08005fdc <__hi0bits>:
 8005fdc:	0c03      	lsrs	r3, r0, #16
 8005fde:	041b      	lsls	r3, r3, #16
 8005fe0:	b9d3      	cbnz	r3, 8006018 <__hi0bits+0x3c>
 8005fe2:	0400      	lsls	r0, r0, #16
 8005fe4:	2310      	movs	r3, #16
 8005fe6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005fea:	bf04      	itt	eq
 8005fec:	0200      	lsleq	r0, r0, #8
 8005fee:	3308      	addeq	r3, #8
 8005ff0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005ff4:	bf04      	itt	eq
 8005ff6:	0100      	lsleq	r0, r0, #4
 8005ff8:	3304      	addeq	r3, #4
 8005ffa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005ffe:	bf04      	itt	eq
 8006000:	0080      	lsleq	r0, r0, #2
 8006002:	3302      	addeq	r3, #2
 8006004:	2800      	cmp	r0, #0
 8006006:	db05      	blt.n	8006014 <__hi0bits+0x38>
 8006008:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800600c:	f103 0301 	add.w	r3, r3, #1
 8006010:	bf08      	it	eq
 8006012:	2320      	moveq	r3, #32
 8006014:	4618      	mov	r0, r3
 8006016:	4770      	bx	lr
 8006018:	2300      	movs	r3, #0
 800601a:	e7e4      	b.n	8005fe6 <__hi0bits+0xa>

0800601c <__lo0bits>:
 800601c:	6803      	ldr	r3, [r0, #0]
 800601e:	f013 0207 	ands.w	r2, r3, #7
 8006022:	4601      	mov	r1, r0
 8006024:	d00b      	beq.n	800603e <__lo0bits+0x22>
 8006026:	07da      	lsls	r2, r3, #31
 8006028:	d424      	bmi.n	8006074 <__lo0bits+0x58>
 800602a:	0798      	lsls	r0, r3, #30
 800602c:	bf49      	itett	mi
 800602e:	085b      	lsrmi	r3, r3, #1
 8006030:	089b      	lsrpl	r3, r3, #2
 8006032:	2001      	movmi	r0, #1
 8006034:	600b      	strmi	r3, [r1, #0]
 8006036:	bf5c      	itt	pl
 8006038:	600b      	strpl	r3, [r1, #0]
 800603a:	2002      	movpl	r0, #2
 800603c:	4770      	bx	lr
 800603e:	b298      	uxth	r0, r3
 8006040:	b9b0      	cbnz	r0, 8006070 <__lo0bits+0x54>
 8006042:	0c1b      	lsrs	r3, r3, #16
 8006044:	2010      	movs	r0, #16
 8006046:	f013 0fff 	tst.w	r3, #255	; 0xff
 800604a:	bf04      	itt	eq
 800604c:	0a1b      	lsreq	r3, r3, #8
 800604e:	3008      	addeq	r0, #8
 8006050:	071a      	lsls	r2, r3, #28
 8006052:	bf04      	itt	eq
 8006054:	091b      	lsreq	r3, r3, #4
 8006056:	3004      	addeq	r0, #4
 8006058:	079a      	lsls	r2, r3, #30
 800605a:	bf04      	itt	eq
 800605c:	089b      	lsreq	r3, r3, #2
 800605e:	3002      	addeq	r0, #2
 8006060:	07da      	lsls	r2, r3, #31
 8006062:	d403      	bmi.n	800606c <__lo0bits+0x50>
 8006064:	085b      	lsrs	r3, r3, #1
 8006066:	f100 0001 	add.w	r0, r0, #1
 800606a:	d005      	beq.n	8006078 <__lo0bits+0x5c>
 800606c:	600b      	str	r3, [r1, #0]
 800606e:	4770      	bx	lr
 8006070:	4610      	mov	r0, r2
 8006072:	e7e8      	b.n	8006046 <__lo0bits+0x2a>
 8006074:	2000      	movs	r0, #0
 8006076:	4770      	bx	lr
 8006078:	2020      	movs	r0, #32
 800607a:	4770      	bx	lr

0800607c <__i2b>:
 800607c:	b510      	push	{r4, lr}
 800607e:	460c      	mov	r4, r1
 8006080:	2101      	movs	r1, #1
 8006082:	f7ff feb5 	bl	8005df0 <_Balloc>
 8006086:	4602      	mov	r2, r0
 8006088:	b928      	cbnz	r0, 8006096 <__i2b+0x1a>
 800608a:	4b05      	ldr	r3, [pc, #20]	; (80060a0 <__i2b+0x24>)
 800608c:	4805      	ldr	r0, [pc, #20]	; (80060a4 <__i2b+0x28>)
 800608e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006092:	f000 fc09 	bl	80068a8 <__assert_func>
 8006096:	2301      	movs	r3, #1
 8006098:	6144      	str	r4, [r0, #20]
 800609a:	6103      	str	r3, [r0, #16]
 800609c:	bd10      	pop	{r4, pc}
 800609e:	bf00      	nop
 80060a0:	08007910 	.word	0x08007910
 80060a4:	080079b7 	.word	0x080079b7

080060a8 <__multiply>:
 80060a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060ac:	4614      	mov	r4, r2
 80060ae:	690a      	ldr	r2, [r1, #16]
 80060b0:	6923      	ldr	r3, [r4, #16]
 80060b2:	429a      	cmp	r2, r3
 80060b4:	bfb8      	it	lt
 80060b6:	460b      	movlt	r3, r1
 80060b8:	460d      	mov	r5, r1
 80060ba:	bfbc      	itt	lt
 80060bc:	4625      	movlt	r5, r4
 80060be:	461c      	movlt	r4, r3
 80060c0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80060c4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80060c8:	68ab      	ldr	r3, [r5, #8]
 80060ca:	6869      	ldr	r1, [r5, #4]
 80060cc:	eb0a 0709 	add.w	r7, sl, r9
 80060d0:	42bb      	cmp	r3, r7
 80060d2:	b085      	sub	sp, #20
 80060d4:	bfb8      	it	lt
 80060d6:	3101      	addlt	r1, #1
 80060d8:	f7ff fe8a 	bl	8005df0 <_Balloc>
 80060dc:	b930      	cbnz	r0, 80060ec <__multiply+0x44>
 80060de:	4602      	mov	r2, r0
 80060e0:	4b42      	ldr	r3, [pc, #264]	; (80061ec <__multiply+0x144>)
 80060e2:	4843      	ldr	r0, [pc, #268]	; (80061f0 <__multiply+0x148>)
 80060e4:	f240 115d 	movw	r1, #349	; 0x15d
 80060e8:	f000 fbde 	bl	80068a8 <__assert_func>
 80060ec:	f100 0614 	add.w	r6, r0, #20
 80060f0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80060f4:	4633      	mov	r3, r6
 80060f6:	2200      	movs	r2, #0
 80060f8:	4543      	cmp	r3, r8
 80060fa:	d31e      	bcc.n	800613a <__multiply+0x92>
 80060fc:	f105 0c14 	add.w	ip, r5, #20
 8006100:	f104 0314 	add.w	r3, r4, #20
 8006104:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8006108:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800610c:	9202      	str	r2, [sp, #8]
 800610e:	ebac 0205 	sub.w	r2, ip, r5
 8006112:	3a15      	subs	r2, #21
 8006114:	f022 0203 	bic.w	r2, r2, #3
 8006118:	3204      	adds	r2, #4
 800611a:	f105 0115 	add.w	r1, r5, #21
 800611e:	458c      	cmp	ip, r1
 8006120:	bf38      	it	cc
 8006122:	2204      	movcc	r2, #4
 8006124:	9201      	str	r2, [sp, #4]
 8006126:	9a02      	ldr	r2, [sp, #8]
 8006128:	9303      	str	r3, [sp, #12]
 800612a:	429a      	cmp	r2, r3
 800612c:	d808      	bhi.n	8006140 <__multiply+0x98>
 800612e:	2f00      	cmp	r7, #0
 8006130:	dc55      	bgt.n	80061de <__multiply+0x136>
 8006132:	6107      	str	r7, [r0, #16]
 8006134:	b005      	add	sp, #20
 8006136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800613a:	f843 2b04 	str.w	r2, [r3], #4
 800613e:	e7db      	b.n	80060f8 <__multiply+0x50>
 8006140:	f8b3 a000 	ldrh.w	sl, [r3]
 8006144:	f1ba 0f00 	cmp.w	sl, #0
 8006148:	d020      	beq.n	800618c <__multiply+0xe4>
 800614a:	f105 0e14 	add.w	lr, r5, #20
 800614e:	46b1      	mov	r9, r6
 8006150:	2200      	movs	r2, #0
 8006152:	f85e 4b04 	ldr.w	r4, [lr], #4
 8006156:	f8d9 b000 	ldr.w	fp, [r9]
 800615a:	b2a1      	uxth	r1, r4
 800615c:	fa1f fb8b 	uxth.w	fp, fp
 8006160:	fb0a b101 	mla	r1, sl, r1, fp
 8006164:	4411      	add	r1, r2
 8006166:	f8d9 2000 	ldr.w	r2, [r9]
 800616a:	0c24      	lsrs	r4, r4, #16
 800616c:	0c12      	lsrs	r2, r2, #16
 800616e:	fb0a 2404 	mla	r4, sl, r4, r2
 8006172:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8006176:	b289      	uxth	r1, r1
 8006178:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800617c:	45f4      	cmp	ip, lr
 800617e:	f849 1b04 	str.w	r1, [r9], #4
 8006182:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8006186:	d8e4      	bhi.n	8006152 <__multiply+0xaa>
 8006188:	9901      	ldr	r1, [sp, #4]
 800618a:	5072      	str	r2, [r6, r1]
 800618c:	9a03      	ldr	r2, [sp, #12]
 800618e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006192:	3304      	adds	r3, #4
 8006194:	f1b9 0f00 	cmp.w	r9, #0
 8006198:	d01f      	beq.n	80061da <__multiply+0x132>
 800619a:	6834      	ldr	r4, [r6, #0]
 800619c:	f105 0114 	add.w	r1, r5, #20
 80061a0:	46b6      	mov	lr, r6
 80061a2:	f04f 0a00 	mov.w	sl, #0
 80061a6:	880a      	ldrh	r2, [r1, #0]
 80061a8:	f8be b002 	ldrh.w	fp, [lr, #2]
 80061ac:	fb09 b202 	mla	r2, r9, r2, fp
 80061b0:	4492      	add	sl, r2
 80061b2:	b2a4      	uxth	r4, r4
 80061b4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80061b8:	f84e 4b04 	str.w	r4, [lr], #4
 80061bc:	f851 4b04 	ldr.w	r4, [r1], #4
 80061c0:	f8be 2000 	ldrh.w	r2, [lr]
 80061c4:	0c24      	lsrs	r4, r4, #16
 80061c6:	fb09 2404 	mla	r4, r9, r4, r2
 80061ca:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80061ce:	458c      	cmp	ip, r1
 80061d0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80061d4:	d8e7      	bhi.n	80061a6 <__multiply+0xfe>
 80061d6:	9a01      	ldr	r2, [sp, #4]
 80061d8:	50b4      	str	r4, [r6, r2]
 80061da:	3604      	adds	r6, #4
 80061dc:	e7a3      	b.n	8006126 <__multiply+0x7e>
 80061de:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d1a5      	bne.n	8006132 <__multiply+0x8a>
 80061e6:	3f01      	subs	r7, #1
 80061e8:	e7a1      	b.n	800612e <__multiply+0x86>
 80061ea:	bf00      	nop
 80061ec:	08007910 	.word	0x08007910
 80061f0:	080079b7 	.word	0x080079b7

080061f4 <__pow5mult>:
 80061f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061f8:	4615      	mov	r5, r2
 80061fa:	f012 0203 	ands.w	r2, r2, #3
 80061fe:	4606      	mov	r6, r0
 8006200:	460f      	mov	r7, r1
 8006202:	d007      	beq.n	8006214 <__pow5mult+0x20>
 8006204:	4c25      	ldr	r4, [pc, #148]	; (800629c <__pow5mult+0xa8>)
 8006206:	3a01      	subs	r2, #1
 8006208:	2300      	movs	r3, #0
 800620a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800620e:	f7ff fe51 	bl	8005eb4 <__multadd>
 8006212:	4607      	mov	r7, r0
 8006214:	10ad      	asrs	r5, r5, #2
 8006216:	d03d      	beq.n	8006294 <__pow5mult+0xa0>
 8006218:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800621a:	b97c      	cbnz	r4, 800623c <__pow5mult+0x48>
 800621c:	2010      	movs	r0, #16
 800621e:	f000 fb73 	bl	8006908 <malloc>
 8006222:	4602      	mov	r2, r0
 8006224:	6270      	str	r0, [r6, #36]	; 0x24
 8006226:	b928      	cbnz	r0, 8006234 <__pow5mult+0x40>
 8006228:	4b1d      	ldr	r3, [pc, #116]	; (80062a0 <__pow5mult+0xac>)
 800622a:	481e      	ldr	r0, [pc, #120]	; (80062a4 <__pow5mult+0xb0>)
 800622c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006230:	f000 fb3a 	bl	80068a8 <__assert_func>
 8006234:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006238:	6004      	str	r4, [r0, #0]
 800623a:	60c4      	str	r4, [r0, #12]
 800623c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006240:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006244:	b94c      	cbnz	r4, 800625a <__pow5mult+0x66>
 8006246:	f240 2171 	movw	r1, #625	; 0x271
 800624a:	4630      	mov	r0, r6
 800624c:	f7ff ff16 	bl	800607c <__i2b>
 8006250:	2300      	movs	r3, #0
 8006252:	f8c8 0008 	str.w	r0, [r8, #8]
 8006256:	4604      	mov	r4, r0
 8006258:	6003      	str	r3, [r0, #0]
 800625a:	f04f 0900 	mov.w	r9, #0
 800625e:	07eb      	lsls	r3, r5, #31
 8006260:	d50a      	bpl.n	8006278 <__pow5mult+0x84>
 8006262:	4639      	mov	r1, r7
 8006264:	4622      	mov	r2, r4
 8006266:	4630      	mov	r0, r6
 8006268:	f7ff ff1e 	bl	80060a8 <__multiply>
 800626c:	4639      	mov	r1, r7
 800626e:	4680      	mov	r8, r0
 8006270:	4630      	mov	r0, r6
 8006272:	f7ff fdfd 	bl	8005e70 <_Bfree>
 8006276:	4647      	mov	r7, r8
 8006278:	106d      	asrs	r5, r5, #1
 800627a:	d00b      	beq.n	8006294 <__pow5mult+0xa0>
 800627c:	6820      	ldr	r0, [r4, #0]
 800627e:	b938      	cbnz	r0, 8006290 <__pow5mult+0x9c>
 8006280:	4622      	mov	r2, r4
 8006282:	4621      	mov	r1, r4
 8006284:	4630      	mov	r0, r6
 8006286:	f7ff ff0f 	bl	80060a8 <__multiply>
 800628a:	6020      	str	r0, [r4, #0]
 800628c:	f8c0 9000 	str.w	r9, [r0]
 8006290:	4604      	mov	r4, r0
 8006292:	e7e4      	b.n	800625e <__pow5mult+0x6a>
 8006294:	4638      	mov	r0, r7
 8006296:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800629a:	bf00      	nop
 800629c:	08007b08 	.word	0x08007b08
 80062a0:	080079a0 	.word	0x080079a0
 80062a4:	080079b7 	.word	0x080079b7

080062a8 <__lshift>:
 80062a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062ac:	460c      	mov	r4, r1
 80062ae:	6849      	ldr	r1, [r1, #4]
 80062b0:	6923      	ldr	r3, [r4, #16]
 80062b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80062b6:	68a3      	ldr	r3, [r4, #8]
 80062b8:	4607      	mov	r7, r0
 80062ba:	4691      	mov	r9, r2
 80062bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80062c0:	f108 0601 	add.w	r6, r8, #1
 80062c4:	42b3      	cmp	r3, r6
 80062c6:	db0b      	blt.n	80062e0 <__lshift+0x38>
 80062c8:	4638      	mov	r0, r7
 80062ca:	f7ff fd91 	bl	8005df0 <_Balloc>
 80062ce:	4605      	mov	r5, r0
 80062d0:	b948      	cbnz	r0, 80062e6 <__lshift+0x3e>
 80062d2:	4602      	mov	r2, r0
 80062d4:	4b28      	ldr	r3, [pc, #160]	; (8006378 <__lshift+0xd0>)
 80062d6:	4829      	ldr	r0, [pc, #164]	; (800637c <__lshift+0xd4>)
 80062d8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80062dc:	f000 fae4 	bl	80068a8 <__assert_func>
 80062e0:	3101      	adds	r1, #1
 80062e2:	005b      	lsls	r3, r3, #1
 80062e4:	e7ee      	b.n	80062c4 <__lshift+0x1c>
 80062e6:	2300      	movs	r3, #0
 80062e8:	f100 0114 	add.w	r1, r0, #20
 80062ec:	f100 0210 	add.w	r2, r0, #16
 80062f0:	4618      	mov	r0, r3
 80062f2:	4553      	cmp	r3, sl
 80062f4:	db33      	blt.n	800635e <__lshift+0xb6>
 80062f6:	6920      	ldr	r0, [r4, #16]
 80062f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80062fc:	f104 0314 	add.w	r3, r4, #20
 8006300:	f019 091f 	ands.w	r9, r9, #31
 8006304:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006308:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800630c:	d02b      	beq.n	8006366 <__lshift+0xbe>
 800630e:	f1c9 0e20 	rsb	lr, r9, #32
 8006312:	468a      	mov	sl, r1
 8006314:	2200      	movs	r2, #0
 8006316:	6818      	ldr	r0, [r3, #0]
 8006318:	fa00 f009 	lsl.w	r0, r0, r9
 800631c:	4302      	orrs	r2, r0
 800631e:	f84a 2b04 	str.w	r2, [sl], #4
 8006322:	f853 2b04 	ldr.w	r2, [r3], #4
 8006326:	459c      	cmp	ip, r3
 8006328:	fa22 f20e 	lsr.w	r2, r2, lr
 800632c:	d8f3      	bhi.n	8006316 <__lshift+0x6e>
 800632e:	ebac 0304 	sub.w	r3, ip, r4
 8006332:	3b15      	subs	r3, #21
 8006334:	f023 0303 	bic.w	r3, r3, #3
 8006338:	3304      	adds	r3, #4
 800633a:	f104 0015 	add.w	r0, r4, #21
 800633e:	4584      	cmp	ip, r0
 8006340:	bf38      	it	cc
 8006342:	2304      	movcc	r3, #4
 8006344:	50ca      	str	r2, [r1, r3]
 8006346:	b10a      	cbz	r2, 800634c <__lshift+0xa4>
 8006348:	f108 0602 	add.w	r6, r8, #2
 800634c:	3e01      	subs	r6, #1
 800634e:	4638      	mov	r0, r7
 8006350:	612e      	str	r6, [r5, #16]
 8006352:	4621      	mov	r1, r4
 8006354:	f7ff fd8c 	bl	8005e70 <_Bfree>
 8006358:	4628      	mov	r0, r5
 800635a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800635e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006362:	3301      	adds	r3, #1
 8006364:	e7c5      	b.n	80062f2 <__lshift+0x4a>
 8006366:	3904      	subs	r1, #4
 8006368:	f853 2b04 	ldr.w	r2, [r3], #4
 800636c:	f841 2f04 	str.w	r2, [r1, #4]!
 8006370:	459c      	cmp	ip, r3
 8006372:	d8f9      	bhi.n	8006368 <__lshift+0xc0>
 8006374:	e7ea      	b.n	800634c <__lshift+0xa4>
 8006376:	bf00      	nop
 8006378:	08007910 	.word	0x08007910
 800637c:	080079b7 	.word	0x080079b7

08006380 <__mcmp>:
 8006380:	b530      	push	{r4, r5, lr}
 8006382:	6902      	ldr	r2, [r0, #16]
 8006384:	690c      	ldr	r4, [r1, #16]
 8006386:	1b12      	subs	r2, r2, r4
 8006388:	d10e      	bne.n	80063a8 <__mcmp+0x28>
 800638a:	f100 0314 	add.w	r3, r0, #20
 800638e:	3114      	adds	r1, #20
 8006390:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006394:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006398:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800639c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80063a0:	42a5      	cmp	r5, r4
 80063a2:	d003      	beq.n	80063ac <__mcmp+0x2c>
 80063a4:	d305      	bcc.n	80063b2 <__mcmp+0x32>
 80063a6:	2201      	movs	r2, #1
 80063a8:	4610      	mov	r0, r2
 80063aa:	bd30      	pop	{r4, r5, pc}
 80063ac:	4283      	cmp	r3, r0
 80063ae:	d3f3      	bcc.n	8006398 <__mcmp+0x18>
 80063b0:	e7fa      	b.n	80063a8 <__mcmp+0x28>
 80063b2:	f04f 32ff 	mov.w	r2, #4294967295
 80063b6:	e7f7      	b.n	80063a8 <__mcmp+0x28>

080063b8 <__mdiff>:
 80063b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063bc:	460c      	mov	r4, r1
 80063be:	4606      	mov	r6, r0
 80063c0:	4611      	mov	r1, r2
 80063c2:	4620      	mov	r0, r4
 80063c4:	4617      	mov	r7, r2
 80063c6:	f7ff ffdb 	bl	8006380 <__mcmp>
 80063ca:	1e05      	subs	r5, r0, #0
 80063cc:	d110      	bne.n	80063f0 <__mdiff+0x38>
 80063ce:	4629      	mov	r1, r5
 80063d0:	4630      	mov	r0, r6
 80063d2:	f7ff fd0d 	bl	8005df0 <_Balloc>
 80063d6:	b930      	cbnz	r0, 80063e6 <__mdiff+0x2e>
 80063d8:	4b39      	ldr	r3, [pc, #228]	; (80064c0 <__mdiff+0x108>)
 80063da:	4602      	mov	r2, r0
 80063dc:	f240 2132 	movw	r1, #562	; 0x232
 80063e0:	4838      	ldr	r0, [pc, #224]	; (80064c4 <__mdiff+0x10c>)
 80063e2:	f000 fa61 	bl	80068a8 <__assert_func>
 80063e6:	2301      	movs	r3, #1
 80063e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80063ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063f0:	bfa4      	itt	ge
 80063f2:	463b      	movge	r3, r7
 80063f4:	4627      	movge	r7, r4
 80063f6:	4630      	mov	r0, r6
 80063f8:	6879      	ldr	r1, [r7, #4]
 80063fa:	bfa6      	itte	ge
 80063fc:	461c      	movge	r4, r3
 80063fe:	2500      	movge	r5, #0
 8006400:	2501      	movlt	r5, #1
 8006402:	f7ff fcf5 	bl	8005df0 <_Balloc>
 8006406:	b920      	cbnz	r0, 8006412 <__mdiff+0x5a>
 8006408:	4b2d      	ldr	r3, [pc, #180]	; (80064c0 <__mdiff+0x108>)
 800640a:	4602      	mov	r2, r0
 800640c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006410:	e7e6      	b.n	80063e0 <__mdiff+0x28>
 8006412:	693e      	ldr	r6, [r7, #16]
 8006414:	60c5      	str	r5, [r0, #12]
 8006416:	6925      	ldr	r5, [r4, #16]
 8006418:	f107 0114 	add.w	r1, r7, #20
 800641c:	f104 0914 	add.w	r9, r4, #20
 8006420:	f100 0e14 	add.w	lr, r0, #20
 8006424:	f107 0210 	add.w	r2, r7, #16
 8006428:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800642c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8006430:	46f2      	mov	sl, lr
 8006432:	2700      	movs	r7, #0
 8006434:	f859 3b04 	ldr.w	r3, [r9], #4
 8006438:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800643c:	fa1f f883 	uxth.w	r8, r3
 8006440:	fa17 f78b 	uxtah	r7, r7, fp
 8006444:	0c1b      	lsrs	r3, r3, #16
 8006446:	eba7 0808 	sub.w	r8, r7, r8
 800644a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800644e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006452:	fa1f f888 	uxth.w	r8, r8
 8006456:	141f      	asrs	r7, r3, #16
 8006458:	454d      	cmp	r5, r9
 800645a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800645e:	f84a 3b04 	str.w	r3, [sl], #4
 8006462:	d8e7      	bhi.n	8006434 <__mdiff+0x7c>
 8006464:	1b2b      	subs	r3, r5, r4
 8006466:	3b15      	subs	r3, #21
 8006468:	f023 0303 	bic.w	r3, r3, #3
 800646c:	3304      	adds	r3, #4
 800646e:	3415      	adds	r4, #21
 8006470:	42a5      	cmp	r5, r4
 8006472:	bf38      	it	cc
 8006474:	2304      	movcc	r3, #4
 8006476:	4419      	add	r1, r3
 8006478:	4473      	add	r3, lr
 800647a:	469e      	mov	lr, r3
 800647c:	460d      	mov	r5, r1
 800647e:	4565      	cmp	r5, ip
 8006480:	d30e      	bcc.n	80064a0 <__mdiff+0xe8>
 8006482:	f10c 0203 	add.w	r2, ip, #3
 8006486:	1a52      	subs	r2, r2, r1
 8006488:	f022 0203 	bic.w	r2, r2, #3
 800648c:	3903      	subs	r1, #3
 800648e:	458c      	cmp	ip, r1
 8006490:	bf38      	it	cc
 8006492:	2200      	movcc	r2, #0
 8006494:	441a      	add	r2, r3
 8006496:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800649a:	b17b      	cbz	r3, 80064bc <__mdiff+0x104>
 800649c:	6106      	str	r6, [r0, #16]
 800649e:	e7a5      	b.n	80063ec <__mdiff+0x34>
 80064a0:	f855 8b04 	ldr.w	r8, [r5], #4
 80064a4:	fa17 f488 	uxtah	r4, r7, r8
 80064a8:	1422      	asrs	r2, r4, #16
 80064aa:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80064ae:	b2a4      	uxth	r4, r4
 80064b0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80064b4:	f84e 4b04 	str.w	r4, [lr], #4
 80064b8:	1417      	asrs	r7, r2, #16
 80064ba:	e7e0      	b.n	800647e <__mdiff+0xc6>
 80064bc:	3e01      	subs	r6, #1
 80064be:	e7ea      	b.n	8006496 <__mdiff+0xde>
 80064c0:	08007910 	.word	0x08007910
 80064c4:	080079b7 	.word	0x080079b7

080064c8 <__ulp>:
 80064c8:	b082      	sub	sp, #8
 80064ca:	ed8d 0b00 	vstr	d0, [sp]
 80064ce:	9b01      	ldr	r3, [sp, #4]
 80064d0:	4912      	ldr	r1, [pc, #72]	; (800651c <__ulp+0x54>)
 80064d2:	4019      	ands	r1, r3
 80064d4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80064d8:	2900      	cmp	r1, #0
 80064da:	dd05      	ble.n	80064e8 <__ulp+0x20>
 80064dc:	2200      	movs	r2, #0
 80064de:	460b      	mov	r3, r1
 80064e0:	ec43 2b10 	vmov	d0, r2, r3
 80064e4:	b002      	add	sp, #8
 80064e6:	4770      	bx	lr
 80064e8:	4249      	negs	r1, r1
 80064ea:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80064ee:	ea4f 5021 	mov.w	r0, r1, asr #20
 80064f2:	f04f 0200 	mov.w	r2, #0
 80064f6:	f04f 0300 	mov.w	r3, #0
 80064fa:	da04      	bge.n	8006506 <__ulp+0x3e>
 80064fc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8006500:	fa41 f300 	asr.w	r3, r1, r0
 8006504:	e7ec      	b.n	80064e0 <__ulp+0x18>
 8006506:	f1a0 0114 	sub.w	r1, r0, #20
 800650a:	291e      	cmp	r1, #30
 800650c:	bfda      	itte	le
 800650e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8006512:	fa20 f101 	lsrle.w	r1, r0, r1
 8006516:	2101      	movgt	r1, #1
 8006518:	460a      	mov	r2, r1
 800651a:	e7e1      	b.n	80064e0 <__ulp+0x18>
 800651c:	7ff00000 	.word	0x7ff00000

08006520 <__b2d>:
 8006520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006522:	6905      	ldr	r5, [r0, #16]
 8006524:	f100 0714 	add.w	r7, r0, #20
 8006528:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800652c:	1f2e      	subs	r6, r5, #4
 800652e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8006532:	4620      	mov	r0, r4
 8006534:	f7ff fd52 	bl	8005fdc <__hi0bits>
 8006538:	f1c0 0320 	rsb	r3, r0, #32
 800653c:	280a      	cmp	r0, #10
 800653e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80065bc <__b2d+0x9c>
 8006542:	600b      	str	r3, [r1, #0]
 8006544:	dc14      	bgt.n	8006570 <__b2d+0x50>
 8006546:	f1c0 0e0b 	rsb	lr, r0, #11
 800654a:	fa24 f10e 	lsr.w	r1, r4, lr
 800654e:	42b7      	cmp	r7, r6
 8006550:	ea41 030c 	orr.w	r3, r1, ip
 8006554:	bf34      	ite	cc
 8006556:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800655a:	2100      	movcs	r1, #0
 800655c:	3015      	adds	r0, #21
 800655e:	fa04 f000 	lsl.w	r0, r4, r0
 8006562:	fa21 f10e 	lsr.w	r1, r1, lr
 8006566:	ea40 0201 	orr.w	r2, r0, r1
 800656a:	ec43 2b10 	vmov	d0, r2, r3
 800656e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006570:	42b7      	cmp	r7, r6
 8006572:	bf3a      	itte	cc
 8006574:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8006578:	f1a5 0608 	subcc.w	r6, r5, #8
 800657c:	2100      	movcs	r1, #0
 800657e:	380b      	subs	r0, #11
 8006580:	d017      	beq.n	80065b2 <__b2d+0x92>
 8006582:	f1c0 0c20 	rsb	ip, r0, #32
 8006586:	fa04 f500 	lsl.w	r5, r4, r0
 800658a:	42be      	cmp	r6, r7
 800658c:	fa21 f40c 	lsr.w	r4, r1, ip
 8006590:	ea45 0504 	orr.w	r5, r5, r4
 8006594:	bf8c      	ite	hi
 8006596:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800659a:	2400      	movls	r4, #0
 800659c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80065a0:	fa01 f000 	lsl.w	r0, r1, r0
 80065a4:	fa24 f40c 	lsr.w	r4, r4, ip
 80065a8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80065ac:	ea40 0204 	orr.w	r2, r0, r4
 80065b0:	e7db      	b.n	800656a <__b2d+0x4a>
 80065b2:	ea44 030c 	orr.w	r3, r4, ip
 80065b6:	460a      	mov	r2, r1
 80065b8:	e7d7      	b.n	800656a <__b2d+0x4a>
 80065ba:	bf00      	nop
 80065bc:	3ff00000 	.word	0x3ff00000

080065c0 <__d2b>:
 80065c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80065c4:	4689      	mov	r9, r1
 80065c6:	2101      	movs	r1, #1
 80065c8:	ec57 6b10 	vmov	r6, r7, d0
 80065cc:	4690      	mov	r8, r2
 80065ce:	f7ff fc0f 	bl	8005df0 <_Balloc>
 80065d2:	4604      	mov	r4, r0
 80065d4:	b930      	cbnz	r0, 80065e4 <__d2b+0x24>
 80065d6:	4602      	mov	r2, r0
 80065d8:	4b25      	ldr	r3, [pc, #148]	; (8006670 <__d2b+0xb0>)
 80065da:	4826      	ldr	r0, [pc, #152]	; (8006674 <__d2b+0xb4>)
 80065dc:	f240 310a 	movw	r1, #778	; 0x30a
 80065e0:	f000 f962 	bl	80068a8 <__assert_func>
 80065e4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80065e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80065ec:	bb35      	cbnz	r5, 800663c <__d2b+0x7c>
 80065ee:	2e00      	cmp	r6, #0
 80065f0:	9301      	str	r3, [sp, #4]
 80065f2:	d028      	beq.n	8006646 <__d2b+0x86>
 80065f4:	4668      	mov	r0, sp
 80065f6:	9600      	str	r6, [sp, #0]
 80065f8:	f7ff fd10 	bl	800601c <__lo0bits>
 80065fc:	9900      	ldr	r1, [sp, #0]
 80065fe:	b300      	cbz	r0, 8006642 <__d2b+0x82>
 8006600:	9a01      	ldr	r2, [sp, #4]
 8006602:	f1c0 0320 	rsb	r3, r0, #32
 8006606:	fa02 f303 	lsl.w	r3, r2, r3
 800660a:	430b      	orrs	r3, r1
 800660c:	40c2      	lsrs	r2, r0
 800660e:	6163      	str	r3, [r4, #20]
 8006610:	9201      	str	r2, [sp, #4]
 8006612:	9b01      	ldr	r3, [sp, #4]
 8006614:	61a3      	str	r3, [r4, #24]
 8006616:	2b00      	cmp	r3, #0
 8006618:	bf14      	ite	ne
 800661a:	2202      	movne	r2, #2
 800661c:	2201      	moveq	r2, #1
 800661e:	6122      	str	r2, [r4, #16]
 8006620:	b1d5      	cbz	r5, 8006658 <__d2b+0x98>
 8006622:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006626:	4405      	add	r5, r0
 8006628:	f8c9 5000 	str.w	r5, [r9]
 800662c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006630:	f8c8 0000 	str.w	r0, [r8]
 8006634:	4620      	mov	r0, r4
 8006636:	b003      	add	sp, #12
 8006638:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800663c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006640:	e7d5      	b.n	80065ee <__d2b+0x2e>
 8006642:	6161      	str	r1, [r4, #20]
 8006644:	e7e5      	b.n	8006612 <__d2b+0x52>
 8006646:	a801      	add	r0, sp, #4
 8006648:	f7ff fce8 	bl	800601c <__lo0bits>
 800664c:	9b01      	ldr	r3, [sp, #4]
 800664e:	6163      	str	r3, [r4, #20]
 8006650:	2201      	movs	r2, #1
 8006652:	6122      	str	r2, [r4, #16]
 8006654:	3020      	adds	r0, #32
 8006656:	e7e3      	b.n	8006620 <__d2b+0x60>
 8006658:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800665c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006660:	f8c9 0000 	str.w	r0, [r9]
 8006664:	6918      	ldr	r0, [r3, #16]
 8006666:	f7ff fcb9 	bl	8005fdc <__hi0bits>
 800666a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800666e:	e7df      	b.n	8006630 <__d2b+0x70>
 8006670:	08007910 	.word	0x08007910
 8006674:	080079b7 	.word	0x080079b7

08006678 <__ratio>:
 8006678:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800667c:	4688      	mov	r8, r1
 800667e:	4669      	mov	r1, sp
 8006680:	4681      	mov	r9, r0
 8006682:	f7ff ff4d 	bl	8006520 <__b2d>
 8006686:	a901      	add	r1, sp, #4
 8006688:	4640      	mov	r0, r8
 800668a:	ec55 4b10 	vmov	r4, r5, d0
 800668e:	f7ff ff47 	bl	8006520 <__b2d>
 8006692:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006696:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800669a:	eba3 0c02 	sub.w	ip, r3, r2
 800669e:	e9dd 3200 	ldrd	r3, r2, [sp]
 80066a2:	1a9b      	subs	r3, r3, r2
 80066a4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80066a8:	ec51 0b10 	vmov	r0, r1, d0
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	bfd6      	itet	le
 80066b0:	460a      	movle	r2, r1
 80066b2:	462a      	movgt	r2, r5
 80066b4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80066b8:	468b      	mov	fp, r1
 80066ba:	462f      	mov	r7, r5
 80066bc:	bfd4      	ite	le
 80066be:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80066c2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80066c6:	4620      	mov	r0, r4
 80066c8:	ee10 2a10 	vmov	r2, s0
 80066cc:	465b      	mov	r3, fp
 80066ce:	4639      	mov	r1, r7
 80066d0:	f7fa f8bc 	bl	800084c <__aeabi_ddiv>
 80066d4:	ec41 0b10 	vmov	d0, r0, r1
 80066d8:	b003      	add	sp, #12
 80066da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080066de <__copybits>:
 80066de:	3901      	subs	r1, #1
 80066e0:	b570      	push	{r4, r5, r6, lr}
 80066e2:	1149      	asrs	r1, r1, #5
 80066e4:	6914      	ldr	r4, [r2, #16]
 80066e6:	3101      	adds	r1, #1
 80066e8:	f102 0314 	add.w	r3, r2, #20
 80066ec:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80066f0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80066f4:	1f05      	subs	r5, r0, #4
 80066f6:	42a3      	cmp	r3, r4
 80066f8:	d30c      	bcc.n	8006714 <__copybits+0x36>
 80066fa:	1aa3      	subs	r3, r4, r2
 80066fc:	3b11      	subs	r3, #17
 80066fe:	f023 0303 	bic.w	r3, r3, #3
 8006702:	3211      	adds	r2, #17
 8006704:	42a2      	cmp	r2, r4
 8006706:	bf88      	it	hi
 8006708:	2300      	movhi	r3, #0
 800670a:	4418      	add	r0, r3
 800670c:	2300      	movs	r3, #0
 800670e:	4288      	cmp	r0, r1
 8006710:	d305      	bcc.n	800671e <__copybits+0x40>
 8006712:	bd70      	pop	{r4, r5, r6, pc}
 8006714:	f853 6b04 	ldr.w	r6, [r3], #4
 8006718:	f845 6f04 	str.w	r6, [r5, #4]!
 800671c:	e7eb      	b.n	80066f6 <__copybits+0x18>
 800671e:	f840 3b04 	str.w	r3, [r0], #4
 8006722:	e7f4      	b.n	800670e <__copybits+0x30>

08006724 <__any_on>:
 8006724:	f100 0214 	add.w	r2, r0, #20
 8006728:	6900      	ldr	r0, [r0, #16]
 800672a:	114b      	asrs	r3, r1, #5
 800672c:	4298      	cmp	r0, r3
 800672e:	b510      	push	{r4, lr}
 8006730:	db11      	blt.n	8006756 <__any_on+0x32>
 8006732:	dd0a      	ble.n	800674a <__any_on+0x26>
 8006734:	f011 011f 	ands.w	r1, r1, #31
 8006738:	d007      	beq.n	800674a <__any_on+0x26>
 800673a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800673e:	fa24 f001 	lsr.w	r0, r4, r1
 8006742:	fa00 f101 	lsl.w	r1, r0, r1
 8006746:	428c      	cmp	r4, r1
 8006748:	d10b      	bne.n	8006762 <__any_on+0x3e>
 800674a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800674e:	4293      	cmp	r3, r2
 8006750:	d803      	bhi.n	800675a <__any_on+0x36>
 8006752:	2000      	movs	r0, #0
 8006754:	bd10      	pop	{r4, pc}
 8006756:	4603      	mov	r3, r0
 8006758:	e7f7      	b.n	800674a <__any_on+0x26>
 800675a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800675e:	2900      	cmp	r1, #0
 8006760:	d0f5      	beq.n	800674e <__any_on+0x2a>
 8006762:	2001      	movs	r0, #1
 8006764:	e7f6      	b.n	8006754 <__any_on+0x30>

08006766 <_calloc_r>:
 8006766:	b513      	push	{r0, r1, r4, lr}
 8006768:	434a      	muls	r2, r1
 800676a:	4611      	mov	r1, r2
 800676c:	9201      	str	r2, [sp, #4]
 800676e:	f000 f809 	bl	8006784 <_malloc_r>
 8006772:	4604      	mov	r4, r0
 8006774:	b118      	cbz	r0, 800677e <_calloc_r+0x18>
 8006776:	9a01      	ldr	r2, [sp, #4]
 8006778:	2100      	movs	r1, #0
 800677a:	f7fe f97b 	bl	8004a74 <memset>
 800677e:	4620      	mov	r0, r4
 8006780:	b002      	add	sp, #8
 8006782:	bd10      	pop	{r4, pc}

08006784 <_malloc_r>:
 8006784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006786:	1ccd      	adds	r5, r1, #3
 8006788:	f025 0503 	bic.w	r5, r5, #3
 800678c:	3508      	adds	r5, #8
 800678e:	2d0c      	cmp	r5, #12
 8006790:	bf38      	it	cc
 8006792:	250c      	movcc	r5, #12
 8006794:	2d00      	cmp	r5, #0
 8006796:	4606      	mov	r6, r0
 8006798:	db01      	blt.n	800679e <_malloc_r+0x1a>
 800679a:	42a9      	cmp	r1, r5
 800679c:	d903      	bls.n	80067a6 <_malloc_r+0x22>
 800679e:	230c      	movs	r3, #12
 80067a0:	6033      	str	r3, [r6, #0]
 80067a2:	2000      	movs	r0, #0
 80067a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067a6:	f000 f8b7 	bl	8006918 <__malloc_lock>
 80067aa:	4921      	ldr	r1, [pc, #132]	; (8006830 <_malloc_r+0xac>)
 80067ac:	680a      	ldr	r2, [r1, #0]
 80067ae:	4614      	mov	r4, r2
 80067b0:	b99c      	cbnz	r4, 80067da <_malloc_r+0x56>
 80067b2:	4f20      	ldr	r7, [pc, #128]	; (8006834 <_malloc_r+0xb0>)
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	b923      	cbnz	r3, 80067c2 <_malloc_r+0x3e>
 80067b8:	4621      	mov	r1, r4
 80067ba:	4630      	mov	r0, r6
 80067bc:	f000 f844 	bl	8006848 <_sbrk_r>
 80067c0:	6038      	str	r0, [r7, #0]
 80067c2:	4629      	mov	r1, r5
 80067c4:	4630      	mov	r0, r6
 80067c6:	f000 f83f 	bl	8006848 <_sbrk_r>
 80067ca:	1c43      	adds	r3, r0, #1
 80067cc:	d123      	bne.n	8006816 <_malloc_r+0x92>
 80067ce:	230c      	movs	r3, #12
 80067d0:	6033      	str	r3, [r6, #0]
 80067d2:	4630      	mov	r0, r6
 80067d4:	f000 f8a6 	bl	8006924 <__malloc_unlock>
 80067d8:	e7e3      	b.n	80067a2 <_malloc_r+0x1e>
 80067da:	6823      	ldr	r3, [r4, #0]
 80067dc:	1b5b      	subs	r3, r3, r5
 80067de:	d417      	bmi.n	8006810 <_malloc_r+0x8c>
 80067e0:	2b0b      	cmp	r3, #11
 80067e2:	d903      	bls.n	80067ec <_malloc_r+0x68>
 80067e4:	6023      	str	r3, [r4, #0]
 80067e6:	441c      	add	r4, r3
 80067e8:	6025      	str	r5, [r4, #0]
 80067ea:	e004      	b.n	80067f6 <_malloc_r+0x72>
 80067ec:	6863      	ldr	r3, [r4, #4]
 80067ee:	42a2      	cmp	r2, r4
 80067f0:	bf0c      	ite	eq
 80067f2:	600b      	streq	r3, [r1, #0]
 80067f4:	6053      	strne	r3, [r2, #4]
 80067f6:	4630      	mov	r0, r6
 80067f8:	f000 f894 	bl	8006924 <__malloc_unlock>
 80067fc:	f104 000b 	add.w	r0, r4, #11
 8006800:	1d23      	adds	r3, r4, #4
 8006802:	f020 0007 	bic.w	r0, r0, #7
 8006806:	1ac2      	subs	r2, r0, r3
 8006808:	d0cc      	beq.n	80067a4 <_malloc_r+0x20>
 800680a:	1a1b      	subs	r3, r3, r0
 800680c:	50a3      	str	r3, [r4, r2]
 800680e:	e7c9      	b.n	80067a4 <_malloc_r+0x20>
 8006810:	4622      	mov	r2, r4
 8006812:	6864      	ldr	r4, [r4, #4]
 8006814:	e7cc      	b.n	80067b0 <_malloc_r+0x2c>
 8006816:	1cc4      	adds	r4, r0, #3
 8006818:	f024 0403 	bic.w	r4, r4, #3
 800681c:	42a0      	cmp	r0, r4
 800681e:	d0e3      	beq.n	80067e8 <_malloc_r+0x64>
 8006820:	1a21      	subs	r1, r4, r0
 8006822:	4630      	mov	r0, r6
 8006824:	f000 f810 	bl	8006848 <_sbrk_r>
 8006828:	3001      	adds	r0, #1
 800682a:	d1dd      	bne.n	80067e8 <_malloc_r+0x64>
 800682c:	e7cf      	b.n	80067ce <_malloc_r+0x4a>
 800682e:	bf00      	nop
 8006830:	200002b0 	.word	0x200002b0
 8006834:	200002b4 	.word	0x200002b4

08006838 <nan>:
 8006838:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8006840 <nan+0x8>
 800683c:	4770      	bx	lr
 800683e:	bf00      	nop
 8006840:	00000000 	.word	0x00000000
 8006844:	7ff80000 	.word	0x7ff80000

08006848 <_sbrk_r>:
 8006848:	b538      	push	{r3, r4, r5, lr}
 800684a:	4d06      	ldr	r5, [pc, #24]	; (8006864 <_sbrk_r+0x1c>)
 800684c:	2300      	movs	r3, #0
 800684e:	4604      	mov	r4, r0
 8006850:	4608      	mov	r0, r1
 8006852:	602b      	str	r3, [r5, #0]
 8006854:	f7fc f868 	bl	8002928 <_sbrk>
 8006858:	1c43      	adds	r3, r0, #1
 800685a:	d102      	bne.n	8006862 <_sbrk_r+0x1a>
 800685c:	682b      	ldr	r3, [r5, #0]
 800685e:	b103      	cbz	r3, 8006862 <_sbrk_r+0x1a>
 8006860:	6023      	str	r3, [r4, #0]
 8006862:	bd38      	pop	{r3, r4, r5, pc}
 8006864:	20000500 	.word	0x20000500

08006868 <strncmp>:
 8006868:	b510      	push	{r4, lr}
 800686a:	b16a      	cbz	r2, 8006888 <strncmp+0x20>
 800686c:	3901      	subs	r1, #1
 800686e:	1884      	adds	r4, r0, r2
 8006870:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006874:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006878:	4293      	cmp	r3, r2
 800687a:	d103      	bne.n	8006884 <strncmp+0x1c>
 800687c:	42a0      	cmp	r0, r4
 800687e:	d001      	beq.n	8006884 <strncmp+0x1c>
 8006880:	2b00      	cmp	r3, #0
 8006882:	d1f5      	bne.n	8006870 <strncmp+0x8>
 8006884:	1a98      	subs	r0, r3, r2
 8006886:	bd10      	pop	{r4, pc}
 8006888:	4610      	mov	r0, r2
 800688a:	e7fc      	b.n	8006886 <strncmp+0x1e>

0800688c <__ascii_wctomb>:
 800688c:	b149      	cbz	r1, 80068a2 <__ascii_wctomb+0x16>
 800688e:	2aff      	cmp	r2, #255	; 0xff
 8006890:	bf85      	ittet	hi
 8006892:	238a      	movhi	r3, #138	; 0x8a
 8006894:	6003      	strhi	r3, [r0, #0]
 8006896:	700a      	strbls	r2, [r1, #0]
 8006898:	f04f 30ff 	movhi.w	r0, #4294967295
 800689c:	bf98      	it	ls
 800689e:	2001      	movls	r0, #1
 80068a0:	4770      	bx	lr
 80068a2:	4608      	mov	r0, r1
 80068a4:	4770      	bx	lr
	...

080068a8 <__assert_func>:
 80068a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80068aa:	4614      	mov	r4, r2
 80068ac:	461a      	mov	r2, r3
 80068ae:	4b09      	ldr	r3, [pc, #36]	; (80068d4 <__assert_func+0x2c>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4605      	mov	r5, r0
 80068b4:	68d8      	ldr	r0, [r3, #12]
 80068b6:	b14c      	cbz	r4, 80068cc <__assert_func+0x24>
 80068b8:	4b07      	ldr	r3, [pc, #28]	; (80068d8 <__assert_func+0x30>)
 80068ba:	9100      	str	r1, [sp, #0]
 80068bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80068c0:	4906      	ldr	r1, [pc, #24]	; (80068dc <__assert_func+0x34>)
 80068c2:	462b      	mov	r3, r5
 80068c4:	f000 f80e 	bl	80068e4 <fiprintf>
 80068c8:	f000 fc30 	bl	800712c <abort>
 80068cc:	4b04      	ldr	r3, [pc, #16]	; (80068e0 <__assert_func+0x38>)
 80068ce:	461c      	mov	r4, r3
 80068d0:	e7f3      	b.n	80068ba <__assert_func+0x12>
 80068d2:	bf00      	nop
 80068d4:	200000b8 	.word	0x200000b8
 80068d8:	08007b14 	.word	0x08007b14
 80068dc:	08007b21 	.word	0x08007b21
 80068e0:	08007b4f 	.word	0x08007b4f

080068e4 <fiprintf>:
 80068e4:	b40e      	push	{r1, r2, r3}
 80068e6:	b503      	push	{r0, r1, lr}
 80068e8:	4601      	mov	r1, r0
 80068ea:	ab03      	add	r3, sp, #12
 80068ec:	4805      	ldr	r0, [pc, #20]	; (8006904 <fiprintf+0x20>)
 80068ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80068f2:	6800      	ldr	r0, [r0, #0]
 80068f4:	9301      	str	r3, [sp, #4]
 80068f6:	f000 f895 	bl	8006a24 <_vfiprintf_r>
 80068fa:	b002      	add	sp, #8
 80068fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8006900:	b003      	add	sp, #12
 8006902:	4770      	bx	lr
 8006904:	200000b8 	.word	0x200000b8

08006908 <malloc>:
 8006908:	4b02      	ldr	r3, [pc, #8]	; (8006914 <malloc+0xc>)
 800690a:	4601      	mov	r1, r0
 800690c:	6818      	ldr	r0, [r3, #0]
 800690e:	f7ff bf39 	b.w	8006784 <_malloc_r>
 8006912:	bf00      	nop
 8006914:	200000b8 	.word	0x200000b8

08006918 <__malloc_lock>:
 8006918:	4801      	ldr	r0, [pc, #4]	; (8006920 <__malloc_lock+0x8>)
 800691a:	f000 bdc7 	b.w	80074ac <__retarget_lock_acquire_recursive>
 800691e:	bf00      	nop
 8006920:	20000508 	.word	0x20000508

08006924 <__malloc_unlock>:
 8006924:	4801      	ldr	r0, [pc, #4]	; (800692c <__malloc_unlock+0x8>)
 8006926:	f000 bdc2 	b.w	80074ae <__retarget_lock_release_recursive>
 800692a:	bf00      	nop
 800692c:	20000508 	.word	0x20000508

08006930 <_free_r>:
 8006930:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006932:	2900      	cmp	r1, #0
 8006934:	d048      	beq.n	80069c8 <_free_r+0x98>
 8006936:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800693a:	9001      	str	r0, [sp, #4]
 800693c:	2b00      	cmp	r3, #0
 800693e:	f1a1 0404 	sub.w	r4, r1, #4
 8006942:	bfb8      	it	lt
 8006944:	18e4      	addlt	r4, r4, r3
 8006946:	f7ff ffe7 	bl	8006918 <__malloc_lock>
 800694a:	4a20      	ldr	r2, [pc, #128]	; (80069cc <_free_r+0x9c>)
 800694c:	9801      	ldr	r0, [sp, #4]
 800694e:	6813      	ldr	r3, [r2, #0]
 8006950:	4615      	mov	r5, r2
 8006952:	b933      	cbnz	r3, 8006962 <_free_r+0x32>
 8006954:	6063      	str	r3, [r4, #4]
 8006956:	6014      	str	r4, [r2, #0]
 8006958:	b003      	add	sp, #12
 800695a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800695e:	f7ff bfe1 	b.w	8006924 <__malloc_unlock>
 8006962:	42a3      	cmp	r3, r4
 8006964:	d90b      	bls.n	800697e <_free_r+0x4e>
 8006966:	6821      	ldr	r1, [r4, #0]
 8006968:	1862      	adds	r2, r4, r1
 800696a:	4293      	cmp	r3, r2
 800696c:	bf04      	itt	eq
 800696e:	681a      	ldreq	r2, [r3, #0]
 8006970:	685b      	ldreq	r3, [r3, #4]
 8006972:	6063      	str	r3, [r4, #4]
 8006974:	bf04      	itt	eq
 8006976:	1852      	addeq	r2, r2, r1
 8006978:	6022      	streq	r2, [r4, #0]
 800697a:	602c      	str	r4, [r5, #0]
 800697c:	e7ec      	b.n	8006958 <_free_r+0x28>
 800697e:	461a      	mov	r2, r3
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	b10b      	cbz	r3, 8006988 <_free_r+0x58>
 8006984:	42a3      	cmp	r3, r4
 8006986:	d9fa      	bls.n	800697e <_free_r+0x4e>
 8006988:	6811      	ldr	r1, [r2, #0]
 800698a:	1855      	adds	r5, r2, r1
 800698c:	42a5      	cmp	r5, r4
 800698e:	d10b      	bne.n	80069a8 <_free_r+0x78>
 8006990:	6824      	ldr	r4, [r4, #0]
 8006992:	4421      	add	r1, r4
 8006994:	1854      	adds	r4, r2, r1
 8006996:	42a3      	cmp	r3, r4
 8006998:	6011      	str	r1, [r2, #0]
 800699a:	d1dd      	bne.n	8006958 <_free_r+0x28>
 800699c:	681c      	ldr	r4, [r3, #0]
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	6053      	str	r3, [r2, #4]
 80069a2:	4421      	add	r1, r4
 80069a4:	6011      	str	r1, [r2, #0]
 80069a6:	e7d7      	b.n	8006958 <_free_r+0x28>
 80069a8:	d902      	bls.n	80069b0 <_free_r+0x80>
 80069aa:	230c      	movs	r3, #12
 80069ac:	6003      	str	r3, [r0, #0]
 80069ae:	e7d3      	b.n	8006958 <_free_r+0x28>
 80069b0:	6825      	ldr	r5, [r4, #0]
 80069b2:	1961      	adds	r1, r4, r5
 80069b4:	428b      	cmp	r3, r1
 80069b6:	bf04      	itt	eq
 80069b8:	6819      	ldreq	r1, [r3, #0]
 80069ba:	685b      	ldreq	r3, [r3, #4]
 80069bc:	6063      	str	r3, [r4, #4]
 80069be:	bf04      	itt	eq
 80069c0:	1949      	addeq	r1, r1, r5
 80069c2:	6021      	streq	r1, [r4, #0]
 80069c4:	6054      	str	r4, [r2, #4]
 80069c6:	e7c7      	b.n	8006958 <_free_r+0x28>
 80069c8:	b003      	add	sp, #12
 80069ca:	bd30      	pop	{r4, r5, pc}
 80069cc:	200002b0 	.word	0x200002b0

080069d0 <__sfputc_r>:
 80069d0:	6893      	ldr	r3, [r2, #8]
 80069d2:	3b01      	subs	r3, #1
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	b410      	push	{r4}
 80069d8:	6093      	str	r3, [r2, #8]
 80069da:	da08      	bge.n	80069ee <__sfputc_r+0x1e>
 80069dc:	6994      	ldr	r4, [r2, #24]
 80069de:	42a3      	cmp	r3, r4
 80069e0:	db01      	blt.n	80069e6 <__sfputc_r+0x16>
 80069e2:	290a      	cmp	r1, #10
 80069e4:	d103      	bne.n	80069ee <__sfputc_r+0x1e>
 80069e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80069ea:	f000 badf 	b.w	8006fac <__swbuf_r>
 80069ee:	6813      	ldr	r3, [r2, #0]
 80069f0:	1c58      	adds	r0, r3, #1
 80069f2:	6010      	str	r0, [r2, #0]
 80069f4:	7019      	strb	r1, [r3, #0]
 80069f6:	4608      	mov	r0, r1
 80069f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80069fc:	4770      	bx	lr

080069fe <__sfputs_r>:
 80069fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a00:	4606      	mov	r6, r0
 8006a02:	460f      	mov	r7, r1
 8006a04:	4614      	mov	r4, r2
 8006a06:	18d5      	adds	r5, r2, r3
 8006a08:	42ac      	cmp	r4, r5
 8006a0a:	d101      	bne.n	8006a10 <__sfputs_r+0x12>
 8006a0c:	2000      	movs	r0, #0
 8006a0e:	e007      	b.n	8006a20 <__sfputs_r+0x22>
 8006a10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a14:	463a      	mov	r2, r7
 8006a16:	4630      	mov	r0, r6
 8006a18:	f7ff ffda 	bl	80069d0 <__sfputc_r>
 8006a1c:	1c43      	adds	r3, r0, #1
 8006a1e:	d1f3      	bne.n	8006a08 <__sfputs_r+0xa>
 8006a20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006a24 <_vfiprintf_r>:
 8006a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a28:	460d      	mov	r5, r1
 8006a2a:	b09d      	sub	sp, #116	; 0x74
 8006a2c:	4614      	mov	r4, r2
 8006a2e:	4698      	mov	r8, r3
 8006a30:	4606      	mov	r6, r0
 8006a32:	b118      	cbz	r0, 8006a3c <_vfiprintf_r+0x18>
 8006a34:	6983      	ldr	r3, [r0, #24]
 8006a36:	b90b      	cbnz	r3, 8006a3c <_vfiprintf_r+0x18>
 8006a38:	f000 fc9a 	bl	8007370 <__sinit>
 8006a3c:	4b89      	ldr	r3, [pc, #548]	; (8006c64 <_vfiprintf_r+0x240>)
 8006a3e:	429d      	cmp	r5, r3
 8006a40:	d11b      	bne.n	8006a7a <_vfiprintf_r+0x56>
 8006a42:	6875      	ldr	r5, [r6, #4]
 8006a44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a46:	07d9      	lsls	r1, r3, #31
 8006a48:	d405      	bmi.n	8006a56 <_vfiprintf_r+0x32>
 8006a4a:	89ab      	ldrh	r3, [r5, #12]
 8006a4c:	059a      	lsls	r2, r3, #22
 8006a4e:	d402      	bmi.n	8006a56 <_vfiprintf_r+0x32>
 8006a50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a52:	f000 fd2b 	bl	80074ac <__retarget_lock_acquire_recursive>
 8006a56:	89ab      	ldrh	r3, [r5, #12]
 8006a58:	071b      	lsls	r3, r3, #28
 8006a5a:	d501      	bpl.n	8006a60 <_vfiprintf_r+0x3c>
 8006a5c:	692b      	ldr	r3, [r5, #16]
 8006a5e:	b9eb      	cbnz	r3, 8006a9c <_vfiprintf_r+0x78>
 8006a60:	4629      	mov	r1, r5
 8006a62:	4630      	mov	r0, r6
 8006a64:	f000 faf4 	bl	8007050 <__swsetup_r>
 8006a68:	b1c0      	cbz	r0, 8006a9c <_vfiprintf_r+0x78>
 8006a6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a6c:	07dc      	lsls	r4, r3, #31
 8006a6e:	d50e      	bpl.n	8006a8e <_vfiprintf_r+0x6a>
 8006a70:	f04f 30ff 	mov.w	r0, #4294967295
 8006a74:	b01d      	add	sp, #116	; 0x74
 8006a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a7a:	4b7b      	ldr	r3, [pc, #492]	; (8006c68 <_vfiprintf_r+0x244>)
 8006a7c:	429d      	cmp	r5, r3
 8006a7e:	d101      	bne.n	8006a84 <_vfiprintf_r+0x60>
 8006a80:	68b5      	ldr	r5, [r6, #8]
 8006a82:	e7df      	b.n	8006a44 <_vfiprintf_r+0x20>
 8006a84:	4b79      	ldr	r3, [pc, #484]	; (8006c6c <_vfiprintf_r+0x248>)
 8006a86:	429d      	cmp	r5, r3
 8006a88:	bf08      	it	eq
 8006a8a:	68f5      	ldreq	r5, [r6, #12]
 8006a8c:	e7da      	b.n	8006a44 <_vfiprintf_r+0x20>
 8006a8e:	89ab      	ldrh	r3, [r5, #12]
 8006a90:	0598      	lsls	r0, r3, #22
 8006a92:	d4ed      	bmi.n	8006a70 <_vfiprintf_r+0x4c>
 8006a94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a96:	f000 fd0a 	bl	80074ae <__retarget_lock_release_recursive>
 8006a9a:	e7e9      	b.n	8006a70 <_vfiprintf_r+0x4c>
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	9309      	str	r3, [sp, #36]	; 0x24
 8006aa0:	2320      	movs	r3, #32
 8006aa2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006aa6:	f8cd 800c 	str.w	r8, [sp, #12]
 8006aaa:	2330      	movs	r3, #48	; 0x30
 8006aac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006c70 <_vfiprintf_r+0x24c>
 8006ab0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006ab4:	f04f 0901 	mov.w	r9, #1
 8006ab8:	4623      	mov	r3, r4
 8006aba:	469a      	mov	sl, r3
 8006abc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ac0:	b10a      	cbz	r2, 8006ac6 <_vfiprintf_r+0xa2>
 8006ac2:	2a25      	cmp	r2, #37	; 0x25
 8006ac4:	d1f9      	bne.n	8006aba <_vfiprintf_r+0x96>
 8006ac6:	ebba 0b04 	subs.w	fp, sl, r4
 8006aca:	d00b      	beq.n	8006ae4 <_vfiprintf_r+0xc0>
 8006acc:	465b      	mov	r3, fp
 8006ace:	4622      	mov	r2, r4
 8006ad0:	4629      	mov	r1, r5
 8006ad2:	4630      	mov	r0, r6
 8006ad4:	f7ff ff93 	bl	80069fe <__sfputs_r>
 8006ad8:	3001      	adds	r0, #1
 8006ada:	f000 80aa 	beq.w	8006c32 <_vfiprintf_r+0x20e>
 8006ade:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ae0:	445a      	add	r2, fp
 8006ae2:	9209      	str	r2, [sp, #36]	; 0x24
 8006ae4:	f89a 3000 	ldrb.w	r3, [sl]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	f000 80a2 	beq.w	8006c32 <_vfiprintf_r+0x20e>
 8006aee:	2300      	movs	r3, #0
 8006af0:	f04f 32ff 	mov.w	r2, #4294967295
 8006af4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006af8:	f10a 0a01 	add.w	sl, sl, #1
 8006afc:	9304      	str	r3, [sp, #16]
 8006afe:	9307      	str	r3, [sp, #28]
 8006b00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006b04:	931a      	str	r3, [sp, #104]	; 0x68
 8006b06:	4654      	mov	r4, sl
 8006b08:	2205      	movs	r2, #5
 8006b0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b0e:	4858      	ldr	r0, [pc, #352]	; (8006c70 <_vfiprintf_r+0x24c>)
 8006b10:	f7f9 fb66 	bl	80001e0 <memchr>
 8006b14:	9a04      	ldr	r2, [sp, #16]
 8006b16:	b9d8      	cbnz	r0, 8006b50 <_vfiprintf_r+0x12c>
 8006b18:	06d1      	lsls	r1, r2, #27
 8006b1a:	bf44      	itt	mi
 8006b1c:	2320      	movmi	r3, #32
 8006b1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b22:	0713      	lsls	r3, r2, #28
 8006b24:	bf44      	itt	mi
 8006b26:	232b      	movmi	r3, #43	; 0x2b
 8006b28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b2c:	f89a 3000 	ldrb.w	r3, [sl]
 8006b30:	2b2a      	cmp	r3, #42	; 0x2a
 8006b32:	d015      	beq.n	8006b60 <_vfiprintf_r+0x13c>
 8006b34:	9a07      	ldr	r2, [sp, #28]
 8006b36:	4654      	mov	r4, sl
 8006b38:	2000      	movs	r0, #0
 8006b3a:	f04f 0c0a 	mov.w	ip, #10
 8006b3e:	4621      	mov	r1, r4
 8006b40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b44:	3b30      	subs	r3, #48	; 0x30
 8006b46:	2b09      	cmp	r3, #9
 8006b48:	d94e      	bls.n	8006be8 <_vfiprintf_r+0x1c4>
 8006b4a:	b1b0      	cbz	r0, 8006b7a <_vfiprintf_r+0x156>
 8006b4c:	9207      	str	r2, [sp, #28]
 8006b4e:	e014      	b.n	8006b7a <_vfiprintf_r+0x156>
 8006b50:	eba0 0308 	sub.w	r3, r0, r8
 8006b54:	fa09 f303 	lsl.w	r3, r9, r3
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	9304      	str	r3, [sp, #16]
 8006b5c:	46a2      	mov	sl, r4
 8006b5e:	e7d2      	b.n	8006b06 <_vfiprintf_r+0xe2>
 8006b60:	9b03      	ldr	r3, [sp, #12]
 8006b62:	1d19      	adds	r1, r3, #4
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	9103      	str	r1, [sp, #12]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	bfbb      	ittet	lt
 8006b6c:	425b      	neglt	r3, r3
 8006b6e:	f042 0202 	orrlt.w	r2, r2, #2
 8006b72:	9307      	strge	r3, [sp, #28]
 8006b74:	9307      	strlt	r3, [sp, #28]
 8006b76:	bfb8      	it	lt
 8006b78:	9204      	strlt	r2, [sp, #16]
 8006b7a:	7823      	ldrb	r3, [r4, #0]
 8006b7c:	2b2e      	cmp	r3, #46	; 0x2e
 8006b7e:	d10c      	bne.n	8006b9a <_vfiprintf_r+0x176>
 8006b80:	7863      	ldrb	r3, [r4, #1]
 8006b82:	2b2a      	cmp	r3, #42	; 0x2a
 8006b84:	d135      	bne.n	8006bf2 <_vfiprintf_r+0x1ce>
 8006b86:	9b03      	ldr	r3, [sp, #12]
 8006b88:	1d1a      	adds	r2, r3, #4
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	9203      	str	r2, [sp, #12]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	bfb8      	it	lt
 8006b92:	f04f 33ff 	movlt.w	r3, #4294967295
 8006b96:	3402      	adds	r4, #2
 8006b98:	9305      	str	r3, [sp, #20]
 8006b9a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006c80 <_vfiprintf_r+0x25c>
 8006b9e:	7821      	ldrb	r1, [r4, #0]
 8006ba0:	2203      	movs	r2, #3
 8006ba2:	4650      	mov	r0, sl
 8006ba4:	f7f9 fb1c 	bl	80001e0 <memchr>
 8006ba8:	b140      	cbz	r0, 8006bbc <_vfiprintf_r+0x198>
 8006baa:	2340      	movs	r3, #64	; 0x40
 8006bac:	eba0 000a 	sub.w	r0, r0, sl
 8006bb0:	fa03 f000 	lsl.w	r0, r3, r0
 8006bb4:	9b04      	ldr	r3, [sp, #16]
 8006bb6:	4303      	orrs	r3, r0
 8006bb8:	3401      	adds	r4, #1
 8006bba:	9304      	str	r3, [sp, #16]
 8006bbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bc0:	482c      	ldr	r0, [pc, #176]	; (8006c74 <_vfiprintf_r+0x250>)
 8006bc2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006bc6:	2206      	movs	r2, #6
 8006bc8:	f7f9 fb0a 	bl	80001e0 <memchr>
 8006bcc:	2800      	cmp	r0, #0
 8006bce:	d03f      	beq.n	8006c50 <_vfiprintf_r+0x22c>
 8006bd0:	4b29      	ldr	r3, [pc, #164]	; (8006c78 <_vfiprintf_r+0x254>)
 8006bd2:	bb1b      	cbnz	r3, 8006c1c <_vfiprintf_r+0x1f8>
 8006bd4:	9b03      	ldr	r3, [sp, #12]
 8006bd6:	3307      	adds	r3, #7
 8006bd8:	f023 0307 	bic.w	r3, r3, #7
 8006bdc:	3308      	adds	r3, #8
 8006bde:	9303      	str	r3, [sp, #12]
 8006be0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006be2:	443b      	add	r3, r7
 8006be4:	9309      	str	r3, [sp, #36]	; 0x24
 8006be6:	e767      	b.n	8006ab8 <_vfiprintf_r+0x94>
 8006be8:	fb0c 3202 	mla	r2, ip, r2, r3
 8006bec:	460c      	mov	r4, r1
 8006bee:	2001      	movs	r0, #1
 8006bf0:	e7a5      	b.n	8006b3e <_vfiprintf_r+0x11a>
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	3401      	adds	r4, #1
 8006bf6:	9305      	str	r3, [sp, #20]
 8006bf8:	4619      	mov	r1, r3
 8006bfa:	f04f 0c0a 	mov.w	ip, #10
 8006bfe:	4620      	mov	r0, r4
 8006c00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c04:	3a30      	subs	r2, #48	; 0x30
 8006c06:	2a09      	cmp	r2, #9
 8006c08:	d903      	bls.n	8006c12 <_vfiprintf_r+0x1ee>
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d0c5      	beq.n	8006b9a <_vfiprintf_r+0x176>
 8006c0e:	9105      	str	r1, [sp, #20]
 8006c10:	e7c3      	b.n	8006b9a <_vfiprintf_r+0x176>
 8006c12:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c16:	4604      	mov	r4, r0
 8006c18:	2301      	movs	r3, #1
 8006c1a:	e7f0      	b.n	8006bfe <_vfiprintf_r+0x1da>
 8006c1c:	ab03      	add	r3, sp, #12
 8006c1e:	9300      	str	r3, [sp, #0]
 8006c20:	462a      	mov	r2, r5
 8006c22:	4b16      	ldr	r3, [pc, #88]	; (8006c7c <_vfiprintf_r+0x258>)
 8006c24:	a904      	add	r1, sp, #16
 8006c26:	4630      	mov	r0, r6
 8006c28:	f3af 8000 	nop.w
 8006c2c:	4607      	mov	r7, r0
 8006c2e:	1c78      	adds	r0, r7, #1
 8006c30:	d1d6      	bne.n	8006be0 <_vfiprintf_r+0x1bc>
 8006c32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c34:	07d9      	lsls	r1, r3, #31
 8006c36:	d405      	bmi.n	8006c44 <_vfiprintf_r+0x220>
 8006c38:	89ab      	ldrh	r3, [r5, #12]
 8006c3a:	059a      	lsls	r2, r3, #22
 8006c3c:	d402      	bmi.n	8006c44 <_vfiprintf_r+0x220>
 8006c3e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c40:	f000 fc35 	bl	80074ae <__retarget_lock_release_recursive>
 8006c44:	89ab      	ldrh	r3, [r5, #12]
 8006c46:	065b      	lsls	r3, r3, #25
 8006c48:	f53f af12 	bmi.w	8006a70 <_vfiprintf_r+0x4c>
 8006c4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c4e:	e711      	b.n	8006a74 <_vfiprintf_r+0x50>
 8006c50:	ab03      	add	r3, sp, #12
 8006c52:	9300      	str	r3, [sp, #0]
 8006c54:	462a      	mov	r2, r5
 8006c56:	4b09      	ldr	r3, [pc, #36]	; (8006c7c <_vfiprintf_r+0x258>)
 8006c58:	a904      	add	r1, sp, #16
 8006c5a:	4630      	mov	r0, r6
 8006c5c:	f000 f880 	bl	8006d60 <_printf_i>
 8006c60:	e7e4      	b.n	8006c2c <_vfiprintf_r+0x208>
 8006c62:	bf00      	nop
 8006c64:	08007ca4 	.word	0x08007ca4
 8006c68:	08007cc4 	.word	0x08007cc4
 8006c6c:	08007c84 	.word	0x08007c84
 8006c70:	08007c51 	.word	0x08007c51
 8006c74:	08007c5b 	.word	0x08007c5b
 8006c78:	00000000 	.word	0x00000000
 8006c7c:	080069ff 	.word	0x080069ff
 8006c80:	08007c57 	.word	0x08007c57

08006c84 <_printf_common>:
 8006c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c88:	4616      	mov	r6, r2
 8006c8a:	4699      	mov	r9, r3
 8006c8c:	688a      	ldr	r2, [r1, #8]
 8006c8e:	690b      	ldr	r3, [r1, #16]
 8006c90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006c94:	4293      	cmp	r3, r2
 8006c96:	bfb8      	it	lt
 8006c98:	4613      	movlt	r3, r2
 8006c9a:	6033      	str	r3, [r6, #0]
 8006c9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006ca0:	4607      	mov	r7, r0
 8006ca2:	460c      	mov	r4, r1
 8006ca4:	b10a      	cbz	r2, 8006caa <_printf_common+0x26>
 8006ca6:	3301      	adds	r3, #1
 8006ca8:	6033      	str	r3, [r6, #0]
 8006caa:	6823      	ldr	r3, [r4, #0]
 8006cac:	0699      	lsls	r1, r3, #26
 8006cae:	bf42      	ittt	mi
 8006cb0:	6833      	ldrmi	r3, [r6, #0]
 8006cb2:	3302      	addmi	r3, #2
 8006cb4:	6033      	strmi	r3, [r6, #0]
 8006cb6:	6825      	ldr	r5, [r4, #0]
 8006cb8:	f015 0506 	ands.w	r5, r5, #6
 8006cbc:	d106      	bne.n	8006ccc <_printf_common+0x48>
 8006cbe:	f104 0a19 	add.w	sl, r4, #25
 8006cc2:	68e3      	ldr	r3, [r4, #12]
 8006cc4:	6832      	ldr	r2, [r6, #0]
 8006cc6:	1a9b      	subs	r3, r3, r2
 8006cc8:	42ab      	cmp	r3, r5
 8006cca:	dc26      	bgt.n	8006d1a <_printf_common+0x96>
 8006ccc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006cd0:	1e13      	subs	r3, r2, #0
 8006cd2:	6822      	ldr	r2, [r4, #0]
 8006cd4:	bf18      	it	ne
 8006cd6:	2301      	movne	r3, #1
 8006cd8:	0692      	lsls	r2, r2, #26
 8006cda:	d42b      	bmi.n	8006d34 <_printf_common+0xb0>
 8006cdc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ce0:	4649      	mov	r1, r9
 8006ce2:	4638      	mov	r0, r7
 8006ce4:	47c0      	blx	r8
 8006ce6:	3001      	adds	r0, #1
 8006ce8:	d01e      	beq.n	8006d28 <_printf_common+0xa4>
 8006cea:	6823      	ldr	r3, [r4, #0]
 8006cec:	68e5      	ldr	r5, [r4, #12]
 8006cee:	6832      	ldr	r2, [r6, #0]
 8006cf0:	f003 0306 	and.w	r3, r3, #6
 8006cf4:	2b04      	cmp	r3, #4
 8006cf6:	bf08      	it	eq
 8006cf8:	1aad      	subeq	r5, r5, r2
 8006cfa:	68a3      	ldr	r3, [r4, #8]
 8006cfc:	6922      	ldr	r2, [r4, #16]
 8006cfe:	bf0c      	ite	eq
 8006d00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d04:	2500      	movne	r5, #0
 8006d06:	4293      	cmp	r3, r2
 8006d08:	bfc4      	itt	gt
 8006d0a:	1a9b      	subgt	r3, r3, r2
 8006d0c:	18ed      	addgt	r5, r5, r3
 8006d0e:	2600      	movs	r6, #0
 8006d10:	341a      	adds	r4, #26
 8006d12:	42b5      	cmp	r5, r6
 8006d14:	d11a      	bne.n	8006d4c <_printf_common+0xc8>
 8006d16:	2000      	movs	r0, #0
 8006d18:	e008      	b.n	8006d2c <_printf_common+0xa8>
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	4652      	mov	r2, sl
 8006d1e:	4649      	mov	r1, r9
 8006d20:	4638      	mov	r0, r7
 8006d22:	47c0      	blx	r8
 8006d24:	3001      	adds	r0, #1
 8006d26:	d103      	bne.n	8006d30 <_printf_common+0xac>
 8006d28:	f04f 30ff 	mov.w	r0, #4294967295
 8006d2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d30:	3501      	adds	r5, #1
 8006d32:	e7c6      	b.n	8006cc2 <_printf_common+0x3e>
 8006d34:	18e1      	adds	r1, r4, r3
 8006d36:	1c5a      	adds	r2, r3, #1
 8006d38:	2030      	movs	r0, #48	; 0x30
 8006d3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006d3e:	4422      	add	r2, r4
 8006d40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006d44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006d48:	3302      	adds	r3, #2
 8006d4a:	e7c7      	b.n	8006cdc <_printf_common+0x58>
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	4622      	mov	r2, r4
 8006d50:	4649      	mov	r1, r9
 8006d52:	4638      	mov	r0, r7
 8006d54:	47c0      	blx	r8
 8006d56:	3001      	adds	r0, #1
 8006d58:	d0e6      	beq.n	8006d28 <_printf_common+0xa4>
 8006d5a:	3601      	adds	r6, #1
 8006d5c:	e7d9      	b.n	8006d12 <_printf_common+0x8e>
	...

08006d60 <_printf_i>:
 8006d60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d64:	460c      	mov	r4, r1
 8006d66:	4691      	mov	r9, r2
 8006d68:	7e27      	ldrb	r7, [r4, #24]
 8006d6a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006d6c:	2f78      	cmp	r7, #120	; 0x78
 8006d6e:	4680      	mov	r8, r0
 8006d70:	469a      	mov	sl, r3
 8006d72:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d76:	d807      	bhi.n	8006d88 <_printf_i+0x28>
 8006d78:	2f62      	cmp	r7, #98	; 0x62
 8006d7a:	d80a      	bhi.n	8006d92 <_printf_i+0x32>
 8006d7c:	2f00      	cmp	r7, #0
 8006d7e:	f000 80d8 	beq.w	8006f32 <_printf_i+0x1d2>
 8006d82:	2f58      	cmp	r7, #88	; 0x58
 8006d84:	f000 80a3 	beq.w	8006ece <_printf_i+0x16e>
 8006d88:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006d8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006d90:	e03a      	b.n	8006e08 <_printf_i+0xa8>
 8006d92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006d96:	2b15      	cmp	r3, #21
 8006d98:	d8f6      	bhi.n	8006d88 <_printf_i+0x28>
 8006d9a:	a001      	add	r0, pc, #4	; (adr r0, 8006da0 <_printf_i+0x40>)
 8006d9c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006da0:	08006df9 	.word	0x08006df9
 8006da4:	08006e0d 	.word	0x08006e0d
 8006da8:	08006d89 	.word	0x08006d89
 8006dac:	08006d89 	.word	0x08006d89
 8006db0:	08006d89 	.word	0x08006d89
 8006db4:	08006d89 	.word	0x08006d89
 8006db8:	08006e0d 	.word	0x08006e0d
 8006dbc:	08006d89 	.word	0x08006d89
 8006dc0:	08006d89 	.word	0x08006d89
 8006dc4:	08006d89 	.word	0x08006d89
 8006dc8:	08006d89 	.word	0x08006d89
 8006dcc:	08006f19 	.word	0x08006f19
 8006dd0:	08006e3d 	.word	0x08006e3d
 8006dd4:	08006efb 	.word	0x08006efb
 8006dd8:	08006d89 	.word	0x08006d89
 8006ddc:	08006d89 	.word	0x08006d89
 8006de0:	08006f3b 	.word	0x08006f3b
 8006de4:	08006d89 	.word	0x08006d89
 8006de8:	08006e3d 	.word	0x08006e3d
 8006dec:	08006d89 	.word	0x08006d89
 8006df0:	08006d89 	.word	0x08006d89
 8006df4:	08006f03 	.word	0x08006f03
 8006df8:	680b      	ldr	r3, [r1, #0]
 8006dfa:	1d1a      	adds	r2, r3, #4
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	600a      	str	r2, [r1, #0]
 8006e00:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006e04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e08:	2301      	movs	r3, #1
 8006e0a:	e0a3      	b.n	8006f54 <_printf_i+0x1f4>
 8006e0c:	6825      	ldr	r5, [r4, #0]
 8006e0e:	6808      	ldr	r0, [r1, #0]
 8006e10:	062e      	lsls	r6, r5, #24
 8006e12:	f100 0304 	add.w	r3, r0, #4
 8006e16:	d50a      	bpl.n	8006e2e <_printf_i+0xce>
 8006e18:	6805      	ldr	r5, [r0, #0]
 8006e1a:	600b      	str	r3, [r1, #0]
 8006e1c:	2d00      	cmp	r5, #0
 8006e1e:	da03      	bge.n	8006e28 <_printf_i+0xc8>
 8006e20:	232d      	movs	r3, #45	; 0x2d
 8006e22:	426d      	negs	r5, r5
 8006e24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e28:	485e      	ldr	r0, [pc, #376]	; (8006fa4 <_printf_i+0x244>)
 8006e2a:	230a      	movs	r3, #10
 8006e2c:	e019      	b.n	8006e62 <_printf_i+0x102>
 8006e2e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006e32:	6805      	ldr	r5, [r0, #0]
 8006e34:	600b      	str	r3, [r1, #0]
 8006e36:	bf18      	it	ne
 8006e38:	b22d      	sxthne	r5, r5
 8006e3a:	e7ef      	b.n	8006e1c <_printf_i+0xbc>
 8006e3c:	680b      	ldr	r3, [r1, #0]
 8006e3e:	6825      	ldr	r5, [r4, #0]
 8006e40:	1d18      	adds	r0, r3, #4
 8006e42:	6008      	str	r0, [r1, #0]
 8006e44:	0628      	lsls	r0, r5, #24
 8006e46:	d501      	bpl.n	8006e4c <_printf_i+0xec>
 8006e48:	681d      	ldr	r5, [r3, #0]
 8006e4a:	e002      	b.n	8006e52 <_printf_i+0xf2>
 8006e4c:	0669      	lsls	r1, r5, #25
 8006e4e:	d5fb      	bpl.n	8006e48 <_printf_i+0xe8>
 8006e50:	881d      	ldrh	r5, [r3, #0]
 8006e52:	4854      	ldr	r0, [pc, #336]	; (8006fa4 <_printf_i+0x244>)
 8006e54:	2f6f      	cmp	r7, #111	; 0x6f
 8006e56:	bf0c      	ite	eq
 8006e58:	2308      	moveq	r3, #8
 8006e5a:	230a      	movne	r3, #10
 8006e5c:	2100      	movs	r1, #0
 8006e5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006e62:	6866      	ldr	r6, [r4, #4]
 8006e64:	60a6      	str	r6, [r4, #8]
 8006e66:	2e00      	cmp	r6, #0
 8006e68:	bfa2      	ittt	ge
 8006e6a:	6821      	ldrge	r1, [r4, #0]
 8006e6c:	f021 0104 	bicge.w	r1, r1, #4
 8006e70:	6021      	strge	r1, [r4, #0]
 8006e72:	b90d      	cbnz	r5, 8006e78 <_printf_i+0x118>
 8006e74:	2e00      	cmp	r6, #0
 8006e76:	d04d      	beq.n	8006f14 <_printf_i+0x1b4>
 8006e78:	4616      	mov	r6, r2
 8006e7a:	fbb5 f1f3 	udiv	r1, r5, r3
 8006e7e:	fb03 5711 	mls	r7, r3, r1, r5
 8006e82:	5dc7      	ldrb	r7, [r0, r7]
 8006e84:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006e88:	462f      	mov	r7, r5
 8006e8a:	42bb      	cmp	r3, r7
 8006e8c:	460d      	mov	r5, r1
 8006e8e:	d9f4      	bls.n	8006e7a <_printf_i+0x11a>
 8006e90:	2b08      	cmp	r3, #8
 8006e92:	d10b      	bne.n	8006eac <_printf_i+0x14c>
 8006e94:	6823      	ldr	r3, [r4, #0]
 8006e96:	07df      	lsls	r7, r3, #31
 8006e98:	d508      	bpl.n	8006eac <_printf_i+0x14c>
 8006e9a:	6923      	ldr	r3, [r4, #16]
 8006e9c:	6861      	ldr	r1, [r4, #4]
 8006e9e:	4299      	cmp	r1, r3
 8006ea0:	bfde      	ittt	le
 8006ea2:	2330      	movle	r3, #48	; 0x30
 8006ea4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006ea8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006eac:	1b92      	subs	r2, r2, r6
 8006eae:	6122      	str	r2, [r4, #16]
 8006eb0:	f8cd a000 	str.w	sl, [sp]
 8006eb4:	464b      	mov	r3, r9
 8006eb6:	aa03      	add	r2, sp, #12
 8006eb8:	4621      	mov	r1, r4
 8006eba:	4640      	mov	r0, r8
 8006ebc:	f7ff fee2 	bl	8006c84 <_printf_common>
 8006ec0:	3001      	adds	r0, #1
 8006ec2:	d14c      	bne.n	8006f5e <_printf_i+0x1fe>
 8006ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ec8:	b004      	add	sp, #16
 8006eca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ece:	4835      	ldr	r0, [pc, #212]	; (8006fa4 <_printf_i+0x244>)
 8006ed0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006ed4:	6823      	ldr	r3, [r4, #0]
 8006ed6:	680e      	ldr	r6, [r1, #0]
 8006ed8:	061f      	lsls	r7, r3, #24
 8006eda:	f856 5b04 	ldr.w	r5, [r6], #4
 8006ede:	600e      	str	r6, [r1, #0]
 8006ee0:	d514      	bpl.n	8006f0c <_printf_i+0x1ac>
 8006ee2:	07d9      	lsls	r1, r3, #31
 8006ee4:	bf44      	itt	mi
 8006ee6:	f043 0320 	orrmi.w	r3, r3, #32
 8006eea:	6023      	strmi	r3, [r4, #0]
 8006eec:	b91d      	cbnz	r5, 8006ef6 <_printf_i+0x196>
 8006eee:	6823      	ldr	r3, [r4, #0]
 8006ef0:	f023 0320 	bic.w	r3, r3, #32
 8006ef4:	6023      	str	r3, [r4, #0]
 8006ef6:	2310      	movs	r3, #16
 8006ef8:	e7b0      	b.n	8006e5c <_printf_i+0xfc>
 8006efa:	6823      	ldr	r3, [r4, #0]
 8006efc:	f043 0320 	orr.w	r3, r3, #32
 8006f00:	6023      	str	r3, [r4, #0]
 8006f02:	2378      	movs	r3, #120	; 0x78
 8006f04:	4828      	ldr	r0, [pc, #160]	; (8006fa8 <_printf_i+0x248>)
 8006f06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006f0a:	e7e3      	b.n	8006ed4 <_printf_i+0x174>
 8006f0c:	065e      	lsls	r6, r3, #25
 8006f0e:	bf48      	it	mi
 8006f10:	b2ad      	uxthmi	r5, r5
 8006f12:	e7e6      	b.n	8006ee2 <_printf_i+0x182>
 8006f14:	4616      	mov	r6, r2
 8006f16:	e7bb      	b.n	8006e90 <_printf_i+0x130>
 8006f18:	680b      	ldr	r3, [r1, #0]
 8006f1a:	6826      	ldr	r6, [r4, #0]
 8006f1c:	6960      	ldr	r0, [r4, #20]
 8006f1e:	1d1d      	adds	r5, r3, #4
 8006f20:	600d      	str	r5, [r1, #0]
 8006f22:	0635      	lsls	r5, r6, #24
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	d501      	bpl.n	8006f2c <_printf_i+0x1cc>
 8006f28:	6018      	str	r0, [r3, #0]
 8006f2a:	e002      	b.n	8006f32 <_printf_i+0x1d2>
 8006f2c:	0671      	lsls	r1, r6, #25
 8006f2e:	d5fb      	bpl.n	8006f28 <_printf_i+0x1c8>
 8006f30:	8018      	strh	r0, [r3, #0]
 8006f32:	2300      	movs	r3, #0
 8006f34:	6123      	str	r3, [r4, #16]
 8006f36:	4616      	mov	r6, r2
 8006f38:	e7ba      	b.n	8006eb0 <_printf_i+0x150>
 8006f3a:	680b      	ldr	r3, [r1, #0]
 8006f3c:	1d1a      	adds	r2, r3, #4
 8006f3e:	600a      	str	r2, [r1, #0]
 8006f40:	681e      	ldr	r6, [r3, #0]
 8006f42:	6862      	ldr	r2, [r4, #4]
 8006f44:	2100      	movs	r1, #0
 8006f46:	4630      	mov	r0, r6
 8006f48:	f7f9 f94a 	bl	80001e0 <memchr>
 8006f4c:	b108      	cbz	r0, 8006f52 <_printf_i+0x1f2>
 8006f4e:	1b80      	subs	r0, r0, r6
 8006f50:	6060      	str	r0, [r4, #4]
 8006f52:	6863      	ldr	r3, [r4, #4]
 8006f54:	6123      	str	r3, [r4, #16]
 8006f56:	2300      	movs	r3, #0
 8006f58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f5c:	e7a8      	b.n	8006eb0 <_printf_i+0x150>
 8006f5e:	6923      	ldr	r3, [r4, #16]
 8006f60:	4632      	mov	r2, r6
 8006f62:	4649      	mov	r1, r9
 8006f64:	4640      	mov	r0, r8
 8006f66:	47d0      	blx	sl
 8006f68:	3001      	adds	r0, #1
 8006f6a:	d0ab      	beq.n	8006ec4 <_printf_i+0x164>
 8006f6c:	6823      	ldr	r3, [r4, #0]
 8006f6e:	079b      	lsls	r3, r3, #30
 8006f70:	d413      	bmi.n	8006f9a <_printf_i+0x23a>
 8006f72:	68e0      	ldr	r0, [r4, #12]
 8006f74:	9b03      	ldr	r3, [sp, #12]
 8006f76:	4298      	cmp	r0, r3
 8006f78:	bfb8      	it	lt
 8006f7a:	4618      	movlt	r0, r3
 8006f7c:	e7a4      	b.n	8006ec8 <_printf_i+0x168>
 8006f7e:	2301      	movs	r3, #1
 8006f80:	4632      	mov	r2, r6
 8006f82:	4649      	mov	r1, r9
 8006f84:	4640      	mov	r0, r8
 8006f86:	47d0      	blx	sl
 8006f88:	3001      	adds	r0, #1
 8006f8a:	d09b      	beq.n	8006ec4 <_printf_i+0x164>
 8006f8c:	3501      	adds	r5, #1
 8006f8e:	68e3      	ldr	r3, [r4, #12]
 8006f90:	9903      	ldr	r1, [sp, #12]
 8006f92:	1a5b      	subs	r3, r3, r1
 8006f94:	42ab      	cmp	r3, r5
 8006f96:	dcf2      	bgt.n	8006f7e <_printf_i+0x21e>
 8006f98:	e7eb      	b.n	8006f72 <_printf_i+0x212>
 8006f9a:	2500      	movs	r5, #0
 8006f9c:	f104 0619 	add.w	r6, r4, #25
 8006fa0:	e7f5      	b.n	8006f8e <_printf_i+0x22e>
 8006fa2:	bf00      	nop
 8006fa4:	08007c62 	.word	0x08007c62
 8006fa8:	08007c73 	.word	0x08007c73

08006fac <__swbuf_r>:
 8006fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fae:	460e      	mov	r6, r1
 8006fb0:	4614      	mov	r4, r2
 8006fb2:	4605      	mov	r5, r0
 8006fb4:	b118      	cbz	r0, 8006fbe <__swbuf_r+0x12>
 8006fb6:	6983      	ldr	r3, [r0, #24]
 8006fb8:	b90b      	cbnz	r3, 8006fbe <__swbuf_r+0x12>
 8006fba:	f000 f9d9 	bl	8007370 <__sinit>
 8006fbe:	4b21      	ldr	r3, [pc, #132]	; (8007044 <__swbuf_r+0x98>)
 8006fc0:	429c      	cmp	r4, r3
 8006fc2:	d12b      	bne.n	800701c <__swbuf_r+0x70>
 8006fc4:	686c      	ldr	r4, [r5, #4]
 8006fc6:	69a3      	ldr	r3, [r4, #24]
 8006fc8:	60a3      	str	r3, [r4, #8]
 8006fca:	89a3      	ldrh	r3, [r4, #12]
 8006fcc:	071a      	lsls	r2, r3, #28
 8006fce:	d52f      	bpl.n	8007030 <__swbuf_r+0x84>
 8006fd0:	6923      	ldr	r3, [r4, #16]
 8006fd2:	b36b      	cbz	r3, 8007030 <__swbuf_r+0x84>
 8006fd4:	6923      	ldr	r3, [r4, #16]
 8006fd6:	6820      	ldr	r0, [r4, #0]
 8006fd8:	1ac0      	subs	r0, r0, r3
 8006fda:	6963      	ldr	r3, [r4, #20]
 8006fdc:	b2f6      	uxtb	r6, r6
 8006fde:	4283      	cmp	r3, r0
 8006fe0:	4637      	mov	r7, r6
 8006fe2:	dc04      	bgt.n	8006fee <__swbuf_r+0x42>
 8006fe4:	4621      	mov	r1, r4
 8006fe6:	4628      	mov	r0, r5
 8006fe8:	f000 f92e 	bl	8007248 <_fflush_r>
 8006fec:	bb30      	cbnz	r0, 800703c <__swbuf_r+0x90>
 8006fee:	68a3      	ldr	r3, [r4, #8]
 8006ff0:	3b01      	subs	r3, #1
 8006ff2:	60a3      	str	r3, [r4, #8]
 8006ff4:	6823      	ldr	r3, [r4, #0]
 8006ff6:	1c5a      	adds	r2, r3, #1
 8006ff8:	6022      	str	r2, [r4, #0]
 8006ffa:	701e      	strb	r6, [r3, #0]
 8006ffc:	6963      	ldr	r3, [r4, #20]
 8006ffe:	3001      	adds	r0, #1
 8007000:	4283      	cmp	r3, r0
 8007002:	d004      	beq.n	800700e <__swbuf_r+0x62>
 8007004:	89a3      	ldrh	r3, [r4, #12]
 8007006:	07db      	lsls	r3, r3, #31
 8007008:	d506      	bpl.n	8007018 <__swbuf_r+0x6c>
 800700a:	2e0a      	cmp	r6, #10
 800700c:	d104      	bne.n	8007018 <__swbuf_r+0x6c>
 800700e:	4621      	mov	r1, r4
 8007010:	4628      	mov	r0, r5
 8007012:	f000 f919 	bl	8007248 <_fflush_r>
 8007016:	b988      	cbnz	r0, 800703c <__swbuf_r+0x90>
 8007018:	4638      	mov	r0, r7
 800701a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800701c:	4b0a      	ldr	r3, [pc, #40]	; (8007048 <__swbuf_r+0x9c>)
 800701e:	429c      	cmp	r4, r3
 8007020:	d101      	bne.n	8007026 <__swbuf_r+0x7a>
 8007022:	68ac      	ldr	r4, [r5, #8]
 8007024:	e7cf      	b.n	8006fc6 <__swbuf_r+0x1a>
 8007026:	4b09      	ldr	r3, [pc, #36]	; (800704c <__swbuf_r+0xa0>)
 8007028:	429c      	cmp	r4, r3
 800702a:	bf08      	it	eq
 800702c:	68ec      	ldreq	r4, [r5, #12]
 800702e:	e7ca      	b.n	8006fc6 <__swbuf_r+0x1a>
 8007030:	4621      	mov	r1, r4
 8007032:	4628      	mov	r0, r5
 8007034:	f000 f80c 	bl	8007050 <__swsetup_r>
 8007038:	2800      	cmp	r0, #0
 800703a:	d0cb      	beq.n	8006fd4 <__swbuf_r+0x28>
 800703c:	f04f 37ff 	mov.w	r7, #4294967295
 8007040:	e7ea      	b.n	8007018 <__swbuf_r+0x6c>
 8007042:	bf00      	nop
 8007044:	08007ca4 	.word	0x08007ca4
 8007048:	08007cc4 	.word	0x08007cc4
 800704c:	08007c84 	.word	0x08007c84

08007050 <__swsetup_r>:
 8007050:	4b32      	ldr	r3, [pc, #200]	; (800711c <__swsetup_r+0xcc>)
 8007052:	b570      	push	{r4, r5, r6, lr}
 8007054:	681d      	ldr	r5, [r3, #0]
 8007056:	4606      	mov	r6, r0
 8007058:	460c      	mov	r4, r1
 800705a:	b125      	cbz	r5, 8007066 <__swsetup_r+0x16>
 800705c:	69ab      	ldr	r3, [r5, #24]
 800705e:	b913      	cbnz	r3, 8007066 <__swsetup_r+0x16>
 8007060:	4628      	mov	r0, r5
 8007062:	f000 f985 	bl	8007370 <__sinit>
 8007066:	4b2e      	ldr	r3, [pc, #184]	; (8007120 <__swsetup_r+0xd0>)
 8007068:	429c      	cmp	r4, r3
 800706a:	d10f      	bne.n	800708c <__swsetup_r+0x3c>
 800706c:	686c      	ldr	r4, [r5, #4]
 800706e:	89a3      	ldrh	r3, [r4, #12]
 8007070:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007074:	0719      	lsls	r1, r3, #28
 8007076:	d42c      	bmi.n	80070d2 <__swsetup_r+0x82>
 8007078:	06dd      	lsls	r5, r3, #27
 800707a:	d411      	bmi.n	80070a0 <__swsetup_r+0x50>
 800707c:	2309      	movs	r3, #9
 800707e:	6033      	str	r3, [r6, #0]
 8007080:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007084:	81a3      	strh	r3, [r4, #12]
 8007086:	f04f 30ff 	mov.w	r0, #4294967295
 800708a:	e03e      	b.n	800710a <__swsetup_r+0xba>
 800708c:	4b25      	ldr	r3, [pc, #148]	; (8007124 <__swsetup_r+0xd4>)
 800708e:	429c      	cmp	r4, r3
 8007090:	d101      	bne.n	8007096 <__swsetup_r+0x46>
 8007092:	68ac      	ldr	r4, [r5, #8]
 8007094:	e7eb      	b.n	800706e <__swsetup_r+0x1e>
 8007096:	4b24      	ldr	r3, [pc, #144]	; (8007128 <__swsetup_r+0xd8>)
 8007098:	429c      	cmp	r4, r3
 800709a:	bf08      	it	eq
 800709c:	68ec      	ldreq	r4, [r5, #12]
 800709e:	e7e6      	b.n	800706e <__swsetup_r+0x1e>
 80070a0:	0758      	lsls	r0, r3, #29
 80070a2:	d512      	bpl.n	80070ca <__swsetup_r+0x7a>
 80070a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80070a6:	b141      	cbz	r1, 80070ba <__swsetup_r+0x6a>
 80070a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80070ac:	4299      	cmp	r1, r3
 80070ae:	d002      	beq.n	80070b6 <__swsetup_r+0x66>
 80070b0:	4630      	mov	r0, r6
 80070b2:	f7ff fc3d 	bl	8006930 <_free_r>
 80070b6:	2300      	movs	r3, #0
 80070b8:	6363      	str	r3, [r4, #52]	; 0x34
 80070ba:	89a3      	ldrh	r3, [r4, #12]
 80070bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80070c0:	81a3      	strh	r3, [r4, #12]
 80070c2:	2300      	movs	r3, #0
 80070c4:	6063      	str	r3, [r4, #4]
 80070c6:	6923      	ldr	r3, [r4, #16]
 80070c8:	6023      	str	r3, [r4, #0]
 80070ca:	89a3      	ldrh	r3, [r4, #12]
 80070cc:	f043 0308 	orr.w	r3, r3, #8
 80070d0:	81a3      	strh	r3, [r4, #12]
 80070d2:	6923      	ldr	r3, [r4, #16]
 80070d4:	b94b      	cbnz	r3, 80070ea <__swsetup_r+0x9a>
 80070d6:	89a3      	ldrh	r3, [r4, #12]
 80070d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80070dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070e0:	d003      	beq.n	80070ea <__swsetup_r+0x9a>
 80070e2:	4621      	mov	r1, r4
 80070e4:	4630      	mov	r0, r6
 80070e6:	f000 fa07 	bl	80074f8 <__smakebuf_r>
 80070ea:	89a0      	ldrh	r0, [r4, #12]
 80070ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80070f0:	f010 0301 	ands.w	r3, r0, #1
 80070f4:	d00a      	beq.n	800710c <__swsetup_r+0xbc>
 80070f6:	2300      	movs	r3, #0
 80070f8:	60a3      	str	r3, [r4, #8]
 80070fa:	6963      	ldr	r3, [r4, #20]
 80070fc:	425b      	negs	r3, r3
 80070fe:	61a3      	str	r3, [r4, #24]
 8007100:	6923      	ldr	r3, [r4, #16]
 8007102:	b943      	cbnz	r3, 8007116 <__swsetup_r+0xc6>
 8007104:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007108:	d1ba      	bne.n	8007080 <__swsetup_r+0x30>
 800710a:	bd70      	pop	{r4, r5, r6, pc}
 800710c:	0781      	lsls	r1, r0, #30
 800710e:	bf58      	it	pl
 8007110:	6963      	ldrpl	r3, [r4, #20]
 8007112:	60a3      	str	r3, [r4, #8]
 8007114:	e7f4      	b.n	8007100 <__swsetup_r+0xb0>
 8007116:	2000      	movs	r0, #0
 8007118:	e7f7      	b.n	800710a <__swsetup_r+0xba>
 800711a:	bf00      	nop
 800711c:	200000b8 	.word	0x200000b8
 8007120:	08007ca4 	.word	0x08007ca4
 8007124:	08007cc4 	.word	0x08007cc4
 8007128:	08007c84 	.word	0x08007c84

0800712c <abort>:
 800712c:	b508      	push	{r3, lr}
 800712e:	2006      	movs	r0, #6
 8007130:	f000 fa4a 	bl	80075c8 <raise>
 8007134:	2001      	movs	r0, #1
 8007136:	f7fb fb7f 	bl	8002838 <_exit>
	...

0800713c <__sflush_r>:
 800713c:	898a      	ldrh	r2, [r1, #12]
 800713e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007142:	4605      	mov	r5, r0
 8007144:	0710      	lsls	r0, r2, #28
 8007146:	460c      	mov	r4, r1
 8007148:	d458      	bmi.n	80071fc <__sflush_r+0xc0>
 800714a:	684b      	ldr	r3, [r1, #4]
 800714c:	2b00      	cmp	r3, #0
 800714e:	dc05      	bgt.n	800715c <__sflush_r+0x20>
 8007150:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007152:	2b00      	cmp	r3, #0
 8007154:	dc02      	bgt.n	800715c <__sflush_r+0x20>
 8007156:	2000      	movs	r0, #0
 8007158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800715c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800715e:	2e00      	cmp	r6, #0
 8007160:	d0f9      	beq.n	8007156 <__sflush_r+0x1a>
 8007162:	2300      	movs	r3, #0
 8007164:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007168:	682f      	ldr	r7, [r5, #0]
 800716a:	602b      	str	r3, [r5, #0]
 800716c:	d032      	beq.n	80071d4 <__sflush_r+0x98>
 800716e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007170:	89a3      	ldrh	r3, [r4, #12]
 8007172:	075a      	lsls	r2, r3, #29
 8007174:	d505      	bpl.n	8007182 <__sflush_r+0x46>
 8007176:	6863      	ldr	r3, [r4, #4]
 8007178:	1ac0      	subs	r0, r0, r3
 800717a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800717c:	b10b      	cbz	r3, 8007182 <__sflush_r+0x46>
 800717e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007180:	1ac0      	subs	r0, r0, r3
 8007182:	2300      	movs	r3, #0
 8007184:	4602      	mov	r2, r0
 8007186:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007188:	6a21      	ldr	r1, [r4, #32]
 800718a:	4628      	mov	r0, r5
 800718c:	47b0      	blx	r6
 800718e:	1c43      	adds	r3, r0, #1
 8007190:	89a3      	ldrh	r3, [r4, #12]
 8007192:	d106      	bne.n	80071a2 <__sflush_r+0x66>
 8007194:	6829      	ldr	r1, [r5, #0]
 8007196:	291d      	cmp	r1, #29
 8007198:	d82c      	bhi.n	80071f4 <__sflush_r+0xb8>
 800719a:	4a2a      	ldr	r2, [pc, #168]	; (8007244 <__sflush_r+0x108>)
 800719c:	40ca      	lsrs	r2, r1
 800719e:	07d6      	lsls	r6, r2, #31
 80071a0:	d528      	bpl.n	80071f4 <__sflush_r+0xb8>
 80071a2:	2200      	movs	r2, #0
 80071a4:	6062      	str	r2, [r4, #4]
 80071a6:	04d9      	lsls	r1, r3, #19
 80071a8:	6922      	ldr	r2, [r4, #16]
 80071aa:	6022      	str	r2, [r4, #0]
 80071ac:	d504      	bpl.n	80071b8 <__sflush_r+0x7c>
 80071ae:	1c42      	adds	r2, r0, #1
 80071b0:	d101      	bne.n	80071b6 <__sflush_r+0x7a>
 80071b2:	682b      	ldr	r3, [r5, #0]
 80071b4:	b903      	cbnz	r3, 80071b8 <__sflush_r+0x7c>
 80071b6:	6560      	str	r0, [r4, #84]	; 0x54
 80071b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80071ba:	602f      	str	r7, [r5, #0]
 80071bc:	2900      	cmp	r1, #0
 80071be:	d0ca      	beq.n	8007156 <__sflush_r+0x1a>
 80071c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80071c4:	4299      	cmp	r1, r3
 80071c6:	d002      	beq.n	80071ce <__sflush_r+0x92>
 80071c8:	4628      	mov	r0, r5
 80071ca:	f7ff fbb1 	bl	8006930 <_free_r>
 80071ce:	2000      	movs	r0, #0
 80071d0:	6360      	str	r0, [r4, #52]	; 0x34
 80071d2:	e7c1      	b.n	8007158 <__sflush_r+0x1c>
 80071d4:	6a21      	ldr	r1, [r4, #32]
 80071d6:	2301      	movs	r3, #1
 80071d8:	4628      	mov	r0, r5
 80071da:	47b0      	blx	r6
 80071dc:	1c41      	adds	r1, r0, #1
 80071de:	d1c7      	bne.n	8007170 <__sflush_r+0x34>
 80071e0:	682b      	ldr	r3, [r5, #0]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d0c4      	beq.n	8007170 <__sflush_r+0x34>
 80071e6:	2b1d      	cmp	r3, #29
 80071e8:	d001      	beq.n	80071ee <__sflush_r+0xb2>
 80071ea:	2b16      	cmp	r3, #22
 80071ec:	d101      	bne.n	80071f2 <__sflush_r+0xb6>
 80071ee:	602f      	str	r7, [r5, #0]
 80071f0:	e7b1      	b.n	8007156 <__sflush_r+0x1a>
 80071f2:	89a3      	ldrh	r3, [r4, #12]
 80071f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071f8:	81a3      	strh	r3, [r4, #12]
 80071fa:	e7ad      	b.n	8007158 <__sflush_r+0x1c>
 80071fc:	690f      	ldr	r7, [r1, #16]
 80071fe:	2f00      	cmp	r7, #0
 8007200:	d0a9      	beq.n	8007156 <__sflush_r+0x1a>
 8007202:	0793      	lsls	r3, r2, #30
 8007204:	680e      	ldr	r6, [r1, #0]
 8007206:	bf08      	it	eq
 8007208:	694b      	ldreq	r3, [r1, #20]
 800720a:	600f      	str	r7, [r1, #0]
 800720c:	bf18      	it	ne
 800720e:	2300      	movne	r3, #0
 8007210:	eba6 0807 	sub.w	r8, r6, r7
 8007214:	608b      	str	r3, [r1, #8]
 8007216:	f1b8 0f00 	cmp.w	r8, #0
 800721a:	dd9c      	ble.n	8007156 <__sflush_r+0x1a>
 800721c:	6a21      	ldr	r1, [r4, #32]
 800721e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007220:	4643      	mov	r3, r8
 8007222:	463a      	mov	r2, r7
 8007224:	4628      	mov	r0, r5
 8007226:	47b0      	blx	r6
 8007228:	2800      	cmp	r0, #0
 800722a:	dc06      	bgt.n	800723a <__sflush_r+0xfe>
 800722c:	89a3      	ldrh	r3, [r4, #12]
 800722e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007232:	81a3      	strh	r3, [r4, #12]
 8007234:	f04f 30ff 	mov.w	r0, #4294967295
 8007238:	e78e      	b.n	8007158 <__sflush_r+0x1c>
 800723a:	4407      	add	r7, r0
 800723c:	eba8 0800 	sub.w	r8, r8, r0
 8007240:	e7e9      	b.n	8007216 <__sflush_r+0xda>
 8007242:	bf00      	nop
 8007244:	20400001 	.word	0x20400001

08007248 <_fflush_r>:
 8007248:	b538      	push	{r3, r4, r5, lr}
 800724a:	690b      	ldr	r3, [r1, #16]
 800724c:	4605      	mov	r5, r0
 800724e:	460c      	mov	r4, r1
 8007250:	b913      	cbnz	r3, 8007258 <_fflush_r+0x10>
 8007252:	2500      	movs	r5, #0
 8007254:	4628      	mov	r0, r5
 8007256:	bd38      	pop	{r3, r4, r5, pc}
 8007258:	b118      	cbz	r0, 8007262 <_fflush_r+0x1a>
 800725a:	6983      	ldr	r3, [r0, #24]
 800725c:	b90b      	cbnz	r3, 8007262 <_fflush_r+0x1a>
 800725e:	f000 f887 	bl	8007370 <__sinit>
 8007262:	4b14      	ldr	r3, [pc, #80]	; (80072b4 <_fflush_r+0x6c>)
 8007264:	429c      	cmp	r4, r3
 8007266:	d11b      	bne.n	80072a0 <_fflush_r+0x58>
 8007268:	686c      	ldr	r4, [r5, #4]
 800726a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d0ef      	beq.n	8007252 <_fflush_r+0xa>
 8007272:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007274:	07d0      	lsls	r0, r2, #31
 8007276:	d404      	bmi.n	8007282 <_fflush_r+0x3a>
 8007278:	0599      	lsls	r1, r3, #22
 800727a:	d402      	bmi.n	8007282 <_fflush_r+0x3a>
 800727c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800727e:	f000 f915 	bl	80074ac <__retarget_lock_acquire_recursive>
 8007282:	4628      	mov	r0, r5
 8007284:	4621      	mov	r1, r4
 8007286:	f7ff ff59 	bl	800713c <__sflush_r>
 800728a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800728c:	07da      	lsls	r2, r3, #31
 800728e:	4605      	mov	r5, r0
 8007290:	d4e0      	bmi.n	8007254 <_fflush_r+0xc>
 8007292:	89a3      	ldrh	r3, [r4, #12]
 8007294:	059b      	lsls	r3, r3, #22
 8007296:	d4dd      	bmi.n	8007254 <_fflush_r+0xc>
 8007298:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800729a:	f000 f908 	bl	80074ae <__retarget_lock_release_recursive>
 800729e:	e7d9      	b.n	8007254 <_fflush_r+0xc>
 80072a0:	4b05      	ldr	r3, [pc, #20]	; (80072b8 <_fflush_r+0x70>)
 80072a2:	429c      	cmp	r4, r3
 80072a4:	d101      	bne.n	80072aa <_fflush_r+0x62>
 80072a6:	68ac      	ldr	r4, [r5, #8]
 80072a8:	e7df      	b.n	800726a <_fflush_r+0x22>
 80072aa:	4b04      	ldr	r3, [pc, #16]	; (80072bc <_fflush_r+0x74>)
 80072ac:	429c      	cmp	r4, r3
 80072ae:	bf08      	it	eq
 80072b0:	68ec      	ldreq	r4, [r5, #12]
 80072b2:	e7da      	b.n	800726a <_fflush_r+0x22>
 80072b4:	08007ca4 	.word	0x08007ca4
 80072b8:	08007cc4 	.word	0x08007cc4
 80072bc:	08007c84 	.word	0x08007c84

080072c0 <std>:
 80072c0:	2300      	movs	r3, #0
 80072c2:	b510      	push	{r4, lr}
 80072c4:	4604      	mov	r4, r0
 80072c6:	e9c0 3300 	strd	r3, r3, [r0]
 80072ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80072ce:	6083      	str	r3, [r0, #8]
 80072d0:	8181      	strh	r1, [r0, #12]
 80072d2:	6643      	str	r3, [r0, #100]	; 0x64
 80072d4:	81c2      	strh	r2, [r0, #14]
 80072d6:	6183      	str	r3, [r0, #24]
 80072d8:	4619      	mov	r1, r3
 80072da:	2208      	movs	r2, #8
 80072dc:	305c      	adds	r0, #92	; 0x5c
 80072de:	f7fd fbc9 	bl	8004a74 <memset>
 80072e2:	4b05      	ldr	r3, [pc, #20]	; (80072f8 <std+0x38>)
 80072e4:	6263      	str	r3, [r4, #36]	; 0x24
 80072e6:	4b05      	ldr	r3, [pc, #20]	; (80072fc <std+0x3c>)
 80072e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80072ea:	4b05      	ldr	r3, [pc, #20]	; (8007300 <std+0x40>)
 80072ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80072ee:	4b05      	ldr	r3, [pc, #20]	; (8007304 <std+0x44>)
 80072f0:	6224      	str	r4, [r4, #32]
 80072f2:	6323      	str	r3, [r4, #48]	; 0x30
 80072f4:	bd10      	pop	{r4, pc}
 80072f6:	bf00      	nop
 80072f8:	08007601 	.word	0x08007601
 80072fc:	08007623 	.word	0x08007623
 8007300:	0800765b 	.word	0x0800765b
 8007304:	0800767f 	.word	0x0800767f

08007308 <_cleanup_r>:
 8007308:	4901      	ldr	r1, [pc, #4]	; (8007310 <_cleanup_r+0x8>)
 800730a:	f000 b8af 	b.w	800746c <_fwalk_reent>
 800730e:	bf00      	nop
 8007310:	08007249 	.word	0x08007249

08007314 <__sfmoreglue>:
 8007314:	b570      	push	{r4, r5, r6, lr}
 8007316:	1e4a      	subs	r2, r1, #1
 8007318:	2568      	movs	r5, #104	; 0x68
 800731a:	4355      	muls	r5, r2
 800731c:	460e      	mov	r6, r1
 800731e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007322:	f7ff fa2f 	bl	8006784 <_malloc_r>
 8007326:	4604      	mov	r4, r0
 8007328:	b140      	cbz	r0, 800733c <__sfmoreglue+0x28>
 800732a:	2100      	movs	r1, #0
 800732c:	e9c0 1600 	strd	r1, r6, [r0]
 8007330:	300c      	adds	r0, #12
 8007332:	60a0      	str	r0, [r4, #8]
 8007334:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007338:	f7fd fb9c 	bl	8004a74 <memset>
 800733c:	4620      	mov	r0, r4
 800733e:	bd70      	pop	{r4, r5, r6, pc}

08007340 <__sfp_lock_acquire>:
 8007340:	4801      	ldr	r0, [pc, #4]	; (8007348 <__sfp_lock_acquire+0x8>)
 8007342:	f000 b8b3 	b.w	80074ac <__retarget_lock_acquire_recursive>
 8007346:	bf00      	nop
 8007348:	2000050c 	.word	0x2000050c

0800734c <__sfp_lock_release>:
 800734c:	4801      	ldr	r0, [pc, #4]	; (8007354 <__sfp_lock_release+0x8>)
 800734e:	f000 b8ae 	b.w	80074ae <__retarget_lock_release_recursive>
 8007352:	bf00      	nop
 8007354:	2000050c 	.word	0x2000050c

08007358 <__sinit_lock_acquire>:
 8007358:	4801      	ldr	r0, [pc, #4]	; (8007360 <__sinit_lock_acquire+0x8>)
 800735a:	f000 b8a7 	b.w	80074ac <__retarget_lock_acquire_recursive>
 800735e:	bf00      	nop
 8007360:	20000507 	.word	0x20000507

08007364 <__sinit_lock_release>:
 8007364:	4801      	ldr	r0, [pc, #4]	; (800736c <__sinit_lock_release+0x8>)
 8007366:	f000 b8a2 	b.w	80074ae <__retarget_lock_release_recursive>
 800736a:	bf00      	nop
 800736c:	20000507 	.word	0x20000507

08007370 <__sinit>:
 8007370:	b510      	push	{r4, lr}
 8007372:	4604      	mov	r4, r0
 8007374:	f7ff fff0 	bl	8007358 <__sinit_lock_acquire>
 8007378:	69a3      	ldr	r3, [r4, #24]
 800737a:	b11b      	cbz	r3, 8007384 <__sinit+0x14>
 800737c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007380:	f7ff bff0 	b.w	8007364 <__sinit_lock_release>
 8007384:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007388:	6523      	str	r3, [r4, #80]	; 0x50
 800738a:	4b13      	ldr	r3, [pc, #76]	; (80073d8 <__sinit+0x68>)
 800738c:	4a13      	ldr	r2, [pc, #76]	; (80073dc <__sinit+0x6c>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	62a2      	str	r2, [r4, #40]	; 0x28
 8007392:	42a3      	cmp	r3, r4
 8007394:	bf04      	itt	eq
 8007396:	2301      	moveq	r3, #1
 8007398:	61a3      	streq	r3, [r4, #24]
 800739a:	4620      	mov	r0, r4
 800739c:	f000 f820 	bl	80073e0 <__sfp>
 80073a0:	6060      	str	r0, [r4, #4]
 80073a2:	4620      	mov	r0, r4
 80073a4:	f000 f81c 	bl	80073e0 <__sfp>
 80073a8:	60a0      	str	r0, [r4, #8]
 80073aa:	4620      	mov	r0, r4
 80073ac:	f000 f818 	bl	80073e0 <__sfp>
 80073b0:	2200      	movs	r2, #0
 80073b2:	60e0      	str	r0, [r4, #12]
 80073b4:	2104      	movs	r1, #4
 80073b6:	6860      	ldr	r0, [r4, #4]
 80073b8:	f7ff ff82 	bl	80072c0 <std>
 80073bc:	68a0      	ldr	r0, [r4, #8]
 80073be:	2201      	movs	r2, #1
 80073c0:	2109      	movs	r1, #9
 80073c2:	f7ff ff7d 	bl	80072c0 <std>
 80073c6:	68e0      	ldr	r0, [r4, #12]
 80073c8:	2202      	movs	r2, #2
 80073ca:	2112      	movs	r1, #18
 80073cc:	f7ff ff78 	bl	80072c0 <std>
 80073d0:	2301      	movs	r3, #1
 80073d2:	61a3      	str	r3, [r4, #24]
 80073d4:	e7d2      	b.n	800737c <__sinit+0xc>
 80073d6:	bf00      	nop
 80073d8:	080078b0 	.word	0x080078b0
 80073dc:	08007309 	.word	0x08007309

080073e0 <__sfp>:
 80073e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073e2:	4607      	mov	r7, r0
 80073e4:	f7ff ffac 	bl	8007340 <__sfp_lock_acquire>
 80073e8:	4b1e      	ldr	r3, [pc, #120]	; (8007464 <__sfp+0x84>)
 80073ea:	681e      	ldr	r6, [r3, #0]
 80073ec:	69b3      	ldr	r3, [r6, #24]
 80073ee:	b913      	cbnz	r3, 80073f6 <__sfp+0x16>
 80073f0:	4630      	mov	r0, r6
 80073f2:	f7ff ffbd 	bl	8007370 <__sinit>
 80073f6:	3648      	adds	r6, #72	; 0x48
 80073f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80073fc:	3b01      	subs	r3, #1
 80073fe:	d503      	bpl.n	8007408 <__sfp+0x28>
 8007400:	6833      	ldr	r3, [r6, #0]
 8007402:	b30b      	cbz	r3, 8007448 <__sfp+0x68>
 8007404:	6836      	ldr	r6, [r6, #0]
 8007406:	e7f7      	b.n	80073f8 <__sfp+0x18>
 8007408:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800740c:	b9d5      	cbnz	r5, 8007444 <__sfp+0x64>
 800740e:	4b16      	ldr	r3, [pc, #88]	; (8007468 <__sfp+0x88>)
 8007410:	60e3      	str	r3, [r4, #12]
 8007412:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007416:	6665      	str	r5, [r4, #100]	; 0x64
 8007418:	f000 f847 	bl	80074aa <__retarget_lock_init_recursive>
 800741c:	f7ff ff96 	bl	800734c <__sfp_lock_release>
 8007420:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007424:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007428:	6025      	str	r5, [r4, #0]
 800742a:	61a5      	str	r5, [r4, #24]
 800742c:	2208      	movs	r2, #8
 800742e:	4629      	mov	r1, r5
 8007430:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007434:	f7fd fb1e 	bl	8004a74 <memset>
 8007438:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800743c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007440:	4620      	mov	r0, r4
 8007442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007444:	3468      	adds	r4, #104	; 0x68
 8007446:	e7d9      	b.n	80073fc <__sfp+0x1c>
 8007448:	2104      	movs	r1, #4
 800744a:	4638      	mov	r0, r7
 800744c:	f7ff ff62 	bl	8007314 <__sfmoreglue>
 8007450:	4604      	mov	r4, r0
 8007452:	6030      	str	r0, [r6, #0]
 8007454:	2800      	cmp	r0, #0
 8007456:	d1d5      	bne.n	8007404 <__sfp+0x24>
 8007458:	f7ff ff78 	bl	800734c <__sfp_lock_release>
 800745c:	230c      	movs	r3, #12
 800745e:	603b      	str	r3, [r7, #0]
 8007460:	e7ee      	b.n	8007440 <__sfp+0x60>
 8007462:	bf00      	nop
 8007464:	080078b0 	.word	0x080078b0
 8007468:	ffff0001 	.word	0xffff0001

0800746c <_fwalk_reent>:
 800746c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007470:	4606      	mov	r6, r0
 8007472:	4688      	mov	r8, r1
 8007474:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007478:	2700      	movs	r7, #0
 800747a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800747e:	f1b9 0901 	subs.w	r9, r9, #1
 8007482:	d505      	bpl.n	8007490 <_fwalk_reent+0x24>
 8007484:	6824      	ldr	r4, [r4, #0]
 8007486:	2c00      	cmp	r4, #0
 8007488:	d1f7      	bne.n	800747a <_fwalk_reent+0xe>
 800748a:	4638      	mov	r0, r7
 800748c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007490:	89ab      	ldrh	r3, [r5, #12]
 8007492:	2b01      	cmp	r3, #1
 8007494:	d907      	bls.n	80074a6 <_fwalk_reent+0x3a>
 8007496:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800749a:	3301      	adds	r3, #1
 800749c:	d003      	beq.n	80074a6 <_fwalk_reent+0x3a>
 800749e:	4629      	mov	r1, r5
 80074a0:	4630      	mov	r0, r6
 80074a2:	47c0      	blx	r8
 80074a4:	4307      	orrs	r7, r0
 80074a6:	3568      	adds	r5, #104	; 0x68
 80074a8:	e7e9      	b.n	800747e <_fwalk_reent+0x12>

080074aa <__retarget_lock_init_recursive>:
 80074aa:	4770      	bx	lr

080074ac <__retarget_lock_acquire_recursive>:
 80074ac:	4770      	bx	lr

080074ae <__retarget_lock_release_recursive>:
 80074ae:	4770      	bx	lr

080074b0 <__swhatbuf_r>:
 80074b0:	b570      	push	{r4, r5, r6, lr}
 80074b2:	460e      	mov	r6, r1
 80074b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074b8:	2900      	cmp	r1, #0
 80074ba:	b096      	sub	sp, #88	; 0x58
 80074bc:	4614      	mov	r4, r2
 80074be:	461d      	mov	r5, r3
 80074c0:	da07      	bge.n	80074d2 <__swhatbuf_r+0x22>
 80074c2:	2300      	movs	r3, #0
 80074c4:	602b      	str	r3, [r5, #0]
 80074c6:	89b3      	ldrh	r3, [r6, #12]
 80074c8:	061a      	lsls	r2, r3, #24
 80074ca:	d410      	bmi.n	80074ee <__swhatbuf_r+0x3e>
 80074cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80074d0:	e00e      	b.n	80074f0 <__swhatbuf_r+0x40>
 80074d2:	466a      	mov	r2, sp
 80074d4:	f000 f8fa 	bl	80076cc <_fstat_r>
 80074d8:	2800      	cmp	r0, #0
 80074da:	dbf2      	blt.n	80074c2 <__swhatbuf_r+0x12>
 80074dc:	9a01      	ldr	r2, [sp, #4]
 80074de:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80074e2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80074e6:	425a      	negs	r2, r3
 80074e8:	415a      	adcs	r2, r3
 80074ea:	602a      	str	r2, [r5, #0]
 80074ec:	e7ee      	b.n	80074cc <__swhatbuf_r+0x1c>
 80074ee:	2340      	movs	r3, #64	; 0x40
 80074f0:	2000      	movs	r0, #0
 80074f2:	6023      	str	r3, [r4, #0]
 80074f4:	b016      	add	sp, #88	; 0x58
 80074f6:	bd70      	pop	{r4, r5, r6, pc}

080074f8 <__smakebuf_r>:
 80074f8:	898b      	ldrh	r3, [r1, #12]
 80074fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80074fc:	079d      	lsls	r5, r3, #30
 80074fe:	4606      	mov	r6, r0
 8007500:	460c      	mov	r4, r1
 8007502:	d507      	bpl.n	8007514 <__smakebuf_r+0x1c>
 8007504:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007508:	6023      	str	r3, [r4, #0]
 800750a:	6123      	str	r3, [r4, #16]
 800750c:	2301      	movs	r3, #1
 800750e:	6163      	str	r3, [r4, #20]
 8007510:	b002      	add	sp, #8
 8007512:	bd70      	pop	{r4, r5, r6, pc}
 8007514:	ab01      	add	r3, sp, #4
 8007516:	466a      	mov	r2, sp
 8007518:	f7ff ffca 	bl	80074b0 <__swhatbuf_r>
 800751c:	9900      	ldr	r1, [sp, #0]
 800751e:	4605      	mov	r5, r0
 8007520:	4630      	mov	r0, r6
 8007522:	f7ff f92f 	bl	8006784 <_malloc_r>
 8007526:	b948      	cbnz	r0, 800753c <__smakebuf_r+0x44>
 8007528:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800752c:	059a      	lsls	r2, r3, #22
 800752e:	d4ef      	bmi.n	8007510 <__smakebuf_r+0x18>
 8007530:	f023 0303 	bic.w	r3, r3, #3
 8007534:	f043 0302 	orr.w	r3, r3, #2
 8007538:	81a3      	strh	r3, [r4, #12]
 800753a:	e7e3      	b.n	8007504 <__smakebuf_r+0xc>
 800753c:	4b0d      	ldr	r3, [pc, #52]	; (8007574 <__smakebuf_r+0x7c>)
 800753e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007540:	89a3      	ldrh	r3, [r4, #12]
 8007542:	6020      	str	r0, [r4, #0]
 8007544:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007548:	81a3      	strh	r3, [r4, #12]
 800754a:	9b00      	ldr	r3, [sp, #0]
 800754c:	6163      	str	r3, [r4, #20]
 800754e:	9b01      	ldr	r3, [sp, #4]
 8007550:	6120      	str	r0, [r4, #16]
 8007552:	b15b      	cbz	r3, 800756c <__smakebuf_r+0x74>
 8007554:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007558:	4630      	mov	r0, r6
 800755a:	f000 f8c9 	bl	80076f0 <_isatty_r>
 800755e:	b128      	cbz	r0, 800756c <__smakebuf_r+0x74>
 8007560:	89a3      	ldrh	r3, [r4, #12]
 8007562:	f023 0303 	bic.w	r3, r3, #3
 8007566:	f043 0301 	orr.w	r3, r3, #1
 800756a:	81a3      	strh	r3, [r4, #12]
 800756c:	89a0      	ldrh	r0, [r4, #12]
 800756e:	4305      	orrs	r5, r0
 8007570:	81a5      	strh	r5, [r4, #12]
 8007572:	e7cd      	b.n	8007510 <__smakebuf_r+0x18>
 8007574:	08007309 	.word	0x08007309

08007578 <_raise_r>:
 8007578:	291f      	cmp	r1, #31
 800757a:	b538      	push	{r3, r4, r5, lr}
 800757c:	4604      	mov	r4, r0
 800757e:	460d      	mov	r5, r1
 8007580:	d904      	bls.n	800758c <_raise_r+0x14>
 8007582:	2316      	movs	r3, #22
 8007584:	6003      	str	r3, [r0, #0]
 8007586:	f04f 30ff 	mov.w	r0, #4294967295
 800758a:	bd38      	pop	{r3, r4, r5, pc}
 800758c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800758e:	b112      	cbz	r2, 8007596 <_raise_r+0x1e>
 8007590:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007594:	b94b      	cbnz	r3, 80075aa <_raise_r+0x32>
 8007596:	4620      	mov	r0, r4
 8007598:	f000 f830 	bl	80075fc <_getpid_r>
 800759c:	462a      	mov	r2, r5
 800759e:	4601      	mov	r1, r0
 80075a0:	4620      	mov	r0, r4
 80075a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80075a6:	f000 b817 	b.w	80075d8 <_kill_r>
 80075aa:	2b01      	cmp	r3, #1
 80075ac:	d00a      	beq.n	80075c4 <_raise_r+0x4c>
 80075ae:	1c59      	adds	r1, r3, #1
 80075b0:	d103      	bne.n	80075ba <_raise_r+0x42>
 80075b2:	2316      	movs	r3, #22
 80075b4:	6003      	str	r3, [r0, #0]
 80075b6:	2001      	movs	r0, #1
 80075b8:	e7e7      	b.n	800758a <_raise_r+0x12>
 80075ba:	2400      	movs	r4, #0
 80075bc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80075c0:	4628      	mov	r0, r5
 80075c2:	4798      	blx	r3
 80075c4:	2000      	movs	r0, #0
 80075c6:	e7e0      	b.n	800758a <_raise_r+0x12>

080075c8 <raise>:
 80075c8:	4b02      	ldr	r3, [pc, #8]	; (80075d4 <raise+0xc>)
 80075ca:	4601      	mov	r1, r0
 80075cc:	6818      	ldr	r0, [r3, #0]
 80075ce:	f7ff bfd3 	b.w	8007578 <_raise_r>
 80075d2:	bf00      	nop
 80075d4:	200000b8 	.word	0x200000b8

080075d8 <_kill_r>:
 80075d8:	b538      	push	{r3, r4, r5, lr}
 80075da:	4d07      	ldr	r5, [pc, #28]	; (80075f8 <_kill_r+0x20>)
 80075dc:	2300      	movs	r3, #0
 80075de:	4604      	mov	r4, r0
 80075e0:	4608      	mov	r0, r1
 80075e2:	4611      	mov	r1, r2
 80075e4:	602b      	str	r3, [r5, #0]
 80075e6:	f7fb f917 	bl	8002818 <_kill>
 80075ea:	1c43      	adds	r3, r0, #1
 80075ec:	d102      	bne.n	80075f4 <_kill_r+0x1c>
 80075ee:	682b      	ldr	r3, [r5, #0]
 80075f0:	b103      	cbz	r3, 80075f4 <_kill_r+0x1c>
 80075f2:	6023      	str	r3, [r4, #0]
 80075f4:	bd38      	pop	{r3, r4, r5, pc}
 80075f6:	bf00      	nop
 80075f8:	20000500 	.word	0x20000500

080075fc <_getpid_r>:
 80075fc:	f7fb b904 	b.w	8002808 <_getpid>

08007600 <__sread>:
 8007600:	b510      	push	{r4, lr}
 8007602:	460c      	mov	r4, r1
 8007604:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007608:	f000 f894 	bl	8007734 <_read_r>
 800760c:	2800      	cmp	r0, #0
 800760e:	bfab      	itete	ge
 8007610:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007612:	89a3      	ldrhlt	r3, [r4, #12]
 8007614:	181b      	addge	r3, r3, r0
 8007616:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800761a:	bfac      	ite	ge
 800761c:	6563      	strge	r3, [r4, #84]	; 0x54
 800761e:	81a3      	strhlt	r3, [r4, #12]
 8007620:	bd10      	pop	{r4, pc}

08007622 <__swrite>:
 8007622:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007626:	461f      	mov	r7, r3
 8007628:	898b      	ldrh	r3, [r1, #12]
 800762a:	05db      	lsls	r3, r3, #23
 800762c:	4605      	mov	r5, r0
 800762e:	460c      	mov	r4, r1
 8007630:	4616      	mov	r6, r2
 8007632:	d505      	bpl.n	8007640 <__swrite+0x1e>
 8007634:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007638:	2302      	movs	r3, #2
 800763a:	2200      	movs	r2, #0
 800763c:	f000 f868 	bl	8007710 <_lseek_r>
 8007640:	89a3      	ldrh	r3, [r4, #12]
 8007642:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007646:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800764a:	81a3      	strh	r3, [r4, #12]
 800764c:	4632      	mov	r2, r6
 800764e:	463b      	mov	r3, r7
 8007650:	4628      	mov	r0, r5
 8007652:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007656:	f000 b817 	b.w	8007688 <_write_r>

0800765a <__sseek>:
 800765a:	b510      	push	{r4, lr}
 800765c:	460c      	mov	r4, r1
 800765e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007662:	f000 f855 	bl	8007710 <_lseek_r>
 8007666:	1c43      	adds	r3, r0, #1
 8007668:	89a3      	ldrh	r3, [r4, #12]
 800766a:	bf15      	itete	ne
 800766c:	6560      	strne	r0, [r4, #84]	; 0x54
 800766e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007672:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007676:	81a3      	strheq	r3, [r4, #12]
 8007678:	bf18      	it	ne
 800767a:	81a3      	strhne	r3, [r4, #12]
 800767c:	bd10      	pop	{r4, pc}

0800767e <__sclose>:
 800767e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007682:	f000 b813 	b.w	80076ac <_close_r>
	...

08007688 <_write_r>:
 8007688:	b538      	push	{r3, r4, r5, lr}
 800768a:	4d07      	ldr	r5, [pc, #28]	; (80076a8 <_write_r+0x20>)
 800768c:	4604      	mov	r4, r0
 800768e:	4608      	mov	r0, r1
 8007690:	4611      	mov	r1, r2
 8007692:	2200      	movs	r2, #0
 8007694:	602a      	str	r2, [r5, #0]
 8007696:	461a      	mov	r2, r3
 8007698:	f7fb f8f5 	bl	8002886 <_write>
 800769c:	1c43      	adds	r3, r0, #1
 800769e:	d102      	bne.n	80076a6 <_write_r+0x1e>
 80076a0:	682b      	ldr	r3, [r5, #0]
 80076a2:	b103      	cbz	r3, 80076a6 <_write_r+0x1e>
 80076a4:	6023      	str	r3, [r4, #0]
 80076a6:	bd38      	pop	{r3, r4, r5, pc}
 80076a8:	20000500 	.word	0x20000500

080076ac <_close_r>:
 80076ac:	b538      	push	{r3, r4, r5, lr}
 80076ae:	4d06      	ldr	r5, [pc, #24]	; (80076c8 <_close_r+0x1c>)
 80076b0:	2300      	movs	r3, #0
 80076b2:	4604      	mov	r4, r0
 80076b4:	4608      	mov	r0, r1
 80076b6:	602b      	str	r3, [r5, #0]
 80076b8:	f7fb f901 	bl	80028be <_close>
 80076bc:	1c43      	adds	r3, r0, #1
 80076be:	d102      	bne.n	80076c6 <_close_r+0x1a>
 80076c0:	682b      	ldr	r3, [r5, #0]
 80076c2:	b103      	cbz	r3, 80076c6 <_close_r+0x1a>
 80076c4:	6023      	str	r3, [r4, #0]
 80076c6:	bd38      	pop	{r3, r4, r5, pc}
 80076c8:	20000500 	.word	0x20000500

080076cc <_fstat_r>:
 80076cc:	b538      	push	{r3, r4, r5, lr}
 80076ce:	4d07      	ldr	r5, [pc, #28]	; (80076ec <_fstat_r+0x20>)
 80076d0:	2300      	movs	r3, #0
 80076d2:	4604      	mov	r4, r0
 80076d4:	4608      	mov	r0, r1
 80076d6:	4611      	mov	r1, r2
 80076d8:	602b      	str	r3, [r5, #0]
 80076da:	f7fb f8fc 	bl	80028d6 <_fstat>
 80076de:	1c43      	adds	r3, r0, #1
 80076e0:	d102      	bne.n	80076e8 <_fstat_r+0x1c>
 80076e2:	682b      	ldr	r3, [r5, #0]
 80076e4:	b103      	cbz	r3, 80076e8 <_fstat_r+0x1c>
 80076e6:	6023      	str	r3, [r4, #0]
 80076e8:	bd38      	pop	{r3, r4, r5, pc}
 80076ea:	bf00      	nop
 80076ec:	20000500 	.word	0x20000500

080076f0 <_isatty_r>:
 80076f0:	b538      	push	{r3, r4, r5, lr}
 80076f2:	4d06      	ldr	r5, [pc, #24]	; (800770c <_isatty_r+0x1c>)
 80076f4:	2300      	movs	r3, #0
 80076f6:	4604      	mov	r4, r0
 80076f8:	4608      	mov	r0, r1
 80076fa:	602b      	str	r3, [r5, #0]
 80076fc:	f7fb f8fb 	bl	80028f6 <_isatty>
 8007700:	1c43      	adds	r3, r0, #1
 8007702:	d102      	bne.n	800770a <_isatty_r+0x1a>
 8007704:	682b      	ldr	r3, [r5, #0]
 8007706:	b103      	cbz	r3, 800770a <_isatty_r+0x1a>
 8007708:	6023      	str	r3, [r4, #0]
 800770a:	bd38      	pop	{r3, r4, r5, pc}
 800770c:	20000500 	.word	0x20000500

08007710 <_lseek_r>:
 8007710:	b538      	push	{r3, r4, r5, lr}
 8007712:	4d07      	ldr	r5, [pc, #28]	; (8007730 <_lseek_r+0x20>)
 8007714:	4604      	mov	r4, r0
 8007716:	4608      	mov	r0, r1
 8007718:	4611      	mov	r1, r2
 800771a:	2200      	movs	r2, #0
 800771c:	602a      	str	r2, [r5, #0]
 800771e:	461a      	mov	r2, r3
 8007720:	f7fb f8f4 	bl	800290c <_lseek>
 8007724:	1c43      	adds	r3, r0, #1
 8007726:	d102      	bne.n	800772e <_lseek_r+0x1e>
 8007728:	682b      	ldr	r3, [r5, #0]
 800772a:	b103      	cbz	r3, 800772e <_lseek_r+0x1e>
 800772c:	6023      	str	r3, [r4, #0]
 800772e:	bd38      	pop	{r3, r4, r5, pc}
 8007730:	20000500 	.word	0x20000500

08007734 <_read_r>:
 8007734:	b538      	push	{r3, r4, r5, lr}
 8007736:	4d07      	ldr	r5, [pc, #28]	; (8007754 <_read_r+0x20>)
 8007738:	4604      	mov	r4, r0
 800773a:	4608      	mov	r0, r1
 800773c:	4611      	mov	r1, r2
 800773e:	2200      	movs	r2, #0
 8007740:	602a      	str	r2, [r5, #0]
 8007742:	461a      	mov	r2, r3
 8007744:	f7fb f882 	bl	800284c <_read>
 8007748:	1c43      	adds	r3, r0, #1
 800774a:	d102      	bne.n	8007752 <_read_r+0x1e>
 800774c:	682b      	ldr	r3, [r5, #0]
 800774e:	b103      	cbz	r3, 8007752 <_read_r+0x1e>
 8007750:	6023      	str	r3, [r4, #0]
 8007752:	bd38      	pop	{r3, r4, r5, pc}
 8007754:	20000500 	.word	0x20000500

08007758 <_init>:
 8007758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800775a:	bf00      	nop
 800775c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800775e:	bc08      	pop	{r3}
 8007760:	469e      	mov	lr, r3
 8007762:	4770      	bx	lr

08007764 <_fini>:
 8007764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007766:	bf00      	nop
 8007768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800776a:	bc08      	pop	{r3}
 800776c:	469e      	mov	lr, r3
 800776e:	4770      	bx	lr
